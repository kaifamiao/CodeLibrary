all-nodes-distance-k-in-binary-tree
给定一个二叉树（具有根结点<code>root</code>），一个目标结点<code>target</code>，和一个整数值 <code>K</code> 。

返回到目标结点 <code>target</code> 距离为 <code>K</code> 的所有结点的值的列表。 答案可以以任何顺序返回。



<ol>
</ol>

<strong>示例 1：</strong>

<pre><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2

<strong>输出：</strong>[7,4,1]

<strong>解释：</strong>
所求结点为与目标结点（值为 5）距离为 2 的结点，
值分别为 7，4，以及 1

<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png" style="height: 240px; width: 280px;">

注意，输入的 &quot;root&quot; 和 &quot;target&quot; 实际上是树上的结点。
上面的输入仅仅是对这些对象进行了序列化描述。
</pre>



<strong>提示：</strong>

<ol>
	给定的树是非空的，且最多有<code>K</code>个结点。
	树上的每个结点都具有唯一的值<code>0 &lt;= node.val &lt;= 500</code>。
	目标结点<code>target</code>是树上的结点。
	<code>0 &lt;= K &lt;= 1000</code>.
</ol>

二叉树中所有距离为 K 的结点
We are given a binary tree (with root node<code>root</code>), a <code>target</code> node, and an integer value <code>K</code>.

Return a list of the values of allnodes that have a distance <code>K</code> from the <code>target</code> node. The answer can be returned in any order.



<ol>
</ol>

<div>
<strong>Example 1:</strong>

<pre>
<strong>Input: </strong>root = <span id="example-input-1-1">[3,5,1,6,2,0,8,null,null,7,4]</span>, target = <span id="example-input-1-2">5</span>, K = <span id="example-input-1-3">2</span>

<strong>Output: </strong><span id="example-output-1">[7,4,1]</span>

<strong>Explanation: </strong>
The nodes that are a distance 2 from the target node (with value 5)
have values 7, 4, and 1.

<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png" style="width: 280px; height: 240px;" />

Note that the inputs &quot;root&quot; and &quot;target&quot; are actually TreeNodes.
The descriptions of the inputs above are just serializations of these objects.
</pre>



<strong>Note:</strong>

<ol>
	The given tree is non-empty.
	Each node in the tree has unique values<code>0 &lt;= node.val &lt;= 500</code>.
	The <code>target</code>node is a node in the tree.
	<code>0 &lt;= K &lt;= 1000</code>.
</ol>
</div>
