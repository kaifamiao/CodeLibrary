### 解题思路
本题主要是一个数学问题的转化，当最开始看到这个题目时，首先进行了数字的拼凑。
第1步，肯定是1，第2步的步长也肯定是1，第3步的步长可能是1或者2，第4步的步长可能是1、3、4，也就是说后面的每一步的步长取决于前面长度总和以及上一步步长。
转化为数学思想可以看成如下操作：
整个总长度由如下组成：
1、走了a个1的步长
2、走了b个a的步长
3、走了c个(b+1)a的步长
4、走了d个(c+1)(b+1)a
、、、、、
n、总长度为x...(c+1)(b+1)a

可以看出其最后就是一个整数的分解，当然为啥最短就是整数的分解，这个语言解释一下，本体相当于知道n个数的乘积一定，求约数的和，可以看出当约束都为质数时，和最小。

上面的分解仅仅只是看出来本题与整数的分解有关系，并且看出来的问题时a+b+c+d+...+x的和才是粘贴的次数，最开始做题，我也一定以为只是计算粘贴的值，后面从提交结果发现刚好是分解出来所有质数的和，这里可以讲解一下。

一、假设总长度是n，也就是说n不能分解，只能通过一步一步粘贴。文本框有1个元素，当n>1且n为质数时，首先需要复制1次，然后进行n-1次粘贴，那么此时总操作次数就为n
二、假设总长度n，可以用p*q得到且pq为质数，那么先得到p，可以由一得到需要p次操作，然后需要进行1次复制，得到步长为p，在进行q-1次粘贴，那么总的操作次数为p+q
三、一与二的讲解主要是方便理解n的约数有大于2个，将n写成最上面的总长度为x...(c+1)(b+1)a的形式，a和x的得到可以参考一、二，其中b+1、c+1的这种中间操作可以发现它进行了b与c次粘贴，而这个1刚好可以代表一次复制，也就是说本题的总的操作数实际就是分解出来的所有的约数的总和。

代码对于123做了特殊处理，后面的for就是分解了。

### 代码

```golang


func minSteps(n int) int {
    if n == 1{
        return 0
    }
    if n<4{
        return n
    }
    time:=0
    result:=0
    i:=2

    for {
        if n%i==0{
            result=result+i
            n=n/i
            time++
        }else{
            if i>2{
                i=i+2
            }else{
                i=3
            }
        }
        if i*i>n{
            result=result+n
            time++
            break
        }
        if n==1{
            break
        }
    }

    return result
    
}

```