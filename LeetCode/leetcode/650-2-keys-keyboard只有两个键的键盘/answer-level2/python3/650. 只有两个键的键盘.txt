思路：
1. 对于最终的字符串肯定是通过若干次复制与粘贴得到的，先寻找一些特殊的例子，如果是偶数最后一组操作为复制该数的一半的字符然后再粘贴所用的步骤比较少；对于质数我们发现它们只能一个一个粘贴上去。
2. 通过上面的分析，质数个字符只能一个一个的粘贴上去，所以操作的次数就是该质数次。
3. 对于合数的情况写出前几个情况通过观察发现：合数的最小操作次数等于可以分解成的质数的最小次数加和。
4. 比如f(4) = f(2)+f(2);f(6)=f(2)+f(3),发现这个规律就和简单了。对于质数直接返回本身即可，对于合数就计算出它是由那几个质数乘积得来的，然后这几个质数加和就是结果。
5. 动态规划在这里面的应用就是存下来每一个小于给定要求要求数的最小操作数。如果找到该数的几个因子直接就可以得到结果。比如f(30) = f(2)+f(15);计算30这个最小操作数是，找到了2这个因子，可以直接返回结果为f(2)+f(15),因为f(15)在之前已经计算过了。
6. 时间复杂度O(NlogN),空间复杂度O(N)

```
class Solution:
    def minSteps(self, n: int) -> int:
        f = [0]*(n+1)
        f[1] = 0
        import math
        for i in range(2,n+1):
            #这道题转换成求解分解质因数的题
            flag = 0
            for j in range(2,int(math.sqrt(i))+1):
                if(i % j == 0):
                    flag = 1
                    f[i] = f[j]+f[int(i/j)]
                    break
            if(flag == 0):
                f[i] = i
        return f[-1]
```