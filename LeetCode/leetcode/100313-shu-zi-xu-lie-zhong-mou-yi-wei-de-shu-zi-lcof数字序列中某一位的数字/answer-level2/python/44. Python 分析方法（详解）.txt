### 解题思路
当给定位数n，输出对应数字我们需要知道位数n所在的数及在该数中的位置。
我们将数字序列分成一位数、二位数、三位数...这么做的好处是，可以一次剔除大量无用数字，并且当我们知道n所在的数是几位数后，我们就能通过计算得到数的值。程序具体流程如下：
（1）确定位数。如果不看开始的0，我们可以发现以下规律1位数占了9个，2位数占了90个，3位数占了900个以此类推，举个例子如果n = 1000，由于n > 1 + 9 \* 1 + 90 \* 2，可以得到n所在的数是个三位数。**注意不要忘记乘以位数，比如90个两位数一共占90 * 2位。**
（2）确定是第几个相同位数的数。听起来可能比较拗口，换句话说，假如已经确定是3位数，我们需要知道是第几个3位数，还是以确定为3位数为例，首先减去无用的位数，即1位数和2位数所占的数字，剩下的就是在3位数中的第n位。剩下的操作就很简单了，只需要用到除法和求模。**注意：需要考虑到整除和非整除两种情况。**
（3）求得第n位的值。

### 代码

```python
class Solution(object):
    def findNthDigit(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n < 10:
            return n
        temp = 0
        digit_num = 1
        # 先确定第n位数字属于的那个数是几位数
        while temp + 9 * 10 ** (digit_num - 1) * digit_num < n:
            temp += 9 * 10 ** (digit_num - 1) * digit_num
            digit_num += 1
        # 再确定这是第几个digit_num位数
        n -= temp
        x = n % digit_num
        y = n // digit_num + int(x != 0)
        # print(digit_num, y, x)
        num = 10 ** (digit_num - 1) + y - 1 # 所在数字
        if x == 0:
            return num % 10
        else:
            return num // (10 ** (digit_num - x)) % 10
```