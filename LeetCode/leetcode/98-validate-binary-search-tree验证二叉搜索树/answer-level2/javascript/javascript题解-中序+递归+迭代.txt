[98.验证二叉搜索树](https://leetcode-cn.com/problems/validate-binary-search-tree/submissions/)   

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)    

## 方法一 中序遍历

利用二叉搜索树的特性，保证中序遍历二叉搜索树，得到的是一个升序序列即可。

**时间复杂度**：`最坏O(n)`   

**空间复杂度**：用到了stack，所以是`O(n)`

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function(root) {
    if (root === null) return true;
    let node = root,
        stack = [];
    let pre = -Infinity;
    while (stack.length > 0 || node !== null) {
        if (node) {
            stack.push(node);
            node = node.left;
        } else {
            node = stack.pop();
            if (pre >= node.val) return false;
            pre = node.val;
            node = node.right;
        }
    }
    return true;
};
```

## 方法二 递归   

递归要保证每一个节点的左子树的所有值不能大于当前值，右子树的所有值不能大于当前值。   

因此要设置一个上边界和下边界。 

**时间复杂度**：`O(n)`   

**空间复杂度**：`O(n)`

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function(root) {
    return help(root, null, null)
};

function help(node, low, high) {
    if (node === null) return true;
    let val = node.val;
    
    // 不能小于下边界
    if (low !== null && val <= low) return false;
    // 不能大于上边界
    if (high !== null && val >= high) return false;
    
    // 左子树的上边界是当前节点值
    if (!help(node.left, low, val)) return false;
    // 右子树的下边界是当前节点值
    if (!help(node.right, val, high)) return false;
    return true
}
```


## 方法三 递归转成迭代  

**时间复杂度**：`O(n)`   

**空间复杂度**：`O(n)`

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function(root) {
    let stack = [], // 存储所有的节点
        lowS = [], // 存储对应节点的下边界
        highS = []; // 存储对应节点的上边界
    
    function help(node, low, high) {
        stack.push(node);
        lowS.push(low);
        highS.push(high);
    }
    
    let low = null, high = null, val, node;
    help(root, low, high);
    
    while (stack.length > 0) {
        node = stack.pop();
        low = lowS.pop();
        high = highS.pop();
        
        if (node === null) continue;
        val = node.val;
        if (low !== null && val <= low) return false;
        if (high !== null && val >= high) return false;
        help(node.left, low, val);
        help(node.right, val, high);
    }
    return true;
};
```