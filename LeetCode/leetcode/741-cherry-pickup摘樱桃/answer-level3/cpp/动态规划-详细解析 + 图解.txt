### 解题思路
按照题意，一个人来回走两趟，必定在地图上留下**两条**路径。
我们可以想象有**两个人**，$A$ 和 $B$，**同时** 从点 $(0,0)$ 出发。
每一次移动，两个人**同时**移动一步（向右或向下）。
容易证明，每次移动后，两个人必定在**同一条对角线**上。
如果某次移动后，两个人在**同一位置**，则最多只能摘得**一个**樱桃。
最终，两个人都会移动到点 $(N-1,N-1)$ 上，留下两条路径。这两条路径所摘得樱桃数，即为题目所求。

先上图，思路在后面解释：
![image.png](https://pic.leetcode-cn.com/db24f6fe8657ef2368c45ef0a7d1631a800a19632169def99329e62595c48ad3-image.png)

首先可以得到一个比较简单的动态规划思路。
- 设 $dp[i_1][j_1][i_2][j_2]$ 为 $A$, $B$ 分别从点 $(i_1, j_1)$ 和 $(i_2, j_2)$ 出发，到点 $(N-1,N-1)$ 可以摘到的最多桃子数。
- 假如某次移动到了第 $k$ 条对角线，则在第 $k + 1$ 条对角线及其之后的樱桃数量都不会受到影响（不会被之前的移动摘取），从而不会影响第 $k + 1$ 条对角线之后的最优解的值，故子问题与之前的选择没有相关性，可以用动态规划求解。
- 每次移动，每个人都可以选择向右或向下，这样，$dp[i_1][j_1][i_2][j_2]$ 为下列选项的最大值：
- $dp[i_1 + 1][j_1][i_2 + 1][j_1]$
- $dp[i_1 + 1][j_1][i_2][j_2 + 1]$
- $dp[i_1][j_1 + 1][i_2 + 1][j_2]$
- $dp[i_1][j_1 + 1][i_2][j_2 + 1]$

上面是一个 4 维动态规划。但是，由于每次移动都会到达**同一条对角线**，每次移动后的 $i1$, $j1$, $i2$, $j2$ 都有以下隐含条件：
- $i_1 + j_1 = i_2 + j_2 = k$
- $=> j_1 = k - i_1, j_2 = k - i_2$

因此，如果知道了 $i_1$, $i_2$ 和 $k$, 即可推得 $j_1$, $j_2$。只需要记录 3 个状态即可。
简化后的状态可用 $dp[i_1][i_2][k]$ 来表示，$dp[i_1][i_2][k]$ 为下面选项的最大值：
- $dp[i_1+1][i_2][k+1]$
- $dp[i_1][i_2+1][k+1]$
- $dp[i_1+1][i_2+1][k+1]$
- $dp[i_1][i_2][k+1]$

**优化 1:** 由于 $dp[...][...][k]$ 只会由 $dp[...][...][k+1]$ 推得, 故可进一步简化。一种方法是采用滚动数组的方式。
而另一种更省空间的方式是直接省去 $k$ 这个状态。注意到 $dp[x][y][k]$ 只会由 $dp[x+m][y+n][k+1]$ 推得, 只要在推的过程中按照 **递增顺序** 求解，其所用到的值就是正确的。

**优化 2:** 可以假设在 $A$, $B$ 移动的过程中, (在同一对角线上) **$A$ 始终在 $B$ 的左下方** (或在同一位置)。这样求解不会影响最终的结果。这样每次 $i_2$ 只需要从 $i_1$ 开始, 减少了约一半的时间。

**优化 3: 边界条件的处理** 可以在整个地图的边界上，再加一圈“虚拟边”，放上非常小的数。如果跑出了地图的边界，会得到一个非常小的数，自动过滤边界条件。另外，如果遇到了障碍物点，也用 INT_MIN 填充。
在代码实现中，dp数组所有的初始值都放入一个非常小的数(除了 $dp[N-1][N-1]$)。

### 代码
20~24 ms
```cpp
class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int N = grid.size(), dp[N+1][N+1];
        memset(dp, 0x80, sizeof(dp)); //-2139062144, 作用相当于 INT_MIN
        dp[N-1][N-1] = grid[N-1][N-1]; // 初始边界条件
        for(int sum = 2*N - 3; sum >= 0; --sum)
        for(int i1 = max(0, sum - N + 1); i1 <= min(N-1,sum); ++i1)
        for(int i2 = i1; i2 <= min(N-1,sum); ++i2)
        {
            int j1 = sum - i1, j2 = sum - i2;
            if(grid[i1][j1] == -1 || grid[i2][j2] == -1) 
                dp[i1][i2] = INT_MIN;
            else
                dp[i1][i2] = grid[i1][j1] + (i1 != i2 || j1 != j2)*grid[i2][j2] + max(
                    max(dp[i1][i2+1], dp[i1+1][i2]), 
                    max(dp[i1+1][i2+1], dp[i1][i2])
                );
        }
        return max(0, dp[0][0]);     
    }
};
```