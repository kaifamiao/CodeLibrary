
使用一个有序的map结构：key为worker到bike的距离；value为{工人序号,自行车序号}的vector，
遍历计算所有工人到所有自行车的距离，若有相同距离自然按照序号从小到大放到vector里，
最后遍历这个有序的map，得到答案。
其中使用了2个bool数组标记已使用过的工人和自行车。
```
    vector<int> assignBikes(vector<vector<int>>& workers, vector<vector<int>>& bikes) {
        vector<int> ans(workers.size());
        map<int, vector<pair<int, int>>> distMap;
        vector<bool> wUsed(workers.size(), false);
        vector<bool> bUsed(bikes.size(), false);

        for (int wIdx = 0; wIdx < workers.size(); ++wIdx) {
            for (int bIdx = 0; bIdx < bikes.size(); ++bIdx) {
                int d = abs(workers[wIdx][0] - bikes[bIdx][0]) + abs(workers[wIdx][1] - bikes[bIdx][1]);
                distMap[d].push_back({wIdx, bIdx});
            }
        }

        for (auto it = distMap.begin(); it != distMap.end(); ++it) {
            for (auto p : it->second) {
                int worker = p.first;
                int bike = p.second;
                if (wUsed[worker] || bUsed[bike])
                    continue;
                ans[worker] = bike;
                wUsed[worker] = true;
                bUsed[bike] = true;
            }
        }

        return ans;
    }
```
![image.png](https://pic.leetcode-cn.com/5b59f36ad3d5b23d2f9cea1a535722889d10a115ba24b7bf0f70841b5c3370ec-image.png)
