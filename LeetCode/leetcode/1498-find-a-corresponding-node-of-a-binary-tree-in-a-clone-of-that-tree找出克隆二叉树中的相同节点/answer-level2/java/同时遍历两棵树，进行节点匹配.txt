### 解题思路
original树和cloned树的结构，以及所有节点对应的值都是一模一样。基本可以理解成两个"相同"的树（但是内存地址不同，本质上并不一样）。

要在original树中来寻找target，自然想到的就是遍历original树。那么正常的前中后序遍历，应该选择哪一个呢？

**前序遍历**。

因为只要original和target相同，则表示对应的cloned就是我们想要的节点。这个遍历过程，**和左右子树并没有关系**。所以我们选择前序遍历。

递归和非递归的写法见代码。

当然，层次遍历同样能解决问题。同时对两棵树进行层次遍历即可。只是要多加一个辅助队列，用来存储cloned树节点了

### 前序遍历递归代码

```java
class Solution {
    public final TreeNode getTargetCopy(final TreeNode original, final TreeNode cloned, final TreeNode target) {
        if (original == null){
            return null;
        }
        if (original == target){
            return cloned;
        }
        // 递归左子树
        TreeNode res = getTargetCopy(original.left,cloned.left,target);
        if (res != null){
            return res;
        }
        // 递归右子树
        res = getTargetCopy(original.right,cloned.right,target);
        if (res != null){
            return res;
        }
        return null;
    }
}
```

### 前序遍历非递归代码

```java
class Solution {
    public final TreeNode getTargetCopy(final TreeNode original, final TreeNode cloned, final TreeNode target) {
        Deque<TreeNode> stack = new LinkedList<>();
        Deque<TreeNode> clonedStack = new LinkedList<>();
        TreeNode node = original;
        TreeNode cloneTarget = cloned;
        while (node != null || !stack.isEmpty()){
            if (node != null){
                if (node == target){
                    return cloneTarget;// 找到目标，返回
                }
                // 节点不空，走左子树
                stack.push(node);
                node = node.left;
                clonedStack.push(cloneTarget);
                cloneTarget = cloneTarget.left;
            }else {
                // 节点空了，进入右子树
                node = stack.pop();
                node = node.right;
                cloneTarget = clonedStack.pop();
                cloneTarget = cloneTarget.right;
            }
        }
        return null;
    }
}
```

### 层次遍历代码

```java
class Solution {
    public final TreeNode getTargetCopy(final TreeNode original, final TreeNode cloned, final TreeNode target) {
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<TreeNode> clonedQueue = new LinkedList<>();
        queue.offer(original);
        clonedQueue.offer(cloned);
        TreeNode node1;
        TreeNode node2;
        while (!queue.isEmpty()){
            node1 = queue.poll();
            node2 = clonedQueue.poll();
            if (target == node1){
                return node2;
            }
            if (node1.left != null){
                queue.offer(node1.left);
                clonedQueue.offer(node2.left);
            }
            if (node1.right != null){
                queue.offer(node1.right);
                clonedQueue.offer(node2.right);
            }
        }
        return null;
    }
}
```