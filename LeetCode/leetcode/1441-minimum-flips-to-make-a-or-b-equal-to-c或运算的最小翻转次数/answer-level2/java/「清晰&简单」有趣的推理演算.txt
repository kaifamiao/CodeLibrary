#### 解题思路：

对于每一位，翻转两次后效果**抵消**，因此至多只需要翻转**一次**。

依次考虑数字二进制下的每一位，即**每次**取出**第一位**（`num & 1`），并将数字**向右**移动**一位**（`num >>= 1`）。

当 `(a & 1) | (b & 1) != (c & 1)` 时，`a` 和 `b` 该位上的数字 `av` 和 `bv` 需要进行翻转，存在下面两种情况：

- `(c & 1) == 1`，`av | bv == 0`。因此 `av` 等于 0 且 `bv` 也等于 0，此时只需要翻转 `av` 或 `bv` 即可（两数字其中一个为 1 就能或运算为 1）。
- `(c & 1) == 0`，`av | bv == 1`。因此 `av` 或 `bv` 中可能有一个是 1 或者两个都是 1，此时需要将等于 1 的所有数字翻转。（两个数字都要为 0 才能或运算为 0）

#### 代码：

```Java []
class Solution {
    public int minFlips(int a, int b, int c) {
        int ans = 0;
        while (c != 0 || a != 0 || b != 0) {
            // 二进制的第一位数字
            int cv = c & 1, av = a & 1, bv = b & 1;
            c >>= 1;
            a >>= 1;
            b >>= 1;
            // 不需要进行翻转
            if ((av | bv) == cv) {
                continue;
            }
            // 需要进行翻转
            if (cv == 1) {
                ans += 1;
            } else {
                if (av == 1) {
                    ans += 1;
                }
                if (bv == 1) {
                    ans += 1;
                }
            }
        }
        return ans;
    }
}
```

#### 复杂度分析：

- 时间复杂度：$O(N)$，其中 N 为 a，b，c 的最大二进制位数。

&nbsp;

---

如果该题解对你有帮助，点个赞再走呗~