recover-binary-search-tree
二叉搜索树中的两个节点被错误地交换。

请在不改变其结构的情况下，恢复这棵树。

<strong>示例1:</strong>

<pre><strong>输入:</strong> [1,3,null,null,2]

  1
 /
3
 \
  2

<strong>输出:</strong> [3,1,null,null,2]

  3
 /
1
 \
  2
</pre>

<strong>示例2:</strong>

<pre><strong>输入:</strong> [3,1,4,null,null,2]

  3
 / \
1   4
  /
 2

<strong>输出:</strong> [2,1,4,null,null,3]

  2
 / \
1   4
  /
 3</pre>

<strong>进阶:</strong>

<ul>
	使用 O(<em>n</em>) 空间复杂度的解法很容易实现。
	你能想出一个只使用常数空间的解决方案吗？
</ul>

恢复二叉搜索树
Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> [1,3,null,null,2]

  1
 /
3
 \
  2

<strong>Output:</strong> [3,1,null,null,2]

  3
 /
1
 \
  2
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> [3,1,4,null,null,2]

  3
 / \
1   4
  /
 2

<strong>Output:</strong> [2,1,4,null,null,3]

  2
 / \
1   4
  /
 3
</pre>

<strong>Follow up:</strong>

<ul>
	A solution using O(<em>n</em>) space is pretty straight forward.
	Could you devise a constant space solution?
</ul>
