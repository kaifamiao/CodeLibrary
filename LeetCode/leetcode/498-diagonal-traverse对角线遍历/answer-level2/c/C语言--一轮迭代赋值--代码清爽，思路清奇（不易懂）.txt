结果：
![Snipaste_2020-03-20_17-22-33.png](https://pic.leetcode-cn.com/975331ada9c5f7b529fe6ffbc4f4146de1d6029690e7775a7fad74794e7cd315-Snipaste_2020-03-20_17-22-33.png)


### 解题思路
- **数学思想：找规律**
    当看到二维的矩阵，转一维结果，心中就有一种感觉“这道题有数学上的规律可寻”。尤其是这种拆散了原顺序定义新顺序的东西，很有可能就隐藏一种特定的规律可以用来解题。结果也如上所示，虽然时间上没有最好，但也算不错了。

- 规律所在：研究**新顺序**的每次坐标**移动**规律 —— **`i++; j--;` **或** `i--; j++`**
1. 在纸上跑一遍，把矩阵的每个元素换成像“00”、“01”...的[i][j]坐标表示，然后写一个表，记录每次的i、j、结果数组ans的变化：(以3×3为例)
        
![Snipaste_2020-03-20_17-59-52.png](https://pic.leetcode-cn.com/20a99dd0366a9c6e2556b8999d930264f4f55cdcd4595d6addbd33e75724e6af-Snipaste_2020-03-20_17-59-52.png)

2. 不难发现，它走的每一条斜线是有规律的，**先不考虑转折**，那么仅有以下两条子规律：
    - **左下->右上**：每次“行减一，列加一” => **`i--; j++`**
    - **右上->左下**：每次“行加一，列减一” => **`i++; j--`**

3. 光有行和列的变化规律肯定不够，还要有条件判断
    - 两个小循环：i（j）递减则判断i（j）是否归零了，i（j）归零结束此循环
    - 外循环：判断结果数组的元素个数是否达到原矩阵的元素个数
    *“一轮迭代”是指这个过程中按`num++`从头到尾赋值的做法，复杂度可以说是O(M×N)（行×列）*

4. 接下来才是**真正的难点：如何找到转折点，实现规律的衔接？**
    - 前面的结果明显离完整还差一大截，因为转折部分的规律和自增、自减好像没什么关系？比如**“00”->“01”，只有`j++`；而像“10”->“20”，只有“i++”**
    - 为什么？废话，**因为i或j只要到0了，就说明可以转折，不能再自减了**呀
    - 好，姑且上面这句没有遗漏，所以在小循环结束后我都先i或j自增、自减后，**补充一句“`i++`”或“`j++`”，其实就相当于抵掉我到0的时候还继续自减，导致i或j变成-1的情况**，那么我就实现了这部分的转折
    - 问题又来了，这种转折衔接的思路，似乎只能适合前半部分，i或j中有0的情况。那后面的，比如**“21”->“22”，又怎么解释**？
    - 所以现在可以明确：**转折部分的规律，在于找到上下边界，一旦触及边界，进行转折！**
        1. 下边界判断：遇0，转折，-1回0 （小循环之外）
        2. 上边界判断：“`j == (*matrixColSize) - 1`” 或 “i == matrixSize - 1”， 及时跳出，止损，砍掉自增和自减 （小循环之内）

5. 要点细节补充：两个小循环间，需加入“if (num == (*returnSize)) break;”
    - 请自行思考：为什么要加入这一句？（答案评论区见）

### 代码··

```c
int* findDiagonalOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){
    if (matrixSize == 0) {
        *returnSize = 0;
        return 0;
    }
    int i = 0, j = 0;
    *returnSize = matrixSize * (*matrixColSize);
    int* ans = (int*)malloc(sizeof(int) * (*returnSize));
    int num = 0;
    while (num < (*returnSize)) {
        while (i >= 0) {   //先“左下”-->“右上”
            ans[num++] = matrix[i][j];
            if (j == (*matrixColSize) - 1) break;
            i--; j++;
        }
        if (num == (*returnSize)) break;
        i++;
        while (j >= 0) {   //再“右上”-->“左下”
            ans[num++] = matrix[i][j];
            if (i == matrixSize - 1) break;
            i++; j--;
        }
        j++;
    }
    return ans;
}
```