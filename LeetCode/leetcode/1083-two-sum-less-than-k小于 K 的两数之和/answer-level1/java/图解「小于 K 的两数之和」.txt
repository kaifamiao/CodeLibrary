### 解题思路：

传统的 TwoSum 都是要你找到等于 `target` 的配对，那么如果说要找到大于/小于 `target` 的配对呢？

这个时候 Hash 表的方法就很难 work 了，因为 Hash 表比较适合处理 **等于** 的情况！

那么就需要考虑如何使用排序加双指针的方法来解决这个问题，这里，**题目是要求小于 target 的数量**，我们还是按照之前的分析思路来分析。

如果说当前左右指针指向的元素的和大于或者等于 `target`，那么势必我们需要向左移动右指针，让两个元素的和尽可能地小，当前头尾指针指向的元素和小于 `target` 的时候，这时我们需要记录答案，虽然这道题目里面没提，如果说要记录配对数量的话，这时并不是记录一个答案，如果说当前左指针固定，除了当前的右指针指向的元素，在左指针和右指针之间的数都是满足要求的，我们只需要加上这个区间的数量即可，当然如果数组中存在重复元素，那么我们就需要按照之前的套路遍历去重了，当然对于这道题来说，我们选择满足条件的最大值即可。

### 画解：

![1099.m4v](0a66f4ac-9c98-46f7-a7b4-4c5b5320b90a)


### 代码：

```Java [-java]
public int twoSumLessThanK(int[] A, int K) {
    if (A == null || A.length == 0) {
        return -1;
    }
    
    Arrays.sort(A);
    
    int l = 0, r = A.length - 1;
    int result = Integer.MIN_VALUE;
    
    while (l < r) {
        if (A[l] + A[r] >= K) {
            r--;
        } else {
            result = Math.max(result, A[l] + A[r]);
            l++;
        }
    }
    
    return result == Integer.MIN_VALUE ? -1 : result;
}
```



