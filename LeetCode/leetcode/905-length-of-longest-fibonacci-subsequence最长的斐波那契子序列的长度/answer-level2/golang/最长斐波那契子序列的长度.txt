### 解题思路
第一眼看到这个题觉得贼像最长上升子序列，毕竟都是子序列
所以直接使用DP实现。
1、定义状态dp[i]为到第i个元素时（包含i,以i结尾）的最长斐波那契子序列的长度
2、状态转移方程：dp[i]=max{dp[j]}+1,其中：0<=j<i,dp[i]=dp[j]+dp[k],要求k必须小于j,凭空多出来一个K
就很不爽了，毕竟现在状态方程只有一维，现在增加了一维，所以原始的状态转移方程就无法实现
基于以上的原因，所以扩展维数，
1、重新定义状态dp[i][j]:代表以A[i]和A[j]构成的最长斐波那契子序列的长度，其中A[j]表示当前的序列末端
2、状态转移方程：dp[j][k]=max{dp[i][j]}+1:表示：当新一个元素加入时，以A[k]结尾，用A[j],A[k]所构成的最长
斐波那契子序列的长度就等于以A[i],A[j]构成的子序列的长度加一，
3、条件：i<j<k,且A[k]=A[i]+A[j],所以A[i]=A[K]-A[j],只需要判断A[i]在0 ~ j-1这个序列中就可以了

### 代码

```golang
//DP实现(解析清除思路就好做)
func lenLongestFibSubseq(A []int) int {
    if A==nil || len(A)==0{
        return 0
    }
    //在后面会进行查询操作，所以为了节省时间，就将
    //A中的值映射到map中，保存相应的序号
    index:=make(map[int]int,len(A))
    
    for i:=0;i<len(A);i++{
        index[A[i]]=i//记录A中每个元素的下标，方便查找
    }
    
    //定义状态
    //dp[i][j]:表示以A[i]和A[j]为
    //构成的最长斐波那契子序列的长度
    dp:=make([][]int,len(A))
    for i:=0;i<len(A);i++{
        dp[i]=make([]int,len(A))
    }
    //初始化状态
    //因为斐波那契子序列最短都是3，所以初始值设为2，表示不可能
    //j从i+1开始是因为j为末端元素，必须比i大
    for i:=0;i<len(A);i++{
        for j:=i+1;j<len(A);j++{
            dp[i][j]=2
        }
    }
    //结果
    max:=0
    for k:=0;k<len(A);k++{
        for j:=0;j<k;j++{
            //对于斐波那契数列来讲，A[k]-A[j]代表第一个数
            //找到这个数的索引，以j和k结尾的dp肯定是以i和j结尾的dp+1
            i,ok:=index[A[k]-A[j]]
            //如果A[i] < A[j],且在数列中存在，因为数列是严格单调递增的
            //只要满足上述条件，则i必然符合i<j<k这个条件
            if (A[i] < A[j]) && ok{
                dp[j][k]=dp[i][j]+1
                max=int(math.Max(float64(max),float64(dp[j][k])))
            }
        }
    }
    //输出
    if max >= 3{
        return max
    }else{
        return 0
    }   
}
```

#如果有更好的解释方式，还望不吝赐教
#代码参考官方题解
