### 解题思路
【先赞后看，养成习惯】
不知道看到我这篇题解的小朋友有没有那种感觉，看了大佬的代码不知道哪里用到了DP，大佬代码里面的**状态定义**是什么意思？
当时我也理解了蛮久的，最后希望大家看了我的题解或多或少有些帮助！
本题的结构是普通的动态规划的结构，状态定义 + 状态转移方程 ，这道题的难点在于**状态如何定义**
### 状态定义
`dp[i][j]`：表示以A[i],A[j]结尾的斐波那契数列的最大长度
$$
dp[i][j] = Len(......, A[i],A[j])
$$
### 状态转移
这里我们考虑在A[i]之前有某个数字A[k]，那么是不是应该满足如下式子
$$
A[k] + A[i] == A[j]
$$
那么我们就可以写出来状态转移方程
$$
dp[i][j] = \max \limits_{A[k] + A[i] == A[j]}(dp[k][i] + 1)  
$$
### 代码编写
根据`状态转移方程`我们很快就能写出来代码，但是`Time Limit Error`,这里我想了好久，最终在大佬的题解中才发现，这里我们在寻找`k`的时候，不需要再一次遍历（严格递增），所以为了提高效率，建立`intMap`是值到索引的映射。

`intMap`
$$
	value \xrightarrow{intMap} key
$$
`A`
$$
	key \xrightarrow{A} value
$$
因此我们可以理解`intMap`和`A`互为`逆`的关系，解决了这一点，我们也就解决了`Time Limit Error`
下面是`Time Limit Error`代码
```cpp
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++) {
			for (int k = i - 1; k >= 0; k--) {
				if (A[k] + A[i] == A[j]) {
					dp[i][j] = max(dp[i][j], dp[k][i] + 1);
				}
			}
			MAX = max(MAX, dp[i][j]);
		}
	}
```
### 我的题解
[LeetCode1262 可被三整除的最大和](https://leetcode-cn.com/problems/greatest-sum-divisible-by-three/solution/dong-tai-gui-hua-yu-zhuang-tai-zhuan-yi-by-christm/)
[LeetCode688 “马”在棋盘上的概率](https://leetcode-cn.com/problems/knight-probability-in-chessboard/solution/zhuang-tai-ji-de-zai-ci-ying-yong-by-christmas_wan/)
[LeetCode967 连续差相同的数字](https://leetcode-cn.com/problems/numbers-with-same-consecutive-differences/solution/cun-chu-kong-jian-ke-bian-de-dpshu-zu-by-christmas/)
### 代码

```cpp
class Solution {
public:
    int lenLongestFibSubseq(vector<int>& A) {
        int n = A.size();
	if (n == 0) { return 0; }
	unordered_map<int, int> intMap;
	for (int i = 0; i < n; i++) {
		intMap[A[i]] = i;
	}
	vector<vector<int>> dp(n, vector<int>(n, 0));
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++) {
			dp[i][j] = 2;
		}
	}
	int MAX = 0;

	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++) {
			int diff = A[j] - A[i];
			if (intMap.count(diff)) {
				int index = intMap[diff];
				if (index < i) {
					dp[i][j] = max(dp[i][j], dp[index][i] + 1);
				}
			}
			MAX = max(MAX, dp[i][j]);
		}
	}

	return MAX > 2? MAX : 0;
    }
};
```