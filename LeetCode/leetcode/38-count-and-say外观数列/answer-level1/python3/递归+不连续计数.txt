思路：
    首先举个例子理解题意，对于4来说: 观察3对应的输出为21，1个2和1个1，所以4对应的报数为1211
    这样，自然可以想到利用递归的方式来求解第n个数对应的输出，主要需要解决的问题在于具体计数部分：
    举例：也即给定：1112222112如何计数得 3个1,4个2,2个1,1个2
        1112222112-->31422112

    该计数一个while循环足以搞定： 
        必须用一个re变量维护当前计数时所在位置！！！(十分关键的一步）初始值为0
        循环比较i和i+1对应的值，直到不等
            开始计数：
                保存当前记录的值的个数（当前位置i+1减去前一计数位置re）和记录的具体值
            完成了一次计数
        需要注意的是在计数前要给原字符串添加一个尾巴！！这是为了不漏掉最后一次计数
     下面就是递归的处理了，终止条件,n==1

（如果不用递归的思路，还可以采用一步步至底向上递推，这样更节约时间，但递归显得简洁明了)

```
class Solution:
    def countAndSay(self, n: int) -> str:
        if n==1:
            return "1"
        return self.bs(self.countAndSay(n-1))
    
    def bs(self,string):
        lis=list(string)
        lis.append('0') #末尾补一个，方便后续计数
        lis1=[]
        re=0
        i=0
        while i<len(lis)-1:
            if lis[i]!=lis[i+1]:
                lis1.append(str(i+1-re)) #当前计录的值的个数
                lis1.append(lis[i]) #当前记录的值
                re=i+1         
            i=i+1
        s=''.join(lis1) #列表转字符串
        return s
```