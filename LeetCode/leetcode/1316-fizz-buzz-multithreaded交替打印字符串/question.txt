fizz-buzz-multithreaded
编写一个可以从 1 到 n 输出代表这个数字的字符串的程序，但是：

<ul>
	如果这个数字可以被 3 整除，输出 &quot;fizz&quot;。
	如果这个数字可以被 5 整除，输出&quot;buzz&quot;。
	如果这个数字可以同时被 3 和 5 整除，输出 &quot;fizzbuzz&quot;。
</ul>

例如，当<code>n = 15</code>，输出：<code>1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz</code>。

假设有这么一个类：

<pre>class FizzBuzz {
 public FizzBuzz(int n) { ... }              // constructor
  public void fizz(printFizz) { ... }          // only output &quot;fizz&quot;
  public void buzz(printBuzz) { ... }          // only output &quot;buzz&quot;
  public void fizzbuzz(printFizzBuzz) { ... }  // only output &quot;fizzbuzz&quot;
  public void number(printNumber) { ... }      // only output the numbers
}</pre>

请你实现一个有四个线程的多线程版<code>FizzBuzz</code>，同一个<code>FizzBuzz</code>实例会被如下四个线程使用：

<ol>
	线程A将调用<code>fizz()</code>来判断是否能被 3 整除，如果可以，则输出<code>fizz</code>。
	线程B将调用<code>buzz()</code>来判断是否能被 5 整除，如果可以，则输出<code>buzz</code>。
	线程C将调用<code>fizzbuzz()</code>来判断是否同时能被 3 和 5 整除，如果可以，则输出<code>fizzbuzz</code>。
	线程D将调用<code>number()</code>来实现输出既不能被 3 整除也不能被 5 整除的数字。
</ol>

交替打印字符串
Write a program that outputs the string representation of numbers from 1 to<i>n</i>, however:

<ul>
	If the number is divisible by 3, output &quot;fizz&quot;.
	If the number is divisible by 5, output&quot;buzz&quot;.
	If the number is divisible by both 3 and 5, output&quot;fizzbuzz&quot;.
</ul>

For example, for<code>n = 15</code>, we output:<code>1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz</code>.

Suppose you are given the following code:

<pre>
class FizzBuzz {
 public FizzBuzz(int n) { ... }              // constructor
  public void fizz(printFizz) { ... }          // only output &quot;fizz&quot;
  public void buzz(printBuzz) { ... }          // only output &quot;buzz&quot;
  public void fizzbuzz(printFizzBuzz) { ... }  // only output &quot;fizzbuzz&quot;
  public void number(printNumber) { ... }      // only output the numbers
}</pre>

Implement a multithreaded version of <code>FizzBuzz</code> with <strong>four</strong> threads. The same instance of <code>FizzBuzz</code> will be passed to four different threads:

<ol>
	Thread A will call<code>fizz()</code>to check for divisibility of 3 and outputs<code>fizz</code>.
	Thread B will call<code>buzz()</code>to check for divisibility of 5 and outputs<code>buzz</code>.
	Thread C will call <code>fizzbuzz()</code>to check for divisibility of 3 and 5 and outputs<code>fizzbuzz</code>.
	Thread D will call <code>number()</code> which should only output the numbers.
</ol>
