# 1. 理解
直接使用14-Ⅰ动态规划的方法，在对中间结果进行取余操作后，中间结果不再产生正确的最终结果。
解决的思路有两种：
1. 使用范围更大的类型保存中间解多或者合适的取余操作方法来纠正中间结果对最终结果的影响。
2. 使用贪心算法

贪心算法是非常高效的算法，但是贪心算法的编写有两个难点：
1. 保证局部最优解能推导出全局最优解
2. 找出局部最优解的规则

这道题的局部最优解的思路：
1. 因子越多，乘积越大，除2和3两个数
2. 因子3越多，乘积越大
3. 如果存在（3*1）则替换成（2*2）

# 2. 思路
1. n小于等于3时直接给出解
2. 其它情况按局部最优解迭代即可
# 3. 代码
```c++ []
class Solution {
public:
    int cuttingRope(int n) {
        return greed(n);
    }

    int greed(int n){
        long answer = 1;
        if(n <= 3) return n-1;
        while(n != 0){
            if(n > 4){
                answer *= 3;
                n -= 3;
            }else{
                answer *= n;
                n = 0;               
            }
            answer %= int(1e9+7);
        }
        return answer;    
    }
};
```
# 4. 总结
贪心算法确实是一个效率很高的算法，但它的难点有二：
1. 保证局部最优解能推导出全局最优解
2. 找出局部最优解的规则