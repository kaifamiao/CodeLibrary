### 解题思路 贪心算法
本题思路与14-1思路完全相同，不同的是本题需要考虑整数溢出问题。动态规划使用语言类型中的大整数处理，或者贪心算法手写求幂函数，返回结果取模数等都可以解决。手写求幂或者使用贪心算法直接计算的时间复杂度都是O(n)，而动态规划是O(n^2)。下面代码思路与14-1中贪心算法思路相同，只是将求幂函数与计算过程混合。当n小于4时，返回n-1；当n等于4时返回n；当n大于4时，n=3a+b,res=3^a*b的本质相同，要注意的是此时余数不能为0，所以余数变为2,3,4。当然while循环中n的判断条件也可是n>=3，与上一题余数保持相同为0,1,2，但最后计算结果时需要做一次判断。
### 代码

```cpp
int cuttingRope(int n) {
    // 小于3的数直接返回n-1
    if(n<=3){
        return n-1;
    }

    int res = 1;
    // 当n=4时，其拆分乘积最大为4
    // 保证余数大于0
    // 所以余数由0,1,2变为2,3,4
    while (n>4){
        // n = 3a+b
        // 所以不断剪3，到余数n=b
        n-=3;

        // res = 3^a*b
        // 此处res只乘n/3的整数部分
        res *= 3;
        res = res % 1000000007;
    }

    // 余数n=b
    // 当b=2 res=3^a*b
    // 当b=3 res=3^(a-1)*b
    // 当b=4 res=3^(a-1)*b
    res *= n;

    return  res % 1000000007;
}
```