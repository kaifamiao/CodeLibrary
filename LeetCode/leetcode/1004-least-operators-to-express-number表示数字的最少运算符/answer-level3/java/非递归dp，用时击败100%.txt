### 解题思路
多分析几个用例可以得到：
1、除了表示1之外没有地方会用到除法
2、因为乘法要比加减先计算，所以总是x的n次幂来求和，所以使用x进制表示是满足要求的表示，但运算符数目不一定是最小的
3、以x进制为基础，考虑把x进制中的每一位考虑是否取反来表示可以减少计算符 比如：x=10,target=99时，十位数表示为100-90比9个10要少，所以当单独考虑第i位为ni时，定义正向表示为9个10相加需要：ni*i, 再定义反向表示类似为100-10时需要 (x-ni)*i+i+1,对比二者大小可以得出这一位是否取反。
4、取反操作时低位会向高位进1，因此会影响上一位，比如x=10时， target=15891，考虑第三位，时上一位为5，当前位为8时，当前位判断应该取反表示为10-2，那么上一位变成了6,因此上一位也应该向前进1反向表示，那么考虑第i位是否取反表示时应该考虑当前取反需要的运算符数(x-ni)*i加上高位进1后增加的运算符数目。
5、考虑第i位时，需要先算出取反对高位的影响才能判断第i位是否取反，所以应该从高位开始计算。
6、基于数学归纳法可以粗略证明，从高位开始依次向下优化，可以得到最优解，如果从高位开始到第i位都是最小运算符数目的表示，那么对于i+1位时，计算反向表示和正向表示所需的运算符数目选择最小的那么就可以得到第i+1位的最小表示，而当i=1,2时很容易判断最小表示。

有了上面的结论，可以假设dp[i]表示x进制表示target的数nums的第i位nums[i]转为取反表示后所带来的优化,即第i位取反表示的运算符数目-正常表示的运算符数目，就有：
第i位正向表示需要的位数为 forward = nums[i] * i;
第i位反向表示需要的位数为 reverse = (x-nums[i])*i+Math.min(dp[i+1]-i-1,i+1); 
重点在后面的Math.min(dp[i+1]-i-1,i+1)，这里相当于再重新判断高位进1后取反的最小值和高位不取反进1的最小值。
如果forword比reverse小，那么第i位就采取正向表示，那么dp[i]=reverse-forward，当考虑下一位向上进1取反表示时，相当于计算nums[i]=nums[i]+1时的reverse，就等于reverse-i,如果进1后高位应该采取取反，那么就把高位取反的收益加到当前位取反时的收益再；
如果forword比reverse大，那么第i位就采取反向表示，那么dp[i]=0，表示已经取反，下一位不需要考虑高位取反表示的问题。

比如：x=10，nums=5611，令dp[4]=inf
开始时i=3：
正向表示 forward=5*3=15,
反向表示 reverse=(10-5)*3+MIN(dp[4]-4,3+1)=19,
此时取正向表示,dp[3]=19-15=4
当i=2:
正向表示 forward=6\*2=12,
反向表示 reverse=(10-6)*2+MIN(dp[3]-3,2+1)=9;
此时，所以reverse=9小于forward，此时第i位取反，而由于dp[3]-3=1,小于2+1,所以第i+1位也是取反表示的，后面再考虑时就不会再对第2位取反，所以此时dp[2]=0。
...

最后计算i=0时要注意表示1的时候每增加一个1需要加两个运算符。
最后由于计算dp[i]时只用到dp[i+1]，所以使用一个变量就好了。

### 代码

```java
    class Solution {
        public int leastOpsExpressTarget(int x, int target) {
            int[] nums = new int[32];
            int len = 0;
            for (; target > 0; len++) {
                nums[len]=target%x;
                target=target/x;
            }
            //表示更高一位为转换为反向表示时需要增加的运算符数目
            int lastReverse = Integer.MAX_VALUE;
            int ans = -1;
            for (int i = len-1; i >= 0 ; i--) {
                //个位时为加2
                int m = i==0?2:i;
                //正向表示（例如3*5*5*5表示为5*5*5+5*5*5）所需要的数目
                int forward = nums[i] * m;
                //反向表示（例如3*5*5*5表示为5*5*5*5-5*5*5-5*5*5-5*5*5）,反向表示需要考虑向高位进1
                int reverse = (x - nums[i])*m + Math.min(lastReverse - i - 1 , i + 1);
                //
                ans+=Math.min(forward,reverse);
                //如果当前取得就是反向表示，那么后面再考虑高一位转换成反向表示需要增加的运算为0
                lastReverse= forward>=reverse?0:reverse-forward;
            }
            return ans;
        }
    }
```