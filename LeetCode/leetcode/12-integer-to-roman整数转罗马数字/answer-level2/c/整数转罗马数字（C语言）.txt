# 解题思路
## 分析：
根据题目意思，假设给定数字是1994，根据题目要求，不超过3999，输出应该是"MCMXCIV"，首先我们要解决的事情是最高位是什么位，这里为千位，可是你是怎么知道的？这是我们要做的事情，等会再说，假设我们知道最高位是千位。例如1994=1000+900+90+4；我们把原有的数字进行分解，1000可以用M，900可以用CM，90可以用XC，4可以用IV，所以表示MCMXCIV，可是这个分解的步骤是怎么样进行的呢？我们是1994-1000 = 994；994-900 = 94；94 - 90 = 4；4-4 = 0；

## 步骤：
假设有个数num，不超过3999，第一步用num-1000  = dif，如果dif大于0，说明这个数是大于1000的，则把1000对应的罗马数字M保存到一个字符的二维数组中，dif的值给num,再尝试减1000，因为那个数可能是3333之类的数字，所以要一直num-1000，直到num<1000;减了多少次1000，则保存了多少次M，例如3000对应罗马MMM，如果dif<0呢，说明这个数是小于1000的，则应该减900，依次类推，直到num=0;

我们还需要解决一个事情，为什么我们减1000，减900，怎么不减800,700之类的数字，那么我们看看罗马数字的特点，你先看一遍上面题目的描述，再往下看。

罗马数字的基本型只有7个：I=1，V=5，X=10，L=50，C=100，D=500，M=1000，我们要用这7个基本型表示0-3999之内的十进制数字，相同的罗马数字最多不能超过三个，所以这就是为什么题目要求0-3999内数字，不能表示4000，3=1+1+1；对应罗马III = I+I+I；所以对于4只能表示为5-1即IV

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。，左减右加，这个特殊的规则只适用于以下六种情况：
1. I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
2. X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
3. C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。

其他的数字例如700，可以用基本的7种类型且出现三次相同表示出来，所以不需要减700,800之类的，get到这个点了吗？特殊的就是4和9,40与90，400与900，所以我们手动来表示他们，把之前的罗马数字基本类型7个和现在4和9等的6个放入一个数组里面，并从大到小排列，因为先减大的，对应的罗马数字放入另一个字符串数组里面（也是排好序，大的在前，小的在后）。这就解决了我们到底该减哪些数字的问题，且不需要关注num最高位是什么，只需要减数组中的数字。


### 代码

```c

char *intToRoman(int num){
	//罗马数字对应的十进制的数字基本型 
	int base[] = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };
	//对应罗马数字的基本型 
	char *str[] = { "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX",
		"V", "IV", "I" };
	char *roman = (char*)malloc(sizeof(char) * 20);//生成一个动态字符数组 20个够了
 	roman[0] = '\0';//把该字符数组变成字符串，不然出问题 
	int i = 0;		//数组遍历 
        //这里没有像分析中那样dif变量，而是用-=  复合赋值
	while (num != 0){ 	//循环一直减   减到为0为止 
		if (num >= base[i]){ //大于该基型的大小 则减之 ，直到下一个基型 
			num -= base[i];
			strcat(roman, str[i]);//把对应的罗马数字加入字符串中 
		}else
			i++;				//减不了  则移动到下一位 
	}
	return roman;				//返回字符串指针 
}
```