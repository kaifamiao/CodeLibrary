这个题是不是改测试用例了啊，估计是加了几个超大的测试用例，导致运行极慢。我把排名第一的代码粘过来试着提交了下，也是一千多毫秒。

附上python代码：

```
class Solution:
# # ##--------------------- 朴素方法，时间复杂度为O(n*m),会超时 -----------------------
# #     def sumEvenAfterQueries(self, A: List[int], queries: List[List[int]]) -> List[int]:
# #         temp = A
# #         res = []
# #         for value, key in queries:
# #             temp[key] += value
# #             nsum = 0
# #             for i in temp:
# #                 if i % 2 == 0:
# #                     nsum += i
# #             res.append(nsum)
# #         return res
    
# # ##--------------------- 先求出原始偶数和，然后依次修改,复杂度为O(n+m) ----------------
# #     def sumEvenAfterQueries(self, A: List[int], queries: List[List[int]]) -> List[int]:
# #         nsum = sum(i for i in A if i % 2 == 0)
# #         res = []
# #         for value, key in queries:   
# #             if A[key] & 1 == 0:     # 如果要修改的数原本是偶数，先从偶数和中减去（通过 & 1 判断会更快一些）
# #                 nsum -= A[key]
# #             A[key] += value
# #             if A[key] & 1 == 0:    # 如果修改完后为偶数，加到偶数和中
# #                 nsum += A[key]
# #             res.append(nsum)
# #         return res

##---------------------- 原理跟第二种方法类似，细节做了修改 -----------------------------
    def sumEvenAfterQueries(self, A: List[int], queries: List[List[int]]) -> List[int]:
        nsum = sum(i for i in A if i & 1 == 0)
        res = []
        
        for value, key in queries:
            if A[key] & 1 == 0:         # 原来为偶数
                if value & 1 == 0:      # 增加的值为偶数，和为偶数
                    nsum += value
                else:                   # 增加的值为奇数，和为奇数
                    nsum -= A[key]
            else:                       # 原来为奇数
                if value & 1:           # 增加的值为奇数，和为偶数
                    nsum += A[key] + value
            res.append(nsum)
            A[key] += value
        
        return res
```