## 02.05.链表求和

### Information

* TIME: 2020/03/05
* LINK: [Click Here](https://leetcode-cn.com/problems/sum-lists-lcci/)
* TAG: `List`

### Description

> 给定两个用链表表示的整数，每个节点包含一个数位。
>
> 这些数位是反向存放的，也就是个位排在链表首部。
>
> 编写函数对这两个整数求和，并用链表形式返回结果。

### Example

```text
输入：(7 -> 1 -> 6) + (5 -> 9 -> 2)，即617 + 295
输出：2 -> 1 -> 9，即912
```

### My Answer -扩展

> 加法部分，用两个栈做缓冲

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<ListNode> num1 = new Stack<>();
        Stack<ListNode> num2 = new Stack<>();
        ListNode pre = null;
        while(l1 != null){
            num1.push(l1);
            l1 = l1.next;
        }
        while(l2 != null){
            num2.push(l2);
            l2 = l2.next;
        }
        int carry = 0;
        while(!num1.isEmpty() || !num2.isEmpty()){
            int num = carry;
            if(!num1.isEmpty()) num += num1.pop().val;
            if(!num2.isEmpty()) num += num2.pop().val;
            if(num >= 10){
                carry = 1;
                num %= 10;
            }else{
                carry = 0;
            }
            ListNode node = new ListNode(num);
            node.next = pre;
            pre = node;
        }
        if(carry != 0){
            ListNode node = new ListNode(1);
            node.next = pre;
            pre = node;
        }
        return pre;
    }
}
```

### My Answer -题解

> 感觉写复杂了...emmm下次一定

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode resHead = new ListNode(-1);
        ListNode cur = resHead;
        int carry = 0;
        while(l1 != null && l2 != null){
            int num = l1.val + l2.val + carry;
            if(num >= 10){
                num %= 10;
                carry = 1;
            }else{
                carry = 0;
            }
            ListNode node = new ListNode(num);
            cur.next = node;
            cur = cur.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        while(l1 != null){
            int num = l1.val + carry;
            if(num >= 10){
                num %= 10;
                carry = 1;
            }else{
                carry = 0;
            }
            ListNode node = new ListNode(num);
            cur.next = node;
            cur = cur.next;
            l1 = l1.next;
        }
        while(l2 != null){
            int num = l2.val + carry;
            if(num >= 10){
                num %= 10;
                carry = 1;
            }else{
                carry = 0;
            }
            ListNode node = new ListNode(num);
            cur.next = node;
            cur = cur.next;
            l2 = l2.next;
        }
        if(carry == 1){
            ListNode node = new ListNode(1);
            cur.next = node;
            cur = cur.next;
        }
        return resHead.next;
    }
}
```



### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/9e83543a62b8a65832bc7d1744e7f785113c183659f3edbb60b64c700e7163ed-file_1583400316416)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

