一、动态规划
```javascript
var combinationSum2 = function (candidates, target) {
  var dp = []
  //先排序解决顺序问题 例 （1，2）（2，1）
  candidates.sort((a, b) => a - b)
  for (let i = 0; i <= target; i++) {
    dp[i] = new Set()
  }
  dp[0].add('')
  for (let c of candidates) {
    for (let i = target; i >= c; i--) {
      for (item of dp[i - c]) {
        //使用Set去重, 子项要转化成 String
        dp[i].add(item + ',' + c)
      }
    }
  }
  //最后把Set 转成 Array 
  return Array.from(dp[target]).map(item => item.slice(1).split(','))
};

```
二、回溯
```javascript
var combinationSum2 = function (candidates, target) {
  candidates.sort((a, b) => a - b)
  var result = [], n = candidates.length

  function backtrack(start, sum, list) {
    if (sum === target) {
      result.push(list)
    }
    for (let i = start; i < n; i++) {
      if (candidates[i] + sum > target) break;
      //相同数字只允许循环的第一个递归，避免重复
      if (candidates[i] === candidates[i - 1] && i > start) continue;
      backtrack(i + 1, sum + candidates[i], [...list, candidates[i]])
    }
  }

  backtrack(0, 0, [])

  return result
}
```