
首先最朴素的想法：枚举所有的子串，然后检查是否符合条件。不过这个时间效率是 O(n^3)，过于低下。那是哪里有浪费和冗余呢？

为了更好的说明问题，我们稍稍修改一下样例 1，在前面再加个 "a",即:`"aabcabc"`
![image.png](https://pic.leetcode-cn.com/b43a94c3aeff22427d4ab1befa88bed4b9d2afd35ec165e1435220abdfbe7c3e-image.png)
![image.png](https://pic.leetcode-cn.com/23ec84c789f03bd43768ad7747c04c7bc20f971584753f33208868637361ed0b-image.png)
我们依旧傻傻的进行枚举，首先是 `"a"`,不符合。再是 `"aa"`，不符合。再是 `"aab"` ,不符合。然后终于出现了满足的条件的子串，`"aabc"`。（上图）

继续枚举：`"aabca"`，符合。`”aabcab"`，符合。诶等等，真的还需要再枚举吗？？？**当第一次发现 "aabc" 这个符合条件的子串时，它右边所有拓展出来的串都是符合条件的。** `"aabc"` 的右边可以扩展出 4 个串(包括自己)，答案加4。


如果把我们枚举范围看成一个窗口，我们刚刚从`index=0`开始，向右扩展窗口找到了第一个符合条件的字符串`"aabc"`。很容易发现，`"aabc"`是符合条件的，左边去掉一个"a"之后的后缀字符串`"abc"`也是符合条件的。（下图）
![image.png](https://pic.leetcode-cn.com/858f46ab0a69f7966ffc1bf13cfed9277f336d66ed7a1c0ab0225a9bfe3ae153-image.png)
为了找到这些可能符合条件的后缀，**我们不断向右收缩窗口的左沿，直至不符合条件**。 `"aabc"`收缩成`"abc"`，符合，答案再加 4。`"abc"`收缩成`"bc"`，不符合，停止收缩。（上图）



此时，窗口左沿为 `index=2`，窗口右沿为 `index=3`，以 `index=3` 结尾的所有字符串我们已经找完了。**下一步，向右拓展窗口右沿，找到新的符合条件的字符串**`"bca"`,(当然如果不符合条件就继续拓展，直至符合条件)。符合条件后，又像刚才那样开始向右收缩窗口左沿。
![image.png](https://pic.leetcode-cn.com/dcd44b02318a34ebb7dfba15ae0d7808c83b2b6d3c37b6803d25cb963e67eca9-image.png)

重复以上步骤。

值得一提的是，为了判断当前窗口(或者说字符串)是不是符合条件的，肯定是需要对 abc 分别计数的。而每一个字符串都去遍历每个字符来计数的话也太慢了，**我们需要充分利用移动窗口前的计数信息，在之前的基础上相应的计数+1/-1。**
![image.png](https://pic.leetcode-cn.com/b8a7e800de39424ccf8ea7e67a937493544066a614d840f744f0cc7a84c9dc14-image.png)





附上双百代码

```java
class Solution {
    public int numberOfSubstrings(String s) {
        int answer=0;
        //abc 的计数
        int[] count=new int[3];
        //窗口左沿
        int start=0;
        //窗口右沿
        for(int end=0;end<s.length();end++){
            char charAtEnd=s.charAt(end);
            count[charAtEnd-'a']++;
            while(count[0]>=1 && count[1]>=1 && count[2]>=1){
                answer+=s.length()-end;
                char charAtStart=s.charAt(start);
                count[charAtStart-'a']--;
                start++;
            } 
        }
        return answer;
    }
}
```