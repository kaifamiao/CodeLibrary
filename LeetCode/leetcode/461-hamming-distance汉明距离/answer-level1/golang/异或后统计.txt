执行用时 :0 ms, 在所有 Go 提交中击败了100.00%的用户
内存消耗 :2 MB, 在所有 Go 提交中击败了84.31%的用户

```
func hammingDistance(x int, y int) int {
	m := x ^ y // 异或计算不同的位置
	count := 0
	for m > 0 { // 统计1的个数
		if m&1 > 0 {
			count++
		}
		m >>= 1
	}
	return count
}
```

## 使用位运算

异或 `m := x ^ y` 统计不一样的位，从 `m` 中统计1的数量；

1的二进制是 `0000...00000001`,就是最低位是1，其它都是0，所以和 `m` & 运算就可以判断 m 最后一位是否为1，右移直到0结束统计，即可得到结果。