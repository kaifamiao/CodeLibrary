palindrome-removal
给你一个整数数组<code>arr</code>，每一次操作你都可以选择并删除它的一个 <strong>回文</strong> 子数组<code>arr[i], arr[i+1], ..., arr[j]</code>（ <code>i &lt;= j</code>）。

注意，每当你删除掉一个子数组，右侧元素都会自行向前移动填补空位。

请你计算并返回从数组中删除所有数字所需的最少操作次数。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>arr = [1,2]
<strong>输出：</strong>2
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>arr = [1,3,4,1,5]
<strong>输出：</strong>3
<strong>解释：</strong>先删除 [4]，然后删除 [1,3,1]，最后再删除 [5]。
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= arr.length &lt;= 100</code>
	<code>1 &lt;= arr[i] &lt;= 20</code>
</ul>

删除回文子数组
Given an integer array<code>arr</code>, in one move you can select a <strong>palindromic</strong>subarray <code>arr[i], arr[i+1], ..., arr[j]</code>where <code>i &lt;= j</code>, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.

Return the minimum number of moves neededto remove all numbers from the array.


<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> arr = [1,2]
<strong>Output:</strong> 2
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> arr = [1,3,4,1,5]
<strong>Output:</strong> 3
<b>Explanation: </b>Remove [4] then remove [1,3,1] then remove [5].
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= arr.length &lt;= 100</code>
	<code>1 &lt;= arr[i] &lt;= 20</code>
</ul>
