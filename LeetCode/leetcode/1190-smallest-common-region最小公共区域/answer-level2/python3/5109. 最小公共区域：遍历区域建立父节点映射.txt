![image.png](https://pic.leetcode-cn.com/a6fc90c021c721f9ae7411f82f66e74fcba684cd4d9e453b63d7371695933bdb-image.png)


遍历区域节点建立父节点的映射字典`p`，然后把`rigion1`的所有祖先节点装进集合`q`，再遍历`rigion2`的祖先节点，如果其存在于`q`，则为最近公共祖先。

为了方便代码阅读，把`rigion`简写成了`r`。

时间复杂度和空间复杂度都是$O(N)$其中$N$为`regions`的子条目数量，244ms仅供参考。

```python []
class Solution:
    def findSmallestRegion(self, regions: List[List[str]], r1: str, r2: str) -> str:
        q, p = set(), {i: j for j, *r in regions for i in r}    #其中i为区域，j为对应的直接父节点，通过(j, *r)分离出数组的第一个元素和后续元素。
        while r1 in p:
            q.add(r1)
            r1 = p[r1]
        while r2 in p:
            if r2 in q:
                return r2
            r2 = p[r2]
        return r2
```
```python []
#第二次`while`循环之前令`q = {*p.keys()} - q`。
#方便控制节点存在于`p`不存在`q`时的`while`循环。
class Solution:
    def findSmallestRegion(self, regions: List[List[str]], r1: str, r2: str) -> str:
        q, p = set(), {i: j for j, *r in regions for i in r}    #其中i为区域，j为对应的直接父节点，通过(j, *r)分离出数组的第一个元素和后续元素。
        while r1 in p:
            q.add(r1)
            r1 = p[r1]
        q = {*p.keys()} - q
        while r2 in q:
            r2 = p[r2]
        return r2
```