**/**
 * 对比两个数之和： 将一个数字比较后， 使用hash map进行存放，另一个值使用指针进行遍历； 时间复杂度O(n) ，空间复杂度为O(n)
 * <p>
 * 三个数之和：
 * 1. 审题：
 * a. 关键字， 考虑去重元素。不可以包含重复的三元组
 * b. 三数之和，先考虑二数之和， 遍历一个数， 剩下的2个数字， 使用二数之和方式，时间复杂度为 O（n*n）,空间复杂度为o(n*n）。
 * c. 考虑其他方式。
 * 1. 对数据排序 O(nlogn)
 * 2. 对数据进行遍历。 剩下的2个数字， 使用双指针方式，头尾进行遍历。 同时需要注意边界和去重。 时间复杂度 O(n)*O(n) ,综上，时间复杂度为O(n^2)
 * d. 详细思路：
 * 1. 首先对数组进行排序，排序后固定一个数 nums[i]，再使用左右指针指向 nums[i]后面的两端，数字分别为 nums[L] 和 nums[R]，计算三个数的和 sum判断是否满足为 0，
 * 满足则添加进结果集
 * 不满足，则移动对应的L ,R 。 (顺着移动方向移动)
 * 2. 【边际考虑】如果 nums[i]大于 0，则三数之和必然无法等于 0，结束循环
 * 3. 【去重】如果 nums[i] == nums[i-1]，则说明该数字重复，会导致结果重复，所以应该跳过
 * 4. 【去重】当 sum == 0 时，nums[L]== nums[L+1] 则会导致结果重复，应该跳过，L++
 * 5. 【去重】当 sum == 0 时，nums[R] == nums[R-1] 则会导致结果重复，应该跳过，R--
 * 时间复杂度：O(n^2)，n 为数组长度
 * 2. Coding
 * 需要注意 num 是否为空， 或者nums.length 数组长度是否超过3
 * 数组排序：  Arrays.sort();
 * 添加到数组中：  Arrays.asList()
 * 【坑】 L,R 去重过程中， 要使用循环， 把多个重复值全部去掉。 例如： while
 */**