## 解题方案

### 思路

- 标签：数组遍历
- 首先对数组进行排序，排序后固定一个数 $nums[i]$，再使用左右指针指向 $nums[i]$后面的两端，数字分别为 $nums[L]$ 和 $nums[R]$，计算三个数的和 $sum$ 判断是否满足为 $0$，满足则添加进结果集
- 如果 $nums[i]$大于 $0$，则三数之和必然无法等于 $0$，结束循环
- 如果 $nums[i]$ == $nums[i-1]$，则说明该数字重复，会导致结果重复，所以应该跳过
- 当 $sum$ == $0$ 时，$nums[L]$ == $nums[L+1]$ 则会导致结果重复，应该跳过，$L++$
- 当 $sum$ == $0$ 时，$nums[R]$ == $nums[R-1]$ 则会导致结果重复，应该跳过，$R--$
- 时间复杂度：$O(n^2)$，$n$ 为数组长度

### 代码

```Java []
class Solution {
    public static List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList();
        int len = nums.length;
        if(nums == null || len < 3) return ans;
        Arrays.sort(nums); // 排序
        for (int i = 0; i < len ; i++) {
            if(nums[i] > 0) break; // 如果当前数字大于0，则三数之和一定大于0，所以结束循环
            if(i > 0 && nums[i] == nums[i-1]) continue; // 去重
            int L = i+1;
            int R = len-1;
            while(L < R){
                int sum = nums[i] + nums[L] + nums[R];
                if(sum == 0){
                    ans.add(Arrays.asList(nums[i],nums[L],nums[R]));
                    while (L<R && nums[L] == nums[L+1]) L++; // 去重
                    while (L<R && nums[R] == nums[R-1]) R--; // 去重
                    L++;
                    R--;
                }
                else if (sum < 0) L++;
                else if (sum > 0) R--;
            }
        }        
        return ans;
    }
}
```

```JavaScript []
/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var threeSum = function(nums) {
    let ans = [];
    const len = nums.length;
    if(nums == null || len < 3) return ans;
    nums.sort((a, b) => a - b); // 排序
    for (let i = 0; i < len ; i++) {
        if(nums[i] > 0) break; // 如果当前数字大于0，则三数之和一定大于0，所以结束循环
        if(i > 0 && nums[i] == nums[i-1]) continue; // 去重
        let L = i+1;
        let R = len-1;
        while(L < R){
            const sum = nums[i] + nums[L] + nums[R];
            if(sum == 0){
                ans.push([nums[i],nums[L],nums[R]]);
                while (L<R && nums[L] == nums[L+1]) L++; // 去重
                while (L<R && nums[R] == nums[R-1]) R--; // 去重
                L++;
                R--;
            }
            else if (sum < 0) L++;
            else if (sum > 0) R--;
        }
    }        
    return ans;
};
```


### 画解

<![0.png](https://pic.leetcode-cn.com/05bd0c05ada0193c35575e91a2dcb47496b2f970bcee0b60c5610bb3b0e1d5ee-0.png),![1.png](https://pic.leetcode-cn.com/00a09d9a4652c19ca3d1022b99a2395ae2f874bc4e41d19a4c61434566b156ec-2.png),![2.png](https://pic.leetcode-cn.com/6cc290d0d84e226dc9e0989bb8d506ff1ac3731752168a276228816b038d008d-1.png),![3.png](https://pic.leetcode-cn.com/af3cc7ba0b434076fe1a08077d58c3297abc8fb21d5de4a0ec1e1a73574a67e7-3.png),![4.png](https://pic.leetcode-cn.com/6ed61b434f0cb87a14de47c55c7ed122ed55a7399b5ac7f9ee637a0811689b20-4.png),![5.png](https://pic.leetcode-cn.com/31d53b728df42e909cdbd46d29181db7898ff0756a54a7e900bf73def370ad8c-5.png),![6.png](https://pic.leetcode-cn.com/75f5d3867221b37777e115797600f1b01e0f24c7d06b714d6db7abac3a8ef071-6.png),![7.png](https://pic.leetcode-cn.com/3ffbed921c2e6f41ff27873ff09af786727efbfecbd71291df2be92876262054-7.png),![8.png](https://pic.leetcode-cn.com/af94fc8c0012995e16818f4f589564f150c80034bf07fbf2a7c361d0434f6684-8.png),![9.png](https://pic.leetcode-cn.com/db14f47283817cfb30b483898c72e2db259f44a347677a8f0730e99fad77c6af-9.png),![10.png](https://pic.leetcode-cn.com/086b5f507d4f960b3dd6e0fc4556672bf2c35bdbb6d3ff681686afdeff4e9930-10.png),![11.png](https://pic.leetcode-cn.com/65f65b5ad7dd48b3d6c70f0c3cb484aeca81fa1e7b82c9b2ff85196ee7001972-11.png),![12.png](https://pic.leetcode-cn.com/afec79842ce681bea84ce1b0a2beeb19ea93e64d59e72207063e2a51462ff655-12.png)>


