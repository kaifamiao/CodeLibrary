思路比较简单,在遍历的过程中遇到{}包围起来的就挨个字符回溯,当然要去掉’,‘这个字符。
遇到其他字符就直接回溯。
代码如下:
```
class Solution {
    List<String> res;

    public String[] expand(String S) {
        if (S.indexOf("{") < 0) {
            String[] res = {S};
            return res;
        }
        res = new ArrayList<>();
        backTrace(S, new StringBuilder(), 0);
        Collections.sort(res);
        return res.toArray(new String[res.size()]);
    }

    private void backTrace(String s, StringBuilder sb, int index) {

        if (index == s.length()) {
            res.add(sb.toString());
            return;
        }
        //遇到’{‘字符
        if (s.charAt(index) == '{') {
            int count = 0;
            //先计算出{}中内容的长度count
            for (int j = index + 1; s.charAt(j) != '}'; j++) {
                count++;
            }
            //下次要跳转的位置就为index+count+2
            for (int j = index + 1; s.charAt(j) != '}'; j++) {
                char ch = s.charAt(j);
                if (ch != ','){
                    sb.append(ch);
                    backTrace(s, sb, index + count + 2);
                    sb.deleteCharAt(sb.length() - 1);
                }

            }
        } else {//遇到其他字符
            sb.append(s.charAt(index));
            backTrace(s, sb, index + 1);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
```
