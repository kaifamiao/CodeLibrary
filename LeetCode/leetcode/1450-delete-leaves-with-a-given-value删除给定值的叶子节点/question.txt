delete-leaves-with-a-given-value
给你一棵以<code>root</code>为根的二叉树和一个整数<code>target</code>，请你删除所有值为<code>target</code> 的<strong>叶子节点</strong> 。

注意，一旦删除值为<code>target</code>的叶子节点，它的父节点就可能变成叶子节点；如果新叶子节点的值恰好也是<code>target</code> ，那么这个节点也应该被删除。

也就是说，你需要重复此过程直到不能继续删除。



<strong>示例 1：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/16/sample_1_1684.png" style="height: 120px; width: 550px;"></strong>

<pre><strong>输入：</strong>root = [1,2,3,2,null,2,4], target = 2
<strong>输出：</strong>[1,null,3,null,4]
<strong>解释：
</strong>上面左边的图中，绿色节点为叶子节点，且它们的值与 target 相同（同为 2 ），它们会被删除，得到中间的图。
有一个新的节点变成了叶子节点且它的值与 target 相同，所以将再次进行删除，从而得到最右边的图。
</pre>

<strong>示例 2：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/16/sample_2_1684.png" style="height: 120px; width: 300px;"></strong>

<pre><strong>输入：</strong>root = [1,3,3,3,2], target = 3
<strong>输出：</strong>[1,3,null,null,2]
</pre>

<strong>示例 3：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/16/sample_3_1684.png" style="width: 450px;"></strong>

<pre><strong>输入：</strong>root = [1,2,null,2,null,2], target = 2
<strong>输出：</strong>[1]
<strong>解释：</strong>每一步都删除一个绿色的叶子节点（值为 2）。</pre>

<strong>示例 4：</strong>

<pre><strong>输入：</strong>root = [1,1,1], target = 1
<strong>输出：</strong>[]
</pre>

<strong>示例 5：</strong>

<pre><strong>输入：</strong>root = [1,2,3], target = 1
<strong>输出：</strong>[1,2,3]
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= target&lt;= 1000</code>
	每一棵树最多有 <code>3000</code> 个节点。
	每一个节点值的范围是<code>[1, 1000]</code>。
</ul>

删除给定值的叶子节点
Given a binary tree<code>root</code>and an integer<code>target</code>, delete all the<strong>leaf nodes</strong>with value <code>target</code>.

Notethat once you delete a leaf node with value <code>target</code><strong>,</strong>if it&#39;s parent node becomes a leaf node and has the value <code><font face="monospace">target</font></code>, it should also be deleted (you need to continue doing that until you can&#39;t).


<strong>Example 1:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2020/01/09/sample_1_1684.png" style="width: 550px; height: 120px;" /></strong>

<pre>
<strong>Input:</strong> root = [1,2,3,2,null,2,4], target = 2
<strong>Output:</strong> [1,null,3,null,4]
<strong>Explanation:</strong> Leaf nodes in green with value (target = 2) are removed (Picture in left). 
After removing, new nodes become leaf nodes with value (target = 2) (Picture in center).
</pre>

<strong>Example 2:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2020/01/09/sample_2_1684.png" style="width: 300px; height: 120px;" /></strong>

<pre>
<strong>Input:</strong> root = [1,3,3,3,2], target = 3
<strong>Output:</strong> [1,3,null,null,2]
</pre>

<strong>Example 3:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2020/01/15/sample_3_1684.png" style="width: 420px; height: 150px;" /></strong>

<pre>
<strong>Input:</strong> root = [1,2,null,2,null,2], target = 2
<strong>Output:</strong> [1]
<strong>Explanation:</strong> Leaf nodes in green with value (target = 2) are removed at each step.
</pre>

<strong>Example 4:</strong>

<pre>
<strong>Input:</strong> root = [1,1,1], target = 1
<strong>Output:</strong> []
</pre>

<strong>Example 5:</strong>

<pre>
<strong>Input:</strong> root = [1,2,3], target = 1
<strong>Output:</strong> [1,2,3]
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= target&lt;= 1000</code>
	Each tree has at most <code>3000</code> nodes.
	Each node&#39;s value is between <code>[1, 1000]</code>.
</ul>