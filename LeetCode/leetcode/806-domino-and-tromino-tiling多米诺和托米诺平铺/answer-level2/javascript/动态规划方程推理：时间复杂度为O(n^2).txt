首先需要理解
## 第一种情况   
直接生成对应长度的平铺，也就是说中间不存在子长度的平铺，即此平铺是一个不可分割的整体，我们姑且叫它`不可分割平铺`。   
例如：    

```
长度为3的"不可分割平铺"
XXY
XYY
```
以下为`可分割平铺`：  
```
能够分割为长度为2和长度为1的平铺
XXY
ZZY

能够分割为三个长度为1的平铺
XYZ
XYZ

能够分割为长度为1和长度为2的平铺
XYY
XZZ
```
因此我们将某一个长度为N的平铺，可以分割为一个长度为`i`的不可分割平铺与另外一部分长度为`N-i`的任意平铺，长度为`N`的平铺的方法总数即为：
```
f(N) = sum( z(i)*f(N-i) ) (i的范围为：1-N)
```
例如，长度为4的平铺：  
其具以下几种分割方式：  
1. 长度为1的`不可风割平铺`与长度为3的`普通平铺`
2. 长度为2的`不可风割平铺`与长度为2的`普通平铺`
3. 长度为3的`不可风割平铺`与长度为1的`普通平铺`
4. 长度为4的`不可风割平铺`与长度为0的`普通平铺`

第一种方案的总数为：`1*5=5`  
第二种方案的总数为：`1*2=2`  
第三种方案的总数为：`2*1=2`  
第四种方案的总数为：`2*1=2`  

总数为：`result = 11;`  
那么问题来了，长度为N的不可分割的平铺的总数有多少种呢？  
答案是：  
* 当N<=2时为1种  
  ```
  长度为1的“不可分割平铺”
  X
  X
  长度为2的“不可分割平铺”
  XX
  YY
  ```
* 当N>=3是为2种   
  ```math
  长度为3的不可分割平铺
  XXY
  XYY
  ----
  XYY
  XXY
  ```
当N一直增大时，其必须**有且仅包含一对**`L`型的多米诺，并且不能有竖直方向的`2*1`的多米诺。  
我们假如在`不可分割平铺`的中间(不是平铺的开始或结束)包含有其他的`L`型的多米诺，由于`L`的形状可知，`L`的前一个位置或者后一个位置必然将此平铺分割为两个独立的平铺，因此与`不可分割平铺矛盾`，同样道理，也不能具有竖直方向的`2*1`型多米诺。又因为第一个L可以取两种情况，朝上或朝下，因此：**当`N>=3`时有且只有`2`种方案将其构造为不可分割平铺**  
对应JavaScript代码为：  

```javascript
var numTilings = function(N) {
    let MOD = Math.pow(10,9) + 7;
    let dp = new Array(N+1).fill(0);
    dp[0] = 1;
    dp[1] = 1;
    dp[2] = 2;
    for(let i=3;i<=N;i++){
        for(let j=1;j<=i;j++){
            dp[i]=(dp[i] + dp[i-j]*z(j)) % MOD;
        }
    }
    return dp[N];
    
    function z(i){
        return i<=2?1:2;
    }
};
```