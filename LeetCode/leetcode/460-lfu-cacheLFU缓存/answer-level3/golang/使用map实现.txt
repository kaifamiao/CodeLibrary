### 解题思路
**算法实现的核心过程：**
1. 设置数据（引用计数设为1）
    1. key不存在
        - 未满，在队列末尾插入数据
        - 已满，淘汰末尾数据
    1. key存在，更新对应值（注意这边也要将其引用数设为1，我之前因为没有设为1，由一组数据过不去）
2. 获取数据
队列中数据被访问后，其引用计数先增加，之后将其移到比它大的后面，比它小或等于的前面

### 代码

```golang
type LFUCache struct {
	qm map[int][3]int	// key => val, 引用次数, 伪时间戳
	t int				// 伪时间戳
	cap int
}


func Constructor(capacity int) LFUCache {
	return LFUCache{
		qm:  make(map[int][3]int),
		t:   0,
		cap: capacity,
	}
}


func (this *LFUCache) Get(key int) int {
	if !this.exist(key) {
		return -1
	}
	this.t++
	this.qm[key] = [3]int{this.qm[key][0], this.qm[key][1]+1, this.t}
	return this.qm[key][0]
}


func (this *LFUCache) Put(key int, value int)  {
	exist := this.exist(key)
	// key不存在
	this.t++
	if !exist {
		if len(this.qm) != this.cap {
			this.qm[key] = [3]int{value, 1, this.t}
		} else {
			lastKey, i := 0, 0
			for k := range this.qm {
				if i == 0 {
					lastKey = k
					i++
					continue
				}
				if this.qm[lastKey][1] > this.qm[k][1] || (this.qm[lastKey][1] == this.qm[k][1] && this.qm[lastKey][2] > this.qm[k][2]) {
					lastKey = k
				}
			}
			this.qm[key] = [3]int{value, 1, this.t}
			delete(this.qm, lastKey)
		}
	}
	// key存在
	if exist {
		this.qm[key] = [3]int{value, this.qm[key][1]+1, this.t}
	}
}

func (this *LFUCache)exist(key int) bool {
	_, e := this.qm[key]
	return e
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * obj := Constructor(capacity);
 * param_1 := obj.Get(key);
 * obj.Put(key,value);
 */
```

[leetcode-golang](https://github.com/laijinhang/leetcode-golang)