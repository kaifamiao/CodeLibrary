### 解题思路
活用数据结构

### 代码

```cpp
struct Node{
    int key,val,frep;
    Node(int _key,int _val,int _frep):key(_key),val(_val),frep(_frep){}
};
class LFUCache {
public:
    int minFrep,capacity;
    unordered_map<int,list<Node>::iterator> keyTable;
    unordered_map<int,list<Node>> frepTable;
    LFUCache(int capacity) {
       minFrep = 0;
       this->capacity = capacity;
       keyTable.clear();
       frepTable.clear();
    }
    
    int get(int key) {
        auto it = keyTable.find(key);
        if(it == keyTable.end()){
            return -1;
        }
        
        list<Node>::iterator node = it->second;
        int val = node->val,frep = node->frep;
        //cout << val << " " << frep << endl;
        frepTable[frep].erase(node);
        // 如果当前链表为空，我们需要在哈希表中删除，且更新minfrep
        if(frepTable[frep].size() == 0){
            frepTable.erase(frep);
            if(minFrep == frep){
                minFrep = frep + 1;
                //cout << minFrep << "se" << endl;
            }
        }

        // 插入到frep + 1中
        frepTable[frep + 1].push_front(Node(key,val,frep+1));
        keyTable[key] = frepTable[frep + 1].begin();
        //cout << "j" << endl;
        return val;
    }
    
    void put(int key, int value) {
        if(capacity == 0){
            return ;
        }
        auto it = keyTable.find(key);
        if(it == keyTable.end()){
            
            // 缓存已满，需要进行删除操作
            //cout << keyTable.size() << "ji" << endl;
            if(keyTable.size() == capacity){
                // 通过minFreq 拿到frep_table[minFrep]拿到链表的末端
                auto it2 = frepTable[minFrep].back();
                //cout << key << endl;
                keyTable.erase(it2.key);
                frepTable[minFrep].pop_back();
                if(frepTable[minFrep].size() == 0){
                    frepTable.erase(minFrep);
                }
            }
            frepTable[1].push_front(Node(key,value,1));
            keyTable[key] = frepTable[1].begin();
            minFrep = 1;
        }else{
            // 与get操作基本一致，除了需要更新缓存的值
            list<Node>::iterator node = it->second;
            int frep = node->frep;
            frepTable[frep].erase(node);
            if(frepTable[frep].size() == 0){
                frepTable.erase(frep);
                if(minFrep == frep){
                    minFrep += 1;
                }
            }
            frepTable[frep + 1].push_front(Node(key,value,frep+1));
            keyTable[key] = frepTable[frep + 1].begin();
        }
    }
    /*
    long getCurrentTime()  
    {  
        long static flag = 1;
        return flag++;  
    } */ 
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
```