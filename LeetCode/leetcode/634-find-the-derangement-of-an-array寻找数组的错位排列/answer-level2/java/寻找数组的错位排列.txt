### 方法一：动态规划

#### 思路：
该问题是一个经典的数学问题，可以参考[错排问题](https://baike.baidu.com/item/%E9%94%99%E6%8E%92%E9%97%AE%E9%A2%98/3849290?fr=aladdin)。
![WX20190822-011620@2x_1.png](https://pic.leetcode-cn.com/7fe0e7c07c81e61a338618e7c3878a799f63ee438737fd9963a77082ca1950b2-WX20190822-011620@2x_1.png)

现在让我们考虑元素$n$可以放置的位置，显然$1到n-1$中任何位置我们都可以选择，所以我们共有$n-1$种放法。假设我们选择位置$k$，此时我们需要考虑两种情况。
1. 我们将$k$放置在$n$位置上，那么此时我们不用考虑$n$和$k$，从而将问题缩减成余下$n-2$个元素共有多少种错排的子问题，如下图所示。
![WX20190822-012103@2x_3.png](https://pic.leetcode-cn.com/740fc540c07cb22118418b2cc2aa39c565e31d47095d5c2d44fe04e9981f84ad-WX20190822-012103@2x_3.png)
2. 若我们不将$k$放置在$n$位置上，此时，我们将问题缩减成余下$n-1$个元素共有多少种错排的子问题，如下图所示。
![WX20190822-012413_4@2x.png](https://pic.leetcode-cn.com/1971776347e2de100d111d417696004f4d94b306492fd618a72001880dca7fa2-WX20190822-012413_4@2x.png)

3.由于$k$的位置可以在$1$到$n-1$中任选，我们可以很容易得到递推式，我们记$dp(n)$为从 $1$ 到 $n$ 升序排列的数组中的错排数列的数量，则有：
- $dp(n) = (n-1) * (dp(n-1) + dp(n-2))$
    
#### 算法：
根据上述的递推式，我们很容易利用动态规划的方法解决这个问题。
- 初始化$dp_1 = 0$, $dp_2 = 1$ 

```java []
class Solution {
	private int MOD = 1_000_000_000 + 7;
    public int findDerangement(int n) {
        long[] dp = new long[n+1];
        if (n == 1) return 0;

        dp[1] = 0; dp[2] = 1;

        for (int i = 3; i <= n; i++) {
        	dp[i] = (i - 1) * (dp[i-1] + dp[i-2]);
        	dp[i] %= MOD;
        }

        return (int)dp[n];
    }
}
```

#### 复杂度分析：
- 时间复杂度: $O(N)$
- 空间复杂度: $O(N)$


#### 优化:
由于$dp(n)$的值只与$dp(n-1)$和$dp(n-2)$有关，我们可以用$2$个变量代替$dp(n-1)$和$dp(n-2)$，从而不开辟数组，将空间复杂度优化到$O(1)$。
```java []
class Solution {
	private int MOD = 1_000_000_000 + 7;
    public int findDerangement(int n) {
        long dp1 = 0, dp2 = 1, res = 0;
        if (n == 1) return (int)dp1;
        if (n == 2) return (int)dp2;

        for (int i = 3; i <= n; i++) {
        	res = (i-1) * (dp1 + dp2);
        	res %= MOD;
        	dp1 = dp2;
        	dp2 = res;
        }

        return (int)res;

    }
}
```

#### 复杂度分析：
- 时间复杂度: $O(N)$
- 空间复杂度: $O(1)$

