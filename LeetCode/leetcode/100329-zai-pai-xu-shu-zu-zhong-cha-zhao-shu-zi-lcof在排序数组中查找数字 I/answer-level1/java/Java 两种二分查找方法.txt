## 53-I.在排序数组中查找数字I

### Information

* TIME: 2020/02/22
* LINK: [Click Here](https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/)
* TAG: `二分`

### Description

> 统计一个数字在排序数组中出现的次数。

### Example

```text
输入: nums = [5,7,7,8,8,10], target = 8
输出: 2
```

### My Answer

> 二分随机找到一个等于`target`的索引
>
> 再左右拓展计数

```java
class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0) return 0;
        int idx = binarySearch(nums, 0, nums.length - 1, target);
        
        int ans = 0;
        int left = idx;
        int right = idx + 1;

        while(left >= 0 && nums[left--] == target){
            ans++;
        }
        while(right < nums.length && nums[right++] == target){
            ans++;
        }
        return ans;
    }
    private int binarySearch(int[] nums, int left, int right, int target){
        
        while(left <= right){
            int mid = (left + right) / 2;
            if(nums[mid] < target){
                left = mid + 1;
            }else if(nums[mid] > target){
                right = mid - 1;
            }else{
                return mid;
            }
        }
        return -1;
    }
}
```

### Best Answer

> 二分查找`target`出现的左边界
>
> 二分查找第一个大于`target`的右索引

```java
class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0) return 0;
        int left = binarySearch(nums, target, true);
        if(left == -1) return 0;
        int right = binarySearch(nums, target, false);
        return right - left;
    }
    public int binarySearch(int nums[],int target,boolean leftFlag){
        int left,mid,right;
        left = mid = 0;
        right = nums.length;
        while(left < right){
            mid = (left+right)/2;
            if(nums[mid]>target||(leftFlag&&nums[mid]==target)){
                right = mid;
            }else{
                left = mid + 1;
            }
        }
        return left;
    }
}
```

### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/3851f6c3a02c56cde62ae292744b1f4fa421071e9b350b77e970936191ed2497-file_1582341783108)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

