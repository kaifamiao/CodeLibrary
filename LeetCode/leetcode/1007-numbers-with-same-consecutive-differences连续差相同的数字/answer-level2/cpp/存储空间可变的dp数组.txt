### 解题思路
【先赞后看，养成习惯】
本题的难点不在于**状态转移方程**能否写出来，而是**状态空间的大小未知**，与一般的**动态规划解题结构**不同。
首先我们需要理解清楚题目
- 什么是满足题意要求的数字？
	以`181`为例，不难看出我们需要找出来所有的3（N）位数，满足相邻的两位上的数字之差为定值7（K）
$$ 
|百位(1) - 十位（8）| == |十位(8) - 个位（1）| == 7 == K
$$
- 什么是需要特别注意的数字？
    以**N=2**，**K=1**为例，考虑`10`和`01`，显然，`10`是符合要求的数字，`01`不是符合要求的数字，因为`01`不能作为一个两位数（0）
$$ 
 |十位(1) - 个位（0）| == 1 == K
$$

### 状态定义
`dp[i][j]`：表示i位数（满足题意的数）中第j个数字
`dp[i-1][m]`：表示i-1位数（满足题意的数）中第m个数字

### 状态转移
$$
dp[i][j] = (dp[i-1][m]  \times  10)  +  (dp[i-1][m]\mod(10) \pm K）
$$
解释一下上面的转移方程，从`i-1`位数字(A)，生成`i`位数字(B)，我们只需要将在A之后补一位`0`(即×10)，为了满足题意，B的个位需要通过A的个位来生成
即
$$
B的个位 = A的个位 \pm K
$$
### 代码层面
1. 在生成中间状态的时候，我们事先不知道有多少种状态，所以这里用了`push_back`不断添加
```cpp
	dp[i].push_back(*)		//	在i位符合题意得数字中添加* 
```
2. 如何避免`01`这样的数字呢？
	由于提前判断了N的大小，所以在这里我们将0去除，这样就不会生成以0为首位的数字
```cpp
	dp[1] = { 1,2,3,4,5,6,7,8,9 };// 这里是初始状态，之前判断过N，所以不用担心！
```
 
3. 如何优化呢？
	显然这道题我们只用到了前一个状态（有点像是马尔科夫链，还需要向大家请教哈~），所以可以进行空间上的优化，不过需要注意的是，这里的大小是可变的，所以在写代码的时候需要记住前一个状态有多少数字。

### 我的题解
[LeetCode1262 可被三整除的最大和](https://leetcode-cn.com/problems/greatest-sum-divisible-by-three/solution/dong-tai-gui-hua-yu-zhuang-tai-zhuan-yi-by-christm/)
[LeetCode688 “马”在棋盘上的概率](https://leetcode-cn.com/problems/knight-probability-in-chessboard/solution/zhuang-tai-ji-de-zai-ci-ying-yong-by-christmas_wan/)
### 代码

```cpp
class Solution {
public:
    vector<int> numsSameConsecDiff(int N, int K) {
    	if (N == 1) {	return { 0,1,2,3,4,5,6,7,8,9 };}
	
	vector<vector<int>> dp(N + 1);
	dp[1] = { 1,2,3,4,5,6,7,8,9 };
	int start = 0, end = 0;
	for (int i = 2; i <= N; i++) {
		for (int j = 0; j < dp[i - 1].size(); j++) {
			if (K == 0) {
				dp[i].push_back(dp[i - 1][j] * 10 + dp[i - 1][j] % 10);
			}
			else {
				if (dp[i - 1][j] % 10 + K <= 9) {
					dp[i].push_back(dp[i - 1][j] * 10 + dp[i - 1][j] % 10 + K);
				}
				if (dp[i - 1][j] % 10 - K >= 0) {
					dp[i].push_back(dp[i - 1][j] * 10 + dp[i - 1][j] % 10 - K);
				}
			}
		}
	}
	return dp[N];
    }
};
```