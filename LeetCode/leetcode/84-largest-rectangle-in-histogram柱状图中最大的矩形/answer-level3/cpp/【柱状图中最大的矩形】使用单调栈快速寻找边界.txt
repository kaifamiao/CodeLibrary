### 单调栈
1. 单调栈分为单调递增栈和单调递减栈
    11. 单调递增栈即栈内元素保持单调递增的栈
    12. 同理单调递减栈即栈内元素保持单调递减的栈

2. 操作规则（下面都以单调递增栈为例）
    21. 如果新的元素比栈顶元素大，就入栈
    22. 如果新的元素较小，那就一直把栈内元素弹出来，直到栈顶比新元素小

3. 加入这样一个规则之后，会有什么效果
    31. 栈内的元素是递增的
    32. 当元素出栈时，说明这个**新元素**是出栈元素**向后**找第一个比其小的元素
    > 举个例子，配合下图，现在索引在 6 ，栈里是 1 5 6 。
    > 接下来新元素是 2 ，那么 6 需要出栈。
    > 当 6 出栈时，右边 2 代表是 6 右边第一个比 6 小的元素。 
    33. 当元素出栈后，说明新**栈顶元素**是出栈元素**向前**找第一个比其小的元素
    > 当 6 出栈时，5 成为新的栈顶，那么 5 就是 6 左边第一个比 6 小的元素。

4. 代码
	```C++
	stack<int> st;
	for(int i = 0; i < nums.size(); i++)
	{
		while(!st.empty() && st.top() > nums[i])
		{
			st.pop();
		}
		st.push(nums[i]);
	}
	```

5. 画图理解										
![图片.png](https://pic.leetcode-cn.com/7e876ae756613053b3432cebc9274e9dbdaafd2e6b8492d37fc34ee98f7655ea-%E5%9B%BE%E7%89%87.png)


### 思路
1. 对于一个高度，如果能得到向左和向右的边界
2. 那么就能对每个高度求一次面积
3. 遍历所有高度，即可得出最大面积

### 答题
1. 使用单调栈，正反两次获得边界
```C++
vector<int> getBoundary(vector<int>& heights, bool left)
{
    vector<int> ans(heights.size(), 0);
    vector<int> st;
    for (int ii = 0; ii < heights.size(); ii++)
    {
        int i = left ? heights.size() - 1 - ii : ii;
        while (!st.empty() && heights[st.back()] > heights[i])
        {
            ans[st.back()] = left ? i + 1 : i - 1;
            st.pop_back();
        }
        st.push_back(i);
    }
    return ans;
}

int largestRectangleArea(vector<int>& heights)
{
    heights.push_back(0);
    vector<int> left = getBoundary(heights, true);
    vector<int> right = getBoundary(heights, false);

    int ans = 0;
    for (int i = 0; i < heights.size(); i++)
    {
        ans = max(ans, (right[i] - left[i] + 1) * heights[i]);
    }
    return ans;
}
```

2. 使用单调栈，在出栈操作时得到前后边界并计算面积
```C++
int largestRectangleArea(vector<int>& heights)
{
    int ans = 0;
    vector<int> st;
    heights.insert(heights.begin(), 0);
    heights.push_back(0);
    for (int i = 0; i < heights.size(); i++)
    {
        while (!st.empty() && heights[st.back()] > heights[i])
        {
            int cur = st.back();
            st.pop_back();
            int left = st.back() + 1;
            int right = i - 1;
            ans = max(ans, (right - left + 1) * heights[cur]);
        }
        st.push_back(i);
    }
    return ans;
}
```


### 致谢

感谢您的观看，希望对您有帮助，欢迎热烈的交流！  

[我的leetcode](https://github.com/AhJo53589/leetcode-cn)

