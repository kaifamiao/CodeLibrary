```
typedef struct {
    char* compressedString;
    int* pos;
    int len;
} StringIterator;
bool JudgeNum(char c) 
{
    if ((c >= '0') && (c <= '9')) {
        return true;
    } 
    return false;
}
StringIterator* stringIteratorCreate(char * compressedString) {
    StringIterator* ans;
    int i, num ,last;
    int len = strlen(compressedString);
    ans = (StringIterator*)malloc(sizeof(StringIterator));
    ans->compressedString = (char*)malloc(sizeof(char) * (len + 1));
    ans->pos = (int*)malloc(sizeof(int) * (len + 1));
    memset(ans->pos, 0, sizeof(int) * (len + 1));
    strcpy(ans->compressedString, compressedString);
    last = 0;
    for (i = 0; i < len; i++) {
        if (!JudgeNum(ans->compressedString[i])) {
            ans->pos[i] = -1;
            ans->pos[last + 1] = num;
            last = i;
            num = 0;
        } else {
            num = num * 10 + ans->compressedString[i] - '0';
        }
    }
    ans->pos[last + 1] = num;
    ans->len = len;
    return ans;
}

char stringIteratorNext(StringIterator* obj) {
    char ans = ' ';
    int i, num, l, pos;
    num = 0;
    l = 0;
    i = 0;
    for (i = 0; i < obj->len; i++) {
        if (obj->pos[i] == -1) {
            if (obj->pos[i + 1] > 0) {
                obj->pos[i + 1]--;
                return obj->compressedString[i];
            }
        }
    }
    return ans;
}

bool stringIteratorHasNext(StringIterator* obj) {
    int i;
    for (i = 0; i < obj->len; i++) {
        if (obj->pos[i] == -1) {
            if (obj->pos[i + 1] > 0) {
                return true;
            }
        }
    }
    return false;
}

void stringIteratorFree(StringIterator* obj) {
    free(obj->compressedString);
    free(obj->pos);
    free(obj);
}

/**
 * Your StringIterator struct will be instantiated and called as such:
 * StringIterator* obj = stringIteratorCreate(compressedString);
 * char param_1 = stringIteratorNext(obj);
 
 * bool param_2 = stringIteratorHasNext(obj);
 
 * stringIteratorFree(obj);
*/
```
