design-compressed-string-iterator
对于一个压缩字符串，设计一个数据结构，它支持如下两种操作：<code>next</code>和<code>hasNext</code>。

给定的压缩字符串格式为：每个字母后面紧跟一个正整数，这个整数表示该字母在解压后的字符串里连续出现的次数。

<code>next()</code> - 如果压缩字符串仍然有字母未被解压，则返回下一个字母，否则返回一个空格。<br>
<code>hasNext()</code> - 判断是否还有字母仍然没被解压。

<strong>注意：</strong>

请记得将你的类在 StringIterator 中<strong>初始化</strong>，因为静态变量或类变量在多组测试数据中不会被自动清空。更多细节请访问 <a href="http://leetcode.com/faq/#different-output">这里</a>。

<strong>示例：</strong>

<pre>StringIterator iterator = new StringIterator(&quot;L1e2t1C1o1d1e1&quot;);

iterator.next(); // 返回 &#39;L&#39;
iterator.next(); // 返回 &#39;e&#39;
iterator.next(); // 返回 &#39;e&#39;
iterator.next(); // 返回 &#39;t&#39;
iterator.next(); // 返回 &#39;C&#39;
iterator.next(); // 返回 &#39;o&#39;
iterator.next(); // 返回 &#39;d&#39;
iterator.hasNext(); // 返回 true
iterator.next(); // 返回 &#39;e&#39;
iterator.hasNext(); // 返回 false
iterator.next(); // 返回 &#39; &#39;
</pre>



迭代压缩字符串

Design and implement a data structure for a compressed string iterator. It should support the following operations: <code>next</code> and <code>hasNext</code>.



The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.



<code>next()</code> - if the original string still has uncompressed characters, return the next letter; Otherwise return a white space.<br>
<code>hasNext()</code> - Judge whether there is any letter needs to be uncompressed.



<b>Note:</b><br />
Please remember to <b>RESET</b> your class variables declared in StringIterator, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href="https://leetcode.com/faq/#different-output">here</a> for more details.



<b>Example:</b>
<pre>
StringIterator iterator = new StringIterator("L1e2t1C1o1d1e1");

iterator.next(); // return 'L'
iterator.next(); // return 'e'
iterator.next(); // return 'e'
iterator.next(); // return 't'
iterator.next(); // return 'C'
iterator.next(); // return 'o'
iterator.next(); // return 'd'
iterator.hasNext(); // return true
iterator.next(); // return 'e'
iterator.hasNext(); // return false
iterator.next(); // return ' '
</pre>
