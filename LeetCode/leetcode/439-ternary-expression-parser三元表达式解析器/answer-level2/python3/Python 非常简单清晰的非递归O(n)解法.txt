因为三元表达式是**从右向左**结合的, 如果从左向右扫描表达式, 则需要根据'?'和':'来分离出每一个表达式, 比较复杂.

所以直接从右向左扫描表达式, 这样遇到的每一个?一定会是一个最简三元表达式:

T?T?F?7:T?T?F?3:F?****T?0:1****:0:6:1:0:5

从右向左扫描, 第一个'?'代表的最简三元表达式: T?0:1, 得到结果是0:

现在这个源表达式变成了:

T?T?F?7:T?T?F?3:****F?0:0****:6:1:0:5

就这样迭代, 我们只需要在遇到'?'时直接解析当前这个最简三元表达式即可, 不用去考虑嵌套关系.

```
class Solution:
    def parseTernary(self, expression: str) -> str:
        # 用来标记下一个遇到的字符是条件
        is_condition = 0
        stk = []
        # 因为是从右至左结合,所以也从右至左遍历
        for i in range(len(expression) - 1, -1, -1):
            if expression[i] == ':':
                continue
            elif expression[i] == '?':  # 标记下一个遇到的字符是条件
                is_condition = 1
            else:
                if is_condition:
                    if expression[i] == 'T':  # 说明栈中的第一个元素是结果, 但要把错误结果删掉
                        res = stk[-1]
                        stk.pop()
                        stk.pop()
                        stk.append(res)
                    else:  # 说明栈中第二个元素是结果, 删掉栈顶元素即可
                        stk.pop()
                    is_condition = 0
                else:  # 当前扫描到的元素不是条件, 就是直接入栈
                    stk.append(expression[i])
        return stk[-1]
```
