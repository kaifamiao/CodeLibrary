ternary-expression-parser
给定一个以字符串表示的任意嵌套的三元表达式，计算表达式的值。你可以假定给定的表达式始终都是有效的并且只包含数字 <code>0-9</code>, <code>?</code>, <code>:</code>, <code>T</code> 和<code>F</code> (<code>T</code> 和<code>F</code>分别表示真和假）。

<strong>注意：</strong>

<ol>
	给定的字符串长度&le; 10000。
	所包含的数字都只有一位数。
	条件表达式从右至左结合（和大多数程序设计语言类似）。
	条件是<code>T</code>和<code>F</code>其一，即条件永远不会是数字。
	表达式的结果是数字<code>0-9</code>, <code>T</code> 或者<code>F</code>。
</ol>



<strong>示例 1：</strong>

<pre><strong>输入：</strong> &quot;T?2:3&quot;

<strong>输出：</strong> &quot;2&quot;

<strong>解释：</strong> 如果条件为真，结果为 2；否则，结果为 3。
</pre>



<strong>示例 2：</strong>

<pre><strong>输入：</strong> &quot;F?1:T?4:5&quot;

<strong>输出：</strong> &quot;4&quot;

<strong>解释：</strong> 条件表达式自右向左结合。使用括号的话，相当于：

             &quot;(F ? 1 : (T ? 4 : 5))&quot;                   &quot;(F ? 1 : (T ? 4 : 5))&quot;
          -&gt; &quot;(F ? 1 : 4)&quot;                 或者     -&gt; &quot;(T ? 4 : 5)&quot;
          -&gt; &quot;4&quot;                                    -&gt; &quot;4&quot;
</pre>



<strong>示例 3：</strong>

<pre><strong>输入：</strong> &quot;T?T?F:5:3&quot;

<strong>输出：</strong> &quot;F&quot;

<strong>解释：</strong> 条件表达式自右向左结合。使用括号的话，相当于：

             &quot;(T ? (T ? F : 5) : 3)&quot;                   &quot;(T ? (T ? F : 5) : 3)&quot;
          -&gt; &quot;(T ? F : 3)&quot;                 或者       -&gt; &quot;(T ? F : 5)&quot;
          -&gt; &quot;F&quot;                                     -&gt; &quot;F&quot;
</pre>



三元表达式解析器
Given a string representing arbitrarily nested ternary expressions, calculate the result of the expression. You can always assume that the given expression is valid and only consists of digits <code>0-9</code>, <code>?</code>, <code>:</code>, <code>T</code> and <code>F</code> (<code>T</code> and <code>F</code> represent True and False respectively).

<b>Note:</b>
<ol>
The length of the given string is &le; 10000.
Each number will contain only one digit.
The conditional expressions group right-to-left (as usual in most languages).
The condition will always be either <code>T</code> or <code>F</code>. That is, the condition will never be a digit.
The result of the expression will always evaluate to either a digit <code>0-9</code>, <code>T</code> or <code>F</code>.
</ol>



<b>Example 1:</b>
<pre>
<b>Input:</b> "T?2:3"

<b>Output:</b> "2"

<b>Explanation:</b> If true, then result is 2; otherwise result is 3.
</pre>



<b>Example 2:</b>
<pre>
<b>Input:</b> "F?1:T?4:5"

<b>Output:</b> "4"

<b>Explanation:</b> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:

             "(F ? 1 : (T ? 4 : 5))"                   "(F ? 1 : (T ? 4 : 5))"
          -> "(F ? 1 : 4)"                 or       -> "(T ? 4 : 5)"
          -> "4"                                    -> "4"
</pre>



<b>Example 3:</b>
<pre>
<b>Input:</b> "T?T?F:5:3"

<b>Output:</b> "F"

<b>Explanation:</b> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:

             "(T ? (T ? F : 5) : 3)"                   "(T ? (T ? F : 5) : 3)"
          -> "(T ? F : 3)"                 or       -> "(T ? F : 5)"
          -> "F"                                    -> "F"
</pre>
