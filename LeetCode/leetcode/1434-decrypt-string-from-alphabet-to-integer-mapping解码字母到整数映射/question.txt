decrypt-string-from-alphabet-to-integer-mapping
给你一个字符串<code>s</code>，它由数字（<code>&#39;0&#39;</code> - <code>&#39;9&#39;</code>）和<code>&#39;#&#39;</code>组成。我们希望按下述规则将<code>s</code>映射为一些小写英文字符：

<ul>
	字符（<code>&#39;a&#39;</code> - <code>&#39;i&#39;</code>）分别用（<code>&#39;1&#39;</code> -<code>&#39;9&#39;</code>）表示。
	字符（<code>&#39;j&#39;</code> - <code>&#39;z&#39;</code>）分别用（<code>&#39;10#&#39;</code>-<code>&#39;26#&#39;</code>）表示。
</ul>

返回映射之后形成的新字符串。

题目数据保证映射始终唯一。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>s = &quot;10#11#12&quot;
<strong>输出：</strong>&quot;jkab&quot;
<strong>解释：</strong>&quot;j&quot; -&gt; &quot;10#&quot; , &quot;k&quot; -&gt; &quot;11#&quot; , &quot;a&quot; -&gt; &quot;1&quot; , &quot;b&quot; -&gt; &quot;2&quot;.
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>s = &quot;1326#&quot;
<strong>输出：</strong>&quot;acz&quot;
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>s = &quot;25#&quot;
<strong>输出：</strong>&quot;y&quot;
</pre>

<strong>示例 4：</strong>

<pre><strong>输入：</strong>s = &quot;12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#&quot;
<strong>输出：</strong>&quot;abcdefghijklmnopqrstuvwxyz&quot;
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= s.length &lt;= 1000</code>
	<code>s[i]</code> 只包含数字（<code>&#39;0&#39;</code>-<code>&#39;9&#39;</code>）和<code>&#39;#&#39;</code>字符。
	<code>s</code>是映射始终存在的有效字符串。
</ul>

解码字母到整数映射
Given a string <code>s</code> formed by digits (<code>&#39;0&#39;</code> - <code>&#39;9&#39;</code>)and <code>&#39;#&#39;</code>.We want to map <code>s</code> to English lowercase characters as follows:

<ul>
	Characters (<code>&#39;a&#39;</code> to <code>&#39;i&#39;)</code> arerepresented by(<code>&#39;1&#39;</code> to<code>&#39;9&#39;</code>)respectively.
	Characters (<code>&#39;j&#39;</code> to <code>&#39;z&#39;)</code> are represented by (<code>&#39;10#&#39;</code>to<code>&#39;26#&#39;</code>)respectively.
</ul>

Return the string formed after mapping.

It&#39;s guaranteed that a unique mapping will always exist.


<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> s = &quot;10#11#12&quot;
<strong>Output:</strong> &quot;jkab&quot;
<strong>Explanation:</strong> &quot;j&quot; -&gt; &quot;10#&quot; , &quot;k&quot; -&gt; &quot;11#&quot; , &quot;a&quot; -&gt; &quot;1&quot; , &quot;b&quot; -&gt; &quot;2&quot;.
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> s = &quot;1326#&quot;
<strong>Output:</strong> &quot;acz&quot;
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input:</strong> s = &quot;25#&quot;
<strong>Output:</strong> &quot;y&quot;
</pre>

<strong>Example 4:</strong>

<pre>
<strong>Input:</strong> s = &quot;12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#&quot;
<strong>Output:</strong> &quot;abcdefghijklmnopqrstuvwxyz&quot;
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= s.length &lt;= 1000</code>
	<code>s[i]</code> only contains digits letters (<code>&#39;0&#39;</code>-<code>&#39;9&#39;</code>) and <code>&#39;#&#39;</code>letter.
	<code>s</code> will be valid stringsuch that mapping is always possible.
</ul>