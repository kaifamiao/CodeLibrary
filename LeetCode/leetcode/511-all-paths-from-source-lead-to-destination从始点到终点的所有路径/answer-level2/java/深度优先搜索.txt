### 解题思路
深度优先搜索。

### 代码

```java
class Solution {
    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {
        if (n <= 0 || edges == null || edges.length == 0) return true;
        // 构建图
        Node[] graph = new Node[n];
        for (int[] edge : edges) {
            graph[edge[0]] = new Node(edge[1], graph[edge[0]]);
        }
        // 题目限定目标点必须是终结点，不能有出边
        if (graph[destination] != null) return false;
        // 标记访问
        int[] visited = new int[n];
        return dfs(source, destination, graph, visited);
    }

    private boolean dfs(int start, int end, Node[] graph, int[] visited) {
        // 存在环
        if (visited[start] == 1) return false;
        // 已经遍历过，不再遍历
        if (visited[start] == -1) return true;
        // 当前点就是终点
        if (start == end) {
            visited[start] = -1;
            return true;
        }
        // 标记为正在遍历
        visited[start] = 1;
        Node cur = graph[start];
        // 走到端点，但不是目标点
        if (cur == null) return false;
        while (cur != null) {
            // 子路径不满足要求
            if (!dfs(cur.ver, end, graph, visited)) return false;
            cur = cur.next;
        }
        // 遍历完成，满足要求
        visited[start] = -1;
        return true;
    }
}

class Node {
    int ver;
    Node next;

    Node(int ver, Node next) {
        this.ver = ver;
        this.next = next;
    }
}
```