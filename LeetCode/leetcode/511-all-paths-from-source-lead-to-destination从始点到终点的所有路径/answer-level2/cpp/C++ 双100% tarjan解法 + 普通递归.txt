# 解法一：
借用tarjan算法改造
```
class Solution {
public:
    int rank;
    vector<int> dfn;
    vector<int> low;
    bool tarjan(const vector<vector<int> >& g, int i) {
        dfn[i] = low[i] = ++rank;
        for (auto j : g[i]) {
            // 判断是否有自环
            if (j == i) return false;
            if (dfn[j] == 0) {
                if (!tarjan(g, j)) return false;
                low[i] = min(low[i], low[j]);
                // 判断是否有环
                if (dfn[i] >= low[j]) return false;
            } else {
                low[i] = min(low[i], dfn[j]);
            }
        }
        return true;
    }
    void init(int n) {
        rank = 0;
        dfn.resize(n);
        low.resize(n);
        fill(dfn.begin(), dfn.end(), 0);
        fill(low.begin(), low.end(), 0);
    }
    bool leadsToDestination(int n, vector<vector<int>>& edges, int source, int destination) {
        vector<vector<int> > g(n);
        for (auto& e : edges) {
            g[e[0]].push_back(e[1]);
        }
        init(n);
        if (!tarjan(g, source)) return false;
        for (int i = 0; i < n; ++i) {
            if (dfn[i] != 0 && g[i].empty() && i != source && i != destination) {
                return false;
            }
        }
        return dfn[destination] != 0 && g[destination].empty();
    }
};
```

![image.png](https://pic.leetcode-cn.com/530fda65cbb26f374d2c3a202c134462ad85da4040e0173ab27de8242428a91f-image.png)

# 解法二：
轻量版普通递归
```
class Solution {
public:
    bool dfs(const vector<vector<int> >& g, vector<bool>& visited, int src, int tgt) {
        if (g[src].empty()) {
            return src == tgt;
        }
        for (auto k : g[src]) {
            // 判断是否有环 并 递归子节点
            if (visited[k]) return false;
            visited[k] = true;
            if (!dfs(g, visited, k, tgt)) return false;
            visited[k] = false;
        }
        return true;
    }
    bool leadsToDestination(int n, vector<vector<int>>& edges, int source, int destination) {
        vector<vector<int> > g(n);
        for (auto& e : edges) {
            g[e[0]].push_back(e[1]);
        }
        if (!g[destination].empty()) return false;
        vector<bool> visited(n, false);
        return dfs(g, visited, source, destination);
    }
};
```

![image.png](https://pic.leetcode-cn.com/4c839bfa25a4502b3e378e2319ba2352f80d7debdec11d39e242092cf4ac686f-image.png)
