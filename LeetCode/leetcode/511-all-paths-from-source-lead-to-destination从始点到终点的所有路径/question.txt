all-paths-from-source-lead-to-destination
给定有向图的边<code>edges</code>，以及该图的始点<code>source</code>和目标终点<code>destination</code>，确定从始点<code>source</code>出发的所有路径是否最终结束于目标终点<code>destination</code>，即：

<ul>
	从始点<code>source</code> 到目标终点<code>destination</code> 存在至少一条路径
	如果存在从始点<code>source</code> 到没有出边的节点的路径，则该节点就是路径终点。
	从始点<code>source</code>到目标终点<code>destination</code> 可能路径数是有限数字
</ul>

当从始点<code>source</code> 出发的所有路径都可以到达目标终点<code>destination</code> 时返回<code>true</code>，否则返回 <code>false</code>。



<strong>示例 1：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/21/485_example_1.png" style="height: 208px; width: 200px;">

<pre><strong>输入：</strong>n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2
<strong>输出：</strong>false
<strong>说明：</strong>节点 1 和节点 2 都可以到达，但也会卡在那里。
</pre>

<strong>示例 2：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/21/485_example_2.png" style="height: 230px; width: 200px;">

<pre><strong>输入：</strong>n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3
<strong>输出：</strong>false
<strong>说明：</strong>有两种可能：在节点 3 处结束，或是在节点 1 和节点 2 之间无限循环。
</pre>

<strong>示例 3：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/21/485_example_3.png" style="height: 183px; width: 200px;">

<pre><strong>输入：</strong>n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3
<strong>输出：</strong>true
</pre>

<strong>示例 4：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/21/485_example_4.png" style="height: 183px; width: 200px;">

<pre><strong>输入：</strong>n = 3, edges = [[0,1],[1,1],[1,2]], source = 0, destination = 2
<strong>输出：</strong>false
<strong>说明：</strong>从始点出发的所有路径都在目标终点结束，但存在无限多的路径，如 0-1-2，0-1-1-2，0-1-1-1-2，0-1-1-1-1-2 等。
</pre>

<strong>示例 5：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/21/485_example_5.png" style="height: 131px; width: 150px;">

<pre><strong>输入：</strong>n = 2, edges = [[0,1],[1,1]], source = 0, destination = 1
<strong>输出：</strong>false
<strong>说明：</strong>在目标节点上存在无限的自环。
</pre>



<strong>提示：</strong>

<ol>
	给定的图中可能带有自环和平行边。
	图中的节点数<code>n</code>介于<code>1</code> 和<code>10000</code>之间。
	图中的边数在<code>0</code> 到<code>10000</code>之间。
	<code>0 &lt;= edges.length &lt;= 10000</code>
	<code>edges[i].length == 2</code>
	<code>0 &lt;= source &lt;= n - 1</code>
	<code>0 &lt;= destination &lt;= n - 1</code>
</ol>

从始点到终点的所有路径
Given the <code>edges</code> of a directed graph, and two nodes <code>source</code> and <code>destination</code> of this graph, determine whether or not all paths starting from <code>source</code> eventually end at <code>destination</code>, that is:

<ul>
	At least one path exists from the <code>source</code> node to the <code>destination</code> node
	If a path exists from the <code>source</code> node to a node with no outgoing edges, then that node is equal to <code>destination</code>.
	The number of possible paths from <code>source</code> to <code>destination</code> is a finite number.
</ul>

Return <code>true</code> if and only if all roads from <code>source</code> lead to <code>destination</code>.



<strong>Example 1:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/03/16/485_example_1.png" style="width: 200px; height: 208px;" />

<pre>
<strong>Input: </strong>n = 3, edges = <span id="example-input-1-2">[[0,1],[0,2]]</span>, source = <span id="example-input-1-3">0</span>, destination = 2
<strong>Output: </strong><span id="example-output-1">false</span>
<strong>Explanation: </strong>It is possible to reach and get stuck on both node 1 and node 2.
</pre>

<strong>Example 2:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/03/16/485_example_2.png" style="width: 200px; height: 230px;" />

<pre>
<strong>Input: </strong>n = <span id="example-input-2-1">4</span>, edges = <span id="example-input-2-2">[[0,1],[0,3],[1,2],[2,1]]</span>, source = <span id="example-input-2-3">0</span>, destination = <span id="example-input-2-4">3</span>
<strong>Output: </strong><span id="example-output-2">false</span>
<strong>Explanation: </strong>We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely.
</pre>

<strong>Example 3:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/03/16/485_example_3.png" style="width: 200px; height: 183px;" />

<pre>
<strong>Input: </strong>n = <span id="example-input-3-1">4</span>, edges = <span id="example-input-3-2">[[0,1],[0,2],[1,3],[2,3]]</span>, source = <span id="example-input-3-3">0</span>, destination = <span id="example-input-3-4">3</span>
<strong>Output: </strong><span id="example-output-3">true</span>
</pre>

<strong>Example 4:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/03/16/485_example_4.png" style="width: 200px; height: 183px;" />

<pre>
<strong>Input: </strong>n = <span id="example-input-4-1">3</span>, edges = <span id="example-input-4-2">[[0,1],[1,1],[1,2]]</span>, source = <span id="example-input-4-3">0</span>, destination = <span id="example-input-4-4">2</span>
<strong>Output: </strong><span id="example-output-4">false</span>
<strong>Explanation: </strong>All paths from the source node end at the destination node, but there are an infinite number of paths, such as 0-1-2, 0-1-1-2, 0-1-1-1-2, 0-1-1-1-1-2, and so on.
</pre>

<strong>Example 5:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/03/16/485_example_5.png" style="width: 150px; height: 131px;" />

<pre>
<strong>Input: </strong>n = <span id="example-input-5-1">2</span>, edges = <span id="example-input-5-2">[[0,1],[1,1]]</span>, source = <span id="example-input-5-3">0</span>, destination = <span id="example-input-5-4">1</span>
<strong>Output: </strong><span id="example-output-5">false</span>
<strong>Explanation: </strong>There is infinite self-loop at destination node.
</pre>



<strong>Note:</strong>

<ol>
	<italic>The given graph may have self loops and parallel edges.</italic>
	The number of nodes <code>n</code> in the graph is between <code>1</code> and <code>10000</code>
	The number of edges in the graph is between <code>0</code> and <code>10000</code>
	<code>0 &lt;= edges.length &lt;= 10000</code>
	<code>edges[i].length == 2</code>
	<code>0 &lt;= source &lt;= n - 1</code>
	<code>0 &lt;= destination &lt;= n - 1</code>
</ol>
