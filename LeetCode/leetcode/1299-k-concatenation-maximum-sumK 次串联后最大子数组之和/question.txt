k-concatenation-maximum-sum
给你一个整数数组<code>arr</code>和一个整数<code>k</code>。

首先，我们要对该数组进行修改，即把原数组 <code>arr</code> 重复<code>k</code>次。

<blockquote>
举个例子，如果<code>arr= [1, 2]</code> 且 <code>k = 3</code>，那么修改后的数组就是<code>[1, 2, 1, 2, 1, 2]</code>。
</blockquote>

然后，请你返回修改后的数组中的最大的子数组之和。

注意，子数组长度可以是 <code>0</code>，在这种情况下它的总和也是 <code>0</code>。

由于<strong>结果可能会很大</strong>，所以需要 <strong>模（mod）</strong><code>10^9 + 7</code>后再返回。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>arr = [1,2], k = 3
<strong>输出：</strong>9
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>arr = [1,-2,1], k = 5
<strong>输出：</strong>2
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>arr = [-1,-2], k = 7
<strong>输出：</strong>0
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= arr.length &lt;= 10^5</code>
	<code>1 &lt;= k &lt;= 10^5</code>
	<code>-10^4 &lt;= arr[i] &lt;= 10^4</code>
</ul>

K 次串联后最大子数组之和
Given an integer array <code>arr</code>and an integer <code>k</code>, modify the array by repeating it <code>k</code> times.

For example, if <code>arr= [1, 2]</code> and <code>k = 3 </code>then the modified array will be <code>[1, 2, 1, 2, 1, 2]</code>.

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be <code>0</code>and its sum in that case is <code>0</code>.

As the answer can be very large, return the answer<strong>modulo</strong><code>10^9 + 7</code>.


<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> arr = [1,2], k = 3
<strong>Output:</strong> 9
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> arr = [1,-2,1], k = 5
<strong>Output:</strong> 2
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input:</strong> arr = [-1,-2], k = 7
<strong>Output:</strong> 0
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= arr.length &lt;= 10^5</code>
	<code>1 &lt;= k &lt;= 10^5</code>
	<code>-10^4 &lt;= arr[i] &lt;= 10^4</code>
</ul>
