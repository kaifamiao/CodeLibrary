![Kadane Algo Algorithm & Leetcode 1191 (i).png](https://pic.leetcode-cn.com/af830b1223584aa914ee6f367105144d89ef6a45fb1fe9f28b63e76b7495633a-Kadane%20Algo%20Algorithm%20&%20Leetcode%201191%20\(1\).png)
首先，关于[“最大子数组和”](https://en.wikipedia.org/wiki/Maximum_subarray_problem)问题有一个基于动态规划的经典算法[Kadane算法](https://hackernoon.com/kadanes-algorithm-explained-50316f4fd8a6)。这个算法使用`maxOfEnd`表示以当前数组元素结尾的最大和子数组，转移过程也十分简单——要么就是只取当前元素，要么就是拖家带口把前一元素的`maxOfEnd`一起带上。上图的例子，我们使用以下的Kadane算法，可以得到最大子数组和为`55 + 66 = 121`。
```java
int largestSubarraySum(int[] arr) {
  int maxOfEnd, maxSoFar;
  maxSoFar = maxOfEnd = arr[0] > 0 ? arr[0] : 0;
  for (int i = 1; i < arr.length; i++) {
    maxOfEnd = Math.max(maxOfEnd + arr[i], arr[i]);
    maxSoFar = Math.max(maxOfEnd, maxSoFar);
  }
  return maxSoFar;
}
```
![Kadane Algo Algorithm & Leetcode 1191 (ii).png](https://pic.leetcode-cn.com/3b52f78509b633fa3340f8418f4ec31111aa82a3770d3ab73fcb59d29176bdbe-Kadane%20Algo%20Algorithm%20&%20Leetcode%201191%20\(2\).png)
回到问题本身，由于数组可以重复出现，所以实际上，我们的子数组是可以跨过原始数组`arr`的边界的。如果我们限制子数组长度在`arr.length`以内，那么问题将转变为“最大子数组和”的**变种**，即子数组可以是以下两种形式：
* **形式 1: 常规型**，就是通常意义的子数组。`formal(i, j)`定义为:
`arr[i] + arr[i+1] + ... + arr[j]`, where `0 <= i <= j < arr.length`
* **形式 2: 非常规型**，这种子数组分为两段，第一段从原始数组的**首元素开始**，第二段以原始数组的**末元素结尾**。很显然，非常规型数组的数量与常规型的**一样多**。`nonformal(i, j)`定义为：
`arr[0] + arr[1] + ... + arr[i] + arr[j] + arr[j+1] + ... + arr[arr.lengh-1]`, where `0 <= i <= j < arr.length`
上面这个变种问题，我们可以通过下面的算法来解决：我们准备**两个**`arr`，然后对它执行Kadane算法，这样我们得到的结果一定涵盖了上面两种类型的子数组。
```java
int largestSubarraySum(int[] arr) {
  int maxOfEnd, maxSoFar, len = arr.length;
  maxSoFar = maxOfEnd = arr[0] > 0 ? arr[0] : 0;
  for (int i = 1; i < len * 2; i++) {
    maxOfEnd = Math.max(maxOfEnd + arr[i % len], arr[i % len]);
    maxSoFar = Math.max(maxOfEnd, maxSoFar);
  }
  return maxSoFar;
}
```
然而，上面的算法实际上给出的结果是`maxSoFar = 185`(Pic iii, 红色部分)。这是什么呢？
![Kadane Algo Algorithm & Leetcode 1191 (iii).png](https://pic.leetcode-cn.com/35bbc43bafaca37fd667aee21982f6c4061255dc40777d1075acc051b8cc06f0-Kadane%20Algo%20Algorithm%20&%20Leetcode%201191%20\(3\).png)
我们把结果分成两部分，蓝色和绿色。可以看出，这是一个常规型的子数组（蓝色）加上一个完整的原始数组`arr`得到的。`[55, 66]`是所有常规和非常规子数组中最大的，但是因为`sum(arr) > 0`，所以它还可以被扩展一个`arr.length`的长度。因此，我们可以得出最后的算法，如果`sum(arr) > 0`，`maxSoFar`可以反复叠加`k - 2`次。`k == 1`的边界条件可以小心处理一下。
```java
class Solution {
  public int kConcatenationMaxSum(int[] arr, int k) {
    if (arr == null || arr.length == 0) return 0;
    long maxOfEnd = arr[0] > 0 ? arr[0] : 0L, maxSoFar = maxOfEnd, sum = arr[0];
    for (int i = 1; i < Math.min(k, 2) * arr.length; i++) {
      maxOfEnd = Math.max(maxOfEnd + arr[i % arr.length], arr[i % arr.length]);
      maxSoFar = Math.max(maxOfEnd, maxSoFar);
      if (i < arr.length) sum += arr[i];
    }
    while (sum > 0 && --k >= 2)
      maxSoFar = (maxSoFar + sum) % 1000000007;
    return (int) maxSoFar;
  }
}
```
**进一步证明**:
定义：数组`arr`的所有元素之和为`sum(arr)`，`arr`重复`k`次表示为`carr(k)` (`k >= 2`)。那么`carr(k)`中所有的子数组可以写为：
* `formal(i, j) + carr(n)`,    where `n = 0, 1, 2, ..., k - 1` and `0 <= i <= j <= len(arr) - 1`
* `nonformal(i, j) + carr(m)`, where `m = 0, 1, 2, ..., k - 2` and `0 <= i <= j <= len(arr) - 1`
显然，`sum(arr) <= 0`时，所有长度超过`len(arr)`的子数组**不可能**比`formal(i, j)`和`nonformal(i, j)`中的最大子数组大。而当`sum(arr) > 0`时：
* `formal(i, j) + carr(n)`之和可以写成`sum(formal(i, j)) + sum(arr) + r * sum(arr)`
* `nonformal(i, j) + carr(m)`之和可以写成`sum(nonformal(i, j)) + r * sum(arr)`

这里，`0 <= r <= k - 2`。所以问题的关键就在于求出`sum(formal(i, j) + sum(arr)`和`sum(nonformal(i, j)`的最大值，而这个问题恰恰用`carr(2)`的Kadane算法就可以求解。图(iv) 中给出了一些例子。
![Kadane Algo Algorithm & Leetcode 1191 (iv).png](https://pic.leetcode-cn.com/4347257664e4c07fc9c218666362429991edbd70bad047b5b60e74fcddfefdb5-Kadane%20Algo%20Algorithm%20&%20Leetcode%201191%20\(5\)%20\(1\).png)
