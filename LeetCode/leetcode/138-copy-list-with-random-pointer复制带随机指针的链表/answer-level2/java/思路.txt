这道题的思维难点在于拷贝节点的创建顺序。
相信大多数人拿到这道题容易陷入的思维循环是，假如我random指针所指向的节点还没有被创建出来，我该怎么办？
如果此时我创建出来，那么它的前一个节点就不好再通过next找到它。
如果我不创建，我就要先等待next指针创建好它。
思维量慢慢增长。。。。

其实，我们是完全可以做到在链表中随机访问的！
为什么呢？
因为我们有Map这个神器。
我们将原来的链表中的每一个Node都与新链表中的每一个Node以键值对的关系保存下来不就可以了吗？
![image.png](https://pic.leetcode-cn.com/7341d7a42328cf68af1a94e1dba55b8d8addb5244a4421bc7163e4c1263d5fac-image.png)
图中的虚线就是键值对的对应关系。
这样，我们遍历到C时比方说需要回头找到A，那么我们顺着random就找到了A，再通过键值对找到了A'。是不是很容易呢？

那假如说，我们由A开始遍历的时候需要走到C，此时C还没有被创建出来，那我们就创建C。并且添加键值对C-C'。
这样等我们遍历到B的时候就饿可以轻松找到C'了。

