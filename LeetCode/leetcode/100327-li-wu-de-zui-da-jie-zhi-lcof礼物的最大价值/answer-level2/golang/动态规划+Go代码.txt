[leetcode-golang](https://github.com/laijinhang/leetcode-golang)

### 解题思路
![1.PNG](https://pic.leetcode-cn.com/c9ee61a8d544db8c40477f3dc9e864ecddb7dfb2446f0531609dd857e0bbc72e-1.PNG)

设(i,j)位置能拿到的最多价值为maxVal[i][j]，因为每次只能向右或向下移动一格
1. maxVal[i][j] = max(maxVal[i-1][j], maxVal[i][j-1])

排除 i-1, j-1 越界的情况

### 代码

```golang
func maxValue(grid [][]int) int {
    maxVal := make([][]int, len(grid))
    for i := 0;i < len(grid);i++ {
        maxVal[i] = make([]int, len(grid))
    }
    copy(maxVal, grid)

    for i := 0;i < len(maxVal);i++ {
        max := 0
        for j := 0;j < len(maxVal[i]);j++ {
            // 上面
            if i - 1 >= 0 && max < maxVal[i-1][j] {
                max = maxVal[i-1][j]
            }
            // 左边
            if j - 1 >= 0 && max < maxVal[i][j-1] {
                max = maxVal[i][j-1]
            }

            maxVal[i][j] += max
        }
    }

    i1, i2 := len(maxVal) - 1, len(maxVal[0]) - 1
    return maxVal[i1][i2]
}
```