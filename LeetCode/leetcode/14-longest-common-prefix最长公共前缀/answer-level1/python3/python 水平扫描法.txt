
解题思路，很容易想到的是我们将第一个字符串A和第二个字符串B求公共前缀，然后在和第三个字符串C求公共前缀，最终得到最长公共前缀。解题重点是求两个字符串求公共前缀。比较常见的想法是如果这两个字符串的第一个字符相同则记录第一个字符，第二个相同则增加第二个，直到出现不同的字符串。但是在这个思路上有一个难点，我们在和C串求前缀的时候，会重新从第一个字符开始记录，增加不必要的计算。第二个思路就是将A串作为前缀，如果与B串前面字符不同，则去掉最后一个字符重新和B串匹配，直到字符完全匹配B串，在python中，s = s[:-1]很容易去掉最后一个字符。实现如下：
```
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if len(strs) == 0:
            return ''
        s = strs[0]
        for i in range(1, len(strs)):
            while strs[i].find(s) != 0 :
                s = s[:-1]
        return s

```
其实第一个思路逐步增加字符直到不匹配的思路也是可以的。我们取所有字符串的第一个字set，如果出现的长度是1则表示全部相同，增加，直到出现不同或是取到字符串尾部（这里判断比较麻烦，可以先去所有字符串的最小串长度，用这个作为临界点）