
![image.png](https://pic.leetcode-cn.com/79d70c5058c3d61d3d1d1edd333f181828e1f2aed9d77dd6cd2b8bd39ac56b6c-image.png)

题解中有很多大佬研究怎么优化计算权重的问题，但是却很少研究算完权重之后找第K个的问题
几乎都是直接排序，其实没有必要排序。
思路如下，list_point数组的下标对应权重step，所以算完权重之后直接去list_point[step]里面找到对应的list
list中的head指向的是第一个权重为step的数，也是最小的数，pos指向最后一个权重为step的数
src_num的下标就是是1~1000的数，里面的内容指向下一个相同权重的数。
例如假设2，4，6的权重都是2，那么整个结构如下图：




![image.png](https://pic.leetcode-cn.com/337799f5ea2e40545639995d02e18a81ac3abee592aedf4d70aaba8b37440b8d-image.png)



最后根据list中记录的size可以知道第K个落在哪个list中，再根据list的head一个一个往后找就行了

```
typedef struct {
	unsigned short head;
	unsigned short pos;
	unsigned short size;
} LIST;
unsigned int get_step_num(unsigned int num)
{
	unsigned int step = 0;
	while (num != 1) {
		if (num & 0x01) {
			num = num * 3 + 1;
		}
		else {
			num = num >> 1;
		}
		step++;
	}
	return step;
}
int getKth(int lo, int hi, int k) {
	int i = 0, tail = 0, num;
	unsigned int step = 0;
	int src_num[1001];
	int list_point[179];//最大权重为178
	LIST list[179];//最大权重为178
	memset(list_point, 0xFF, sizeof(list_point));

	for (i = lo; i <= hi; i++) {
		step = get_step_num(i);
		if (list_point[step] == 0xFFFFFFFF) {
			list_point[step] = tail;
			list[tail].head = i;
			list[tail].pos = i;
			list[tail].size = 1;
			tail++;
		}
		else {
			list[list_point[step]].size++;
			src_num[list[list_point[step]].pos] = i;
			list[list_point[step]].pos = i;
		}
	}
	i = 0;
	step = 0;
	while (1) {
		if (list_point[step] == 0xFFFFFFFF) {
			step++;
			continue;
		}
		if (i + list[list_point[step]].size >= k)break;
		i += list[list_point[step]].size;
		step++;
	}
	i = k - i - 1;
	num = list[list_point[step]].head;
	while (i > 0) {
		num = src_num[num];
		i--;
	}
	return num;
}
```
