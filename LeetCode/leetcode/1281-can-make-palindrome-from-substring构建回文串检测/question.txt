can-make-palindrome-from-substring
给你一个字符串<code>s</code>，请你对<code>s</code>的子串进行检测。

每次检测，待检子串都可以表示为<code>queries[i] = [left, right, k]</code>。我们可以 <strong>重新排列</strong> 子串<code>s[left], ..., s[right]</code>，并从中选择 <strong>最多</strong> <code>k</code>项替换成任何小写英文字母。

如果在上述检测过程中，子串可以变成回文形式的字符串，那么检测结果为<code>true</code>，否则结果为<code>false</code>。

返回答案数组<code>answer[]</code>，其中<code>answer[i]</code>是第<code>i</code>个待检子串<code>queries[i]</code>的检测结果。

注意：在替换时，子串中的每个字母都必须作为 <strong>独立的</strong> 项进行计数，也就是说，如果<code>s[left..right] = &quot;aaa&quot;</code>且<code>k = 2</code>，我们只能替换其中的两个字母。（另外，任何检测都不会修改原始字符串 <code>s</code>，可以认为每次检测都是独立的）



<strong>示例：</strong>

<pre><strong>输入：</strong>s = &quot;abcda&quot;, queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
<strong>输出：</strong>[true,false,false,true,true]
<strong>解释：</strong>
queries[0] : 子串 = &quot;d&quot;，回文。
queries[1] :子串 = &quot;bc&quot;，不是回文。
queries[2] :子串 = &quot;abcd&quot;，只替换 1 个字符是变不成回文串的。
queries[3] :子串 = &quot;abcd&quot;，可以变成回文的 &quot;abba&quot;。 也可以变成 &quot;baab&quot;，先重新排序变成 &quot;bacd&quot;，然后把 &quot;cd&quot; 替换为 &quot;ab&quot;。
queries[4] :子串 = &quot;abcda&quot;，可以变成回文的 &quot;abcba&quot;。
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= s.length,queries.length&lt;= 10^5</code>
	<code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt;s.length</code>
	<code>0 &lt;= queries[i][2] &lt;= s.length</code>
	<code>s</code> 中只有小写英文字母
</ul>

构建回文串检测
Given a string <code>s</code>, we make queries on substrings of <code>s</code>.

For each query <code>queries[i] = [left, right, k]</code>, we may <strong>rearrange</strong>the substring <code>s[left], ..., s[right]</code>, and then choose <strong>up to</strong> <code>k</code> of them to replace with any lowercase English letter.

If the substringis possible to be apalindrome string after the operations above, the result of the query is <code>true</code>.Otherwise, the resultis <code>false</code>.

Return an array <code>answer[]</code>, where <code>answer[i]</code> is the result of the <code>i</code>-th query <code>queries[i]</code>.

Note that: Each letter is counted <strong>individually</strong> for replacement soif for example<code>s[left..right] = &quot;aaa&quot;</code>, and <code>k = 2</code>, we can only replace two of the letters. (Also, note that the initial string <code>s</code>is never modified by any query.)


<strong>Example :</strong>

<pre>
<strong>Input:</strong> s = &quot;abcda&quot;, queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
<strong>Output:</strong> [true,false,false,true,true]
<strong>Explanation:</strong>
queries[0] : substring = &quot;d&quot;, is palidrome.
queries[1] :substring = &quot;bc&quot;, is not palidrome.
queries[2] :substring = &quot;abcd&quot;, is not palidrome after replacing only 1 character.
queries[3] :substring = &quot;abcd&quot;, could be changed to &quot;abba&quot; which is palidrome. Also this can be changed to &quot;baab&quot; first rearrange it &quot;bacd&quot; then replace &quot;cd&quot; with &quot;ab&quot;.
queries[4] :substring = &quot;abcda&quot;,could be changed to &quot;abcba&quot; which is palidrome.
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= s.length,queries.length&lt;= 10^5</code>
	<code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt;s.length</code>
	<code>0 &lt;= queries[i][2] &lt;= s.length</code>
	<code>s</code> only contains lowercase English letters.
</ul>
