three-in-one-lcci
三合一。描述如何只用一个数组来实现三个栈。

你应该实现<code>push(stackNum, value)</code>、<code>pop(stackNum)</code>、<code>isEmpty(stackNum)</code>、<code>peek(stackNum)</code>方法。<code>stackNum</code>表示栈下标，<code>value</code>表示压入的值。

构造函数会传入一个<code>stackSize</code>参数，代表每个栈的大小。

<strong>示例1:</strong>

<pre><strong> 输入</strong>：
[&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;isEmpty&quot;]
[[1], [0, 1], [0, 2], [0], [0], [0], [0]]
<strong> 输出</strong>：
[null, null, null, 1, -1, -1, true]
<strong>说明</strong>：当栈为空时`pop, peek`返回-1，当栈满时`push`不压入元素。
</pre>

<strong>示例2:</strong>

<pre><strong> 输入</strong>：
[&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;peek&quot;]
[[2], [0, 1], [0, 2], [0, 3], [0], [0], [0], [0]]
<strong> 输出</strong>：
[null, null, null, null, 2, 1, -1, -1]
</pre>

三合一
Describe how you could use a single array to implement three stacks.

Yout should implement<code>push(stackNum, value)</code>、<code>pop(stackNum)</code>、<code>isEmpty(stackNum)</code>、<code>peek(stackNum)</code>methods.<code>stackNum<font face="sans-serif, Arial, Verdana, Trebuchet MS"></font></code><font face="sans-serif, Arial, Verdana, Trebuchet MS">is the index of the stack.</font><code>value</code>is the value that pushed to the stack.

The constructor requires a<code>stackSize</code>parameter, which represents the size of each stack.

<strong>Example1:</strong>

<pre>
<strong> Input</strong>: 
[&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;isEmpty&quot;]
[[1], [0, 1], [0, 2], [0], [0], [0], [0]]
<strong> Output</strong>: 
[null, null, null, 1, -1, -1, true]
<b>Explanation</b>: When the stack is empty, `pop, peek` return -1. When the stack is full, `push` does nothing.
</pre>

<strong>Example2:</strong>

<pre>
<strong> Input</strong>: 
[&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;peek&quot;]
[[2], [0, 1], [0, 2], [0, 3], [0], [0], [0], [0]]
<strong> Output</strong>: 
[null, null, null, null, 2, 1, -1, -1]
</pre>
