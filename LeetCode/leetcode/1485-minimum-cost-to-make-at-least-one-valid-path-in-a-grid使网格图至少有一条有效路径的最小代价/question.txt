minimum-cost-to-make-at-least-one-valid-path-in-a-grid
给你一个 m x n 的网格图<code>grid</code>。<code>grid</code>中每个格子都有一个数字，对应着从该格子出发下一步走的方向。<code>grid[i][j]</code>中的数字可能为以下几种情况：

<ul>
	<strong>1</strong>，下一步往右走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i][j + 1]</code>
	<strong>2</strong>，下一步往左走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i][j - 1]</code>
	<strong>3</strong>，下一步往下走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i + 1][j]</code>
	<strong>4</strong>，下一步往上走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i - 1][j]</code>
</ul>

注意网格图中可能会有<strong>无效数字</strong>，因为它们可能指向<code>grid</code>以外的区域。

一开始，你会从最左上角的格子<code>(0,0)</code>出发。我们定义一条<strong>有效路径</strong>为从格子<code>(0,0)</code>出发，每一步都顺着数字对应方向走，最终在最右下角的格子<code>(m - 1, n - 1)</code>结束的路径。有效路径<strong>不需要是最短路径</strong>。

你可以花费<code>cost = 1</code>的代价修改一个格子中的数字，但每个格子中的数字<strong>只能修改一次</strong>。

请你返回让网格图至少有一条有效路径的最小代价。



<strong>示例 1：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/grid1.png" style="height: 528px; width: 542px;">

<pre><strong>输入：</strong>grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
<strong>输出：</strong>3
<strong>解释：</strong>你将从点 (0, 0) 出发。
到达 (3, 3) 的路径为： (0, 0) --&gt; (0, 1) --&gt; (0, 2) --&gt; (0, 3) 花费代价 cost = 1 使方向向下 --&gt; (1, 3) --&gt; (1, 2) --&gt; (1, 1) --&gt; (1, 0) 花费代价 cost = 1 使方向向下 --&gt; (2, 0) --&gt; (2, 1) --&gt; (2, 2) --&gt; (2, 3) 花费代价 cost = 1 使方向向下 --&gt; (3, 3)
总花费为 cost = 3.
</pre>

<strong>示例 2：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/grid2.png" style="height: 408px; width: 419px;">

<pre><strong>输入：</strong>grid = [[1,1,3],[3,2,2],[1,1,4]]
<strong>输出：</strong>0
<strong>解释：</strong>不修改任何数字你就可以从 (0, 0) 到达 (2, 2) 。
</pre>

<strong>示例 3：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/grid3.png" style="height: 302px; width: 314px;">

<pre><strong>输入：</strong>grid = [[1,2],[4,3]]
<strong>输出：</strong>1
</pre>

<strong>示例 4：</strong>

<pre><strong>输入：</strong>grid = [[2,2,2],[2,2,2]]
<strong>输出：</strong>3
</pre>

<strong>示例 5：</strong>

<pre><strong>输入：</strong>grid = [[4]]
<strong>输出：</strong>0
</pre>



<strong>提示：</strong>

<ul>
	<code>m == grid.length</code>
	<code>n == grid[i].length</code>
	<code>1 &lt;= m, n &lt;= 100</code>
</ul>

使网格图至少有一条有效路径的最小代价
Given a <em>m</em> x <em>n</em> <code>grid</code>. Each cell of the <code>grid</code> has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of <code>grid[i][j]</code> can be:
<ul>
	<strong>1</strong> which means go to the cell to the right. (i.e go from <code>grid[i][j]</code> to <code>grid[i][j + 1]</code>)
	<strong>2</strong> which means go to the cell to the left. (i.e go from <code>grid[i][j]</code> to <code>grid[i][j - 1]</code>)
	<strong>3</strong> which means go to the lower cell. (i.e go from <code>grid[i][j]</code> to <code>grid[i + 1][j]</code>)
	<strong>4</strong> which means go to the upper cell. (i.e go from <code>grid[i][j]</code> to <code>grid[i - 1][j]</code>)
</ul>

Noticethat there could be some <strong>invalid signs</strong> on the cells of the <code>grid</code> which points outside the <code>grid</code>.

You will initially start at the upper left cell <code>(0,0)</code>. A valid path in the grid is a path which starts from the upper leftcell <code>(0,0)</code> and ends at the bottom-rightcell <code>(m - 1, n - 1)</code> following the signs on the grid. The valid path <strong>doesn&#39;t have to be the shortest</strong>.

You can modify the sign on a cell with <code>cost = 1</code>. You can modify the sign on a cell <strong>one time only</strong>.

Return <em>the minimum cost</em> to make the grid have at least one valid path.


<strong>Example 1:</strong>
<img alt="" src="https://assets.leetcode.com/uploads/2020/02/13/grid1.png" style="width: 542px; height: 528px;" />
<pre>
<strong>Input:</strong> grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
<strong>Output:</strong> 3
<strong>Explanation:</strong> You will start at point (0, 0).
The path to (3, 3) is as follows. (0, 0) --&gt; (0, 1) --&gt; (0, 2) --&gt; (0, 3) change the arrow to down with cost = 1 --&gt; (1, 3) --&gt; (1, 2) --&gt; (1, 1) --&gt; (1, 0) change the arrow to down with cost = 1 --&gt; (2, 0) --&gt; (2, 1) --&gt; (2, 2) --&gt; (2, 3) change the arrow to down with cost = 1 --&gt; (3, 3)
The total cost = 3.
</pre>

<strong>Example 2:</strong>
<img alt="" src="https://assets.leetcode.com/uploads/2020/02/13/grid2.png" style="width: 419px; height: 408px;" />
<pre>
<strong>Input:</strong> grid = [[1,1,3],[3,2,2],[1,1,4]]
<strong>Output:</strong> 0
<strong>Explanation:</strong> You can follow the path from (0, 0) to (2, 2).
</pre>

<strong>Example 3:</strong>
<img alt="" src="https://assets.leetcode.com/uploads/2020/02/13/grid3.png" style="width: 314px; height: 302px;" />
<pre>
<strong>Input:</strong> grid = [[1,2],[4,3]]
<strong>Output:</strong> 1
</pre>

<strong>Example 4:</strong>

<pre>
<strong>Input:</strong> grid = [[2,2,2],[2,2,2]]
<strong>Output:</strong> 3
</pre>

<strong>Example 5:</strong>

<pre>
<strong>Input:</strong> grid = [[4]]
<strong>Output:</strong> 0
</pre>


<strong>Constraints:</strong>

<ul>
	<code>m == grid.length</code>
	<code>n == grid[i].length</code>
	<code>1 &lt;= m, n &lt;= 100</code>
</ul>
