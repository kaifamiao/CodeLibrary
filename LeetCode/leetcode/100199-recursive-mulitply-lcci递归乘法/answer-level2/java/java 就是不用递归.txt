### 思路
1. 首先，求得A和B的最小值和最大值;
2. 然后，可以对其中的最小值当做乘数（为什么选最小值，因为选最小值当乘数，可以算的少），将其拆分成2的幂的和，即$min = a_0 * 2^0 + a_1 * 2^1 + ... + a_i * 2^i + ...$ ，其中$a_i$取0或者1。其实就是用二进制的视角去看待min，比如12用二进制标识就是1100，即1000+0100。举个例子，13 * 12 = 13 * (8 + 4) = 13  * 8 + 13 * 4 = (13 << 3) + (13 << 2); 具体详见如下代码：

```java
    public int multiply(int A, int B) {
        int min = Math.min(A, B);
        int max = Math.max(A, B);

        if (min == 0) {
            return 0;
        }

        int ans = 0;

        for (int i = 0; min != 0; i++) {
            if ((min & 1) == 1) {
                ans += max << i;
            }
            min >>= 1;
        }

        return ans;
    }
```

### 复杂度分析
- 时间复杂度：O(logn)，n 不会超过65536。
- 空间复杂度：O(1)。