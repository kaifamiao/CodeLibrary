closest-binary-search-tree-value-ii
给定一个不为空的二叉搜索树和一个目标值 target，请在该二叉搜索树中找到最接近目标值 target 的 k 个值。

<strong>注意：</strong>

<ul>
	给定的目标值 target 是一个浮点数
	你可以默认 k 值永远是有效的，即 k &le; 总结点数
	题目保证该二叉搜索树中只会存在一种k 个值集合最接近目标值
</ul>

<strong>示例：</strong>

<pre><strong>输入:</strong> root = [4,2,5,1,3]，目标值 = 3.714286，且 <em>k</em> = 2

    4
   / \
  2   5
 / \
1   3

<strong>输出:</strong> [4,3]</pre>

<strong>拓展：</strong><br>
假设该二叉搜索树是平衡的，请问您是否能在小于<em>O</em>(<em>n</em>)（n 为总结点数）的时间复杂度内解决该问题呢？

最接近的二叉搜索树值 II
Given a non-empty binary search tree and a target value, find <i>k</i> values in the BST that are closest to the target.

<b>Note:</b>

<ul>
	Given target value is a floating point.
	You may assume <i>k</i> is always valid, that is: <i>k</i> &le; total nodes.
	You are guaranteed to have only one unique set of <i>k</i> values in the BST that are closest to the target.
</ul>

<strong>Example:</strong>

<pre>
<strong>Input:</strong> root = [4,2,5,1,3], target = 3.714286, and <em>k</em> = 2

    4
   / \
  2   5
 / \
1   3

<strong>Output:</strong> [4,3]</pre>

<b>Follow up:</b><br />
Assume that the BST is balanced, could you solve it in less than <i>O</i>(<i>n</i>) runtime (where <i>n</i> = total nodes)?
