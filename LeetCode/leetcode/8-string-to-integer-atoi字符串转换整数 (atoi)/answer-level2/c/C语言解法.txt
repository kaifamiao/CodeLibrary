### 解题思路
此处撰写解题思路
![ppp.png](https://pic.leetcode-cn.com/df4780254081f34273d1d2d1fbec346bd4d1a731f0b684ae6be0010c19bb03d2-ppp.png)

一、先讲清楚题目的要求，以及力扣平台测试用例的规则
    1. 开头可以有无数个空格。    
    2. 一旦碰到正负号或者数字，之后必须保持连续，不能再有空格出现，否则舍弃后边。
    3. 正负号只能出现一次，不能嵌套。比如 -+2，这是错误的。
    4. 可以以0开头，可以有无数个0，虽然这不合常理，但是这是力扣平台的测试规则，
       但是输出的时候，注意舍掉前边的0。
    5. 还要有溢出判断。
二、做法思路
    1. 开头的空格，我们可以直接continue 跳过。接下来判断一次正负号，如果是负号要标记下来。
    2. 接下来如果不是数字，直接返回0。如果是数字，接下来就必须连续了。我们要记录下连续数字的长度，
       我用len来记录，还要记录下数字序列的起始位置，我用start记录。
    3. 接下来就计算数字大小就好了。注意一点，取出的是字符，要转换一下。
    4. 关于溢出的判断，我觉得不能计算出最终结果再和INT_MAX比大小，这么做是错的。
       因为最终结果可能已经溢出了，等不到你进行判断。我建议大家看看力扣的第 7 题，整数反转！
       在结果到达最大位数的前一步判断，这才是万无一失的。

### 代码

```c
int myAtoi(char * str)
{
    int flag = 0;       //  正负标记位
    for (int i = 0; str[i] != '\0'; i++)
    {
        if (str[i] == ' ')      
        {
            continue;           //先过滤开头的空格
        }
        if (str[i] == '-' || str[i] == '+')
        {
            if (str[i] == '-')
            {
                flag = 1;
            }
            i++;
        }
        int len = 0, start = 0;  //记录数字序列的起始位置和连续长度
        for (start = i;(str[i] >= '0' && str[i] <= '9') && str[i] != '\0'; i++)
        {
            len++;          //记录连续数字长度
        }
        if (!len)
        {
            return 0;        //数字长度为0，就说明第一个碰到的不是数字，返回0
        }
        int temp = 0;
        for (int j = start; len > 0; j++, len--)
        {
        /*    if (str[start] == '0' && len > 1)
            {
                return 0;        //首位为0，不能转换
            }     */             //这段我注释掉了，因为力扣测试首位可以为0
            if (temp > INT_MAX / 10 || (temp == INT_MAX / 10 && (int)(str[j] - '0') > 7))
            {
                return INT_MAX;    //这里的溢出判断参考力扣第7题
            }
            if (temp < INT_MIN / 10 || (temp == INT_MIN / 10 && ~(int)(str[j] - '0') + 1 < -8))
            {
                return INT_MIN;
            }
            if(flag)        //一个数取相反数的办法是按位取反 + 1
            {
                temp = ~(int)(str[j] - '0') + 1 + temp * 10;
            }
            else
            {
                temp = (int)(str[j] - '0') + temp * 10;
            }
        }
        return temp;
    }
    return 0;
}

```