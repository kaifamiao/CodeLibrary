## 题解
这道题的难点在于要考虑到各种边界问题，一不留神少了一步判断可能执行就报错了。  
根据题目描述，可能会出现各种输入条件，比如：   
- ```"   123"```
- ```"  -345 "```
- ```"  -+7890"```
- ```"11223344556677889900"```
- ```"  -112233.44.55aabb"```
- 等等...

我们总结一下，字符串可能包含下面三种类型:   
![1.jpg](https://pic.leetcode-cn.com/6986c017d5407b2bf99f56d2108a0d80bbeb6a90d3a5c8faabbcbbcf04d4130a-1.jpg)
紫色的第一部分是空格，在转换的时候需要过滤掉  
黄色的部分是正负号，如果是正号则忽略，是负号则需要记录这个正负号状态   
蓝色是第三部分，这部分字符串中会包含任意字符，但我们只需要```"0"```到```"9"```这几个字符      
   
蓝色部分可能包含如下内容:    
![2.jpg](https://pic.leetcode-cn.com/717715827c81f5522d58ff53a831cebe1c860c96f9421c6e7896d91e009765a2-2.jpg)
此外，对于```11223344556677889900```这样的字符串，明显是超长了，所以当字符串大于```最大的32位整数```，或者小于```最小的32位整数```，后面就不用判断了。   
题目要求是只能存储```32```位大小的有符号整数，所以不能用long做存储，而且需要提前判断整数的大小。  
![3.jpg](https://pic.leetcode-cn.com/bb679a4eee8301705200491a5ee0fb9364347be263dc5c63bdf5de18c3a2aa02-3.jpg)
上图绿色的是```最大的32位整数```，三个蓝色的数组代表三种不同的输入。   
如果是第一种```2147483650```，这个值本身就比```最大32位整数```要大了，存到int里面就溢出了，所以提前一位判断，也就是到黄色格子那一位的时候就要判断了。
第一种情况```当前的值```大于```214748364```直接返回最大值即可。   
对于第二种、第三种情况，如果```当的值```等于```214748364```，即前面若干位都一样，再单端判断最后一位，也就是橙色格子那一位。如果最后一位大于等于```7```，同样也是直接返回最大值。   

对于负数也是类似的判断方式:   
![4.jpg](https://pic.leetcode-cn.com/f93e8525808a7dc9b4ee75b09959937cc20ade9d4f97cf4149eec5a7b7852350-4.jpg)
如果```当前值```小于```-214748364```，直接返回最小值即可。   
如果```当前值```等于```-214748364```，再判断最后一位，如果大于等于```8```，返回最小值。   
   
总结一下整个执行流程:
1. 过滤掉前面若干个空格(如果有的话)
2. 判断正号、负号位，如果是负号则记录下状态，表示输入的是负数。   
3. 循环判断后面的字符串是否是```0```到```9```，如果是则累加这个值    
4. 当前的值跟最大、最小32位整数比较看是否溢出
  - 如果是正数，且大于```214748364```，直接返回最大值
  - 如果是正数，且等于```214748364```，再判断最后一位是否大于```7```
  - 如果是负数，且小于```-214748364```，直接返回最小值
  - 如果是负数，且等于```-214748364```，再判断最后一位是否大于```8```
5. 循环结束后，根据负号的标志位返回对应的正数或负数   



代码实现:
```java []
class Solution {
	public int myAtoi(String str) {
		if(str==null) {
			return 0;
		}
		int n = str.length();
		int i = 0;
		int res = 0;
		boolean is_negative = false;
		//第一步，跳过前面若干个空格
		while(i<n && str.charAt(i)==' ') {
			++i;
		}
		//如果字符串全是空格直接返回
		if(i==n) {
			return 0;
		}
		//第二步，判断正负号
		if(str.charAt(i)=='-') {
			is_negative = true;
		}
		//如果是正负号，还需要将指针i，跳过一位
		if(str.charAt(i)=='-' || str.charAt(i)=='+') {
			++i;
		}
		//第三步，循环判断字符是否在 0~9之间
		while(i<n && str.charAt(i)>='0' && str.charAt(i)<='9') {
			//'0'的ASCII码是48，'1'的是49，这么一减就从就可以得到真正的整数值
			int tmp = str.charAt(i)-48;
			//判断是否大于 最大32位整数
			if(!is_negative &&(res>214748364 ||(res==214748364 && tmp>=7))) {
				return 2147483647;
			}
			//判断是否小于 最小32位整数
			if(is_negative &&(-res<-214748364 || (-res==-214748364 && tmp>=8))) {
				return -2147483648;
			}
			res = res*10 + tmp;
			++i;
		}
		//如果有负号标记则返回负数
		if(is_negative) {
			return -res;
		}
		return res;
	}
}
```
```python []
class Solution(object):
	def myAtoi(self, str):
		if not str:
			return 0
		n = len(str)
		res = 0
		i = 0
		# 第一步，跳过前面若干个空格
		while i<n and str[i]==' ':
			i += 1
		# 如果字符串全是空格直接返回	
		if i==n:
			return 0
		# 第二步，判断正负号	
		is_negative = True if str[i]=='-' else False
		# 如果是正负号，还需要将指针i，跳过一位
		if str[i] in ('-','+'):
			i += 1
		# 第三步，循环判断字符是否在 0~9之间	
		while i<n and str[i]>='0' and str[i]<='9':
			# '0'的ASCII码是48，'1'的是49，这么一减就从就可以得到真正的整数值
			tmp = ord(str[i])-ord('0')
			# 判断是否大于 最大32位整数
			if not is_negative and (res>214748364 or (res==214748364 and tmp>=7)):
				return 2147483647
			# 判断是否小于 最小32位整数	
			if is_negative and (-res<-214748364 or (-res==-214748364 and tmp>=8)):
				return -2147483648	
			res = res*10 + tmp
			i += 1
		# 如果有负号标记则返回负数	
		return -res if is_negative else res
```
(全文完)

**如果你觉得本文对你有帮助，欢迎关注我的公众号。**
   
![ban.png](https://pic.leetcode-cn.com/6b52b8de211ec9b634d7aaf6ccf2d9149160ca3b67ea0742c57f622f1c54e47d-ban.png)