
### 思路

- 标签：`数学`、`二分查找`
- 要求 x 的平方根，那么从平方根反推 x，可以得到这样的规则：如果 `n^2 <= x && (n+1)^2 > x` 那么 n 就是平方根，比如 x = 100，只有 n = 10 满足这个规则，`10*10<=100 && 11*11>100`
- 找到了规则，就需要来找符合规则的 n，我们可以一一遍历，但这样时间复杂度太高，可以用二分查找，提高效率。那么如何用二分查找？
- 下面这样用：

```
                             当：x = 100
n = 50   大，pass                                  n = 50, m = 100
n = 25   大，pass         需要一个 m 来记录「12」     n = 25, m = 50
n = 12   大，pass           ============>          n = 12, m = 25
n = 6    小，pass                                  n = 6,  m = 12
n = 9 = (6+12)/2   小，pass                        n = (n+m)/2 = 9,  m = 12
n = 10 = (9+12)/2  ✅                             n = (n+m)/2 = 10, ✅   
```

- 时间复杂度：O(log₂N)， 等于二分查找的复杂度
- 空间复杂度：O(1)，没有使用多余的空间

二分查找：

- 查找有序序列是否包含某一个数
- 应用：数据库 `select * from table where id = 1`
- 最差时间复杂度：查找任意一个数，最多需要多少次

```
100 查 1：50 25 12 6 3 1
6 步: 2^6 = 64 ≈ 100/2

1000 查 1：500 250 125 62 31 15 7 3 1   
9 步: 2^9 = 512 ≈ 1000/2  | 9 ≈ log₂(1000/2)  
时间复杂度: O(log₂(N/2)) = O(log₂N)
```

时间复杂度：随着基数（n）的增加，运行时间（比较次数）的增长速率

### 代码

```python
## Python3 
class Solution:
    def mySqrt(self, x: int) -> int:
        if x <= 1:
            return x
        return self.helper(int(x/2), x, x)
    def helper(self, n: int, m: int, x: int) -> int:
        if n * n <= x and (n+1) * (n+1) > x:
            return n
        elif n * n > x:
            return self.helper(int(n/2), n, x)
        elif n * n < x:
            return self.helper(int((n+m)/2), m, x)
```