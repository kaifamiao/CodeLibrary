牛顿法固然牛逼，从数学上减少了迭代，但没有考虑计算量。
牛顿法需要计算切线和坐标轴的交点，这个地方的运算量已经抵得上一次普通二分了。
实际操作后，运算时间和原来都是7ms(JAVA)

这里采用一种底层优化计算的方法，可以达到5ms。下面是普通的二分搜索，计算量基本都在m\*m这一步（乘法耗时远高于加减法）。
我们这里取r的上限为2^16，这是本解答的特别之处。可见，在整个二分过程中，m通常也是2的幂次或者是几个2的幂次组合。
反映到2进制上，m只有几位上是1。这样在m*m的计算中，要计算的位数就比较少，会很快。从底层优化了运算。
```java
class Solution {
    public int mySqrt(int x) {
        int l = 0;
        int r = 1 << 16; // 特别之处
        while (l < r-1) {
            int m = (l+r)/2;
            if ((long)m*m <= x)
                l = m;
            else
                r = m;
        }
        return l;
    }
}
```

算法不只是数学问题，还是工程问题。要综合考虑，提高运算速度。