- 朴素想法：维护一个可行的单词列表，每次从可行单词中猜一个，通过距离排除部分可行单词，缩小可行单词列表。
- 但是这样可能会使得猜测次数比较多，所以需要有个保底的优化策略：
1. 对每个可行单词word，计算其他可行单词与其距离（0-6），保存在数组dis中。
2. 如果选择word进行猜测，猜测后剩余可行单词数量就是与word特定距离(猜测返回值)的可行单词数量dis[master.guess(word)],剩余单词的上限为max(dis)，这是最差情况。
3. 每个可行单词都有一个dis，我们的策略就是：每次猜的单词都是哪个max(dis)最小的可行单词，这样令每次猜测剩余单词上界最小。
4. 小结：每次猜测分三步：选择猜哪个单词+进行猜测+维护可行单词列表
```
class Solution:
    def findSecretWord(self, wordlist, master):
        def distance(x,y):
            ans = 0
            for i in range(6):
                if x[i] == y[i]:
                    ans += 1
            return ans
        """
        :type wordlist: List[Str]
        :type master: Master
        :rtype: None
        """
        dp = [0] * len(wordlist) #记录是否被排除
        for g in range(10):
            #寻找下一个猜测单词
            candidate = 0
            vote = float('inf')
            for i in range(len(wordlist)):
                if dp[i] == 0:
                    dis = [0] * 7
                    for j in range(len(wordlist)):
                        if j != i and dp[j] == 0:
                            dis[distance(wordlist[i],wordlist[j])] += 1
                    if max(dis) < vote:
                        candidate = i
                        vote = max(dis)
            #猜测
            dp[candidate] = 1
            tmp = master.guess(wordlist[candidate])
            #排除不可能的单词
            for i in range(len(wordlist)):
                if dp[i] == 0 and distance(wordlist[candidate],wordlist[i]) != tmp:
                    dp[i] = 1
```
