### 解题思路
顺着题意，按理用dp可以直接解决，但会挂在几个特别大的用例上，所以采取先将数据缩小的方法
1.偶数就直接等于偶数的一半+1次，这个应该没有问题，重点是奇数
2.由于奇数可能+1是最小次数，也有可能-1是最小次数，所以我们可以考虑直接将奇数分为两部分，其中一部分会比另一部分多1，比如：19，分为10和9
那么，从19要经过多少次变成10或者9呢，肯定是两次，+1或者-1，然后除以2，所以可以将奇数的次数转为min(n/2, n-n/2)的次数再+2

### 代码

```java
class Solution {
    public int integerReplacement(int n) {
        if(n <= 1){
            return 0;
        }
        //为偶数时
        if((n & 1) == 0){
            return integerReplacement(n/2) + 1;
        }else{
            //为基数时，肯定要+1或者-1，然后再/2，再去求剩下的数，由此可以得出基数的最小次数，等于基数的一半和一半加1两个数中的最小次数加2
            return Math.min(integerReplacement(n/2), integerReplacement(n - n/2)) + 2;
        }
    }
}
```