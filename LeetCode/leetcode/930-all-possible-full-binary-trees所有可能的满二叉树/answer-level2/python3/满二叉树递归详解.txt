### 思路

如果你要构造一颗有 N 个节点的二叉树，你会怎么做？

首先，你肯定会先 new 一个根结点~~对象~~ `root`，然后为它构造左子树，再为它构造右子树。

那么对它的左子树 `root.left` 而言，它同样需要构造左子树和右子树。右子树 `root.right` 亦然。

因此，**你的所有子树都是一棵满二叉树**。

「给你一个整数 `N`，构造出一棵包含 `N` 个节点的满二叉树」。**这句话是题目本身，也是无数个被拆分出的子问题。**

### 满二叉树如何构造？

> 满二叉树是一类二叉树，其中每个结点恰好有 0 或 2 个子结点。

如果你要为某节点分配一个左节点，那么一定也要为它分配一个右节点。因此，如果 `N` 为偶数，那一定无法构成一棵满二叉树。

为了列出所有满二叉树的排列，我们可以为左子树分配 `x` 节点，为右子树分配 `N - 1 - x`（其中减 1 减去的是根节点）节点，然后**递归**地构造左右子树。

`x` 的数目从 1 开始，每次循环递增数目 2（多增加 2 个节点，等于多增加 1 层）。

### 递归过程

递归最关心的两个问题是：

1. 结束条件
2. 自身调用

对于这个问题来说，结束条件为：

1. 当 `N` 为偶数时：无法构造满二叉树，返回空数组
2. 当 `N == 1` 时：树只有一个节点，直接返回包含这个节点的数组
3. 当完成 `N` 个节点满二叉树构造时：返回结果数组

当需要构造左右子树时，就进行自身调用。具体的看代码吧~

### 实现

```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # 子问题：构造一棵满二叉树
    def allPossibleFBT(self, N: int) -> List[TreeNode]:
        res = []
        if N == 1:
            return [TreeNode(0)]
        # 结点个数必须是奇数
        if N % 2 == 0:
            return []
        
        # 左子树分配一个节点
        left_num = 1
        # 右子树可以分配到 N - 1 - 1 = N - 2 个节点
        right_num = N - 2
        
        while right_num > 0:
            # 递归构造左子树
            left_tree = self.allPossibleFBT(left_num)
            # 递归构造右子树
            right_tree = self.allPossibleFBT(right_num)
            # 具体构造过程
            for i in range(len(left_tree)):
                for j in range(len(right_tree)):
                    root = TreeNode(0)
                    root.left = left_tree[i]
                    root.right = right_tree[j]
                    res.append(root)
            left_num += 2
            right_num -= 2
        
        return res     
```