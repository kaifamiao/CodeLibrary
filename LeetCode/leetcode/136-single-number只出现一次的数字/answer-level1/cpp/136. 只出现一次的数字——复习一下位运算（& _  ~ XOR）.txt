### 解题思路

1 位逻辑运算符：

      & （位   “与”）  and
      ^  （位   “异或”）
      |   （位    “或”）   or
      ~  （位   “取反”）
2 移位运算符：
      <<（左移）
      >>（右移）

& 运算   ———————–-2个都为1-》1
0&1 =0;   
0&0 =0;
1&0 =0;
1&1 =1;

| 运算—————————1个为1–》1
0|0=0;   
0|1=1;
1|0=1;
1|1=1;

^ 运算—————————不同则为1，相同则为0 // 当且仅当两个运算值中有一个为1但不同时为1时，返回值为1
0^1=1；
1^0=1；
1^1=0；
0^0=0；

^ 运算—————————不同则为1，相同则为0 // 当且仅当两个运算值中有一个为1但不同时为1时，返回值为1
0^1=1；
1^0=1；
1^1=0；
0^0=0；

~运算
~运算的定义把内存中的0和1全部取反，所以~运算时要格外小心，你需要注意整数类型有没符号，如果~的对象是无符号整数（不能表示负数），那么他的值就是它与它的上界限的之差，因为无符号类型的数是用0000到FFFF依次表示的。

<<运算
a<<b 表示把a转为二进制后左移b位（在后面添加 b个0）。例如100的二进制表示为1100100，100左移2位后（后面加2个零）：1100100<<2 =110010000 =400，可以看出，a<<b的值实际上就是a乘以2的b次方，因为在二进制数后面添加一个0就相当该数乘以2，2个零即2的2次方 等于4。通常认为a<<1比a*2更快，因为前者是更底层一些的操作。因此程序中乘以2的操作尽量用左移一位来代替。
定义一些常量可能会用到<<运算。你可以方便的用1<<16 -1 来表示65535（unsingned int  最大值16位系统）。很多算法和数据结构要求数据模块必须是2的幂，此时就可以用<<来定义MAX_N等常量。

>>运算
和<<相似，a>>b表示二进制右移b位（去掉末b位），相当于a除以2的b次方（取整）。我们经常用>>1来代替 /2（div 2),比如二分查找、堆的插入操作等等。想办法用>>代替除法运算可以使程序的效率大大提高。最大公约数的二进制算法用除以2操作来代替慢的出奇的%（mod）运算，效率可以提高60%。

int a =100;
a/4 ==a>>2;

来自：@Lpy_Now
https://blog.csdn.net/a1351937368/article/details/77746574/

### 代码

```cpp
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res = 0;
        for(auto n:nums){
            res^=n;// 异或 a^0=a;a^a=0
        }
        return res;
    }
};
```