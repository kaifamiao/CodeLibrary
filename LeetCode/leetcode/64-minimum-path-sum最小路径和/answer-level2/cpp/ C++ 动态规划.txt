### 状态转移方程
```
f(0,0) = w[0][0]
f(m,n) = min(f(m-1, n), f(m, n-1)) + w[m][n]
```

### 二维表

```cpp
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid.front().size();

        vector<vector<int>> f(grid);

        for (int i = 1; i < m; i++) {
            f[i][0] += f[i - 1][0];
        }

        for (int j = 1; j < n; j++) {
            f[0][j] += f[0][j - 1];
        }

        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                f[i][j] += min(f[i - 1][j], f[i][j - 1]);
            }
        }

        return f.back().back();
    }
};
```

### 一维表

```cpp
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid.front().size();

        vector<int> f(grid.front());

        for (int j = 1; j < n; j++) {
        	f[j] += f[j - 1];
        }

        for (int i = 1; i < m; i++) {
            f[0] += grid[i][0];
            for (int j = 1; j < n; j++) {
                f[j] = min(f[j - 1], f[j]) + grid[i][j];
            }
        }

        return f.back();
    }
};

```
### 题外话
其实直接在 grid 上进行迭代也是可以的，这样最省空间，但是破坏了实参的数据，这样对吗？看实际情况中实参数据是不是重要的吧。我觉得 leetcode 给的接口模板可以写的更加明确一点。比如:
- `int minPathSum(vector<vector<const int>>& grid);`表示 grid 的数据只读不写
- `int minPathSum(vector<vector<int>>&& grid)`表示 grid 的数据可读可写
