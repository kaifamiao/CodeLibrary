思路比较简单：
1，排序数组
2，从左侧开始翻牌得分
3，一旦能量不够了，就消耗一个积分从最右侧获取能量补给，继续从左侧翻牌得分
```
class Solution {
public:
    int bagOfTokensScore(vector<int>& tokens, int P) {
        if (tokens.empty()) return 0;
        sort(tokens.begin(), tokens.end());
        if (P < tokens[0]) return 0;
        int N = tokens.size();
        int left = 0;
        int right = N - 1;
        int score = 0;
        int res = 0;
        while (left <= right) {
            if (P < tokens[left]) {
                if (score <= 0) return res;
                P += tokens[right];
                --score;
                --right;
            } else {
                P -= tokens[left];
                ++score;
                ++left;
                res = max(res, score);
            }
        }
        return res;
    }
};
```
![image.png](https://pic.leetcode-cn.com/4124b626132411ec47f9a3bc22b7389b4edc46349bbc86ea5b09bbcbf7241e60-image.png)
