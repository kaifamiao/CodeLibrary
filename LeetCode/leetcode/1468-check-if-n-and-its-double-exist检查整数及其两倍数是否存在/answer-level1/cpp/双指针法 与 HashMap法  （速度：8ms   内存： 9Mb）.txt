1.双指针（双角标法）：首先将数组排序，之后遍历数组，数组中正数与负数找2倍数是要区分开的，具体为：

例如：-8  -4  -1  0  1  8  9 


当前遍历到的元素是负数时，双指针l应该是最左侧，因为负数的双倍数需要以左边临界点为起始点，左端为负数的最小值，负数*2是会变小的。
   @1：当前 arr[l] > arr[i]*2 则说明当前l指向元素已经大于元素的双倍数，需要跳出循环，因为已经找不到其对应的双倍数，数组元素从左至右依次变大。
   @2：当前arr[l] < arr[i]*2 则说明l指向元素小，需要向右增大，因此执行 ++l
   @3：若arr[l] =arr[i]*2  返回true

当前遍历到的元素是正数时，双指针r应该是最右侧，因为正数的双倍数需要以右边临界点为起始点，右端为正数的最小值，正数*2是会变大的。
   @1：当前 arr[r] > arr[i]*2 则说明当前r指向元素已经大于元素的双倍数，需要--r，遍历较小的元素。
   @2：当前arr[r] < arr[i]*2 则说明r指向元素小于遍历元素的二倍，向左移动已经不能满足，因此跳出循环。
   @3：若arr[r] =arr[i]*2  返回true


时间复杂度：最坏情况下O（n^2） 稳定在O（n*logn）
空间复杂度：O(1)
```
class Solution {
public:
   bool checkIfExist(vector<int>& arr) {
      sort(arr.begin(),arr.end());
      for (int i = 0; i !=arr.size(); ++i) {
         if(arr.at(i)<0){
            int l=0;
            while(i!=l && arr.at(l)<0){

               if(arr.at(l)<arr.at(i)*2) ++l;
               else if(arr.at(l)>arr.at(i)*2) break;
               else return true;
            }
         } else{
            int r=arr.size()-1;
            while(i!=r){
               if(arr.at(r)>arr.at(i)*2) --r;
               else if(arr.at(r)<arr.at(i)*2) break;
               else return true;
            }
         }
      }
      return false;
   }
};
```





2.Hash记录取值法：

使用Hashmap记录所有的元素，元素作为关键字，值为int，默认为0，记录了即值自加。之后遍历数组元素，map[arr[i]*2] 的值如果为0，即不存在，不等于0即存在，可返回true，遍历数组全部后，如果还没有返回true，即可返回false。

时间复杂度：哈希添加 O(n) ，检索 O（1）
空间复杂度: O(2n)   存储数组元素O（n），搜索时添加了n个数组元素的2倍元素，O（n）

代码：


```
class Solution {
public:
   bool checkIfExist(vector<int>& arr) {
      map<int,int> maps;
      for(decltype(arr.size()) i=0;i!=arr.size();++i)
         ++maps[arr.at(i)];
      for(decltype(arr.size()) i=0;i!=arr.size();++i){
         if(arr.at(i)==0){
            if(maps[0]>1) return true;
         }
         else{
            if(maps[arr.at(i)*2]>0)
            {
               return true;
            }
         }
      }
      return false;
   }
};

```


测出来两者运行速度差别不大，但空间上双指针（双指针法更节省）