candy-crush
这个问题是实现一个简单的消除算法。

给定一个二维整数数组 <code>board</code> 代表糖果所在的方格，不同的正整数 <code>board[i][j]</code> 代表不同种类的糖果，如果 <code>board[i][j] = 0</code> 代表<code>(i, j)</code> 这个位置是空的。给定的方格是玩家移动后的游戏状态，现在需要你根据以下规则粉碎糖果，使得整个方格处于稳定状态并最终输出。

<ol>
	如果有三个及以上水平或者垂直相连的同种糖果，同一时间将它们粉碎，即将这些位置变成空的。
	在同时粉碎掉这些糖果之后，如果有一个空的位置上方还有糖果，那么上方的糖果就会下落直到碰到下方的糖果或者底部，这些糖果都是同时下落，也不会有新的糖果从顶部出现并落下来。
	通过前两步的操作，可能又会出现可以粉碎的糖果，请继续重复前面的操作。
	当不存在可以粉碎的糖果，也就是状态稳定之后，请输出最终的状态。
</ol>

你需要模拟上述规则并使整个方格达到稳定状态，并输出。



<strong>样例 :</strong>

<pre><strong>输入:</strong>
board = 
[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]

<strong>输出:</strong>
[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]

<strong>解释:</strong> 
<img src="https://assets.leetcode.com/uploads/2018/10/12/candy_crush_example_2.png" style="height: 532px; width: 777px;">
</pre>



<strong>注释 :</strong>

<ol>
	<code>board</code>数组的行数区间是[3, 50]。
	<code>board[i]</code>数组的长度区间（即<code>board</code>数组的列数区间）是[3, 50]。
	每个<code>board[i][j]</code>初始整数范围是[1, 2000]。
</ol>

粉碎糖果
This question is about implementing a basic elimination algorithm for Candy Crush.

Given a 2D integer array <code>board</code> representing the grid of candy, different positive integers <code>board[i][j]</code> represent different types of candies. A value of <code>board[i][j] = 0</code> represents that the cell at position <code>(i, j)</code> is empty. The given board represents the state of the game following the player&#39;s move. Now, you need to restore the board to a <i>stable state</i> by crushing candies according to the following rules:

<ol>
	If three or more candies of the same type are adjacent vertically or horizontally, &quot;crush&quot; them all at the same time - these positions become empty.
	After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. (No new candies will drop outside the top boundary.)
	After the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps.
	If there does not exist more candies that can be crushed (ie. the board is <i>stable</i>), then return the current board.
</ol>

You need to perform the above rules until the board becomes stable, then return the current board.



<b>Example:</b>

<pre style="white-space: pre-line">
<b>Input:</b>
board = 
[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]

<b>Output:</b>
[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]

<b>Explanation:</b> 
<img src="https://assets.leetcode.com/uploads/2018/10/12/candy_crush_example_2.png" style="width: 777px; height: 532px;" />
</pre>



<b>Note:</b>

<ol>
	The length of <code>board</code> will be in the range [3, 50].
	The length of <code>board[i]</code> will be in the range [3, 50].
	Each <code>board[i][j]</code> will initially start as an integer in the range [1, 2000].
</ol>
