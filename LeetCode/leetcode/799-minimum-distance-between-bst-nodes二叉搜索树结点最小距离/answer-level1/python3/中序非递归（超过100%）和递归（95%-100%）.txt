一 思路
二叉搜索树的中序遍历序列单调递增，因此非递归中根序遍历二叉搜索树，将当前结点值与前一结点值作差，如果结果小于之前的最小距离，则用此结果更新最小距离。
二 实现
非递归版本（栈实现）
```python3 []
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def minDiffInBST(self, root: TreeNode) -> int:
        min_val = float("inf")
        pre = -float("inf")
        
        st = []
        p = root
        while p is not None or st:
            while p is not None:
                st.append(p)
                p = p.left
            p = st.pop()
            val = p.val
            if val - pre < min_val:
                min_val = val - pre
            pre = val
            p = p.right
        return min_val
```
递归版本
```python3 []
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def minDiffInBST(self, root: TreeNode) -> int:
        def inorder_traversal(p):
            if not p:
                return []
            res = []
            res.extend(inorder_traversal(p.left))
            res.append(p.val)
            res.extend(inorder_traversal(p.right))
            return res
        
        res = inorder_traversal(root)
        n = len(res)
        min_val = float("inf")
        for i in range(1, n):
            if res[i] - res[i-1] < min_val:
                min_val = res[i] - res[i-1]
        return min_val
```
三 复杂度分析
程序中虽然有两层循环，但每个结点均只会进出栈一次，故时间复杂度为O(N)，N为树中结点树。
栈的深度不会超过树的高度，空间复杂度为O(H), H为树的高度。
