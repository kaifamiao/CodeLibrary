## 38.字符串的排列

### Information

* TIME: 2020/02/17
* LINK: [Click Here](https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/)
* TAG: `排列组合`

### Description

> 输入一个字符串，打印出该字符串中字符的所有排列。你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。

### Example

```text
输入：s = "abc"
输出：["abc","acb","bac","bca","cab","cba"]
```

### My Answer -1

> 普通的回溯法
>
> 先将`s`转为字符序列并排序
>
> 在递归时，如果当前字符等于上一次的字符并且上一次的索引已经访问过，那么本次遍历跳过
>
> * `if(i != 0 && s[i] == s[i - 1] && visited[i - 1]) continue;`
> * 起到了去重的作用
>
> 注意一点，回溯到当前层次时，记得把之前加入路径的元素取出，因为当前位置已经完成了一次搜索

```java
class Solution {
    public String[] permutation(String s) {
        List<String> ans = new ArrayList<>();
        char[] arrayS = s.toCharArray();
        Arrays.sort(arrayS);
        permutationHelper(ans, new boolean[s.length()], new LinkedList<Character>(), arrayS);
        String[] res = new String[ans.size()];
        for(int i = 0; i < ans.size(); i++){
            res[i] = ans.get(i);
        }
        return res;
    }
    private void permutationHelper(List<String> ans, boolean[] visited, LinkedList<Character> list, char[] s){
        if(list.size() == s.length){
            StringBuilder sb = new StringBuilder();
            for(char c : list){
                sb.append(c);
            }
            ans.add(sb.toString());
            return;
        }
        
        for(int i = 0; i < s.length; i++){
            if(i != 0 && s[i] == s[i - 1] && visited[i - 1]) continue;
            if(!visited[i]){
                list.addLast(s[i]);
                visited[i] = true;
                permutationHelper(ans, visited, list, s);
                list.removeLast();
                visited[i] = false;
            }
        }
    }
}
```

### My Answer -2

> 交换法，如果题目有说明**元素不重复**，这个方法可以省去额外的内存
>
> 将字符串分成两个部分，已排列和未排列，对于未排列部分，依次与后面元素交换
>
> 这个算法的确定是不能去重，需要用到`Set`
>
> 当然了我也用到了一些限制手段去排重，但最后测试发现还是得用Set

```java
class Solution {
    public String[] permutation(String s) {
        Set<String> ans = new TreeSet<>();
        char[] newS = s.toCharArray();
        Arrays.sort(newS);
        permutationHelper(ans, newS, 0);
        
        String[] res = new String[ans.size()];
        int idx = 0;
        for(String str : ans){
            res[idx++] = str;
        }
        return res;
    }
    private void permutationHelper(Set<String> ans, char[] s, int begin){
        if(begin == s.length){
            ans.add(String.valueOf(s));
            return; 
        }
        for(int i = begin; i < s.length; i++){
            if(i != begin && (s[i] == s[i - 1] || s[i] == s[begin])) continue;
            char tmp = s[i];
            s[i] = s[begin];
            s[begin] = tmp;

            permutationHelper(ans, s, begin + 1);
            
            tmp = s[i];
            s[i] = s[begin];
            s[begin] = tmp;
        }
    }
}
```

### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/c79652f7cdc0c394f4752526ea6ee71451129cd63ae4ff29d460c9efb87f7435-file_1581947424427)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

