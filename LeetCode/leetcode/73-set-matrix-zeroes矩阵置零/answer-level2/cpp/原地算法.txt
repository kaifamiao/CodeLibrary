# 解答

如果使用辅助空间的话，很容易解决问题，但这并不满足题意。

给出一个常数空间复杂度的算法：
1. 先找一个标记值，该标记值为原矩阵中不存在的一个元素。
2. 遍历矩阵，将元素 0 所在的行/列中除 0 以外的元素全部改为标记值。
3. 遍历矩阵，将所有标记值转化为 0.

代码：
```cpp
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        //首先寻找一个矩阵汇总不存在的元素作为标记值
        int flag = INT_MIN;
        while( flag++){
            int t = 0;
            for( int i = 0; i < matrix.size() && !t; i++)
                for( int j = 0; j < matrix[0].size(); j++)
                    if( matrix[i][j] == flag){
                        t = 1;
                        break;
                    }
                        
            if( !t)
                break;
        }
        
        //将存在 0 的一行/列做标记
        for( int i = 0; i < matrix.size(); i++)
            for( int j = 0; j < matrix[0].size(); j++)
                if( !matrix[i][j]){
                    //那一行
                    for( int ii = 0; ii < matrix[0].size(); ii++)
                        if( matrix[i][ii])
                            matrix[i][ii] = flag;
                    
                    //那一列
                    for( int jj = 0; jj < matrix.size(); jj++)
                        if( matrix[jj][j])
                            matrix[jj][j] = flag;
                }
        
        //将标记转换为 0
        for( int i = 0; i < matrix.size(); i++)
            for( int j = 0; j < matrix[0].size(); j++)
                if( matrix[i][j] == flag)
                    matrix[i][j] = 0;
    }
};
```