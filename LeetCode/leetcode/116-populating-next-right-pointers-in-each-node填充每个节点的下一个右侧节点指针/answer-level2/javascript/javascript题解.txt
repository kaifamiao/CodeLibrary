[116.填充每个节点的下一个右侧节点指针](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/submissions/)   

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)  

## 层序遍历

常规解法，但不满足题目要求。

```javascript
/**
 * // Definition for a Node.
 * function Node(val,left,right,next) {
 *    this.val = val;
 *    this.left = left;
 *    this.right = right;
 *    this.next = next;
 * };
 */
/**
 * @param {Node} root
 * @return {Node}
 */
var connect = function(root) {
    if (root === null) return null;
    let node = root;
    let queue = [node];
    while (queue.length > 0) {
        let len = queue.length;
        let pre = null;
        for (let i = 0; i < len; i++) {
            node = queue.shift();
            if (pre !== null) {
                pre.next = node;
            }
            node.left && queue.push(node.left);
            node.right && queue.push(node.right);
            pre = node;
        }
    }
    return root;
};
```


## 常量级额外空间

题解参考[优质题解](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--27/)。

```javascript
/**
 * // Definition for a Node.
 * function Node(val,left,right,next) {
 *    this.val = val;
 *    this.left = left;
 *    this.right = right;
 *    this.next = next;
 * };
 */
/**
 * @param {Node} root
 * @return {Node}
 */
var connect = function(root) {
    if (root === null) return null;
    let pre = root, cur = null;
    while (pre.left !== null) {
        cur = pre;
        // pre的left存在，则cur的left一定存在
        while (cur) {
            // 连接同属于一个父结点的左右结点
            cur.left.next = cur.right; 
            // 如果cur存在next，那么连接cur的right结点的next至cur的next的left
            if (cur.next) {
                cur.right.next = cur.next.left
            }
            cur = cur.next;
        }
        pre = pre.left; // 从下一层第一个节点继续
    }
    return root;
};
```

## 递归

题目规定递归符合要求

```javascript
/**
 * // Definition for a Node.
 * function Node(val,left,right,next) {
 *    this.val = val;
 *    this.left = left;
 *    this.right = right;
 *    this.next = next;
 * };
 */
/**
 * @param {Node} root
 * @return {Node}
 */
var connect = function(root) {
    if (root === null) return null;
    
    if (root.left) {
        root.left.next = root.right;
        root.right.next = help(root);

        connect(root.right);
        connect(root.left);
    }
    
    return root;
    
};

function help(root) {
    root = root.next;
    return root === null ? null : root.left;
}
```