基本思路：枚举所有点对，根据两点中心和长度排序后，顺序进行配对
时间复杂度O(n^2)
执行用时 :24 ms, 在所有 cpp 提交中击败了93.94% 的用户
（结果发现8ms和12ms的范例都是直接复制我的，白嫖也不点个赞）
代码如下：
```
//求两点之间的距离
template<class T1, class T2>
double Dis(T1 a1, T1 a2, T2 b1, T2 b2) {
    return pow(0.0 + (a1 - b1) * (a1 - b1) + (a2 - b2) * (a2 - b2), 0.5);
}

//记录对角线信息：中心、半长、一个端点
class Node {
private:
    double ceti;
    double cetj;
    double HalfCross;
    int cori;
    int corj;
public:
    Node(double a, double b, int c, int d) {
        ceti = a;
        cetj = b;
        cori = c;
        corj = d;
        HalfCross = Dis(a, b, c, d);
    }

    friend bool operator<(const Node &a, const Node &b) {
        if (a.ceti != b.ceti) return a.ceti < b.ceti;
        if (a.cetj != b.cetj) return a.cetj < b.cetj;
        return a.HalfCross < b.HalfCross;
    }

    //判断两个对角线能否组成一个矩形，已保证对角线不能重叠
    friend bool PairNode(const Node &a, const Node &b) {
        return a.ceti == b.ceti && a.cetj == b.cetj && a.HalfCross == b.HalfCross;
    }

    //计算两个对角线组成的矩形的面积
    friend double Area(const Node &a, const Node &b) {
        double La = Dis(a.cori, a.corj, b.cori, b.corj);
        double Lb = pow(4.0 * (a.HalfCross) * (a.HalfCross) - La * La, 0.5);
        return La * Lb;
    }
};

class Solution {
public:
    double minAreaFreeRect(vector<vector<int>> &points) {
        vector<Node> List;
        int len = points.size();
        //记录所有点对组成的对角线
        for (int i = 0; i < len; ++i) {
            for (int j = i + 1; j < len; ++j) {
                double ta = (0.0 + points[i][0] + points[j][0]) / 2.0;
                double tb = (0.0 + points[i][1] + points[j][1]) / 2.0;
                List.emplace_back(ta, tb, points[i][0], points[i][1]);
            }
        }
        double Ans = 1e300;
        int flag = 0;//有没有更新最小值
        len = List.size();
        sort(List.begin(), List.end());
        //排序后每个对角线只需要和前几个组合，最坏情况也不影响时间复杂度
        for (int i = 0; i < len; ++i) {
            for (int j = i + 1; j < len; ++j) {
                if (!PairNode(List[i], List[j])) break;
                Ans = min(Area(List[i], List[j]), Ans);
                flag = 1;
            }
        }
        if (flag == 0) return 0;
        return Ans;
    }
};
```
