### 解题思路
两种思路：
1. 消耗空间的做法，纵向去看，倒过来输出到一个新数组，这个新数组就是旋转后的数组，例如 [[1,2,3],[4,5,6],[7,8,9]]，纵向从末尾开始看，第一列 [7,4,1] 第二列 [8,5,2] 第三列 [9,6,3], 这就是旋转后的数组了 
2. 那么不消耗空间原地旋转的思路其实就是要找出来一个位置是 i,j 的节点和其他三个节点的位置，并依次交换他们，这里我们按照上右下左分 u, r, d, l，N 为 len(matrix) - 1，一个 [i,j] 节点是 u 的时候，r 应该是 [j,N-i]，d 应该是 [N-i,N-j]，l 应该是 [N-j,i]，也就是和这四个节点要依次交换，到这里基本思路就有了，但是为了避免出现 i,j 可能交换过，我们可以向剥洋葱的一样，先交换 i=0 的最外层，然后交换 i=1,j=1 开始的里面一层，依次直到洋葱的核心即可

> 这里需要特别注意还有一种情况那就是四个角，其实我们上下左右四个角都是属于左上角这个组的，所以剥洋葱的时候，每一层都不用到最后一个节点就可以进入下一层了

### 代码

```golang
func rotate(matrix [][]int)  {
    var N = len(matrix) - 1

	for i := 0; i < N; i++ { // 这里不是小于等于而是小于就是因为四个角他们是一组的，在执行左上角交换的时候，他们就都交换过一次啦
		for j := i; j < N-i; j++ {
			u, r, d, l := matrix[i][j], matrix[j][N-i], matrix[N-i][N-j], matrix[N-j][i]
			matrix[i][j] = l
			matrix[j][N-i] = u
			matrix[N-i][N-j] = r
			matrix[N-j][i] = d
		}
	}
}
```