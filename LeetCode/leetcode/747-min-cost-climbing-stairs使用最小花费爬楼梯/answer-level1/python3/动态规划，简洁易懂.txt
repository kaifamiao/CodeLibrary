### 解题思路
**突破点**在理解"每爬上一个阶梯都要花费对应的体力值"
不理解第一个实例为什么输出是15可以这样想，把爬到楼层顶部的体力值看作0，这样从最后一层/倒数第二层爬到顶部是不需要花费的

动态规划**三步骤**：
1. 设置变量缓存计算的中间结果
2. 循环，从小到大，根据状态转移方程补充完整缓存
3. 从保存的表中取出需要的结果，根据题意变通
其中最重要的是找到状态转移方程

**参考**知乎问答：https://www.zhihu.com/answer/883302989

### 代码

```python3
class Solution:
    # 每爬上一层阶梯，花费该层阶梯的体力值
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        # 缓存中间值
        f = [cost[0], cost[1]]  

        # 从小到大计算
        for i in range(2, len(cost)):
            # 状态转移方程
            f.append( min(f[i-2],f[i-1]) + cost[i])

        # 爬上最后一层阶梯不需要花费体力值，只有可能从最后两层阶梯中的任意一层爬上来
        return min(f[-1],f[-2])

```