题目要求的是**到达**第`n`级台阶楼层**顶部**的最小花费，可以用动态规划来解，下面一步一步来讲怎样确定状态空间、怎样给出状态转移方程。

**解法一**：

![stair3.jpg](https://pic.leetcode-cn.com/81a467350e55f402495e67011f342aecf4ee8b2a49802b5a6067afdf268be82b-stair3.jpg)

**到达**第`i`级台阶楼层**顶部**的最小花费，有两个选择：

- 先付出最小总花费`minCost[i-1]`**到达**第`i`级台阶（即第`i-1`级台阶楼层**顶部**），踏上第`i`级台阶需要再花费`cost[i]`，再迈一步**到达**第`i`级台阶楼层**顶部**，最小总花费为`minCost[i-1] + cost[i])`；

- 先付出最小总花费`minCost[i-2]`**到达**第`i-1`级台阶（即第`i-2`级台阶楼层**顶部**），踏上第`i-1`级台阶需要再花费`cost[i-1]`，再迈两步**跨过**第`i`级台阶直接**到达**第`i`级台阶楼层**顶部**，最小总花费为`minCost[i-2] + cost[i-1])`；

则`minCost[i]`是上面这两个最小总花费中的最小值。

`minCost[i] = min(minCost[i-1] + cost[i], minCost[i-2] + cost[i-1])`。

初始值为：

`minCost[0] =  min(cost[-1], cost[0]) = min(0, cost[0]) = 0`，

`minCost[1] = min(cost[0], cost[1])`。

动态递归代码如下：

```python []
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        minCost = [0] * n
        minCost[1] = min(cost[0], cost[1])
        for i in range(2, n):
            minCost[i] = min(minCost[i - 1] + cost[i], minCost[i - 2] + cost[i - 1])
        return minCost[-1]
```
```c++ []
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int size = cost.size();
        vector<int> minCost(size);
        minCost[0] = 0;
        minCost[1] = min(cost[0], cost[1]);
        for (int i = 2; i < size; i++) {
            minCost[i] = min(minCost[i - 1] + cost[i], minCost[i - 2] + cost[i - 1]);
        }
        return minCost[size - 1];
    }
};
```
```java []
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int size = cost.length;
        int[] minCost = new int[size];
        minCost[0] = 0;
        minCost[1] = Math.min(cost[0], cost[1]);
        for (int i = 2; i < size; i++) {
            minCost[i] = Math.min(minCost[i - 1] + cost[i], minCost[i - 2] + cost[i - 1]);
        }
        return minCost[size - 1];
    }
}
```

上面的代码在空间利用上可以再优化一下。只用两个变量保存状态转移方程中前面的两个记录，并不断更新，就可以递推下去，这样空间复杂度就由O(N)变为O(1)了。

代码如下：

```python []
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        minCost0, minCost1 = 0, min(cost[0], cost[1])
        for i in range(2, len(cost)):
            minCost = min(minCost1 + cost[i], minCost0 + cost[i - 1])
            minCost0, minCost1 = minCost1, minCost;
        return minCost
```
```c++ []
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int minCost0 = 0;
        int minCost1 = min(cost[0], cost[1]);
        int minCost;
        for (int i = 2; i < cost.size(); i++) {
            minCost = min(minCost1 + cost[i], minCost0 + cost[i - 1]);
            minCost0 = minCost1;
            minCost1 = minCost;
        }
        return minCost;
    }
};
```
```java []
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int minCost0 = 0;
        int minCost1 = Math.min(cost[0], cost[1]);
        int minCost = 0;
        for (int i = 2; i < cost.length; i++) {
            minCost = Math.min(minCost1 + cost[i], minCost0 + cost[i - 1]);
            minCost0 = minCost1;
            minCost1 = minCost;
        }
        return minCost;
    }
};
```
**解法二**：

![stair.jpg](https://pic.leetcode-cn.com/ee23b6537e3aefc82fbdf9dd252adf4a1a8c05c88e3a3fd32428f4fe72b9d721-stair.jpg)

**到达**第`i`级台阶楼层**顶部**的最小花费，有两个选择：

- 最后**踏上**了第`i`级台阶，最小花费`dp[i]`，再迈一步到达第`i`级台阶楼层顶部；
- 最后**踏上**了第`i-1`级台阶，最小花费`dp[i-1]`，再迈两步**跨过**第`i`级台阶直接到达第`i`级台阶楼层顶部。

所以**到达**第`i`级台阶楼层**顶部**的最小花费为`minCost[i] =  min(dp[i], dp[i-1])`。

即为了求出**到达**第`i`级台阶楼层**顶部**的最小花费，我们先算出**踏上**第`i`级台阶的最小花费，用`dp[i]`表示，再通过`min(dp[i], dp[i-1])`来求出**到达**第`i`级台阶楼层**顶部**的最小花费。

以初始的两个台阶为例：

台阶的数组从`0`开始计数。

最后一步**踏上**第`0`级台阶，最小花费`dp[0] = cost[0]`。

最后一步**踏上**第`1`级台阶有两个选择：

- 可以分别踏上第`0`级与第`1`级台阶，花费`cost[0] + cost[1]`；
- 也可以从地面开始迈两步直接踏上第`1`级台阶，花费`cost[1]`。

最小值`dp[1] = min(cost[0] + cost[1], cost[1]) = cost[1]`。

接下来推导**踏上**第`i`级台阶的最小花费`dp[i]`的状态转移方程。

![stair2.jpg](https://pic.leetcode-cn.com/db87b74ba4488d8a97d8fd6ed1e85ab49300237e8d6decd1d89e6e0b0b201ca0-stair2.jpg)

**踏上**第`i`级台阶有两种方法：

- 先踏上第`i-2`级台阶（最小总花费`dp[i-2]`），再直接迈两步踏上第`i`级台阶（花费`cost[i]`），最小总花费`dp[i-2] + cost[i]`；

- 先踏上第`i-1`级台阶（最小总花费`dp[i-1]`），再迈一步踏上第`i`级台阶（花费`cost[i]`），最小总花费`dp[i-1] + cost[i]`；

则`dp[i]`是上面这两个最小总花费中的最小值。

因此状态转移方程是：

`dp[i] = min(dp[i-2], dp[i-1]) + cost[i]`。

初始条件就是前面算出的`dp[0] = cost[0]`，`dp[1] = cost[1]`。

以下是代码：

```python []
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        dp = [0] * n
        dp[0], dp[1] = cost[0], cost[1]
        for i in range(2, n):
            dp[i] = min(dp[i - 2], dp[i - 1]) + cost[i]
        return min(dp[-2], dp[-1])
```
```c++ []
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        vector<int> dp(cost.size());
        dp[0] = cost[0];
        dp[1] = cost[1];
        for (int i = 2; i < cost.size(); i++) {
            dp[i] = min(dp[i - 2], dp[i - 1]) + cost[i];
        }
        return min(dp[cost.size() - 2], dp[cost.size() - 1]);
    }
};
```
```java []
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int[] dp = new int[cost.length];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for (int i = 2; i < cost.length; i++) {
            dp[i] = Math.min(dp[i - 2], dp[i - 1]) + cost[i];
        }
        return Math.min(dp[cost.length - 2], dp[cost.length - 1]);
    }
}
```

上面的代码在空间利用上可以再优化一下。

注意到状态转移方程中只用到了前面的两个记录，可以不用一维数组，只用两个变量保存前面的两个记录，并不断更新，就可以递推下去，这样空间复杂度就是O(1)了。

更进一步，注意到初始值`dp[0] = cost[0]`，`dp[1] = cost[1]`，可以直接复用`cost`数组来代表`dp`数组。

代码如下：

```python []
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        for i in range(2, len(cost)):
            cost[i] = min(cost[i - 2], cost[i - 1]) + cost[i]
        return min(cost[-2], cost[-1])
```
```c++ []
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        for (int i = 2; i < cost.size(); i++) {
            cost[i] = min(cost[i - 2], cost[i - 1]) + cost[i];
        }
        return min(cost[cost.size() - 2], cost[cost.size() - 1]);
    }
};
```
```java []
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        for (int i = 2; i < cost.length; i++) {
            cost[i] = Math.min(cost[i - 2], cost[i - 1]) + cost[i];
        }
        return Math.min(cost[cost.length - 2], cost[cost.length - 1]);
    }
}
```

**这两种解法的关系**：

**到达**第`i`级台阶楼层**顶部**的最小花费等于**踏上**第`i`级台阶的最小花费与**踏上**第`i-1`级台阶的最小花费的最小值：

`minCost[i] = min(dp[i], dp[i-1])`

将`dp[i]`的状态转移方程`dp[i] = min(dp[i-1], dp[i-2]) + cost[i]`代入：

```
minCost[i] = min(dp[i-1], dp[i])
           = min(min(dp[i-1], dp[i-2]) + cost[i], min(dp[i-2], dp[i-3]) + cost[i-1])
           = min(minCost[i-1] + cost[i], minCost[i-2] + cost[i-1])
```

这样我们就得到了`minCost[i]`的状态转移方程。

`minCost[i]`与`dp[i]`的关系，还满足`minCost[i] = dp[i+1] - cost[i+1]`。 



