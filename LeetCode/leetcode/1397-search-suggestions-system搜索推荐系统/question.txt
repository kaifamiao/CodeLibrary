search-suggestions-system
给你一个产品数组<code>products</code>和一个字符串<code>searchWord</code>，<code>products</code> 数组中每个产品都是一个字符串。

请你设计一个推荐系统，在依次输入单词<code>searchWord</code> 的每一个字母后，推荐<code>products</code> 数组中前缀与<code>searchWord</code> 相同的最多三个产品。如果前缀相同的可推荐产品超过三个，请按字典序返回最小的三个。

请你以二维列表的形式，返回在输入<code>searchWord</code>每个字母后相应的推荐产品的列表。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>products = [&quot;mobile&quot;,&quot;mouse&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mousepad&quot;], searchWord = &quot;mouse&quot;
<strong>输出：</strong>[
[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],
[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],
[&quot;mouse&quot;,&quot;mousepad&quot;],
[&quot;mouse&quot;,&quot;mousepad&quot;],
[&quot;mouse&quot;,&quot;mousepad&quot;]
]
<strong>解释：</strong>按字典序排序后的产品列表是 [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mouse&quot;,&quot;mousepad&quot;]
输入 m 和 mo，由于所有产品的前缀都相同，所以系统返回字典序最小的三个产品 [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;]
输入 mou， mous 和 mouse 后系统都返回 [&quot;mouse&quot;,&quot;mousepad&quot;]
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>products = [&quot;havana&quot;], searchWord = &quot;havana&quot;
<strong>输出：</strong>[[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;]]
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>products = [&quot;bags&quot;,&quot;baggage&quot;,&quot;banner&quot;,&quot;box&quot;,&quot;cloths&quot;], searchWord = &quot;bags&quot;
<strong>输出：</strong>[[&quot;baggage&quot;,&quot;bags&quot;,&quot;banner&quot;],[&quot;baggage&quot;,&quot;bags&quot;,&quot;banner&quot;],[&quot;baggage&quot;,&quot;bags&quot;],[&quot;bags&quot;]]
</pre>

<strong>示例 4：</strong>

<pre><strong>输入：</strong>products = [&quot;havana&quot;], searchWord = &quot;tatiana&quot;
<strong>输出：</strong>[[],[],[],[],[],[],[]]
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= products.length &lt;= 1000</code>
	<code>1 &lt;= &Sigma; products[i].length &lt;= 2 * 10^4</code>
	<code>products[i]</code>中所有的字符都是小写英文字母。
	<code>1 &lt;= searchWord.length &lt;= 1000</code>
	<code>searchWord</code>中所有字符都是小写英文字母。
</ul>

搜索推荐系统
Given an array of strings <code>products</code> and a string <code>searchWord</code>. We want to design a system that suggests at most three product names from <code>products</code>after each character of<code>searchWord</code> is typed. Suggested products should have common prefix with the searchWord. If there aremore than three products with a common prefixreturn the three lexicographically minimums products.

Return <em>list of lists</em> of the suggested <code>products</code> after each character of<code>searchWord</code> is typed.


<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> products = [&quot;mobile&quot;,&quot;mouse&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mousepad&quot;], searchWord = &quot;mouse&quot;
<strong>Output:</strong> [
[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],
[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],
[&quot;mouse&quot;,&quot;mousepad&quot;],
[&quot;mouse&quot;,&quot;mousepad&quot;],
[&quot;mouse&quot;,&quot;mousepad&quot;]
]
<strong>Explanation:</strong> products sorted lexicographically = [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mouse&quot;,&quot;mousepad&quot;]
After typing m and mo all products match and we show user [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;]
After typing mou, mous and mouse the system suggests [&quot;mouse&quot;,&quot;mousepad&quot;]
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> products = [&quot;havana&quot;], searchWord = &quot;havana&quot;
<strong>Output:</strong> [[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;],[&quot;havana&quot;]]
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input:</strong> products = [&quot;bags&quot;,&quot;baggage&quot;,&quot;banner&quot;,&quot;box&quot;,&quot;cloths&quot;], searchWord = &quot;bags&quot;
<strong>Output:</strong> [[&quot;baggage&quot;,&quot;bags&quot;,&quot;banner&quot;],[&quot;baggage&quot;,&quot;bags&quot;,&quot;banner&quot;],[&quot;baggage&quot;,&quot;bags&quot;],[&quot;bags&quot;]]
</pre>

<strong>Example 4:</strong>

<pre>
<strong>Input:</strong> products = [&quot;havana&quot;], searchWord = &quot;tatiana&quot;
<strong>Output:</strong> [[],[],[],[],[],[],[]]
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= products.length &lt;= 1000</code>
	There are norepeated elements in<code>products</code>.
	<code>1 &lt;= &Sigma; products[i].length &lt;= 2 * 10^4</code>
	All characters of <code>products[i]</code> are lower-case English letters.
	<code>1 &lt;= searchWord.length &lt;= 1000</code>
	All characters of <code>searchWord</code>are lower-case English letters.
</ul>
