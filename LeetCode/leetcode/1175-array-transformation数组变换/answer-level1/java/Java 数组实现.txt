### 1. 题目分析
- 题目理解不难。从$arr[1]$开始，到$arr[length - 1]$为止：
    - 如果$arr[i] < arr[i - 1]$ && $arr[i] < arr[i + 1]$，自增
    - 如果$arr[i] > arr[i - 1]$ && $arr[i] > arr[i + 1]$，自减
    - 如果一轮循环下来没有改变，说明已经稳定，返回当前数组
- 例子：$arr=[1, 2, 1, 2]$
    - $arr[1]$：由于$arr[1] > arr[0]$且$arr[1] > arr[2]$，故$arr[1]$自减
    - $arr[2]$：由于$arr[2] < arr[1]$且$arr[2] < arr[1]$，故$arr[2]$自增
    - 此时$arr=[1, 1, 2, 2]$，不能再调整
- 注意(坑)：**当前元素的自增自减不影响其它元素的大小判断**
    - 以上面的例子，$arr[1]$自减后，$arr=[1, 1, 1, 2]$，如果此时判断$arr[2]$会发现不需要调整，但是**按照题目的意思**，此时$arr[2]$是需要自增的(即仍然按照先前的$arr$比较)
    - 为了避免这个坑，可以**每轮初始化一个新的数组。使用原数组判断，使用新数组完成自增自减**，并将新数组赋给原数组
### 2. Coding
```java
public static List<Integer> transformArray(int[] arr) {
    int len = arr.length;
    boolean feed = true;
    while(feed){
        feed = false;
        int a[] = Arrays.copyOf(arr, len);
        for(int i = 1; i < len - 1; i ++){
            if(arr[i] < arr[i - 1] && arr[i] < arr[i + 1]){
                a[i]++;
                feed = true;
            }
            else if(arr[i] > arr[i - 1] && arr[i] > arr[i + 1]){
                a[i]--;
                feed = true;
            }
        }
        arr = a;
    }
    return intArrayToList(arr);
}

public static List<Integer> intArrayToList(int[] arr){
    List<Integer> list = new ArrayList<>();
    for(int i = 0; i < arr.length; i ++){
        list.add(arr[i]);
    }
    return list;
}
```
### 3. 执行结果
![image.png](https://pic.leetcode-cn.com/7900ec2c6f493304585e13eb346efe3fb21323dd00002337c05ba8b26c42f52d-image.png)
