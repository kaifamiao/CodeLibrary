***Talk is cheap. Show me the code.***

### 1、BFS
```cpp
class Solution {
public:
    int confusingNumberII(int N) {
        if (N < 6) return 0;
        else if (N < 9)
            return 1;
        else if (N == 9)
            return 2;

        for (int i = 1; i <= 4; i++) q.push(table[i]);

        while (!q.empty()) {
            int num = q.front();
            q.pop();
            if (isConfused(num)) result++;
            for (int i = 0; i <= 4; i++) {
                int cur = num * 10 + table[i];
                if (cur <= N) q.push(cur);
                // Don't be afraid to use a goto if that is the best option.
                // Two types of programmers use goto: Bad programmers, and
                // pragmatic programmers.
                else
                    goto traverse;
            }
        }

    traverse:
        while (!q.empty()) {
            if (isConfused(q.front())) result++;
            q.pop();
        }
        return result;
    }

    bool isConfused(int num) {
        int tmp = num;
        int res = 0;
        while (tmp != 0) {
            res = res * 10 + hash[tmp % 10];
            tmp /= 10;
        }
        return res != num;
    }

private:
    int hash[10] = {0, 1, 2, 3, 4, 5, 9, 7, 8, 6};
    int table[5] = {0, 1, 6, 8, 9};
    int result = 0;
    queue<int> q;
};

```

### DFS
```cpp
class Solution {
public:
    int confusingNumberII(int N) {
    	this->N = N;
    	int maxDepth = digit(N);
    	for (int maxRound = 1; maxRound <= maxDepth; maxRound++) {
    		for (int i = 1; i <= 4; i++) {
    			if (isFinished) return result;
    			backtrack(maxRound, 1, table[i]);
    		}
    	}
    	return result;
    }

    void backtrack(int maxRound, int round, int curr) {
    	if (round == maxRound) {
    		if (curr <= N) {
    			if (isConfused(curr)) result++;
    		}
    		else {
    			isFinished = true;
    		}
    		return;
    	}
    	for (int i = 0; i <= 4; i++) {
    		if (isFinished) return;
    		backtrack(maxRound, round + 1, curr * 10 + table[i]);
    	}
    }

    bool isConfused(int num) {
    	int tmp = num;
    	int res = 0;
    	while (tmp != 0) {
    		res = res * 10 + hash[tmp % 10];
    		tmp /= 10;
    	}
    	return res != num;
    }

    int digit(int num) {
        if (num == 0) return 1;
        int res = 0;
        while (num != 0) {
            num /= 10;
            res++;
        }
        return res;
    }

private:
	int N;
	int table[5] = {0, 1, 6, 8, 9};
	int hash[10] = {0, 1, 2, 3, 4, 5, 9, 7, 8, 6};
	bool isFinished = false;
	int result = 0;
};

```
**题外话**：
写第一种解法的时候用到了 goto，其实可以改成不用 goto 语句的，只是结构会显得比较难看，用 goto 就清爽多了。一直以来 goto 总是为人所诟病。在网上看到有人是这么评价 goto 的，我觉得很有趣：

*Don't be afraid to use a goto if that is the best option.
Two types of programmers use goto: Bad programmers, and pragmatic programmers.*