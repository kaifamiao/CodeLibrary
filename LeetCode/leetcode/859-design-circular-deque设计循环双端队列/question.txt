design-circular-deque
设计实现双端队列。<br>
你的实现需要支持以下操作：

<ul>
	MyCircularDeque(k)：构造函数,双端队列的大小为k。
	insertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true。
	insertLast()：将一个元素添加到双端队列尾部。如果操作成功返回 true。
	deleteFront()：从双端队列头部删除一个元素。 如果操作成功返回 true。
	deleteLast()：从双端队列尾部删除一个元素。如果操作成功返回 true。
	getFront()：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。
	getRear()：获得双端队列的最后一个元素。如果双端队列为空，返回 -1。
	isEmpty()：检查双端队列是否为空。
	isFull()：检查双端队列是否满了。
</ul>

<strong>示例：</strong>

<pre>MyCircularDeque circularDeque = new MycircularDeque(3); // 设置容量大小为3
circularDeque.insertLast(1);			        // 返回 true
circularDeque.insertLast(2);			        // 返回 true
circularDeque.insertFront(3);			        // 返回 true
circularDeque.insertFront(4);			        // 已经满了，返回 false
circularDeque.getRear();  				// 返回 2
circularDeque.isFull();				        // 返回 true
circularDeque.deleteLast();			        // 返回 true
circularDeque.insertFront(4);			        // 返回 true
circularDeque.getFront();				// 返回 4
</pre>



<strong>提示：</strong>

<ul>
	所有值的范围为 [1, 1000]
	操作次数的范围为 [1, 1000]
	请不要使用内置的双端队列库。
</ul>

设计循环双端队列
Design your implementation of the circular double-ended queue (deque).

Your implementation should support following operations:

<ul>
	<code>MyCircularDeque(k)</code>: Constructor, set the size of the deque to be k.
	<code>insertFront()</code>: Adds an item at the front of Deque. Return true if the operation is successful.
	<code>insertLast()</code>: Adds an item at the rear of Deque. Return true if the operation is successful.
	<code>deleteFront()</code>: Deletes an item from the front of Deque. Return true if the operation is successful.
	<code>deleteLast()</code>: Deletes an item from the rear of Deque. Return true if the operation is successful.
	<code>getFront()</code>: Gets the front item from the Deque. If the deque is empty, return -1.
	<code>getRear()</code>: Gets the last item from Deque. If the deque is empty, return -1.
	<code>isEmpty()</code>: Checks whether Deque is empty or not.
	<code>isFull()</code>: Checks whether Deque is full or not.
</ul>



<strong>Example:</strong>

<pre>
MyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3
circularDeque.insertLast(1);			// return true
circularDeque.insertLast(2);			// return true
circularDeque.insertFront(3);			// return true
circularDeque.insertFront(4);			// return false, the queue is full
circularDeque.getRear();  			// return 2
circularDeque.isFull();				// return true
circularDeque.deleteLast();			// return true
circularDeque.insertFront(4);			// return true
circularDeque.getFront();			// return 4
</pre>



<strong>Note:</strong>

<ul>
	All values will be in the range of [0, 1000].
	The number of operations will be in the range of[1, 1000].
	Please do not use the built-in Deque library.
</ul>
