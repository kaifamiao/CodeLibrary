### 解题思路
当K是偶数时，第N行第K个的值，是从第N-1行第K/2个值生成的；
当K是奇数时，第N行第K个的值，是从第N-1行第(K+1)/2个值生成的。
由此可以迭代获取最终要返回的第N行第K个值的生成路径，例如：

N=5,K=3: (1,1)=0>>(2,1)=0>>(3,1)=0>>(4,2)=1>>(5,3)=1   
N=5,K=7: (1,1)=0>>(2,1)=0>>(3,2)=1>>(4,4)=0>>(5,7)=0
N=6,K=7: (1,1)=0>>(2,1)=0>>(3,1)=0>>(4,2)=1>>(5,4)=0>>(6,7)=0

由于K=1时值恒为0，K=2或3时值恒为1，实际上需要的信息只需关注K坐标（横坐标），从底往上只需要追溯某一行出现K=3或2，示例如下：
N=5,K=3: [3]
N=5,K=7: [7, 4, 2]
N=6,K=7: [7, 4, 2]
路径中各点K坐标的规律可简化为第N-1行的值由第N行的值除以2并向上取整得到；
路径中各点0-1值的取值规律是，K=2或K=3的值从上往下（即N递增，从右往左）依次传递，每遇到偶数就改变一次（0则变1,1则变0），
遇到奇数则保持不变（和N-1行的点的值保持一致），直到获取到最后一行最终要求解的值。


### 代码

```python3

class Solution:
    def kthGrammar(self, N: int, K: int) -> int:
        change = (K>1)
        while(K >3):
            if K%2==0:
                change = not change
            K = -(-K//2)
        return int(change)
```