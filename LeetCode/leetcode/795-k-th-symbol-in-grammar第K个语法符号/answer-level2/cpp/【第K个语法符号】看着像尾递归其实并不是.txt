### 题目
在第一行我们写上一个 0。  
接下来的每一行，将前一行中的0替换为01，1替换为10。  

给定行数 N 和序数 K，返回第 N 行中第 K个字符。（K从1开始）  



### 分析
我们来看一下根据这个方法生成的数列，有什么特点。  

第一行: 0  
第二行: 01  
第三行: 0110  
第四行: 01101001  

也就是随着行数增加，每次都把之前行的每个数字都一分为二。  

也就是说：  
1. 第 N 行的第 K 个数字是怎么来的呢  
![](https://pic.leetcode-cn.com/e249a4fa0f4a34e851e06e6d112be2955cff80ecf25a2d3919cd95865f5d770d-file_1562836428390)  
第 N 行的第 1 个和第 2 个数字，是通过 N - 1 行的第 1 个数字产生的。  
第 N 行的第 3 个和第 4 个数字，是通过 N - 1 行的第 2 个数字产生的。  
…………  
  ↓↓   
那么，  
第 N 行的第 K 个数字，是通过 N - 1 行的第 (K - 1) / 2 + 1) 个数字产生的。（因为K是从 1 开始的需要 -1）  
(K - 1) / 2 + 1)  ==  (k + 1) / 2  ← 这俩是一样的  

2. 然后，通过递归调用，肯定能够计算出这个数字。    
如果 N - 1 行的数字是 0 ，那么产生 01 ，否则产生 10 。  
第 1 行，只有 0 一个数字。  

3. 最后，具体产生的是前面的数字还是后面的数字？  
这就要看原来的K，通过求余数操作计算，即 (K - 1) % 2。  


另外：  
第 N 行的数字长度为 2 的 N - 1 次方个。（调试的时候能用到 :P）  





### 答题
```C++
int kthGrammar(int N, int K) 
{
	if (N == 1) return 0;
	return (kthGrammar(N - 1, (K - 1) / 2 + 1) == 0) ? ((K - 1) % 2) : 1 - ((K - 1) % 2);
}
```

** 轻松搞定 **
----


ps：  
尾递归函数是递归函数的一种，其中递归调用是递归函数中的最后一条指令。并且在函数中应该只有一次递归调用。  
通常，编译器会识别尾递归模式，并优化其执行。然而，并不是所有的编程语言都支持这种优化，  
比如 C，C++ 支持尾递归函数的优化。另一方面，Java 和 Python 不支持尾递归优化。

**好像并不是尾递归，是我搞错了**




### 随机赠送的廉价调试代码
```C++
int main()
{
	for (int i = 1; i < 5; i++)
	{
		cout << "[" << i << "] = " << endl;
		for (int j = 1; j < pow(2, i - 1) + 1; j++)
		{
			cout << kthGrammar(i, j) << " ";
		}
		cout << endl << endl;
	}
}
```



### 致谢
感谢您的观看，希望对您有帮助，欢迎热烈的交流！  

[我的leetcode](https://github.com/AhJo53589/leetcode-cn)