### 解题思路
Magic number一般是指硬写到代码里的整数常量，数值是编程者自己指定的，其他人不知道数值有什么具体意义，表示不明觉厉，就称作magic number。而编程教材书用magic number指代初学者不定义常量直接写数的不良习惯。

但我觉得这样定义是过于片面的。很多编程问题的求解对应数学上的迭代收敛问题，而一些特定的迭代函数能够快速收敛，从而大大提高求解的效率。例如著名的平方根倒数算法：

i  = 0x5f3759df - ( i >> 1 ); 

平方根倒数速算法在速度上的优势源自将浮点数转化为长整型以作整数看待，并用特定常数0x5f3759df与之相减。如此将浮点数当作整数先位移后减法，所得的浮点数结果即是对输入数字的平方根倒数的粗略估计值，而后再进行一次牛顿迭代法，以使之更精确后，代码即执行完毕。由于算法所生成的用于输入牛顿法的首次近似值已经相当精确，此算法所得近似值的精度已可接受。又如拉马努金公式

![image.png](https://pic.leetcode-cn.com/525dcda073940cda9773db96ba048ffda1ae24c110e7fb948f972efafd3fec7a-image.png)

及其变体Chudnovsky公式
![image.png](https://pic.leetcode-cn.com/2f09d64711435c0fdcf970fd0f93048caa504cc0e9a1eee12f63d2c40600081e-image.png)

是最快的级数公式之一，可以以超线性的速度收敛，这些公式中的魔数为我们的程序插上了魔力的翅膀。

在这个问题中，我们同样可以找到这样的魔数，由于所有的非快乐数最终都会进入 4 → 16 → 37 → 58 → 89 → 145 → 42 → 20 → 4 的循环中，我们只有在跳出条件中添加这些魔数，就能让我们用非一般的速度完成求解：

![image.png](https://pic.leetcode-cn.com/9fee71f5bd9f2d665b91300490a351cf202703e44f64abc883f527761bf04611-image.png)


### 代码

```c
bool isHappy(int n){
    short _n;
    while(n!= 0 && n != 1 && n != 4 && n != 16 && n != 37 && n != 58 
    && n != 89 && n != 145 && n != 42 && n != 20) {
        _n = 0;
        while(n) {
            _n = _n + pow(n % 10, 2);
            n = n / 10;
        }
        n = _n;
    }
    if(n == 1) return 1;
    else return 0;
}
```