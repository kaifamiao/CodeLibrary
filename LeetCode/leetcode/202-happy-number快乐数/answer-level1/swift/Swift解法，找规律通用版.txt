题目的例子是19，那我们可以自行随机找一个数字来走一遍 快乐数 规律。
随便写一个例子：12
 1^2 + 2^2 = 5
 5^2 = 25
 2^2 + 5^2 = 29
 2^2 + 9^2 = 85
 8^2 + 5^2 = 64+25 = 89 ------
 8^2 + 9^2 = 64+81 = 125
 1^2 + 2^2 + 5^2 = 30
 3^2 + 0^2 = 9
 9^2 = 81
 8^2 + 1^2 = 65
 6^2 + 5^2 = 36+25 = 61
 6^2 + 1^2 = 37
 3^2 + 7^2 = 9+49 = 58
 5^2 + 8^2 = 25+64 = 89 ------- 相同了，而且不是1，所以他不是快乐数

我想通过下面三步，就可以走通整个过程了。
    // 1.通过递归
    // 2.拿到num，放入哈希表中
    // 3.如果发现，加入的num在哈希表中存在，跳出循环
    // 如果是1，说明是快乐数, true
    // 如果不是，说明又重复了上面的步骤，会无限循环到这儿，不是快乐数, false

上代码：
 var sets: Set = Set<Int>()
 var result: Bool = false

 func isHappy(_ n: Int) -> Bool {
    sets.insert(n)
    happy(n)
    return result
 }

  func happy(_ n: Int){
    
    var sum: Int = 0
    var num: Int = n
    while num != 0 {
        let x: Int = num%10
        num = num / 10
        sum += (x*x)
    }
    
    print("\(sum)")
    if (sets.contains(sum)) {
        result = (sum == 1) ? true : false
        return
    }
    sets.insert(sum)
    happy(sum)
 }

解决问题关键：找到快乐数的规律。
对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，最终一定会有两个相同的数字，比如上面数字12的重复数字：89.
比如原题例子19，重复数字1，因为1的平方还是1，所以1重复了。
所以，最后，我们只需要判断重复数字是否为1就行了。