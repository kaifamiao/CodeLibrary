### 解题思路
首先将数字转化为字符串，这样更方便我们取得每一位的值。
假设num = 1225，我们定义dp[i]为以第i个元素为结尾的子串有多少种表示方法，假设我们已经计算好了对于dp的前三个元素为[1, 2, 3]，我们将最后一个字符5作为分析样例，首先我们肯定能反映过来dp[i] >= dp[i - 1]，这是因为我们可以在之前三个字符的所有表示方法后面直接加个5对应的字符'f'即可，但是我们还会发现5可以和之前的2结合为字符'z'进行表示，那么此时如何计算呢？其实很简单，那就是dp[i - 2]，为什么是dp[i - 2]，因为最后两个字符都已经固定了，而且由于我们是一个字符一个字符进行计算的，也不需要考虑会不会出现重复的问题，也就是说当后两个字符都确定的情况下，四个字符的组合方式就决定于前两个字符的组合方式。

需要注意的是：如果当前数字的前一个数字为0，认为0和数字是无法进行组合的（虽然题中没说但是是按这个条件作为答案的）。

### 代码

```python
class Solution(object):
    def translateNum(self, num):
        """
        :type num: int
        :rtype: int
        """
        num = str(num)
        length = len(num)
        dp = [0] * (length + 1)
        dp[0] = dp[1] = 1
        for i in range(2, length + 1):
            dp[i] = dp[i - 1] + (dp[i - 2] if num[i - 2] != '0' and num[i - 2:i] < '26' else 0)
        print(dp)
        return dp[-1]
```