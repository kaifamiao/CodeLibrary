### 解题思路
    /*
     * 本题与 Leetcode 463 岛屿的周长 相似
     *
     * 因为三维形体都是立方体，所以它是对称的，要计算形体的6个面的面积，只需要计算它的一半即可。
     * 选定计算三维形体前面、左面和下面的面积进行计算。其中下面的面积就是格子上不为0的格子的数量。
     * 前面和左面的面积需要考虑是否在第一行和第一列：
     * 1. 如果格子在第一行，则前面的面积加上格子上立方体的数量；
     * 2. 如果格子在第一列，则左面的面积加上格子上立方体的数量；
     * 3. 如果格子不在第一行，如果该格子前面的格子的立方体数量为0或小于当前格子立方体的数量，
     *    则前面的面积加上-->当前格子的立方体数量减去前面格子的立方体数量；
     * 4. 如果格子不在第一列，如果该格子左面的格子的立方体数量为0或小于当前格子立方体的数量，
     *    则左面的面积加上-->当前格子的立方体数量减去左面格子的立方体数量；
     *
     * 由1->2->3->4步骤可以计算下面、前面和左面的面积，最后相加乘2即可。
     * */
### 代码

```cpp
int surfaceArea(std::vector<std::vector<int>> &grid) {
    if (grid.empty()) {
        return 0;
    }

    int rows = grid.size();
    int cols = grid[0].size();

    int area = 0;
    int count = 0;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            // 如果当前格子上有立方体
            if (grid[i][j] > 0) {
                // 则下面面积加1
                count++;
                // 如果当前格子在第一行，
                // 前面面积加上格子上立方体的数量
                if (i == 0) {
                    area += grid[i][j];
                }

                // 如果当前格子在第一列，
                // 左面面积加上格子上立方体的数量
                if (j == 0) {
                    area += grid[i][j];
                }

                // 如果当前格子不在第一行，
                // 且当前格子上立方体的数量为0，
                // 或者当前格子上立方体数量大于前面格子立方体数量
                if (i > 0 && ((grid[i][j] > grid[i - 1][j]) || grid[i - 1][j] == 0)) {
                    // 前面面积加上前后立方体数量的差
                    area += (grid[i][j] - grid[i - 1][j]);
                }

                // 如果当前格子不在第一列，
                // 且当前格子上立方体的数量为0，
                // 或者当前格子上立方体数量大于左面格子立方体数量
                if (j > 0 && ((grid[i][j] > grid[i][j - 1]) || grid[i][j - 1] == 0)) {
                    // 左面面积加上前后立方体数量的差
                    area += (grid[i][j] - grid[i][j - 1]);
                }
            }
        }
    }

    // 计算整个三维形体的面积
    area = 2 * (area + count);

    return area;
}
```