思路和之前463题求岛屿的周长里chilaxboy（找python3解法，头像是个小狗）的解法是一样的。只不过那题是二维，这题是三维。只要想清楚，其实是一样的。
一个正方体的表面积是6，两个并列的正方体表面积是10.
我们这么来考虑这个问题10=6乘2-2乘1
6乘2是我们把所有正方体的表面积单独计算求和，每个正方体6个面，有2个正方体。
2乘1是因为我们只考虑一个方向的重叠，最后计算重叠总数时，用2乘单方向重叠数即可。
（如某正方体右面有重叠时，其右边那个正方体的左面肯定也有重叠。我们只考虑每个正方体右面的重叠，最后用2乘以这个数得到的就是每个正方体左面和右面重叠数之和。）
最后我们将两者做差就可以得到三维体的表面积。
三维的情况下我们三个方向视作x,y,z我们只考虑正向，不考虑反向。
接下来我们看代码。
```
class Solution:
    def surfaceArea(self, grid: List[List[int]]) -> int:
        #定义三个方向，初始重叠数设置为0
        x=0
        y=0
        z=0
        #定义正方体个数，初始设置为0
        count=0
        lenx=len(grid)
        leny=len(grid[0])
        for i in range(lenx):
            for j in range(leny):
                #如果i,j位置上为0,代表该位置不存在正方体，也不会发生重叠，继续到下一位置
                if grid[i][j]==0: continue
                #记录该位置上正方体数量
                count+=grid[i][j]
                #只看每个正方体的顶是否有重叠，结果发现除了最上面的正方体，剩下的正方体顶都有重叠
                z+=grid[i][j]-1
                #x方向只看正向，如果正方体处在最后一排(i=lenx-1)，其x方向一定不会有重叠，不考虑
                #如果x方向的下一个位置不存在正方体，则x方向也一定不会有重叠
                #剩下的情况，x方向一定有重叠，且重叠面数量只取决于两个柱体中较矮的那个的高度
                if i+1<lenx and grid[i+1][j]>0:
                    x+=min(grid[i][j],grid[i+1][j])
                #y方向上同理
                if j+1<leny and grid[i][j+1]>0:
                    y+=min(grid[i][j],grid[i][j+1])
        #最后算出结果，大功告成！
        return 6*count-2*(x+y+z)
```
