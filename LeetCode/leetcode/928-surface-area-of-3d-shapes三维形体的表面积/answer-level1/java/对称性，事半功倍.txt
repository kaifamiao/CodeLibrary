### 解题思路
求表面积，就是求上下左右前后6个方向的面积总和
因为空间的对称性，每一组方向中只需要求一个，另一个也是同样大小

- 上下方向比较好理解：单元格中如果有立方体，记作1，没有记作0
- 前后左右稍微难一些：首先，因为对称性，如果知道了前后方向的求法，在同一个二重循环中，左右方向的只需调换`i`和`j`的位置即同理可得
- 那要如何求得前后的呢？通过观察发现，前后两排立方体中，后排的前面（或者叫“正面”？）会被前排的立方体挡住或挡住一部分，为了不重复计算被挡住的部分，我们每次只求多出的未被挡住的部分（取差分）即可
⚠️注意：这里的算法是取差分，而不能够求每一行（列）的最大值，不然会漏掉凹进去部分的表面积

最后把求得的3方向面积✖️2就是总的表面积了
（如果画图可能会说的比较清楚，，，

### 代码

```java
class Solution {
    public int surfaceArea(int[][] grid) {
        int x = 0;
        int y = 0;
        int z = 0;
        for(int i=0; i<grid.length; i++) {
            x += grid[i][0];
            y += grid[0][i];
            z += grid[i][0] != 0 ? 1 : 0;
            for(int j=1; j<grid.length; j++) {
                x += Math.max(grid[i][j] - grid[i][j-1], 0);
                y += Math.max(grid[j][i] - grid[j-1][i], 0);
                z += grid[i][j] != 0 ? 1 : 0;
            }
        }
        return 2 * (x + y + z);
    }
}
```