### 解题思路
本人的笨蛋解法。比如第一个输入了一个二维数组，不过这个数组是一行一列，这一列上面的数字是2，就代表在一个1*1的网格上放了两个摞起来的1*1*1的方框，这个立方体的表面积就是总共2*6减去重叠盖住的两个1结果是10；第二个，输入了一个两行两列的数组，代表有一个2*2的网格，那么第一行第一列数字1，放了一个方框，第一行第二列放了2个，第二行第一列放了3个，第二行第二列放了4个，然后把这个图形算出表面积。

如何计算呢，一开始想的是根据三视图，但是会出现后面的三列，中间小两边大的部分，也就是说表面积除了三视图还要加上中间掏掉的类似的面积，比较难以判断，因此想法就是按照先算出这么多小方块的面积，然后分别按照行、列和层三个角度来减去被重叠掉的面积，被重叠的面积可以观察到，就是两两数相比较得到的比较小的数字*2。
比如示例2：1和2作为同一行，进行比较的时候，1小，因此要减去1*2的面积，可以想象，重叠的面积总是比较小的那个来算。
对于层来讲，只需要把所有行列里面大于等于1的元素减去1，然后*2就可：比如这一个位置放了4个立方体，被重叠掉的面积显然就是3*2，如果是只有0个方框则没必要计算。

### 代码

```java
class Solution {
    public int surfaceArea(int[][] grid) {
        int sum=0;
        //注意java中对于二维数组,.length返回的是行数
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                sum+=6*grid[i][j];//加上原始的数字
                if(grid[i][j]>=1){
                    sum-=2*(grid[i][j]-1);//减去层的重叠
                }
            }
        }
        for(int i=0;i<grid.length;i++){//对于每一行
            for(int j=1;j<grid[i].length;j++){
                sum-=2*(grid[i][j]<grid[i][j-1]?grid[i][j]:grid[i][j-1]);
            }
        }
        for(int j=0;j<grid[0].length;j++){//对于每一列
            for(int i=1;i<grid.length;i++){
                sum-=2*(grid[i][j]<grid[i-1][j]?grid[i][j]:grid[i-1][j]);
            }
        }
        return sum;
    }
}
```