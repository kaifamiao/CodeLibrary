### 解题思路
开头申明，用一行过每日一题是一种兴趣爱好，不是良好的代码习惯，对应试也没有帮助，不喜勿喷。看了一下别的题解，大多数人都是总面积减去重叠部分，比较容易想到，但写出来的代码比较繁琐。于是分享一下我的另一种思路。

分两部分计算，一部分是从上往下看（俯视图）的面积，该面积与仰视图相同所以要乘以二；另一部分是侧面的面积，包括侧面的外边和凹进去的内边。

对于第一部分，等价于求这个N*N矩阵中有几个非零的数。sum(grid,[])是将二维数组展开为一维，map(bool, ...)是将数组中数用bool函数过一遍，也就是非零的数全都变成1；最后套一个sum，输出数组的和。放在一起就是数出数组中有多少个非零的数。

对于第二部分，先来理解里面的那个lambda，它的作用是数出某一行的总侧面面积是多少，其中x[0]+x[-1]代表外边的面积，sum(abs(x[i+1]-x[i]))代表内边的面积，想不清楚的同学可以画个图看看；然后用这个lambda作用于每一行和每一列后再求和即可，其中zip(*grid)表示grid的转置。

### 代码

```python
class Solution(object):
    def surfaceArea(self, grid):
        return 2*sum(map(bool,sum(grid,[])))+sum(map(lambda x:x[0]+x[-1]+sum([abs(x[i+1]-x[i]) for i in range(len(x)-1)]), grid+zip(*grid)))
```