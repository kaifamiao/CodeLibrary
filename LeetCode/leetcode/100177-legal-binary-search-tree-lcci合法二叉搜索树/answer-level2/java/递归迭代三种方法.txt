## 04.05. 合法二叉搜索树

### Information

* TIME: 2020/03/09
* LINK: [Click Here](https://leetcode-cn.com/problems/legal-binary-search-tree-lcci/)
* TAG: `BST`

### Description

> 实现一个函数，检查一棵二叉树是否为二叉搜索树。

### Example

```text
输入:
    2
   / \
  1   3
输出: true
```

### My Answer -1

> 范围检测，维护当前子树的最值，子树根的值必须在该范围内

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBSTHelper(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    public boolean isValidBSTHelper(TreeNode root, long min, long max){
        if(root == null) return true;
        if(root.val > min && root.val < max){
            return isValidBSTHelper(root.left, min, root.val) && isValidBSTHelper(root.right, root.val, max);
        }
        return false;
    }
}
```

### My Answer -2

> 维护、更新前驱节点，当前遍历节点必须大于前驱

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private TreeNode pre = null;
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        boolean left = isValidBST(root.left);
        if(pre != null && pre.val >= root.val) return false;
        pre = root;
        return left && isValidBST(root.right);
    }
}
```

### My Answer -3

> 迭代算法，中序遍历，记录前驱，当前节点必须大于前驱

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode cur = root;
        TreeNode pre = null;
        while(cur != null || !stack.isEmpty()){
            while(cur != null){
                stack.push(cur);
                cur = cur.left;
            }
            cur = stack.pop();
            //System.out.println(cur.val);
            if(pre != null && cur.val <= pre.val) return false;
            pre = cur;
            cur = cur.right;
        }
        return true;
    }
}
```



### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/0db7c9c70af34ca08d4a969975a14f87187e1600b3339f166b9a995db6ca9901-file_1583764922951)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

