

```
class Solution {
    public List<List<String>> wordSquares(String[] words) {
        int n = words[0].length();
        Trie trie = new Trie();
        for (String word: words)
            trie.insert(word, n);
        
        List<List<String>> result = new LinkedList();
        String[] finished = new String[n];
        char[][] board = new char[n][n];
        
        search(trie.root, trie.root, board, 0, 0, n, finished, result);
        
        return result;
    }
    
    /*
    *   current：当前搜索节点
    *   root：根节点
    *   board：字符矩阵
    *   i：正要处理的行（第几个单词）
    *   j：正要处理的列（第几个字符）
    *   n：单词长度（矩阵宽度）
    *   finished：已经填好的单词（0 ~ i-1 已经填好）
    *   result：输出结果
    */
    private void search(TrieNode current, TrieNode root, char[][] board, int i, int j, int n, String[] finished, List<List<String>> result) {
        
        // 全部n个单词填好，输出结果
        if (i == n) {
            result.add(new ArrayList<String>(Arrays.asList(finished)));
            return;
        }
        
        // 第i个单词填好，放入finished
        if (j == n) {
            finished[i] = current.word;
            search(root, root, board, i+1, 0, n, finished, result);
            return;
        }
        
        // 之前已经填过的格子，检查是否可以找到
        // 比如在填第一个单词wall时，(0, 1) 处字符填了a，同时在(1, 0)处也填了a
        // 那么在处理第二个单词时，先要看第一个字符（也就是 i = 0, j = 1 处是否可以为a
        // 如果不能为 a，结束该搜索过程，回溯
        if (j < i) {
            TrieNode child = current.getChild(board[i][j]);
            if (child != null)
                search(child, root, board, i, j+1, n, finished, result);
            return;
        }
        
        // 尝试在该点添堵所有可能的字符
        for (int c = 0; c < 26; ++c) {
            if (current.children[c] != null) {
                // 如果在填第一个单词时，同时可以判断每个字符是否可以作为起始字符，从而减少递归分支
                if (i == 0 && root.children[c] == null)
                    continue;
                board[j][i] = board[i][j] = (char) ('a' + c);
                search(current.children[c], root, board, i, j+1, n, finished, result);
            }
        }
    }
    
}

class Trie {
    public TrieNode root = new TrieNode();
    
    public void insert(String word, int n) {
        TrieNode node = root;
        int charNo;
        for (int i = 0; i < n; ++i) {
            charNo = word.charAt(i) - 'a';
            if (node.children[charNo] == null)
                node.children[charNo] = new TrieNode();
            node = node.children[charNo];
        }
        node.word = word;
    }
}

class TrieNode {
    public TrieNode[] children = new TrieNode[26];
    public String word = null;
    
    public TrieNode getChild(char c) {
        return children[c - 'a'];
    }
}
```

![image.png](https://pic.leetcode-cn.com/e2981413be8ceb1713b64f5760756c875811f0ad206a3984208b854f890558c7-image.png)



再补充一个C++的，递归参数和Java的有所不同。

```
class TrieNode {
public:
    string* word = nullptr;
    TrieNode* children[26];
    
    TrieNode() {
        for (int i = 0; i < 26; ++i)
            children[i] = nullptr;
    }
    
    ~TrieNode() {
        for (int i = 0; i < 26; ++i)
            delete children[i];
    }
};


class Trie {
private:
    TrieNode rootNode;
public:
    TrieNode* root;
    
    Trie() {
        root = &rootNode;
    }
    
    void insert(string& word) {
        TrieNode* node = root;
        for (char c: word) {
            int index = c - 'a';
            if (node->children[index] == nullptr)
                node->children[index] = new TrieNode;
            node = node->children[index];
        }
        node->word = &word;
    }
};


class Solution {
private:
    Trie trie;
    
    void helper(TrieNode* node, 
                int index,
                vector<TrieNode*>& columns, 
                vector<string>& candidate, 
                vector<vector<string>>& result) {
        
        if (node->word != nullptr) {
            candidate.push_back(*node->word);
            if (candidate.size() == columns.size())
                result.push_back(candidate);
            else
                helper(columns[candidate.size()], candidate.size(), columns, candidate, result);
            candidate.pop_back();
            return;
        }
        
        for (int i = 0; i < 26; ++i) {
            if (node->children[i] != nullptr && columns[index]->children[i] != nullptr) {
                TrieNode* parent = columns[index];
                columns[index] = columns[index]->children[i];
                helper(node->children[i], index+1, columns, candidate, result);
                columns[index] = parent;
            }
        }
    }
    
public:
    vector<vector<string>> wordSquares(vector<string>& words) {
        for (string& word: words)
            trie.insert(word);
        
        int n = words[0].size();
        vector<TrieNode*> columns(n, trie.root);
        vector<string> candidate;
        vector<vector<string>> result;
        helper(trie.root, 0, columns, candidate, result);
        
        return result;
    }
};
```
