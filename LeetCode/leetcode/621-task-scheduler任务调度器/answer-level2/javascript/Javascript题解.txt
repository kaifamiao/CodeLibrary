[我的力扣JS题解](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)

[力扣621.任务调度器。](https://leetcode-cn.com/problems/task-scheduler/solution/621-ren-wu-diao-du-qi-java-jie-ti-zhu-shi-ying-gai/)     

最短时间会有两种情况：
- 执行过程中没有待命的情况发生，即所有任务连续执行，没有停顿，那么最短时间即为任务总数
- 执行过程中出现了待命状态，那么最短时间需要将待命状态计算在内。


执行完所有任务的最短时间是跟数量最多的那个种类的任务的数量相关的，即假设在`["A","A","A","B","B"]`，数量最多的任务是`A`，数量是3，那么执行完所有的任务最少需要`(3-1)*(n+1)+1`，推广到所有用例中，假设数量最多的任务的数量为x，那么最短时间至少为`(x-1)*(n+1)+1`。   

首先考虑**第一种情况**：

当任务的种类数大于冷却时间n时，说明两个任务之间的间隔一定会被填满，则此时对应第一种情况，最短时间即为任务总数。   

然后是**第二种情况**：   

考虑数量第二多的任务，假设数量第二多的任务的数量小于x，那么在两个相同任务的间隔内即可插满。

如果等于x，那么最后一个任务跟在数量最多的任务最后一次执行后，即最短时间加1。

依次往下类推。   

```javascript
/**
 * @param {character[]} tasks
 * @param {number} n
 * @return {number}
 */
var leastInterval = function(tasks, n) {
    let map = new Map();
    // 遍历计算所有任务出现的次数
    for (let i = 0; i < tasks.length; i++) {
        if (map.has(tasks[i])) {
            map.set(tasks[i], map.get(tasks[i])+1);
        } else {
            map.set(tasks[i], 1);
        }
    }
    // 对次数进行递减排序
    let arr = [...map.values()].sort((a,b) => b-a);
    let maxNum = arr[0];
    let res = (maxNum - 1) * (n + 1) + 1;
    let i = 1;
    while (i < arr.length && arr[i] === maxNum) {
        // 如果存在其他任务的出现次数跟最大次数相同
        res++;
        i++;
    }
    return Math.max(tasks.length, res)
};
```