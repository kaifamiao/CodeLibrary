```
public int leastInterval(char[] tasks, int n) {
        /*
        * 根据题目，我们可以想到的是，先取出数量最多的那种任务来完成，这样才能让所需时间尽可能短
        * 由于所有任务都有一个冷却时间n，我们可以采用n+1个任务执行为一轮的方式来计算时间
        * eg：   冷却时间为3，那么第一个任务执行后需要等3次执行时间 第一次（执行） 第二次（冷却1） 第三次（冷却2） 第四次（冷却3）第五次（执行）
        *
        * */

        //因为任务是从A到Z，最多26种，所以为了给这些任务赋值数量，就创建一个长度为26的数组
        int [] map = new int[26];
        //遍历给出的字节数组tasks
        for (char c :tasks){
            //在这里，我们用遍历出来的字节与字节A相减作为该字符的下标。 即，从A到Z，在我们自己创建的数组中表示为0-25
            //并且每当遍历到一个字节，就把我们创建的数组中相应位置的数值+1
            map[c-'A']++;
        }
        //给map数组排序
        Arrays.sort(map);
        //排序后从小到大 这样，我们就把所有的任务按照数量给排序了，并且
//        先将时间设置出来，初始值为0
        int time =0;
        //然后开始按照 n+1次为一轮来执行任务
        //首先要保证我们创建的map集合最后一位大于零（任务次数最多的任务应该有执行次数）
        while (map[25]>0){
            //开始执行n+1次为一轮的任务，用i来表示任务执行的次数
            int i =0;
            while (i<=n){
                //这里break是跳出每一轮的小循环，是为了最后再执行一次排序。以防25之前还有任务有剩余次数
                if (map[25]==0){
                    break;
                }
                //当指针i小于26时，并且当前位置的执行次数大于0时，让此处的任务数量减一
                if (i < 26 && map[25 - i] > 0) {
                    map[25 - i]--;
                }
                //循环执行到这里，不论是否有任务执行，或是全部冷却，时间均++，指针也++
                time++;
                i++;
            }
            //每当一个小循环完毕时，就将剩下的任务再次按照数量来排序，以便开始下次循环
            Arrays.sort(map);
        }
        return time;
    }
```

看到了力扣官方题解得到的启发

我是想到了用一个东西把任务名称跟任务数量结合起来，于是想到了map。但是map这样放置的话排序就是一个大问题了，还需要再创建一个集合来根据map的值来排序。
官方给的这个用数组来储存简直是秒。

我才发现，根本就不需要任务名称，只需要26个任务数量即可。

正好给的任务数组是字节，可以用跟A字节的差值来当位置，数量来当值

官方解法中还有一个让我深感受益的地方就是循环内对map【25】的判断，若等于零，会再次进行一次排序，以防止25之前还有任务有剩余执行次数