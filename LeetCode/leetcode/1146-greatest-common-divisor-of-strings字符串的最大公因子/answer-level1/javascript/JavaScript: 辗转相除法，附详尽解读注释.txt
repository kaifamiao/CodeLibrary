由题意得知，需要在字符串`str1`和字符串`str2`中找寻一个最大的字符串`X`，使得`X`可以同时除尽字符串`str1`和字符串`str2`。

你品，你细品，“除尽”是不是意味着——字符串`str1`和`str2`内只存在**一或多个**的字符`X`。

即，字符串`str1`可由`x`个字符串`X`拼接而成，字符串`str2`可由`y`个字符串`X`构成，`x、y`皆大于等于1。

可得公式，`str1 + str2 = (x + y)X`。那么同理，`str2 + str1 = (y + x)X`。

所以只要满足`str1 + str2 === str2 + str1`（Javascript代码）,说明了在字符串`str1`和`str2`内必存在字符串`X`。

接下来回顾下两个数学概念：
- **约数**。整数`a`除以整数`b(b≠0)`除得的商正好是整数而没有余数，那么整数`b`称为`a`的约数。即`4`的正约数有：`1`、`2`、`4`。代入到字符串中，则意味着字符串`ABC`的约数（其实就是子字符串）共有`A`，`B`，`C`三个。
- **最大公约数**。两个或多个整数共有约数中最大的一个被称为最大公约数。举例：求数值`3`和数值`9`的最大公约数。数值`3`的正约数有`1`,`3`，数值`9`的正约数有`1`,`3`,`9`，数值`3`与数值`9`约数并集（既存在`3`的约数集中，又存在`9`的约数集中的数的集合）为`1、3`。则最大公约数为`3`。写作`gcd(3, 9) = 3`。*附，`gcd`是英文`Greatest Common Divisor`（最大公约数）的缩写*。代入到字符串中，则字符串`ABCABC`和字符串`ABC`的最大公约数为`ABC`，即本题中所需要的最大公因子。

那么问题的关键就可以，如何求得最大公约数？在数学中，可以利用**辗转相除法**来计算最大公约数。

辗转相除法是**以除数和余数反复做除法运算，当余数为 0 时，取当前算式除数为最大公约数**的计算公式。如下：
1997 / 615 = 3 (余 152)
615 / 152 = 4(余7)
152 / 7 = 21(余5)
7 / 5 = 1 (余2)
5 / 2 = 2 (余1)
2 / **1** = 2 (余0)
至此，最大公约数为1。

由此，可以写出gcd函数：
```
// 最大公约数计算公式
function gcd(num1, num2) {
    // 利用辗转相除法来计算最大公约数
    return num2 === 0 ? num1 : gcd(num2, num1 % num2); 
}
```
所以，整题的解题代码如下所示：
```
var gcdOfStrings = function(str1, str2) {
    // 不相等则间接说明了不存在字符串X
    if (str1 + str2 !== str2 + str1) {
        return '';
    }

    // 最大公约数计算公式
    function gcd(num1, num2) {
        // 利用辗转相除法来计算最大公约数，即字符串X在字符串str1中截止的索引位置
        return num2 === 0 ? num1 : gcd(num2, num1 % num2); 
    }

    // 截取匹配的字符串
    return str1.substring(0, gcd(str1.length, str2.length));
};
```

