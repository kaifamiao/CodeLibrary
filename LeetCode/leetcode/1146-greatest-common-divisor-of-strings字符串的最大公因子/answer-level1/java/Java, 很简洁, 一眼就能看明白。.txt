
*题外话：[动画真·硬核炫耀一下我的双指针模版](https://leetcode-cn.com/circle/article/8z7Hq0/)*

**>>>>>>>>>>>>>>>>>>>以下正文>>>>>>>>>>>>>>>>>>>>>**



``` Java
class Solution {
    public String gcdOfStrings(String str1, String str2) {
        // 假设str1是N个x，str2是M个x，那么str1+str2肯定是等于str2+str1的。
        if (!(str1 + str2).equals(str2 + str1)) {
            return "";
        }
        // 辗转相除法求gcd。
        return str1.substring(0, gcd(str1.length(), str2.length()));
    }

    private int gcd(int a, int b) {
        return b == 0? a: gcd(b, a % b);
    }
}
```


看见评论里有人在讨论，简单证明了一下：
1、若s1和s2存在相同的除数X，即s1=XXX, s2=XX, 可见s1+s2=s2+s1
2、现在的问题是：若s1和s2不存在相同的除数，那么是否存在s1+s2=s2+s1的情况呢？
我们假设s1和s2不存在相同的除数，且满足s1+s2=s2+s1，如下图所示（红色的是s1，蓝色的是s2，其中s1长于s2）
![9137AE9D-7EF8-4B18-BD89-634FF4B7148B.png](https://pic.leetcode-cn.com/8c58fbfd90d648bfd13739b3dc081c2a10fca2eb63b1bfeee5e56dc31caeb799-9137AE9D-7EF8-4B18-BD89-634FF4B7148B.png)

那由上图可知s2既是s1的前缀，又是s2的后缀（灰色表示）。
![7968A282-2D53-4E13-BD5A-8528B8F1145C.png](https://pic.leetcode-cn.com/b6cf6f7c055a2bc43614262be84cd8f22fbd57cd720e3441fc24b56814d3f51a-7968A282-2D53-4E13-BD5A-8528B8F1145C.png)

再看上图的黄色部分可知s3+s2=s2+s3；其中s3=s1-s2。
以上，我们由s1+s2=s2+s1推出了s3+s2=s2+s3， 其中s3 = s1 - s2。
继而，s3 + s4 = s4 + s3,其中s4 = s3 - s2。
然后可以递归下去，每次用长的减去短的。
因为我们的假设条件是等式s1+s2=s2+s1成立，即上图示成立，所以每次递归时的两个字符串，短串总是长串的前缀和后缀，所以两串总是可减的，
所以我们总是能减到两个串相等的时候，相等时即是最大公共除数，与假设的没有公共除数矛盾。
因此结论是若s1和s2不存在公共除数，则s1+s2!=s2+s1(反之亦然)。
