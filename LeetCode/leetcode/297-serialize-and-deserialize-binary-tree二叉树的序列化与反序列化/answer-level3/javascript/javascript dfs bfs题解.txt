[297.二叉树的序列化与反序列化](https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/submissions/)   

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)    

题目的要求就是能够把一个二叉树转成字符串（格式自定），然后在把这个字符串反序列化成一个二叉树，只要能够完成这个序列化和反序列化的过程即可。   


## 方法一 层序遍历非递归   

### 数组形式

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */

/**
 * Encodes a tree to a single string.
 *
 * @param {TreeNode} root
 * @return {string}
 */
var serialize = function(root) {
    if (root === null) return [];
    let res = [];
    let node = root,
        queue = [node];
    while (queue.length > 0) {
        node = queue.shift();
        if (node === null) {
            res.push(null);
        } else {
            res.push(node.val);
            queue.push(node.left);
            queue.push(node.right);
        }
    }
    return res;
};

/**
 * Decodes your encoded data to tree.
 *
 * @param {string} data
 * @return {TreeNode}
 */
var deserialize = function(data) {
    if (data.length === 0) return null;
    let root = new TreeNode(data.shift());
    let queue = [root];
    while (queue.length > 0) {
        let node = queue.shift();
        // 数组中的节点已经计算完毕
        if (data.length <= 0) break;
        let left = data.shift(); // 左子节点的值
        if (left === null) {
            node.left = null;
        } else {
            node.left = new TreeNode(left);
            queue.push(node.left);
        }
        // 数组中的节点已经计算完毕
        if (data.length <= 0) break;
        let right = data.shift();
        if (right === null) {
            node.right = null;
        } else {
            node.right = new TreeNode(right);
            queue.push(node.right);
        }
    }
    return root;
};

/**
 * Your functions will be called as such:
 * deserialize(serialize(root));
 */
```

---


### 字符串形式

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */

/**
 * Encodes a tree to a single string.
 *
 * @param {TreeNode} root
 * @return {string}
 */
var serialize = function(root) {
    if (root === null) return "";
    let res = [];
    let node = root,
        queue = [node];
    while (queue.length > 0) {
        node = queue.shift();
        if (node === null) {
            res.push("null")
        } else {
            res.push(node.val);
            queue.push(node.left);
            queue.push(node.right);
        }
    }
    return res.toString();
};

/**
 * Decodes your encoded data to tree.
 *
 * @param {string} data
 * @return {TreeNode}
 */
var deserialize = function(data) {
    if (data === "") return null;
    let arr = data.split(",");
    let root = new TreeNode(arr.shift());
    let queue = [root];
    while (queue.length > 0) {
        let node = queue.shift();
        if (arr.length <= 0 ) break;
        let left = arr.shift();
        if (left === "null") {
            node.left = null;
        } else {
            node.left = new TreeNode(left);
            queue.push(node.left);
        }
        if (arr.length <= 0 ) break;
        let right = arr.shift();
        if (right === "null") {
            node.right = null;
        } else {
            node.right = new TreeNode(right);
            queue.push(node.right);
        }
    }
    return root;
};

/**
 * Your functions will be called as such:
 * deserialize(serialize(root));
 */
```

## 方法二 DFS 递归 

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */

/**
 * Encodes a tree to a single string.
 *
 * @param {TreeNode} root
 * @return {string}
 */
var serialize = function(root) {
    let res = []
    function dfs(node) {
        if (node === null) {
            res.push(null);
            return;
        } else {
            res.push(node.val);
            dfs(node.left);
            dfs(node.right);
        }
    }
    dfs(root);
    return res;
};

/**
 * Decodes your encoded data to tree.
 *
 * @param {string} data
 * @return {TreeNode}
 */
var deserialize = function(data) {
    function dfs() {
        if (data.length === 0) {
            return null;
        }
        let val = data.shift();
        if (val === null) {
            return null;
        }
        let node = new TreeNode(val);
        node.left = dfs();
        node.right = dfs();
        
        return node;
    }
    return dfs()
};

/**
 * Your functions will be called as such:
 * deserialize(serialize(root));
 */
```