binary-search-tree-iterator
实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。

调用 <code>next()</code> 将返回二叉搜索树中的下一个最小的数。



<strong>示例：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/25/bst-tree.png" style="height: 178px; width: 189px;"></strong>

<pre>BSTIterator iterator = new BSTIterator(root);
iterator.next();    // 返回 3
iterator.next();    // 返回 7
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 9
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 15
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 20
iterator.hasNext(); // 返回 false</pre>



<strong>提示：</strong>

<ul>
	<code>next()</code>和<code>hasNext()</code>操作的时间复杂度是O(1)，并使用O(<em>h</em>) 内存，其中<em>h</em>是树的高度。
	你可以假设<code>next()</code>调用总是有效的，也就是说，当调用 <code>next()</code>时，BST 中至少存在一个下一个最小的数。
</ul>

二叉搜索树迭代器
Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling <code>next()</code> will return the next smallest number in the BST.



<ul>
</ul>

<strong>Example:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png" style="width: 189px; height: 178px;" /></strong>

<pre>
BSTIterator iterator = new BSTIterator(root);
iterator.next();    // return 3
iterator.next();    // return 7
iterator.hasNext(); // return true
iterator.next();    // return 9
iterator.hasNext(); // return true
iterator.next();    // return 15
iterator.hasNext(); // return true
iterator.next();    // return 20
iterator.hasNext(); // return false
</pre>



<b>Note:</b>

<ul>
	<code>next()</code> and <code>hasNext()</code> should run in average O(1) time and uses O(<i>h</i>) memory, where <i>h</i> is the height of the tree.
	You may assume that<code>next()</code>callwill always be valid, that is, there will be at least a next smallest number in the BST when <code>next()</code> is called.
</ul>
