### 解题思路


### 代码

```java
class Solution {
    public int minimumSemesters(int N, int[][] relations) {
        if (N <= 0) return -1;
        // 无依赖关系，第一学期就可以学完
        if (relations == null || relations.length == 0) return 1;
        // 构建图
        Node[] graph = new Node[N];
        // 入度
        int[] degree = new int[N];
        for (int[] relation : relations) {
            // 检测参数
            graph[relation[1] - 1] = new Node(relation[0] - 1, graph[relation[1] - 1]);
            degree[relation[0] - 1]++;
        }
        // 初始化队列
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < N; i++) {
            if (degree[i] == 0) queue.add(i);
        }
        // 存在环
        if (queue.isEmpty()) return -1;
        // 记录层数
        int count = 0;
        while (!queue.isEmpty()) {
            // 同层结点数
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int cur = queue.poll();
                Node temp = graph[cur];
                // 加入下一层无依赖结点
                while (temp != null) {
                    if (--degree[temp.ver] == 0) queue.add(temp.ver);
                    temp = temp.next;
                }
            }
            count++;
        }
        // 存在环
        for (int i = 0; i < N; i++) {
            if (degree[i] > 0) return -1;
        }
        return count;
    }
}

class Node {
    int ver;
    Node next;

    Node(int ver, Node next) {
        this.ver = ver;
        this.next = next;
    }
}
```
执行用时：5ms，在所有java提交中击败了100.00%的用户。

内存消耗：41.9MB，在所有java提交中击败了100.00%的用户。