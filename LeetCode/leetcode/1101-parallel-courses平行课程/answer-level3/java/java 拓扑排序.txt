# 思路
算是比较经典的拓扑排序模板题。具体步骤如下
1. 首先，建立一个邻接表，用来存在每门课程的后继课程列表；
2. 然后，求得每个节点的入度（即每门课程先行课程的个数）；
3. 接着，将入度为0（即没有先行课程的课程）的节点加入到队列中；
4. 最后，将队列中（只存放当前入度为0的节点）的所有节点出队，然后更新他们的所有后继节点的入度（减1），将更新后的入度为0的节点再加入到队列中，直到队列为空。同时，这里定义了两个变量：ans和leftNodeCount，ans就是学期数，leftNodeCount就是剩下的节点数，如代码所示。如果最终leftNodeCount没有减到0，就说明还有一些课程没发修，因为找不到入度为0的节点，如示例2中的两两相互依赖的情况。具体代码如下：

```java
class Solution {
    public int minimumSemesters(int n, int[][] relations) {
        ArrayList<Integer>[] adj = new ArrayList[n+1];

        for (int i = 1; i <= n; i++) {
            adj[i] = new ArrayList<>();
        }

        for (int i = 0; i < relations.length; i++) {
            int v1 = relations[i][0];
            int v2 = relations[i][1];
            adj[v1].add(v2);
        }

        int[] inDegree = new int[n + 1];

        for (int i = 1; i <= n; i++) {
            ArrayList<Integer> neighbors = adj[i];
            for (int j = 0; j < neighbors.size(); j++) {
                int neighbor = neighbors.get(j);
                inDegree[neighbor]++;
            }
        }

        LinkedList<Integer> queue = new LinkedList<>();
        for (int i = 1; i <= n; i++) {
            if (inDegree[i] == 0) {
                queue.addLast(i);
            }
        }

        if (queue.isEmpty()) {
            // 没有入度为0的
            return -1;
        }

        int ans = 0;
        int leftNodeCount = n;
        while (!queue.isEmpty()) {
            List<Integer> list = new ArrayList<>();
            while (!queue.isEmpty()) {
                list.add(queue.removeFirst());
            }

            leftNodeCount -= list.size();
            ans++;

            for (int i = 0; i < list.size(); i++) {
                int v = list.get(i);
                ArrayList<Integer> neighbors = adj[v];
                for (int j = 0; j < neighbors.size(); j++) {
                    int neighbor = neighbors.get(j);
                    inDegree[neighbor]--;
                    if (inDegree[neighbor] == 0) {
                        queue.addLast(neighbor);
                    }
                }
            }
        }

        return leftNodeCount > 0 ? -1 : ans;
    }
}
```