```
class Solution:
    def trailingZeroes(self, n: int) -> int:
        if(n==0):
            return(0)

        five_num = 0
        five_num_tmp = 0
        while(n>=5):
            five_num_tmp = int(n/5)
            n = five_num_tmp
            five_num =five_num +five_num_tmp

        return(five_num)
```
因为10只能是2x5，我们先来看看1到10中，能被2整除的数有2，4，6，8. 能被5整除的只有5，10.
这意味着，整个阶乘中，2的数量远远大于5的数量。于是这道题转变成了阶乘数可以被分解出多少个5.
假设n=78
由于 15x5<78<16x5
所以第一层中就分解出了15个5.
又由于1到78之间存在75，50， 25这类被5除一次后，还能接着被5整除的数。
所以第二层中，就接着对15分析。
由于15=5x3 所以第二层中有3个数可以被5整除。
现在由于3<5了，所以被5除了两次后，不可能还有被5整除的数了。

由此看出，我们只需要不断用5去除以n，直到商<5就可以了。然后每一层得到的商相加就OK了。
符合时间复杂度度O(logn)