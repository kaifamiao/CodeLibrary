## 思路：

找规律！

我们先用程序，暴力跑一下，

```
5 120
6 720
7 5040
8 40320
9 362880
10 3628800
11 39916800
12 479001600
13 6227020800
14 87178291200
15 1307674368000
16 20922789888000
17 355687428096000
18 6402373705728000
19 121645100408832000
20 2432902008176640000
21 51090942171709440000
22 1124000727777607680000
23 25852016738884976640000
24 620448401733239439360000
25 15511210043330985984000000
26 403291461126605635584000000
27 10888869450418352160768000000
28 304888344611713860501504000000
```

发现能在末尾形成`0`，来自因子`2`和`5` ,只有有`5`，就一定存在一个数可以拆成`2`(4，6，8)乘以某个数。这样末尾就有`0`了。

所以，我们前`n`数能拆成多少个`5`出来。

当`n =5`时候，可以拆出 `1`个

`n=10`,拆出`2`....

但是，这里`n = 25`,可以拆出`6`而不是`5`，是因为 `25`自身能多拆一个

还有`125`。。。

相当于 `n / 5 + n/ 25 + n /125 ...`

即 $\frac{\frac{\frac{n}{5}}{5}}{5}$

所以，代码如下

递归：

```python
class Solution:
    def trailingZeroes(self, n: int) -> int:
    	return  n // 5 + self.trailingZeroes(n // 5) if n != 0 else 0
```

非递归：

```python
class Solution:
    def trailingZeroes(self, n: int) -> int:
        res = 0
        while n > 0:
            n //= 5
            res += n
        return res
```



