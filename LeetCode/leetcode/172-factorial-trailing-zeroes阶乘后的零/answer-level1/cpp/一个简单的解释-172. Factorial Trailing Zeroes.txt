首先要求阶乘末尾有多少个零，可以视为有多少个10在阶乘过程中生成。生成一个10，只有两个途径，包含一个10的倍数，或者同时包含一个5和2的倍数。
举例说明，求25的阶乘有多少个零。如下：
1  2  3  4  **5**
6  7  8  9  **10**
11 12 13 14 **15**
16 17 18 19 **20**
21 22 23 24 **25**

可以看见因为阶乘是顺序生成数字相乘，每个5的倍数都能生成一个10（前方必然有2的倍数）（10不需要其他数就算）。
当计算到**25**时，可以发现25比较特殊，因为它是5*5，包含两个5，相应可以生成两个10。
因此可以认为，
1. 每逢5的倍数，增加一个0.
2. 每逢5的k次幂，相应地增加k个0.
那么要做的就是依次计算n以内的5的1次幂一直到5的k次幂。
代码如下：
```
class Solution {
public:
    int trailingZeroes(int n) {
        int res = 0;
        while(n)
        {
            res += n/5;
            //res += (n%10) < 5 ? 0 : 1;
            n = n/5;
        }
        return res;
    }
};
```
