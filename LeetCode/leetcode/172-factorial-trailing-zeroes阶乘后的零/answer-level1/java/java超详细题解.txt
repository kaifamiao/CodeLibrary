最开始让我写题解我是拒绝的，我觉得easy的题没问题，而且题意相比大家也好理解，就判断其中能整除5和2的个数被，就算不知道2或者5的个数谁多谁少，最后返回一个较小值不就完了，这样想着，然后当例子40时我的结果为6，答案为7时，我意识到了不对，看了下题解发现大部分说的都不够详细。
的确是寻找能整除5的个数，但是要知道有的数能整除5，但他的结果也为5。例如25，所以我们的while循环中应该一层一层去判断，第一层判断其中有5的个数，加上这个个数，之后让n/5,之后再判断n是否大于等于5如果大于等于5就代表存在有两层的数（25），也就是说存在能整除25的数，再加上能整除25的个数，不要担心，他的确是有两个5，但第一层循环时，我们已经加上了一次，所以这里只要再加一次即可。

```
class Solution {
    public int trailingZeroes(int n) {
        if(n==0)
            return 0;
        //能除开5都算
        int fivetimes = 0;
        //能除开2都算
        int twotimes = 0;
        //因为只有5和2相乘才可以是10。于是计算n中5的个数，要注意比如25其实是有两个5，
        while(n>=5)
        {
            //每次都只加一层的个数

            //第一层有5的个数（以25为例）
            fivetimes+=n/5;
            //除以5之后就变成了第二层（n中包含25的个数，如果有一个就会在第二层判断时+1）...以此类推之后是n中包含25*5=125的个数;
            n=n/5;
        }
        return fivetimes;
    }
}
```
