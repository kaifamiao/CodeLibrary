snapshot-array
实现支持下列接口的「快照数组」-SnapshotArray：

<ul>
	<code>SnapshotArray(int length)</code>- 初始化一个与指定长度相等的 类数组 的数据结构。<strong>初始时，每个元素都等于</strong><strong>0</strong>。
	<code>void set(index, val)</code>- 会将指定索引<code>index</code>处的元素设置为<code>val</code>。
	<code>int snap()</code>- 获取该数组的快照，并返回快照的编号<code>snap_id</code>（快照号是调用<code>snap()</code>的总次数减去<code>1</code>）。
	<code>int get(index, snap_id)</code>- 根据指定的<code>snap_id</code>选择快照，并返回该快照指定索引 <code>index</code>的值。
</ul>



<strong>示例：</strong>

<pre><strong>输入：</strong>[&quot;SnapshotArray&quot;,&quot;set&quot;,&quot;snap&quot;,&quot;set&quot;,&quot;get&quot;]
     [[3],[0,5],[],[0,6],[0,0]]
<strong>输出：</strong>[null,null,0,null,5]
<strong>解释：
</strong>SnapshotArray snapshotArr = new SnapshotArray(3); // 初始化一个长度为 3 的快照数组
snapshotArr.set(0,5);  // 令 array[0] = 5
snapshotArr.snap();  // 获取快照，返回 snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // 获取 snap_id = 0 的快照中 array[0] 的值，返回 5</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= length&lt;= 50000</code>
	题目最多进行<code>50000</code> 次<code>set</code>，<code>snap</code>，和<code>get</code>的调用 。
	<code>0 &lt;= index&lt;length</code>
	<code>0 &lt;=snap_id &lt;</code>我们调用<code>snap()</code>的总次数
	<code>0 &lt;=val &lt;= 10^9</code>
</ul>

快照数组
Implement a SnapshotArray that supports the following interface:

<ul>
	<code>SnapshotArray(int length)</code> initializes an array-like data structure with the given length. <strong>Initially, each element equals 0</strong>.
	<code>void set(index, val)</code> sets the element at the given <code>index</code> to be equal to <code>val</code>.
	<code>int snap()</code>takes a snapshot of the array and returns the <code>snap_id</code>: the total number of times we called <code>snap()</code> minus <code>1</code>.
	<code>int get(index, snap_id)</code>returns the value at the given <code>index</code>, at the time we took the snapshot with the given <code>snap_id</code>
</ul>


<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> [&quot;SnapshotArray&quot;,&quot;set&quot;,&quot;snap&quot;,&quot;set&quot;,&quot;get&quot;]
[[3],[0,5],[],[0,6],[0,0]]
<strong>Output:</strong> [null,null,0,null,5]
<strong>Explanation: </strong>
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= length&lt;= 50000</code>
	At most <code>50000</code>calls will be made to <code>set</code>, <code>snap</code>, and <code>get</code>.
	<code>0 &lt;= index&lt;length</code>
	<code>0 &lt;=snap_id &lt;</code>(the total number of times we call <code>snap()</code>)
	<code>0 &lt;=val &lt;= 10^9</code>
</ul>
