思路：**

由于快照功能 `snap()` 的调用次数可能很多，所以我们如果采用每次快照都整体保存一次数组的方法，无论在时间复杂度还是空间复杂度上，都是行不通的。那么更优化的方法是，只保存每次快照变化的部分。所以我们建立的不是一个数组，而是要建立一个哈希字典数组，每个字典的索引是快照的 `snap_id`，这样，我们在返回某个快照的元素值时，只需要查找这个快照 `snap_id` 前的最后一次修改即可。

查找的方式可以采用二分搜索的方式来降低时间复杂度。

**代码：**

```python
class SnapshotArray:

    def __init__(self, length: int):
        # 初始化字典数组和 id
        self.arr = [{0: 0} for _ in range(length)]
        self.sid = 0

    def set(self, index: int, val: int) -> None:
        # 设置当前快照的元素值
        self.arr[index][self.sid] = val

    def snap(self) -> int:
        # 每次快照 id 加 1
        self.sid += 1
        # 返回上一个快照 id
        return self.sid - 1

    def get(self, index: int, snap_id: int) -> int:
        # 选择要查找的元素的字典
        d = self.arr[index]
        # 如果快照恰好存在, 直接返回
        if snap_id in d:
            return d[snap_id]
        # 不存在则进行二分搜索, 查找快照前最后一次修改
        k = list(d.keys())
        i = bisect.bisect_left(k, snap_id)
        return d[k[i - 1]]


# Your SnapshotArray object will be instantiated and called as such:
# obj = SnapshotArray(length)
# obj.set(index,val)
# param_2 = obj.snap()
# param_3 = obj.get(index,snap_id)
```

