number-of-ships-in-a-rectangle
<em>(此题是 <strong>交互式问题</strong>)</em>

在用笛卡尔坐标系表示的二维海平面上，有一些船。每一艘船都在一个整数点上，且每一个整数点最多只有 1 艘船。

有一个函数<code>Sea.hasShips(topRight, bottomLeft)</code>，输入参数为右上角和左下角两个点的坐标，当且仅当这两个点所表示的矩形区域（包含边界）内至少有一艘船时，这个函数才返回<code>true</code>，否则返回<code>false</code> 。

给你矩形的右上角<code>topRight</code> 和左下角<code>bottomLeft</code> 的坐标，请你返回此矩形内船只的数目。题目保证矩形内<strong>至多只有 10 艘船</strong>。

调用函数<code>hasShips</code><strong>超过400次</strong>的提交将被判为<em>错误答案（Wrong Answer）</em>。同时，任何尝试绕过评测系统的行为都将被取消比赛资格。



<strong>示例：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/30/1445_example_1.png" style="height: 404px; width: 400px;">

<pre><strong>输入：</strong>
ships = [[1,1],[2,2],[3,3],[5,5]], topRight = [4,4], bottomLeft = [0,0]
<strong>输出：</strong>3
<strong>解释：</strong>在 [0,0] 到 [4,4] 的范围内总共有 3 艘船。
</pre>



<strong>提示：</strong>

<ul>
	<code>ships</code>数组只用于评测系统内部初始化。你无法得知<code>ships</code>的信息，所以只能通过调用<code>hasShips</code>接口来求解。
	<code>0 &lt;=bottomLeft[0]&lt;= topRight[0]&lt;= 1000</code>
	<code>0 &lt;=bottomLeft[1]&lt;= topRight[1]&lt;= 1000</code>
</ul>

矩形内船只的数目
<em>(This problem is an<strong>interactive problem</strong>.)</em>

On the sea represented by a cartesian plane, each ship is located at an integer point, and each integer point may contain at most 1 ship.

You have a function <code>Sea.hasShips(topRight, bottomLeft)</code> which takes two pointsas arguments and returns <code>true</code>if and only if there is at least one ship in the rectangle represented by the two points, including on the boundary.

Given two points, which are the top right and bottom left corners of a rectangle, return the number of ships present in that rectangle.It is guaranteed that there are <strong>at most 10 ships</strong> in that rectangle.

Submissions making <strong>more than 400 calls</strong> to<code>hasShips</code>will be judged <em>Wrong Answer</em>. Also, any solutions that attempt to circumvent the judgewill result in disqualification.


<strong>Example :</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/07/26/1445_example_1.PNG" style="width: 400px; height: 404px;" />

<pre>
<strong>Input:</strong> 
ships = [[1,1],[2,2],[3,3],[5,5]], topRight = [4,4], bottomLeft = [0,0]
<strong>Output:</strong> 3
<strong>Explanation:</strong> From [0,0] to [4,4] we can count 3 ships within the range.
</pre>


<strong>Constraints:</strong>

<ul>
	On the input <code>ships</code> is only given to initialize the map internally.You must solve this problem &quot;blindfolded&quot;. In other words, you must find the answer using the given <code>hasShips</code> API, without knowing the <code>ships</code>position.
	<code>0 &lt;=bottomLeft[0]&lt;= topRight[0]&lt;= 1000</code>
	<code>0 &lt;=bottomLeft[1]&lt;= topRight[1]&lt;= 1000</code>
</ul>
