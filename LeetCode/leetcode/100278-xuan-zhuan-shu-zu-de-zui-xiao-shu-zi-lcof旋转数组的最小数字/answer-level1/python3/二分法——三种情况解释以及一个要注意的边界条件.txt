### 解题思路
具体的前面各位大佬已经说的非常清楚了 大概总结一下是哪三种情况，以及要注意的一个边界条件
情况1：如果中间数字的小于最右边的数字 则代表中间正处在的递增序列中 所以最小的数字要么是它自己要么在左边 所以j可以放心的移动到mid的位置而且不需要+1
情况2：如果中间的数字大于最右边的数字 则代表最小的数还在右边（含最小数字递增数列在右侧）所以把左侧的指针放到mid+1处再进行判断（这里一定要+1 因为mid已经确定了不可能处在右侧的递增区间中）
情况三：如果中间的数和右边相等 此时无法判断最小的数的具体位置 但是可以知道一定可以不用理最后一个数字了（因为计算最右侧是最小的数字它也和中间的数字相等）
边界问题：主要要注意情况三里面 如果是在循环最后算出mid 就不要+1了 否则的话可能导致 mid == j导致j从正确位置上被多减了一个 如果是在循环一开始计算mid就需要+1 因为这时候j还没有被减去1
### 代码

```python3
class Solution:
    def minArray(self, numbers: List[int]) -> int:
        i = 0
        j = len(numbers) - 1
        mid = (i+j)//2
        while i < j:
            if numbers[mid] < numbers[j]:   #如果中间的小于右边 则代表中间正处在的递增序列中
                j = mid
            elif numbers[mid] > numbers[j]: # 如果中间的大于右边 则代表最小的数还在右边
                i = mid + 1
            else:   # 如果中间的数和右边相等 无法判断最小的数的具体位置 
                    #但是可以知道一定可以不用理最后一个数字了（因为中间的情况相等）
                j -= 1
            mid = (i+j)//2  #这里其实不能+1 否则的话 可能会让mid == j 
        return numbers[i]
```