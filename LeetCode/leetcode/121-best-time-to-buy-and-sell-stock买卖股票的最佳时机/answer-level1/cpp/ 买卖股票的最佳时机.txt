### 解题思路
 dp 状态转移方程：dp[i]=max(dp[i-1],prices[i]-low)      dp[i-1]意思是前i-1天中（每一个阶段中），我们可以得到利润的最大值  prices[i]-low意思是在第i天减去之前某一天买下最小值的价钱可能会比dp[i-1]更赚，如果不赚，那就dp[i-1];

### 代码

```cpp
class Solution {   
//这个题目的动态规划和贪心算法其实一个意思，只是动态规划多了一个备忘录，记录每个阶段的最小值。（dp：阶段，状态，决策）
public:   //暴力法;虽说是动态规划题目，其实也就是双重for循环找后面一个数减去前面一个数的最大值。。
    int maxProfit(vector<int>& prices) {
        //dp 状态转移方程：dp[i]=max(dp[i-1],prices[i]-low)      dp[i-1]意思是前i-1天中（每一个阶段中），我们可以得到利润的最大值  prices[i]-low意思是在第i天减去之前某一天买下最小值的价钱可能会比dp[i-1]更赚，如果不赚，那就dp[i-1];
        if(prices.size()==0) return 0;
        int dp[prices.size()];
        dp[0]=0;             //第一个位置无交易
        int low=prices[0];   //指定low变量（为买入的最低股），记录每个阶段（i遍历的地方）i前面的最小买入股。
        for(int i=1;i<prices.size();i++){
            if(prices[i]<low) low=prices[i];
            dp[i]=max(dp[i-1],prices[i]-low);
        }
        return dp[prices.size()-1];





    /*
        int min=0,k=0;
        for(int i=1;i<prices.size();i++){
            for(int j=0;j<i;j++){
                k=prices[i]-prices[j];
                if(k>min) min=k;
            }
        }
        if(min<=0) return 0;
        else return min;
    */
    }
};
```