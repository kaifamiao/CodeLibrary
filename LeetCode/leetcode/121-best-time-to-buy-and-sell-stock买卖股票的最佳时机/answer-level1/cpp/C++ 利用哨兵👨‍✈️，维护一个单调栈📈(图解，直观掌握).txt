#### 解题思路
一眼看过去，这个题本质就是要求某个数与其右边最大的数的差值，这符合了单调栈的应用场景 **当你需要高效率查询某个位置左右两侧比他大（或小）的数的位置的时候**，于是我就用单调栈解决了(但是发现题解很多都是 $dp$，哈哈)。
关于单调栈的题目，做完这题有兴趣的可以去看看:
- [84. Largest Rectangle in Histogram](https://leetcode-cn.com/problems/largest-rectangle-in-histogram/)
- [85. Maximal Rectangle](https://leetcode-cn.com/problems/maximal-rectangle/)

这也是两道极为经典的单调栈问题，话不多说，我们来看看如何用单调栈解决这个问题。首先我们要明确这个是在一个时间序列上的，因此我们不能简单的用 **最大减最小解决问题**，这里我们通过典型的一个例子来解决这个问题
$eg: [7, 1, 5, 3, 6, 4]$

![image.png](https://pic.leetcode-cn.com/823d3b540ca1ad56c22085d3c95cb31c369ef3c607f6ef5447acf4dbb9aa3cd8-image.png){:width=300}


这里我们维护一个单调增的栈 📈，要赚钱嘛，肯定单调增。
首先讲下维护单调栈的 **具体思路**：
- 在 $prices$ 数组的末尾加上一个 **哨兵**👨‍✈️(也就是一个很小的元素，这里设为 0))，就相当于作为股市收盘的标记(后面就清楚他的作用了)
- 假如栈空或者入栈元素大于栈顶元素，直接入栈
- 假如入栈元素小于栈顶元素则循环弹栈，直到入栈元素大于栈顶元素或者栈空
- 在每次弹出的时候，我们拿他与买入的值(也就是栈底)做差，维护一个最大值。

**（灰色标记为扫描过的）**
①：第一步，栈空，扫描的是 $7$，我们直接入栈。
![image.png](https://pic.leetcode-cn.com/15998e65fe741c819a8d5f82299dc78b7c0407f782a270fbfd5f7422ea385ed7-image.png)

②：第二步，入栈元素为 $1$，他比栈顶元素小，为了维护这个单调栈，我们把7弹出，又因为他即是栈底又是栈顶所以不需要更新我们的最大值，又因为弹出之后为空，我们将$1$直接入栈我们直接入栈。

![image.png](https://pic.leetcode-cn.com/45136e121f6154d4a60de89341b37168cfe31471e5393741acf224a1c6b5cc2f-image.png)

③：第三步，入栈元素为 $5$，他比栈顶元素大，我们直接入栈

![image.png](https://pic.leetcode-cn.com/6dfe8aa005636a1ee10201bba3c80479c7465a49272d4b4001aecd66388a4107-image.png)

④：第四步，入栈元素为 $3$，他比栈顶元素 $5$大，**我们直接弹栈，并拿他减去栈底元素$1$(这就是最重要的，模拟了买卖，因为 5 遇上了比它小的 3，因此即使后面遇到更大的元素 $C$，但是存在 $C - 3 > C - 5$，因此它已经没用了，计算之后弹出它**

![image.png](https://pic.leetcode-cn.com/c6549566891a8a73a2aefc98dd65c71bde518625fe2644a72d8e505bf08e1ebd-image.png)


⑤：第五步，入栈元素为 $6$，比栈顶元素大，入栈。
![image.png](https://pic.leetcode-cn.com/e762a53fd3eb9e2907aa30554ac083342945bb6f2f9b548fd89c160f2ea08cf8-image.png)

⑥：第六步，入栈元素为 $4$，比栈顶元素 $6$小，**根据我们刚刚的理论，在遇上 $4$ 之后，$6$ 的最高利润已经确定了，因为无论后面遇上怎么样的升值，在 4 的时候购买的利润显然更高** 所以我们弹出 $6$，并与栈底(也就是我们买入的价值)做差，并与我们之前维护的最大值进行比较，然后更新。

![image.png](https://pic.leetcode-cn.com/ad526e0effa8b00fc1c7e0ea440d246fd58052eed78260d422a082e2c684cf6b-image.png)

⑦：第七步，现在 **哨兵**👨‍✈️的作用就非常清楚啦，假如没有哨兵，我们单调栈中还有残留的元素没有进行判断(比如 $prices$ 数组单调增的情况下，不加哨兵会出现 `max=0` 的情况)，因此 **哨兵**👨‍✈️的作用就是确保单调栈中的每个元素都被进行判定。因此最后的图像应该是这样：

![image.png](https://pic.leetcode-cn.com/018efc54412997315ffda187ddcf98be398489329b0b847055774bb1a56f8cb1-image.png)

&emsp; 现在你对于单调栈的理解肯定更深了吧，不妨看看下面的代码↓

#### 代码

```C++ []
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans = 0;
        vector<int> St;
        prices.emplace_back(-1); \\ 哨兵👨‍✈️
        for (int i = 0; i < prices.size(); ++ i){
            while (!St.empty() && St.back() > prices[i]){ \\ 维护单调栈📈
                ans = std::max(ans, St.back() - St.front()); \\ 维护最大值
                St.pop_back();
            }
            St.emplace_back(prices[i]);
        }

        return ans;
    }
};
```
最后我们来复习下单调栈 📈的作用和应用场景：
**单调栈的作用是**:用 $O(n)$ 的时间得知所有位置两边第一个比他大(或小)的数的位置。