implement-magic-dictionary
实现一个带有<code>buildDict</code>, 以及<code>search</code>方法的魔法字典。

对于<code>buildDict</code>方法，你将被给定一串不重复的单词来构建一个字典。

对于<code>search</code>方法，你将被给定一个单词，并且判定能否只将这个单词中<strong>一个</strong>字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。

<strong>示例 1:</strong>

<pre>
Input: buildDict([&quot;hello&quot;, &quot;leetcode&quot;]), Output: Null
Input: search(&quot;hello&quot;), Output: False
Input: search(&quot;hhllo&quot;), Output: True
Input: search(&quot;hell&quot;), Output: False
Input: search(&quot;leetcoded&quot;), Output: False
</pre>

<strong>注意:</strong>

<ol>
	你可以假设所有输入都是小写字母<code>a-z</code>。
	为了便于竞赛，测试所用的数据量很小。你可以在竞赛结束后，考虑更高效的算法。
	请记住<strong>重置</strong>MagicDictionary类中声明的类变量，因为静态/类变量会在多个测试用例中保留。 请参阅<a href="http://leetcode.com/faq/#different-output">这里</a>了解更多详情。
</ol>

实现一个魔法字典

Implement a magic directory with <code>buildDict</code>, and <code>search</code> methods.



For the method <code>buildDict</code>, you'll be given a list of non-repetitive words to build a dictionary.



For the method <code>search</code>, you'll be given a word, and judge whether if you modify <b>exactly</b> one character into <b>another</b> character in this word, the modified word is in the dictionary you just built.


<b>Example 1:</b><br />
<pre>
Input: buildDict(["hello", "leetcode"]), Output: Null
Input: search("hello"), Output: False
Input: search("hhllo"), Output: True
Input: search("hell"), Output: False
Input: search("leetcoded"), Output: False
</pre>


<b>Note:</b><br>
<ol>
You may assume that all the inputs are consist of lowercase letters <code>a-z</code>.
For contest purpose, the test data is rather small by now. You could think about highly efficient algorithm after the contest.
Please remember to <b>RESET</b> your class variables declared in class MagicDictionary, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href="https://leetcode.com/faq/#different-output">here</a> for more details.
</ol>
