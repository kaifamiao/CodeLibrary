```java
class Solution {
    public int matrixScore(int[][] A) {
        //第一列肯定要全是1最后结果才最大，所以先把第一列是0的行翻一下
        //对于第二列，因为行已经是固定的了，所以考虑翻第二列尽可能多的出现1
        //对于上面的翻这个操作，具体实现不用真的翻，因为每一行是否翻已经固定了，那么就看列了
        //如果某一列和这一行的第一个数相同，那么这一位势必为1，因为第一列翻后一定为1
        //如果某一列和这一行的第一个数不相同，那么这一位势必为0，因为第一列翻后势必为1
        //所以可以通过将这个数和这一行第一个数异或，得到这一列的0和1的个数，再考虑翻还是不翻，使1的个数最多
        int r=A.length,c=A[0].length,ans=0;
        for(int j=0;j<c;j++){
            int cnt=0;
            for(int i=0;i<r;i++){
                cnt+=(A[i][j]^A[i][0]);
            }
            ans+=Math.max(cnt,r-cnt)*(1<<(c-j-1));
        }
        return ans;
    }
}
```