### 解题思路
这是第一次做动态规划的题，纪念一下。代码参考了投票高的前面的打来的代码，仔细看代码还是很好理解的。
1、动态规划法其实就是递推法，顾名思义就是一步一步推导而成的，这也即使自底向上解法的含义。
2、题目其实是一个二维数组，i控制行数，j控制列数，
3、分析题意里对取值的下标的规律做出了总结
4、多思考，还是很好理解的，加油！！
5、开始想的用贪心，但是发现，如果换一下位置，贪心算法就失效了，所以每次在想用贪心之前，都先看看是否有不满足的情况，此时就可以用动态规划法了

### 代码

```

class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        ##分析题意：下标是0的元素，只能访问下一个list中的第0和第1位置的元素
        ##下标是1的元素，只能访问下一个list中第1和第2位置的元素
        ###以此类推：下标是n的元素只能访问下一个list中第你和第n+1位置的元素
        ##动态规划其实就是递推法，一步一步推导而成的算法。
        dp = triangle ##复制一份元素，其实就是一个二维数组
        lens = len(triangle)

        for i in range(1,lens):  ##i控制行数，j控制列数
            for j in range(i+1):  ##因为是每一行都比上一行对个数字，自然长度也是+1的
                if j==0:  ##这是由分析题目后得出的，上述的分析题意中得出的结果
                    dp[i][j]+=dp[i-1][j]  
                if j>0 and j==i:
                    dp[i][j]+=dp[i-1][j-1]
                if j>0 and j<i:
                    dp[i][j]+= min(dp[i-1][j-1],dp[i-1][j])
        return min(dp[-1]) ##最后一行里的最小值就是累加之后得到的最小的和

```