### 解题思路
实质上是将N的第i位到第j位的二进制位替换成M的二进制位，把N拆成三个数，对应高中低三个部分，高位部分保留第j+1位到最高位（其余位为0），低位部分保留第0位到第i-1位（其余位为0），中间部分用M代替（其余位为0），三个部分进行位或运算就是答案。
### 复杂度分析
设位运算为元运算，则时间复杂度和空间复杂度均为O(1)
### 易错点
java里面32位整数n左移32位的结果是n循环左移而不是置零，由于测试用例存在j=31，代码 `1<<j+1`应改为 `1<<j<<1`
### 代码
``` java
class Solution {
    public int insertBits(int N, int M, int i, int j) {
        // return (N&~(((1<<j)<<1)-1<<i))|(M<<i);
        int l = N&(1<<i)-1;
        int h = N>>j>>1<<j<<1;
        int m = M<<i;
        return l|h|m;
    }
}
```