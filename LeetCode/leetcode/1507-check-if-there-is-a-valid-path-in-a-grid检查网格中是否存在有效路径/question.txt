check-if-there-is-a-valid-path-in-a-grid
给你一个 <em>m</em> x <em>n</em> 的网格 <code>grid</code>。网格里的每个单元都代表一条街道。<code>grid[i][j]</code> 的街道可以是：

<ul>
	<strong>1</strong> 表示连接左单元格和右单元格的街道。
	<strong>2</strong> 表示连接上单元格和下单元格的街道。
	<strong>3</strong>表示连接左单元格和下单元格的街道。
	<strong>4</strong> 表示连接右单元格和下单元格的街道。
	<strong>5</strong> 表示连接左单元格和上单元格的街道。
	<strong>6</strong> 表示连接右单元格和上单元格的街道。
</ul>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/21/main.png" style="height: 708px; width: 450px;">

你最开始从左上角的单元格 <code>(0,0)</code> 开始出发，网格中的「有效路径」是指从左上方的单元格 <code>(0,0)</code> 开始、一直到右下方的 <code>(m-1,n-1)</code> 结束的路径。<strong>该路径必须只沿着街道走</strong>。

<strong>注意：</strong>你 <strong>不能</strong> 变更街道。

如果网格中存在有效的路径，则返回 <code>true</code>，否则返回 <code>false</code> 。



<strong>示例 1：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/21/e1.png" style="height: 311px; width: 455px;">

<pre><strong>输入：</strong>grid = [[2,4,3],[6,5,2]]
<strong>输出：</strong>true
<strong>解释：</strong>如图所示，你可以从 (0, 0) 开始，访问网格中的所有单元格并到达 (m - 1, n - 1) 。
</pre>

<strong>示例 2：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/21/e2.png" style="height: 293px; width: 455px;">

<pre><strong>输入：</strong>grid = [[1,2,1],[1,2,1]]
<strong>输出：</strong>false
<strong>解释：</strong>如图所示，单元格 (0, 0) 上的街道没有与任何其他单元格上的街道相连，你只会停在 (0, 0) 处。
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>grid = [[1,1,2]]
<strong>输出：</strong>false
<strong>解释：</strong>你会停在 (0, 1)，而且无法到达 (0, 2) 。
</pre>

<strong>示例 4：</strong>

<pre><strong>输入：</strong>grid = [[1,1,1,1,1,1,3]]
<strong>输出：</strong>true
</pre>

<strong>示例 5：</strong>

<pre><strong>输入：</strong>grid = [[2],[2],[2],[2],[2],[2],[6]]
<strong>输出：</strong>true
</pre>



<strong>提示：</strong>

<ul>
	<code>m == grid.length</code>
	<code>n == grid[i].length</code>
	<code>1 &lt;= m, n &lt;= 300</code>
	<code>1 &lt;= grid[i][j] &lt;= 6</code>
</ul>

检查网格中是否存在有效路径
Given a <em>m</em> x <em>n</em> <code>grid</code>. Each cell of the <code>grid</code> represents a street. The street of<code>grid[i][j]</code> can be:
<ul>
	<strong>1</strong> which means a street connecting the left cell and the right cell.
	<strong>2</strong> which means a street connecting the upper cell and the lower cell.
	<b>3</b>which means a street connecting the left cell and the lower cell.
	<b>4</b> which means a street connecting the right cell and the lower cell.
	<b>5</b> which means a street connecting the left cell and the upper cell.
	<b>6</b> which means a street connecting the right cell and the upper cell.
</ul>

<img alt="" src="https://assets.leetcode.com/uploads/2020/03/05/main.png" style="width: 450px; height: 708px;" />

You will initially start at the street of theupper-left cell <code>(0,0)</code>. A valid path in the grid is a path which starts from the upper leftcell <code>(0,0)</code> and ends at the bottom-rightcell <code>(m - 1, n - 1)</code>. <strong>The path should only follow the streets</strong>.

<strong>Notice</strong> that you are <strong>not allowed</strong> to change any street.

Return <i>true</i>if there is a valid path in the grid or <em>false</em> otherwise.


<strong>Example 1:</strong>
<img alt="" src="https://assets.leetcode.com/uploads/2020/03/05/e1.png" style="width: 455px; height: 311px;" />
<pre>
<strong>Input:</strong> grid = [[2,4,3],[6,5,2]]
<strong>Output:</strong> true
<strong>Explanation:</strong> As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).
</pre>

<strong>Example 2:</strong>
<img alt="" src="https://assets.leetcode.com/uploads/2020/03/05/e2.png" style="width: 455px; height: 293px;" />
<pre>
<strong>Input:</strong> grid = [[1,2,1],[1,2,1]]
<strong>Output:</strong> false
<strong>Explanation:</strong> As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input:</strong> grid = [[1,1,2]]
<strong>Output:</strong> false
<strong>Explanation:</strong> You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).
</pre>

<strong>Example 4:</strong>

<pre>
<strong>Input:</strong> grid = [[1,1,1,1,1,1,3]]
<strong>Output:</strong> true
</pre>

<strong>Example 5:</strong>

<pre>
<strong>Input:</strong> grid = [[2],[2],[2],[2],[2],[2],[6]]
<strong>Output:</strong> true
</pre>


<strong>Constraints:</strong>

<ul>
	<code>m == grid.length</code>
	<code>n == grid[i].length</code>
	<code>1 &lt;= m, n &lt;= 300</code>
	<code>1 &lt;= grid[i][j] &lt;= 6</code>
</ul>
