方法一：dfs + 回溯 + 剪枝

该方法即遍历所有可能出现的情况，但可惜会超时。

方法二：动态规划

首先考虑第一种情况，字符串 s 或 字符串 p 中至少有一个为空时，若二者均为空，则返回 true; 若 s 为空且 p 不为空，此时若 p 中只有 '*', 则返回 true, 否则返回false; 若 p 为空且 s 不为空，返回false.

dp 过程：建立一个 p.size() * s.size() 的布尔矩阵, dp[i][j] 表示p[0,...,i] 能否匹配s[0,...,j]. 最后返回最后一位即可。

代码：
```cpp
class Solution {
public:
    //压缩字符串 p 中的 *
    string update(string& p){
        string res;
        for( int i = 0; i < p.size(); i++)
            if( i > 0 && p[i] == p[i-1] && p[i] == '*')
                ;
            else
                res += p[i];
        return res;
    }
    
    bool isMatch(string s, string p) {
        //s 或 p 至少有一个为空的情况
        if( !s.size() || !p.size()){
            if( p.size() == 0)
                return s.size() == 0;
            
            p = update( p);
            if( p.size() == 1 && p[0] == '*')
                return true;
            return false;
        }
        
        vector< vector<bool>> record( p.size(), vector<bool>( s.size(), 0));
        int now = 0;
        
        //初始化
        //第一行
        for( int i = 0; i < s.size(); i++)
            if( p[0] == '*')
                record[0][i] = 1;
            else if( p[0] == s[i] ||  p[0] == '?'){
                record[0][i] = 1, now++;
                break;
            }
            else if( p[0] != s[i]){
                now++;
                break;
            }   
        
        for( int i = 1; i < p.size(); i++)
            if( p[i] == '*')
                for( int j = max( now - 1, 0); j < s.size(); j++)
                    if( record[i-1][j] == 1)
                        record[i][j] = 1;
                    else
                        record[i][j] = j == 0 ? 0:record[i][j-1];
            else{
                for( int j = now; j < s.size(); j++)
                    if( j == 0 || record[i-1][j-1] == 1)
                        record[i][j] = s[j] == p[i] || p[i] == '?';
                now++;
            }
                   
        return record.back().back();
    }
};
```