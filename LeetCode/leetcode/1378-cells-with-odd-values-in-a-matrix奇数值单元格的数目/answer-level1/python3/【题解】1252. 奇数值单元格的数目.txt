**方法一：模拟**

我们可以使用一个 `n * m` 的矩阵来存放操作的结果，对于 `indices` 中的每一对 `[ri, ci]`，将矩阵第 `ri` 行的所有数增加 `1`，第 `ci` 列的所有数增加 `1`。

在所有操作模拟完毕后，我们遍历矩阵，得到奇数的数目。

```Python [sol1]
class Solution:
    def oddCells(self, n: int, m: int, indices: List[List[int]]) -> int:
        matrix = [[0] * m for _ in range(n)]
        for x, y in indices:
            for i in range(n):
                matrix[i][y] += 1
            for j in range(m):
                matrix[x][j] += 1
        return sum(elem % 2 == 1 for line in matrix for elem in line)
```

**复杂度分析**

- 时间复杂度：$O(L(M + N) + MN)$，其中 $L$ 是 `indices` 数组的长度。

- 空间复杂度：$O(MN)$。

**方法二：模拟 + 空间优化**

由于每次操作只会将一行和一列的数增加 `1`，因此我们可以使用一个行数组 `rows` 和列数组 `cols` 分别记录每一行和每一列被增加的次数。对于 `indices` 中的每一对 `[ri, ci]`，我们将 `rows[ri]` 和 `cols[ci]` 的值分别增加 `1`。

在所有操作模拟完毕后，矩阵中位于 `(x, y)` 位置的数即为 `rows[x] + cols[y]`。我们遍历矩阵，得到奇数的数目。

```Python [sol2]
class Solution:
    def oddCells(self, n: int, m: int, indices: List[List[int]]) -> int:
        rows = [0] * n
        cols = [0] * m
        for x, y in indices:
            rows[x] += 1
            cols[y] += 1
        return sum((rows[x] + cols[y]) % 2 == 1 for x in range(n) for y in range(m))
```

**复杂度分析**

- 时间复杂度：$O(L + MN)$，其中 $L$ 是 `indices` 数组的长度。

- 空间复杂度：$O(M + N)$。

**方法三：计数**

我们可以继续对方法二进行优化。可以发现，矩阵中位于 `(x, y)` 位置的数为奇数，当且仅当 `rows[x]` 和 `cols[y]` 中恰好有一个为奇数。因此对于 `rows[x]` 为偶数，那么在第 `x` 行有 `count_odd(cols)` 个位置的数为奇数；对于 `rows[x]` 为奇数，那么在第 `x` 行有 `m - count_odd(cols)` 个位置的数为偶数，其中 `count_odd(cols)` 表示数组 `cols` 中奇数的个数。将所有的行 `x` 进行求和，可以得到奇数的数目为 `count_odd(rows) * (m - count_odd(cols)) + (n - count_odd(rows)) * count_odd(cols)`。

```Python [sol3]
class Solution:
    def oddCells(self, n: int, m: int, indices: List[List[int]]) -> int:
        rows = [0] * n
        cols = [0] * m
        for x, y in indices:
            rows[x] += 1
            cols[y] += 1

        odd_rows = sum(x % 2 == 1 for x in rows)
        odd_cols = sum(y % 2 == 1 for y in cols)
        return odd_rows * (m - odd_cols) + (n - odd_rows) * odd_cols
```

**复杂度分析**

- 时间复杂度：$O(L + M + N)$，其中 $L$ 是 `indices` 数组的长度。

- 空间复杂度：$O(M + N)$。
