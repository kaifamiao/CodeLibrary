**思路：**

本题难点在于理解两者都发挥“最佳水平”，“最佳水平”在于，每当轮到自己拿石子的时候，要在后继的所有状态中，选择对自己最有利的，那么也就是要遍历后继的所有状态，并选择一个最优解。我们设 `dfs(i, M)` 表示，当从第 `i` 堆石子开始拿，允许拿 `M <= x <= 2 * M` 时，在剩余石子中所能拿到的最大值，那么我们最终要返回的结果就是 `dfs(0, 1)`。搜索状态时，我们要遵循以下几个原则：

1. 如果 `i >= n`，那么说明石子都已经拿完，直接返回 `0`；
2. 如果 `i + M * 2 >= n`，那么说明可以把剩余石子一起拿到，就可以直接返回剩余石子的数目 `sum(piles[i:])`；
3. 如果不属于以上两种情况，那么我们需要遍历 `1 <= x <= 2 * M`，求剩余的最小 `dfs(i + x, max(x, M))`，也就是自己拿多少的时候，对手拿的石子最少（由于剩余石子数固定，那么最小化对手石子数，就是最大化自己的石子数）。

为了防止重复搜索，可以采用记忆化的方法。为了快速求剩余石子数目，可以提前处理后缀和。

**图解：**

![图解](https://pic.leetcode-cn.com/60082c4d1e54920a0e2ff73783e60884c18007b166a568438298b11cccd3802a.png){:width=500}
{:align=center}

如图所示， `dfs(i, M)` 表示，当从第 `i` 堆石子开始拿，允许拿 `M <= x <= 2 * M` 时，在剩余石子中所能拿到的最大值。蓝色块代表先手拿的状态，黄色块代表后手拿的状态。边上的权值代表拿了几堆石子（也就是 `x`），红色边代表当前层最优解，连续的红色路径就是答案。


**代码：**
```python [-Python]
class Solution:
    def stoneGameII(self, piles: List[int]) -> int:
        # 数据规模与记忆化
        n, memo = len(piles), dict()
        
        # s[i] 表示第 i 堆石子到最后一堆石子的总石子数
        s = [0] * (n + 1)
        for i in range(n - 1, -1, -1):
            s[i] = s[i + 1] + piles[i]
            
        # dfs(i, M) 表示从第 i 堆石子开始取，最多能取 M 堆石子所能得到的最优值
        def dfs(i, M):
            # 如果已经搜索过，直接返回
            if (i, M) in memo:
                return memo[(i, M)]
            # 溢出拿不到任何石子
            if i >= n:
                return 0
            # 如果剩余堆数小于等于 2M， 那么可以全拿走
            if i + M * 2 >= n:
                return s[i]
            # 枚举拿 x 堆的最优值
            best = 0
            for x in range(1, M * 2 + 1):
                # 剩余石子减去对方最优策略
                best = max(best, s[i] - dfs(i + x, max(x, M)))
            # 记忆化
            memo[(i, M)] = best
            return best
        
        return dfs(0, 1)
```
