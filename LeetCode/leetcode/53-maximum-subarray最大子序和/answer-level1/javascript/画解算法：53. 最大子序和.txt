### 思路
- 这道题用动态规划的思路并不难解决，比较难的是后文提出的用分治法求解，但由于其不是最优解法，所以先不列出来
- 动态规划的是首先对数组进行遍历，当前最大连续子序列和为 sum，结果为 ans
- 如果 `sum > 0`，则说明 sum 对结果有增益效果，则 sum 保留并加上当前遍历数字
- 如果 `sum <= 0`，则说明 sum 对结果无增益效果，需要舍弃，则 sum 直接更新为当前遍历数字
- 每次比较 `sum` 和 `ans`的大小，将最大值置为`ans`，遍历结束返回结果
- 时间复杂度：$O(n)$

### 代码

```Java []
class Solution {
    public int maxSubArray(int[] nums) {
        int ans = nums[0];
        int sum = 0;
        for(int num: nums) {
            if(sum > 0) {
                sum += num;
            } else {
                sum = num;
            }
            ans = Math.max(ans, sum);
        }
        return ans;
    }
}
```
```JavaScript []
/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSubArray = function(nums) {
    let ans = nums[0];
    let sum = 0;
    for(const num of nums) {
        if(sum > 0) {
            sum += num;
        } else {
            sum = num;
        }
        ans = Math.max(ans, sum);
    }
    return ans;
};
```

### 画解

<![frame_00001.png](https://pic.leetcode-cn.com/5082ef660cbebc30f78132b2a601bc6162e949b5c7db870ed93dadaa239bf186-frame_00001.png),![frame_00002.png](https://pic.leetcode-cn.com/536396242aa004db7d2f452a4e086f6a6206d34c6e0f5b58afbdd02fd612e483-frame_00002.png),![frame_00003.png](https://pic.leetcode-cn.com/cc6f2cff9987a15eb89efdde5cc514ad86f7130363b354648bbdd21cda0f0149-frame_00003.png),![frame_00004.png](https://pic.leetcode-cn.com/bfc0323d803c8e9187a9720fb6090c7d66b36e4f7181079ea2393cf9679b3357-frame_00004.png),![frame_00005.png](https://pic.leetcode-cn.com/db069750648b466132ea9aa33d11046b96d2bc1e346786ed3c71d54403aad881-frame_00005.png),![frame_00006.png](https://pic.leetcode-cn.com/8b2decc121da8dc40bf4d9e33ca2725d9817575561d6fe43e78164f495948719-frame_00006.png),![frame_00007.png](https://pic.leetcode-cn.com/6066aeaab4824c63b924c845611deb73e2cec2da53b4c6dd0eb9769c77323668-frame_00007.png)>
