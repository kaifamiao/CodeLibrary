### 解题思路
此处撰写解题思路
精妙的算法

### 代码

```cpp
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
    //对于含有正数的序列而言,最大子序列肯定是正数,所以头尾肯定都是正数.我们可以从第一个正数开始算起,每往后加一个数便更新一次和的最大值;当当前和成为负数时,则表明此前序列无法为后面提供最大子序列和,因此必须重新确定序列首项.
    //定义一个函数f(n)，以第n个数为结束点的子数列的最大和，存在一个递推关系f(n) = max(f(n-1) + A[n], A[n]);将这些最大和保存下来后，取最大的那个就是，最大子数组和。因为最大连续子数组 等价于 最大的以n个数为结束点的子数列和 附代码

        //这根据题目关键词，“最大”“连续”，可以判断是一道动态规划
        int l=nums.size();
        int Max,sum;
        Max=nums[0];//迄今为止的最大和
        sum=0;//以第n个数为结束点的子数列的最大和!!!
        for(int i=0;i<l;i++)
        {
            if(sum>0)
                sum+=nums[i];
            if(sum<=0)
                sum=nums[i];
            Max=max(sum,Max);//更新
        }
        return Max;
    }
};
```