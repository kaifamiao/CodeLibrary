### 解题思路
1、首先这个问题一开始会想到通过暴力法两个循环比较，这样时间复杂度应该是在O(n*n),一旦n很大这个耗时还是很大的。因此这个方案基本不考虑。
2、那么就得来思考这个问题的本质什么？
2.1、和最大的连续数组的一定在整个输入数组中的某一段，这个连续数组有一个起始点和一个结束点。因此只需要找到这个数组的起点和终点就可以得到答案。
2.2、同时我们知道所谓的最大和一定是某一段连续数组的累加。也即是之所以为这段连续数组，是因为他们的累加和最大
2.4、那么这个问题的关键步骤就是怎么确定起始点和结束点，同时知道他们累加和最大就能解决这个问题。
2.5、累加和我们从0号元素开始依次往后累加，比如sum+=nums[i](i=0到i<nums.size()一直累加)。这个和sum是在不停的变化的，和的趋势有三种。要么变大，要么变小，要么不变。但是由于数组元素数据是随机的，有正数也有负数，所以这个累加的动作不一定是从0号位置开始，有可能需要从0号位置后面的某个位置从新开始算，也就是最大数组的起始点位置。因此这个问题就变成了要知道在什么情况下需要重新开始累加，从哪里开始。
2.6、有一个情况是不需要再继续累加的，需要重新发起累加动作。就是当某次累加完成后和sum<0时候,我们的sum需要从下一个位置开始累加。为什么？因为一旦sum和（前面元素的累加）<0后,那么后面一个或者一连串元素(不管是正数还是负数)的和一定是比sum+后面这些数据的和还要大的，因为这一串数据和加了一个负数(sum),当然这个一定不可能是我们所要求得的最大和串。因此此时就可以把前面sum累积的和丢弃掉，从接下来的这个元素重新开始累加。这里存在一个情况就是，可能后面不停的累加，这个和将永远不会小于0,那么此时只要累加的和没有小于0，这个连续数组的起始坐标就保持不动。而结束坐标依次往后移动，只是在移动的过程中把最大值max记录下来，然后遍历完成整个数组得到的和可能不是最大值，但是中间得到的最大值已经被记录下来了。

### 代码

```cpp
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int sum = nums[0];
        int max = nums[0];
        /*需要从1号位置开始遍历，但是累加是从0号位置开始的*/
        for(int i = 1; i < nums.size();i++){
            /*如果sum < 0说明前面累计的和已经<0了，如果在加上一个值，
            则怎么都会使和变得更小，怎么都不会这个元素后面的累加和。因此累计和需要重新开始*/
            if(sum < 0){ 
                sum = nums[i];/*就从这个i元素开始，从新开始sum累加*/
            }else{ /*如果累计和是大于0的，说明这个累计还可以继续接着累计，当然结果会变大或者变小，
                   但是没有变成小于0，所以继续累加后面的元素和是有可能成为最大的，只是需要比较出最大值即可*/
                sum +=nums[i];/*继续累加*/
            }
            max=(sum>max)?sum:max;/*把过程中得到的最大值记录下来*/
        }
        return max;
    }
};
```