index-pairs-of-a-string
给出<strong>字符串 </strong><code>text</code> 和<strong>字符串列表</strong> <code>words</code>, 返回所有的索引对 <code>[i, j]</code> 使得在索引对范围内的子字符串 <code>text[i]...text[j]</code>（包括<code>i</code>和<code>j</code>）属于字符串列表 <code>words</code>。



<strong>示例 1:</strong>

<pre><strong>输入: </strong>text = &quot;thestoryofleetcodeandme&quot;, words = [&quot;story&quot;,&quot;fleet&quot;,&quot;leetcode&quot;]
<strong>输出: </strong>[[3,7],[9,13],[10,17]]
</pre>

<strong>示例 2:</strong>

<pre><strong>输入: </strong>text = &quot;ababa&quot;, words = [&quot;aba&quot;,&quot;ab&quot;]
<strong>输出: </strong>[[0,1],[0,2],[2,3],[2,4]]
<strong>解释: 
</strong>注意，返回的配对可以有交叉，比如，&quot;aba&quot; 既在 [0,2] 中也在 [2,4] 中
</pre>



<strong>提示:</strong>

<ol>
	所有字符串都只包含小写字母。
	保证 <code>words</code> 中的字符串无重复。
	<code>1 &lt;= text.length &lt;= 100</code>
	<code>1 &lt;= words.length &lt;= 20</code>
	<code>1 &lt;= words[i].length &lt;= 50</code>
	按序返回索引对 <code>[i,j]</code>（即，按照索引对的第一个索引进行排序，当第一个索引对相同时按照第二个索引对排序）。
</ol>

字符串的索引对
Given a <code>text</code>string and <code>words</code> (a list of strings), return all index pairs <code>[i, j]</code> so that the substring <code>text[i]...text[j]</code>is in the list of <code>words</code>.



<strong>Example 1:</strong>

<pre>
<strong>Input: </strong>text = <span id="example-input-1-1">&quot;thestoryofleetcodeandme&quot;</span>, words = <span id="example-input-1-2">[&quot;story&quot;,&quot;fleet&quot;,&quot;leetcode&quot;]</span>
<strong>Output: </strong><span id="example-output-1">[[3,7],[9,13],[10,17]]</span>
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input: </strong>text = <span id="example-input-2-1">&quot;ababa&quot;</span>, words = <span id="example-input-2-2">[&quot;aba&quot;,&quot;ab&quot;]</span>
<strong>Output: </strong><span id="example-output-2">[[0,1],[0,2],[2,3],[2,4]]</span>
<strong>Explanation: </strong>
Notice that matches can overlap, see &quot;aba&quot; is found in [0,2] and [2,4].
</pre>



<strong>Note:</strong>

<ol>
	All strings contains only lowercase English letters.
	It&#39;s guaranteed that all strings in <code>words</code> are different.
	<code>1 &lt;= text.length &lt;= 100</code>
	<code>1 &lt;= words.length &lt;= 20</code>
	<code>1 &lt;= words[i].length &lt;= 50</code>
	Return the pairs <code>[i,j]</code> in sorted order (i.e. sort them by their first coordinate in case of ties sort them by their second coordinate).
</ol>