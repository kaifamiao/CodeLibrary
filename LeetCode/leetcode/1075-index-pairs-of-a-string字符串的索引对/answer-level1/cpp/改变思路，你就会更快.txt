这道题我一开始想法很简单，直接暴力匹配即可，实际上，匹配也有讲究。
## 基本解法：用text字串去匹配words中的目标字符
- 用时：20ms
- C++中，text.substr(start, length) api只需要索引和字串长度，所以预先算出words中的目标字符长度，然后遍历匹配即可
```C++
class Solution {
public:
    vector<vector<int>> indexPairs(string text, vector<string>& words) {
        vector<vector<int>> result;
        set<string> W(words.begin(), words.end());
        set<int> len;
        for(auto w:W)
            len.insert(w.length());
        int tl = text.length();
        for(int i=0; i<tl; i++){
            for(auto l:len){
                string tmp = text.substr(i,l);
                if(i+l<=tl & W.find(tmp)!=W.end())
                    result.push_back({i, i+l-1});
            }
        }
        
        return result;
    }
};
```

## 改变思路：用words中目标字符匹配text中寻找是否存在子串
- 用时：8ms
- Note: 需要继续寻找是否还存在相同字串
```C++
class Solution {
public:
    vector<vector<int>> indexPairs(string text, vector<string>& words) {
        vector<vector<int>> result;
        for (int i=0;i<words.size();i++){
            string w = words[i];
            int index=text.find(w);
            // find all word until out of boudary
            while (index!=-1){
                result.push_back(vector<int>{index, index+w.length()-1});
                index = text.find(w,index+1);
            }
        }
        // sort the result
        sort(result.begin(),result.end());
        return result;
    }
};
```