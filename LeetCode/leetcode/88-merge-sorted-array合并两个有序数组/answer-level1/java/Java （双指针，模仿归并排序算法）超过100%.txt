# 归并排序的思路
- **回顾归并排序算法**：将升序数组nums1、nums2两两合并，并将合并后的结果放至一个新的数组空间nums中，依次递归。
- **归并排序中合并的子过程**：分别用指针p1和p2指向有序数组nums1与nums2的第0个元素，同时用指针p指向新的数组空间nums的第0个元素。比较nums1[p1]与nums2[p2]的大小，将**较小值**min{nums1[p1],nums2[p2]}放至nums[p]中，p1或p2指针**后移**一位，同时p指针**后移**一位，循环遍历数组nums1与nums2，直到将所有的元素都放到新的数组空间nums中为止。

# 双指针从后往前，避免新建数组空间
- **基于上面的思想**：由于我们需要编写原地算法，即不新建新的数组空间nums，我们想到的解决方案将数组空间nums1当成上面的数组空间nums，在数组nums1原有m个空间的后面再使用n个空间。
- **上面存在的问题**：这时候我们想到，如果仍然用指针p1和p2指向有序数组nums1与nums2的第0个元素，用指针p指向数组空间nums1的第0个元素。即还是从nums1与nums2的数组头往后遍历，并将**较小值**min{nums1[p1],nums2[p2]}放到数组nums1中，**存在的新问题**：nums2中的元素放到数组空间nums1中，会将上面原有的nums1元素覆盖。
- **最终解决方法**：双指针**从后往前**遍历数组nums1与nums2，即使用指针p1与p2分别指向数组nums1与nums2的第m-1个与n-1个元素，同时用指针p指向数组空间nums1的第m+n-1个元素，比较nums1[p1]与nums2[p2]的大小，将**较大值**max{nums1[p1],nums2[p2]}放至nums1[p]中，p1或p2指针**前移**一位，同时p指针**前移**一位，循环遍历数组nums1与nums2，直到将所有的元素重新都放到数组空间nums1为止。

- **特别注意**：指针p1与p2的作用是用于从后往前遍历数组nums1（m个元素）与nums2（m个元素），而指针p的作用是用于依次存放合并后的结果，至数组nums1（m+n个元素，你可以认为此时的nums1就是一个新的数组空间，类似上面归并排序中nums数组空间的作用）中。
```
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int p1 = m - 1;
        int p2 = n - 1;
        int p = m + n - 1;
        while(p1 >= 0 && p2 >= 0){
            if(nums1[p1] >= nums2[p2]){
                nums1[p--] = nums1[p1--];
            } else {
                nums1[p--] = nums2[p2--];
            }
        }
        while(p2 >= 0){
            nums1[p--] = nums2[p2--];
        }
    }
}
```

