

**「提交通过」不是目的，思考过程才是精华**

## 思路

- 此题跟「21. 合并两个有序链表」是否有关联，21 题使用「递归、块」的思想，能否复用？思考过后，发现不能
- 数组题目常用解法：暴力法、指针、哈希表（如：第1 题）、栈（如：第 56 题）
- 比较容易想到的解法：两个数组合并到一起（nums2 替换 num1 的 0），再排序。这是暴力法
- 排序算法有很多种，如：冒泡、选择、插入排序等
  - 冒泡排序：从前往后，两两比较，交换最大的到最后面。每轮可能有多次交换
  - 选择排序：从前往后，找到（选择）最大的，跟最后一个交换。每轮只有一次交换
  - 插入排序：从后往前，依次跟前面的值比较，如果小于则交换，名曰插入，实则还是一路交换
- 排序算法时间复杂度还是比较高，这里可以借助「插入排序」的思想，将 nums2 的元素插入到 nums1 的合适位置，删除末尾元素。Python 利用数组的 insert 方法，Java 需要借助 List。这是解法一
- 数组题目使用指针解决往往十分简单，这道题能用指针吗？通过[画解算法：88. 合并两个有序数组](https://leetcode-cn.com/problems/merge-sorted-array/solution/hua-jie-suan-fa-88-he-bing-liang-ge-you-xu-shu-zu-/)发现，确实可以。思路其实跟 21 题一致，比较得到两个数组最大的元素，作为最大值放在最后。这是解法二

## 解法一：nums2 的元素插入到 nums1

- 将 nums2 元素跟 nums1 元素一一比较，**如果小于则插入到其前面**

  ```
  [1,2,3,0,0,0]
  [2,5,6]
  ```

  ```
  [1,2,2,3,0,0]  ∵ 2 < 3, 插入，删除末尾 0
       ↑
  [2,5,6]
  ```

- 需要考虑插入数比末尾数大的情况，5 > 3

  ```
  [1,2,3,0,0,0]
  3
  [2,5,6]
  3
  ```

- 需要考虑 nums1 本身没有元素的情况

  ```
  [0,0,0,0,0]
  0
  [1,2,3,4,5]
  5
  ```

- 时间复杂度：O(n*m)，双层遍历

- 空间复杂度：O(1)，不需要额外空间

- 标签：`插入`

### 代码

```Python
# Python3
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        if m == 0:
            for i in range(n):
                nums1[i] = nums2[i]
        for x in nums2:
            for i in range(m):
                if x < nums1[i]:
                    nums1.insert(i,x)
                    nums1.pop()
                    m = m + 1
                    break
                if x >= nums1[m-1]:
                    nums1.insert(m,x)
                    nums1.pop()
                    m = m + 1
                    break
```

## 解法二：利用指针

- 比较得到两个数组最大的元素，作为最大值放在最后。

```
[1,2,3,0,0,6] m = 3; ∵ 3 < 6
     ↑     ^
[2,5,6] n = 3
     ↑.
```

```
[1,2,3,0,5,6] m = 3
     ↑   ^
[2,5,6] n = 2
   ↑.
```

```
[1,2,3,3,5,6] m = 3
     ↑.^
[2,5,6] n = 1
 ↑
```

```
[1,2,2,3,5,6] m = 2
   ↑.^
[2,5,6] n = 1
 ↑
```

```
[1,2,2,3,5,6] m = 1
 ↑ ^
[2,5,6] n = 1
 ↑.
```

```
 [1,2,2,3,5,6] m = 1
↑.^
 [2,5,6] n = 0

```

- 需要注意，m == 0 后，n > 0 的情况

```
[2,2] m = 1
 ↑.^
[1] n = 1
 ↑
```

```
[2,2] m = 0
   
[1] n = 1
 ↑
```

```
[1,2] m = 0
 ^ 
[1] n = 0

```

- 时间复杂度：O(n+m)，需要遍历完两个数组
- 空间复杂度：O(1)，不需要额外空间
- 标签：`指针`

### 代码

```Python
# Python3
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        if m == 0:
            for i in range(n):
                nums1[i] = nums2[i]
        while m != 0:
            if n > 0 and nums1[m-1] < nums2[n-1]:
                nums1[m+n-1] = nums2[n-1]
                n = n - 1
            else:
                nums1[m+n-1] = nums1[m-1]
                m = m - 1 
                
        while n != 0:
            nums1[m+n-1] = nums2[n-1]
            n = n - 1
```

## 测试用例

```\
// 插入数比末尾数大
[1,2,3,0,0,0]
3
[2,5,6]
3
```

```
// 中间有 0
[-1,0,0,3,3,3,0,0,0]
6
[1,2,2]
3
```

```
// m 为 0
[0]
0
[1]
1

[0,0,0,0,0]
0
[1,2,3,4,5]
5
```

- 我的更多题解：[GitHub/LeetCode](https://github.com/DeppWang/LeetCode)

