这道题和这个系列前几道题的不同之处在于上面需要求解的元素的出现次数只是一次，得到最后一个元素就可以了，然而这道题需要求解两个出现一次的元素。比如这两个元素分别是`a`和`b`，一次遍历经过按位异或之后得到的结果是`a^b`，从这个信息里面我们貌似什么结论都得不到。

既然要得到两个数字，需要遍历两次，如果两次都全部遍历，我们想要的信息就会混在一起，唯一的方法就是把这个数组分成两个子数组，一个数组包含`a`，另一个包含`b`，这样分别遍历就能够得到想要的`a`和`b`了。

要想拆分这个数组，需要区分`a`和`b`，由于`a`和`b`一定是不同的，二进制表示的32位里面一定有1位是不同的，找到了这一位，然后把整个数组里面这一位为`1`的和为`0`数字分别列为两个子数组（同一个数字肯定会被划分到同一个子数组里面），分别异或就能够得到结果了。为了找到`a`和`b`不同的二进制位，上面得到的`a^b`就能派上用场了，异或结果为`1`的肯定是两个数字不同的那一位，随便找一个就可以区分，这里我们直接为`1`的最低位。我们有获取最低位的`1`的操作——`num&(-num)`，可以直接使用，简化的代码如下：

```java
public int[] singleNumber(int[] nums) {
    if (nums == null || nums.length < 1) return null;
    int[] res = new int[2];
    int xor = 0;
    for (int num : nums) {   // 计算a^b
        xor = xor^num;
    }
    int bits = xor & (-xor); // 获取最低位1

    for (int num : nums) {   // 获取其中一个出现次数位1的数字a
        res[0] ^= (bits & num) == bits ? num : 0;
    }
    res[1] = res[0]^xor;     // 根据根据前面的数字得到另一个数字b
    return res;
}
```

更多内容请看我的[**个人博客**](http://sunshuyi.vip)
