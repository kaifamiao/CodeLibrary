根据异或的特性可得，`0^x=x`,`x^x=0`。第一步先让数组所有数与0异或，得到的是两个只出现过一次的数的异或。接下来找出这个数在二进制表示下一个值为1的位置i，该1表示着这两个数在这个位上是不相同的（一定会有一个1，不然两个数就相同了）。最后在遍历一遍数组，这次把数组分为两部分，一部分是i为0的，一部分是i为1的，这样就巧妙的把两个只出现过一次的数分开了。


在找值为1的位置的时候，因为是任意位置的1，为了方便，取了最右边的1。方法是`x & (-x)`，-x分为两步操作：1.先把x取反，这样x最右边的1变成了0。 2.取反后加1，这样最右边的0变成了1。再跟x相与就能得到最右的1了。
```
class Solution {
    public int[] singleNumber(int[] nums) {
        int x = 0;
        for(int i = 0; i < nums.length; ++i)
            x ^= nums[i];
        int[] arr = new int[2];
        x = x & (-x);
        for(int i = 0; i < nums.length; ++i){
            if((nums[i] & x) == x) arr[0] ^= nums[i];
            else arr[1] ^= nums[i];
        }
        return arr;
    }
}
```
