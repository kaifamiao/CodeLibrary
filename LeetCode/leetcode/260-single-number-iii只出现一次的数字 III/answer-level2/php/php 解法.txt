说明：
1，首先我们知道，如果只出现一次的元素只有一个的话，直接异或就能得出 1^1^2^2^3=3;
2，所以我们想办法分成两个数组，每个数组都有一个元素只出现一次即可。
3，首先将数组遍历异或一遍，得到异或值xor
4，xor取反再加1解释：目的是获取xor的最低的非0位，如果xor是101010101010则(~$xor)+1=000000000010 。这个最低位的1是两个不同元素异或造成的。
5，之后，再遍历nums，和xor进行与运算：实际上就是xor上为1的位置和num该位置的值进行比较，如果num上该位置的值是1则结果等于xor，如果num上该位置的值是0则结果等于0 。这样我们就分得了两个数组，例如[1,2,1,3,2,5]我们会分解成[1,1,5]和[2,2,3]，再用说明1的方法计算即可。
```
function singleNumber($nums) {
    $xor = 0;
    foreach($nums as $num){
        $xor ^= $num;
    }
    $xor &= (~$xor)+1; 
    $ans = [];
    foreach($nums as $num){
        if(($xor & $num)==0){
            $ans[0] ^= $num;
        }else if(($xor & $num)==$xor){
            $ans[1] ^= $num;
        }
    }
    return $ans;
}
```
