/*
* 首先补充一下[136.只出现一次的数子]的一些异或^知识
* 0^0=0  0^1=1
* 1^0=1  1^1=0
* 由以上基本运算得
* 0^a=a a^a=0
* 且异或具有交换律
* eg:[a,a,b,b,c]
* a^a^b^b^c=0^b^b^c=b^b^c=0^c=c
*
* 拿题目这个来当例子[1,2,1,3,2,5]，设结果为a与b
* 为了方便用4位2进制来表示(实际上是用32位，这里数字较小，若数字较大可展开)
* 1D=0001B
  2D=0010B
  1D=0001B
  3D=0011B
  2D=0010B
  5D=0101B
* 先设s=所有数字异或的结果，即由上述异或的性质可得s=3D^5D=0011B^0101B=0110
* 我们再求得-s，注意负数时采用补码来存储运算得，这里我们展开成32位来计算，最后再为了计算方便浓缩成4位
  -s=原码10···0 0110    第一位1为符号位
     反码11···1 1001    负数反码为原码的符号位不变，其余位求反
     补码11···1 1010    负数补码为反码+1
  即-s=1010
* 我们采用与运算，设mask=s&(-s)=0110 & 1010=0010
* 注意：mask 二进制数位中有且仅有1位是1，其余全是0
* 我们设置这个mask是为了求a与b在二进制下，从右往左数，第一个出现不同的位数是第几位
  这里a=0011 b=0101 从右往左第2位不同，而mask=0010 恰巧就是第2位为1，其余位为0
* 到这里mask的作用就出现了
* **因为a与b因为是不同的数字，所以他们在二进制下，至少有一位是不同的
  **通过mask我们求出从右往左第一位不同的位数
  **那么就可以通过mask来分割，那个第一位不同的位数，是1的分为1组，是0的分为另一组
* 分割的方法就是用数字i:nums，i与mask进行与&操作
  因为&运算：只有1&1=1 0&0=1&0=0&1=0
  那一位如果是1，那么与运算结果就是mask，那一位如果是0，那么与运算结果是全0
* 通过mask将nums分成了两组，再采用136题的解法即异或运算即可
*/

*[推荐题解](https://blog.csdn.net/qq_17550379/article/details/83929138)
```
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int s=0;
        for (int &i:nums)
            s=s^i;
        int mask=s&(-s);
        int a=0,b=0;
        for (int &i:nums)
            if ((mask&i)==mask)//注意==优先级高于&
                a=a^i;
            else
                b=b^i;
        return {a,b};
    }
};
```

哈希表
比较简单自己看代码即可
```
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        unordered_map<int,int> m;
        for (int &i:nums)
            if (m.count(i)==0)
                ++m[i];
            else
                m.erase(m.find(i));
        vector<int> answer;
        for (auto &i:m)
            answer.push_back(i.first);
        return answer;
    }
};
```


