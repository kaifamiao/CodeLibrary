```
typedef struct log_system {
    int id;
    char timestamp[20];
    struct log_system *next;
} LogSystem;


LogSystem* logSystemCreate() {
    LogSystem *head = malloc(sizeof(LogSystem));
    head->id = 0;
    head->next = NULL;
    return head;
}

void logSystemPut(LogSystem* obj, int id, char * timestamp) {
    LogSystem *new_node = logSystemCreate();
    new_node->id = id;
    strcpy(new_node->timestamp, timestamp);
    // new_node->timestamp = timestamp;
    new_node->next = NULL;

    LogSystem *cur = obj;
    while (cur->next != NULL) {
        cur = cur->next;
    }
    cur->next = new_node;
}

int* logSystemRetrieve(LogSystem* obj, char * s, char * e, char * gra, int* retSize) {
    int gra_num = 0;
    if (strcmp(gra, "Year") == 0)
        gra_num = 4;
    else if (strcmp(gra, "Month") == 0)
        gra_num = 7;
    else if (strcmp(gra, "Day") == 0)
        gra_num = 10;
    else if (strcmp(gra, "Hour") == 0)
        gra_num = 13;
    else if (strcmp(gra, "Minute") == 0)
        gra_num = 16;
    else
        gra_num = 19;

    LogSystem *ret = logSystemCreate();
    *retSize = 0;

    LogSystem *cur = obj->next;
    while (cur != NULL) {
        if (strncmp(s, cur->timestamp, gra_num) < 1 && strncmp(e, cur->timestamp, gra_num) > -1) {
            logSystemPut(ret, cur->id, cur->timestamp);
            (*retSize)++;
        }
        cur = cur->next;
    }

    int *val = malloc(sizeof(int) * (*retSize));
    for (int i = 0; i < *retSize; i++) {
        ret = ret->next;
        val[i] = ret->id;
    }
    return val;
}

void logSystemFree(LogSystem* obj) {
    LogSystem **cur = &obj;
    while(*cur != NULL) {
        LogSystem *entry = *cur;
        *cur = entry->next;
        free(entry);
    }
}

/**
 * Your LogSystem struct will be instantiated and called as such:
 * LogSystem* obj = logSystemCreate();
 * logSystemPut(obj, id, timestamp);
 
 * int* param_2 = logSystemRetrieve(obj, s, e, gra, retSize);
 
 * logSystemFree(obj);
*/
```
