design-log-storage-system
你将获得多条日志，每条日志都有唯一的 id 和 timestamp，timestamp 是形如 <code>Year:Month:Day:Hour:Minute:Second</code>的字符串，例如 <code>2017:01:01:23:59:59</code>，所有值域都是零填充的十进制数。

设计一个日志存储系统实现如下功能：

<code>void Put(int id, string timestamp)</code>：给定日志的 id 和 timestamp，将这个日志存入你的存储系统中。



<code>int[] Retrieve(String start, String end, String granularity)</code>：返回在给定时间区间内的所有日志的 id。start 、end 和 timestamp 的格式相同，granularity 表示考虑的时间级。比如，start = &quot;2017:01:01:23:59:59&quot;, end = &quot;2017:01:02:23:59:59&quot;, granularity = &quot;Day&quot; 代表区间 2017 年 1 月 1 日到 2017 年 1 月 2 日。





<strong>样例 1 ：</strong>

<pre>put(1, &quot;2017:01:01:23:59:59&quot;);
put(2, &quot;2017:01:01:22:59:59&quot;);
put(3, &quot;2016:01:01:00:00:00&quot;);
retrieve(&quot;2016:01:01:01:01:01&quot;,&quot;2017:01:01:23:00:00&quot;,&quot;Year&quot;); // 返回值 [1,2,3]，返回从 2016 年到 2017 年所有的日志。
retrieve(&quot;2016:01:01:01:01:01&quot;,&quot;2017:01:01:23:00:00&quot;,&quot;Hour&quot;); // 返回值 [1,2], 返回从 2016:01:01:01 到 2017:01:01:23 区间内的日志，日志 3 不在区间内。
</pre>



<strong>注释 ：</strong>

<ol>
	Put 和 Retrieve 的指令总数不超过 300。
	年份的区间是 [2000,2017]，小时的区间是[00,23]。
	Retrieve 的输出顺序不作要求。
</ol>



设计日志存储系统
You are given several logs that each log contains a unique id and timestamp. Timestamp is a string that has the following format: <code>Year:Month:Day:Hour:Minute:Second</code>, for example, <code>2017:01:01:23:59:59</code>. All domains are zero-padded decimal numbers. 

Design a log storage system to implement the following functions:

<code>void Put(int id, string timestamp)</code>: Given a log's unique id and timestamp, store the log in your storage system.
<br>
<code>int[] Retrieve(String start, String end, String granularity)</code>: Return the id of logs whose timestamps are within the range from start to end. Start and end all have the same format as timestamp. However, granularity means the time level for consideration. For example, start = "2017:01:01:23:59:59", end = "2017:01:02:23:59:59", granularity = "Day", it means that we need to find the logs within the range from Jan. 1st 2017 to Jan. 2nd 2017.

<b>Example 1:</b><br />
<pre>
put(1, "2017:01:01:23:59:59");
put(2, "2017:01:01:22:59:59");
put(3, "2016:01:01:00:00:00");
retrieve("2016:01:01:01:01:01","2017:01:01:23:00:00","Year"); // return [1,2,3], because you need to return all logs within 2016 and 2017.
retrieve("2016:01:01:01:01:01","2017:01:01:23:00:00","Hour"); // return [1,2], because you need to return all logs start from 2016:01:01:01 to 2017:01:01:23, where log 3 is left outside the range.
</pre>


<b>Note:</b><br>
<ol>
There will be at most 300 operations of Put or Retrieve.
Year ranges from [2000,2017]. Hour ranges from [00,23].
Output for Retrieve has no order required.
</ol>
