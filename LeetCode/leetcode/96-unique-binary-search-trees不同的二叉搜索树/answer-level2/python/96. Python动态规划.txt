### 解题思路
我们先举个例子n = 4。
当n = 4时我们可以分成4种情况，分别是以1, 2, 3, 4为根，当根确定以后，根的子节点的左右子树的节点数量就确定了（因为二叉查找树的性质），例如当3为根节点时，左子树包括1, 2，右子树包括4，这时的问题就转换为两个互相独立的子树的结构数量问题，也就是子问题，我们知道1个节点组成的不同结构的二叉查找树的数量为1，而2个节点组成的不同结构的二叉查找树的数量为2，所以以3为根n=4的情况下不同结构的二叉查找树的数量为1 * 2 = 2 。
从上面的例子可以发现将原问题分解成子问题进行解决，符合动态规划的适用条件。

### 代码

```python
class Solution(object):
    def numTrees(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n == 0:
            return 1
        elif n <= 2:
            return n
        dp = [0] * (n + 1)
        dp[0] = 1
        dp[1] = 1
        dp[2] = 2
        for i in range(3, n + 1):
            sum = 0
            for j in range(1, i + 1):
                sum += dp[j - 1] * dp[i - j]
            dp[i] = sum
        return dp[-1]
```