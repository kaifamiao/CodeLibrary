二叉排序树，也叫二叉搜索数，有一个重要的特点就是左子树全部节点小于根，右子树全部节点大于根。

**我们直接考虑输入为n时有多少中可能的树。**
    *如果以n为根节点，那么左子树就有n-1个节点，右子树有0个节点；
    如果以n-1为根节点，那么左子树就有n-2个节点，右子树有1个节点；
    如果以n-2为根节点，那么左子树就有n-3个节点，右子树有2个节点；
    ……
    如果以1为根节点，那么左子树就有0个节点，右子树有n-1个节点；*

    *以上就是所有可能的节点情况。*

**n-k个节点的情况怎么求呢？**
    1,2，3与1,2，4所有的树会一样嘛？
    1,3，5,7，9与1,2，3,4,5所有的树会一样嘛？
    答案是一样的，你按照大小的顺序填入1,2,3,……,n-k所构成的树不就行了嘛！

**那么不就有递推方程：(方便起见dp[0]表示0个节点的所有树可能为1))**
        dp[n]=dp[n-1]*dp[0]+dp[n-2]*dp[1]+……dp[n-k]*dp[k-1]+……+dp[0]*dp[n-1];

**代码入下**
```
int numTrees(int n) {
        if(n==0) return 0;
        int dp[n+1]={0};
        dp[0]=1;
        for(int i=1;i<=n;i++){
            for(int k=i;k>=1;k--){
                dp[i]+=dp[i-k]*dp[k-1];
            }
        }
        return dp[n];
    }
```

