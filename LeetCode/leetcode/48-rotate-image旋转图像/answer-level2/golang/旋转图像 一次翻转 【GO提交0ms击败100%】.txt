## 结果

![image.png](https://pic.leetcode-cn.com/81e537f85b3fa35dee1d430e9fdf9ddc6c4c70b38bcbb8a288daccf64bc63eb0-image.png)

## 思路

以下为例
```
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
]
```

先考虑外围四个点，它们的坐标分别是`(0,0), (0, n-1), (n-1,n-1), (n-1, 0)`。显然旋转后它们的坐标为`(n-1, 0), (0,0), (0, n-1), (n-1,n-1)`
- 因为给出的是n*n的矩阵，我们需要沿着对角线向里把包含在里面的小矩阵也翻转了，因此外围k遍历范围是`[0, n/2)`
- 再考虑外围不是顶点的点，如例子中的`1,10,12,13`,它们的变换关系是`(0+1,0+1),(0+1,n-1-1),(n-1-1,n-1-1),(n-1-1, 0+1)`->`(n-1-1, 0+1),(0+1,0+1),(0+1,n-1-1),(n-1-1,n-1-1)`。 在这里再次找到规律，相比四个顶点的坐标变换关系是`(0,0), (0, n-1), (n-1,n-1), (n-1, 0)`->`(0+1,0+1),(0+1,n-1-1),(n-1-1,n-1-1),(n-1-1, 0+1)`，范围是[0+0,0+n-k*2-1)
- 所以最终的变换关系就分析出来了，具体参考代码


## Code

```
func rotate(matrix [][]int)  {
    n := len(matrix)
    // 沿着对角线
    for k:=0;k<n/2;k++ {
        // 翻转对应位置的整个正方形
        for i:=0;i<n-k*2-1;i++ {
            // 四个点的变换关系
            matrix[k][k+i], matrix[k+i][n-1-k],
            matrix[n-1-k][n-1-k-i], matrix[n-1-k-i][k] = matrix[n-1-k-i][k], matrix[k][k+i],
                matrix[k+i][n-1-k], matrix[n-1-k][n-1-k-i]
        }
    }
}


```

