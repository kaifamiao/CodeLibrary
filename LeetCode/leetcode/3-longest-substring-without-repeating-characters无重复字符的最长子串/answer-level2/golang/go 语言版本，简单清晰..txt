### 解题思路
此题的关键：
1.要保证必须是连续的并且不重复的，二者缺一不可。
2.一旦检测到重复后，应该怎么处理？
3.需要那些技巧或数据结构协助？
我们来拿其中例子"efgacazxutfyra" 分析，并用maxLen表示连续的不重复子串的长度，遍历该串;
前5个字符efgac满足连续不重复的条件，则这时maxLen是5，然后到第6个字符（index=5）的时候，我们又遇到字符a，a在之前第4个位置(index=3)的时候，已经出现过了；ok，这个时候怎么办呢？我们发现，既然当前a在第4个位置已经出现过，这时如果让继续追加第6个a的话，必须把第4个a以及它之前的所有字符舍弃，即新的一次统计，必须从第5个字符，也就是c开始，这样才能满足“连续不重复”的条件，即我们发现：
第一段连续不重复的长度是5，即字符"efgac"，然后因为第6个字符a的出现，造成了重复，于是第二段可能存在的连续不重复的子串就只能从第5个字符c（index=4)开始算起了。于是我们开始统计第二个可能存在的连续不重复子串可能的长度，并且需从第5个字符c开始，这是关键的关键！因为我们第二段的统计的关键就是要避开刚才重复的a
过程清楚了，通过思考并转换为算法，最终想到用2个指针和一个map（如m)来解决此问题，用i表示当前不重复的连续串的第一个字符，用j表示正在遍历的下一个字符.
过程如下；
刚开始指针i和指针j都指向字符串的开头，并且我们用m来存放连续不重复的子串.
保持i的位置不动，判断s[j]是否已存在于m中，如果不存在则自然将s[j]放置到m中，并继续遍历下一个字符;
但是如果已存在，这个时候就是关键了:
a)如果该字符已在m中，这时就需要统计下m中当前已有元素的个数，并跟maxLen做比对，如果超过历史的maxLen，则用其将maxLen替换；
  核心就是：一旦检测到已存在，则需比对并更新maxLen
c)注意临界的坑，比如"pwwkewa"，最大的子串"kewa"，碰巧也刚好遍历完毕整个串，整个时候上次大最大串是"wke"，所以在最后循环完毕后，在循环外需要再判断一次，把maxLen由3替换为4。

所以干脆把m的长度跟maxLen比对的过程放置到一次循环的最后，这样就兼容了所有的情况，实现见下：

### 代码

```golang
func lengthOfLongestSubstring(s string) int {
    m := make(map[uint8]int)
    var maxLen int
    var i int
    j := i
    for j<len(s) {
        if _,ok := m[s[j]];!ok{
            m[s[j]] = j
            j++
        }else{
            i = m[s[j]] + 1 //注意，必须避开重复的字符，所以需 + 1 
            j = i
            m = make(map[uint8]int)
        }
        if len(m) > maxLen {
            maxLen = len(m)
        }
    }
    return maxLen
}
```