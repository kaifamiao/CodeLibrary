find-elements-in-a-contaminated-binary-tree
给出一个满足下述规则的二叉树：

<ol>
	<code>root.val == 0</code>
	如果 <code>treeNode.val == x</code> 且<code>treeNode.left != null</code>，那么<code>treeNode.left.val == 2 * x + 1</code>
	如果 <code>treeNode.val == x</code> 且 <code>treeNode.right != null</code>，那么<code>treeNode.right.val == 2 * x + 2</code>
</ol>

现在这个二叉树受到「污染」，所有的<code>treeNode.val</code>都变成了<code>-1</code>。

请你先还原二叉树，然后实现<code>FindElements</code>类：

<ul>
	<code>FindElements(TreeNode* root)</code>用受污染的二叉树初始化对象，你需要先把它还原。
	<code>bool find(int target)</code>判断目标值<code>target</code>是否存在于还原后的二叉树中并返回结果。
</ul>



<strong>示例 1：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/untitled-diagram-4-1.jpg" style="height: 119px; width: 320px;"></strong>

<pre><strong>输入：</strong>
[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;]
[[[-1,null,-1]],[1],[2]]
<strong>输出：</strong>
[null,false,true]
<strong>解释：</strong>
FindElements findElements = new FindElements([-1,null,-1]); 
findElements.find(1); // return False 
findElements.find(2); // return True </pre>

<strong>示例 2：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/untitled-diagram-4.jpg" style="height: 198px; width: 400px;"></strong>

<pre><strong>输入：</strong>
[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]
[[[-1,-1,-1,-1,-1]],[1],[3],[5]]
<strong>输出：</strong>
[null,true,true,false]
<strong>解释：</strong>
FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);
findElements.find(1); // return True
findElements.find(3); // return True
findElements.find(5); // return False</pre>

<strong>示例 3：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/untitled-diagram-4-1-1.jpg" style="height: 274px; width: 306px;"></strong>

<pre><strong>输入：</strong>
[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]
[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
<strong>输出：</strong>
[null,true,false,false,true]
<strong>解释：</strong>
FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);
findElements.find(2); // return True
findElements.find(3); // return False
findElements.find(4); // return False
findElements.find(5); // return True
</pre>



<strong>提示：</strong>

<ul>
	<code>TreeNode.val == -1</code>
	二叉树的高度不超过<code>20</code>
	节点的总数在<code>[1,10^4]</code>之间
	调用<code>find()</code>的总次数在<code>[1,10^4]</code>之间
	<code>0 &lt;= target &lt;= 10^6</code>
</ul>

在受污染的二叉树中查找元素
Given abinary tree with the following rules:

<ol>
	<code>root.val == 0</code>
	If <code>treeNode.val == x</code> and <code>treeNode.left != null</code>, then <code>treeNode.left.val == 2 * x + 1</code>
	If <code>treeNode.val == x</code> and <code>treeNode.right != null</code>, then <code>treeNode.right.val == 2 * x + 2</code>
</ol>

Now the binary tree is contaminated, which means all<code>treeNode.val</code>havebeen changed to <code>-1</code>.

You need to first recover the binary tree and then implement the <code>FindElements</code> class:

<ul>
	<code>FindElements(TreeNode* root)</code>Initializes the object with acontamined binary tree, you need to recover it first.
	<code>bool find(int target)</code>Return if the <code>target</code> value exists in the recovered binary tree.
</ul>


<strong>Example 1:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2019/11/06/untitled-diagram-4-1.jpg" style="width: 320px; height: 119px;" /></strong>

<pre>
<strong>Input</strong>
[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;]
[[[-1,null,-1]],[1],[2]]
<strong>Output</strong>
[null,false,true]
<strong>Explanation</strong>
FindElements findElements = new FindElements([-1,null,-1]); 
findElements.find(1); // return False 
findElements.find(2); // return True </pre>

<strong>Example 2:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2019/11/06/untitled-diagram-4.jpg" style="width: 400px; height: 198px;" /></strong>

<pre>
<strong>Input</strong>
[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]
[[[-1,-1,-1,-1,-1]],[1],[3],[5]]
<strong>Output</strong>
[null,true,true,false]
<strong>Explanation</strong>
FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);
findElements.find(1); // return True
findElements.find(3); // return True
findElements.find(5); // return False</pre>

<strong>Example 3:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2019/11/07/untitled-diagram-4-1-1.jpg" style="width: 306px; height: 274px;" /></strong>

<pre>
<strong>Input</strong>
[&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]
[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
<strong>Output</strong>
[null,true,false,false,true]
<strong>Explanation</strong>
FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);
findElements.find(2); // return True
findElements.find(3); // return False
findElements.find(4); // return False
findElements.find(5); // return True
</pre>


<strong>Constraints:</strong>

<ul>
	<code>TreeNode.val == -1</code>
	The height of the binary tree is less than or equal to <code>20</code>
	The total number of nodes is between <code>[1,10^4]</code>
	Total calls of <code>find()</code> is between <code>[1,10^4]</code>
	<code>0 &lt;= target &lt;= 10^6</code>
</ul>
