使用邻接表表示公式对应的依赖关系，sum的时候更新邻接表，set的时候根据邻接表更新所有有关联的带公式的单元格的值。同时，如果本次set的单元格原先有公式（有其他节点对他的邻接表项），就清除掉。
```
#define EXCEL_SIZE 26
#define HASH_SIZE 1000
typedef struct {
    int data[EXCEL_SIZE][EXCEL_SIZE];
    int height;
    int wid;
    int graph[HASH_SIZE][HASH_SIZE];
} Excel;


Excel* excelCreate(int H, char W) {
    Excel *excel = (Excel*)malloc(sizeof(Excel));
    if (excel == NULL) {
        return NULL;
    }
    memset(excel, 0, sizeof(Excel));
    excel->height = H;
    excel->wid = W - 'A' + 1;
    return excel;
}

void Dfs(Excel* obj, int r, char c, int v) {
    if (obj == NULL) {
        return NULL;
    }
    int **graph = obj->graph;
    int **data = obj->data;
    int line = r - 1; // 下标从0开始
    int col = c - 'A';
    int hashLen = fmax(obj->height, obj->wid);
    // 邻接表有值代表有其他单元格对其有依赖，需要更新所有依赖他的单元格的值，使用DFS刷新所有依赖关系
    for (int j = 0; j < hashLen * hashLen; j++) {
        if (obj->graph[line * hashLen + col][j] > 0) {
            int n = obj->graph[line * hashLen + col][j];
            int x = j / hashLen;
            int y = j % hashLen;
            Dfs(obj, x + 1, y + 'A', obj->data[x][y] + n * (v - obj->data[line][col]));
        }
    }
    obj->data[line][col] = v;
}

void excelSet(Excel* obj, int r, char c, int v) {
    if (obj == NULL) {
        return NULL;
    }
    Dfs(obj, r, c, v);
    int **graph = obj->graph;
    int **data = obj->data;
    int line = r - 1; // 下标从0开始
    int col = c - 'A';
    int hashLen = fmax(obj->height, obj->wid);
    // 某单元格一旦被赋了值，它原先的公式就失效了，去掉被它依赖的所有元素对应的邻接表值
    for (int i = 0; i < hashLen * hashLen; i++) {
        if (obj->graph[i][line * hashLen + col] > 0) {
            obj->graph[i][line * hashLen + col] = 0;
        }
    }
}

int excelGet(Excel* obj, int r, char c) {
    if (obj == NULL) {
        return 0;
    }
    int **graph = obj->graph;
    int **data = obj->data;
    int line = r - 1; // 下标从0开始
    int col = c - 'A';
    return obj->data[line][col];
}
int Sum(Excel* obj, char *str, int r, int c)
{
    int len = strlen(str);
    int flag = 0; // 标识是否存在":"号
    int left = 0;
    int up = 0;
    int down = 0;
    int right = 0;
    int hashLen = fmax(obj->height, obj->wid);
    int sum = 0;
    for (int i = 0; i < len; i++) {
        if (flag == 0) {
            if (str[i] == ':') {
                flag = 1;
            } else if (str[i] >= 'A') {
                left = str[i] - 'A';
            } else if (str[i] >= '0') {
                up = up * 10 + str[i] - '0';
            }
        } else {
            if (str[i] == ':') {
                return 0; // 此处不应该有":"
            } else if (str[i] >= 'A') {
                right = str[i] - 'A';
            } else if (str[i] >= '0') {
                down = down * 10 + str[i] - '0';
            }
        }
    }
    // 高度从0开始，都需要减一，
    up--;
    down--;
    if (flag == 0) {
        // 加入邻接表, 同一个单元格可能被依赖多次，所以要++而不是设置为1
        obj->graph[up * hashLen + left][r * hashLen + c]++;
        sum += obj->data[up][left];
    }
    if (flag == 1) {
        for (int i = up; i <= down; i++) {
            for (int j = left; j <= right; j++) {
                obj->graph[i * hashLen + j][r * hashLen + c]++; 
                sum += obj->data[i][j];
            }
        }
    }
    return sum;
}
int excelSum(Excel* obj, int r, char c, char ** strs, int strsSize) {
    if (obj == NULL) {
        return NULL;
    }
    int **graph = obj->graph;
    int **data = obj->data;
    int line = r - 1; // 下标从0开始
    int col = c - 'A';
    int sum = 0;
    for (int i = 0; i < strsSize; i++) {
        sum += Sum(obj, strs[i], line, col);
    }  
    obj->data[line][col] = sum;
    return obj->data[line][col];
}

void excelFree(Excel* obj) {
    if (obj) {
        free(obj);
    }
}

```
