首先定义区间的上下限`l`和`r`，表示遍历过程中逐渐缩小的target所在的范围。
根据BST的性质，当前节点root如果值小于target，那么更新下限`l = root->val`；反之更新上限`r = root->val`。这样可以保证target一定落在(l, r)中并且这是最小的区间。
通过比较`abs(l-target)`和`abs(r-target)`即可得到最接近的。

```
class Solution {
public:
    int closestValue(TreeNode* root, double target) {
        int l = root->val, r = root->val;
        while(root){
            if(target < root->val){
                r = root->val;
                root = root->left;
            }else if(target > root->val){
                l = root->val;
                root = root->right;
            }else
                return root->val;
        }
        return abs(target - l) < abs(r - target) ? l:r;
    }
};
```

![image.png](https://pic.leetcode-cn.com/b3bcaf5494b3e11474f08454394dceb24663de6154426f954b2d645964412c63-image.png)
