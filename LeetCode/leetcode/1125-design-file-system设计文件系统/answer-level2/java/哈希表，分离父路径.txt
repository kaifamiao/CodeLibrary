### 解题思路

路径path和值value关联，我们很容易想到用Map这种键值对的集合，只要把每次的路径和对应的值记录起来即可。

稍微需要考虑的，是判断父路径是否存在，有些同学可能会陷入一个思维，就是要分解路径，逐层判断父路径是否存在。

当然，这样的思路是可以的，只是把问题复杂化了。

想象一下，我们在系统中创建一个文件的时候，是不是要从某个盘开始，然后一直往我们想去的那个文件夹走，到了这个文件后，再新建我们要的文件。那么，这时候**地址栏上的路径**，就是**这个文件的父路径**了。

这个文件要有效，表示父路径就是要存在的，所以，只需要把**最后一个/之前的路径**截取出来，拿到文件的map中去判断是否存在，就能确定父路径是不是一个有效的路径了。

### 核心代码

```java
// 获取父路径
int lastIndex = path.lastIndexOf("/");
String parentPath = path.substring(0,lastIndex);
// 父路径不存在，则返回false
if (!fileMap.containsKey(parentPath)){
    return false;
}
```


### 代码

```java
class FileSystem {

    private Map<String,Integer> fileMap;// 文件路径

    public FileSystem() {
        fileMap = new HashMap<>();
        // 缓存根节点路径
        fileMap.put("",-1);
    }

    public boolean createPath(String path, int value) {
        // 没有删除的文件的情况，path只要存在，就一直存在
        if (fileMap.containsKey(path)){
            return false;// 文件已经存在了，返回false
        }
        // 获取父路径
        int lastIndex = path.lastIndexOf("/");
        String parentPath = path.substring(0,lastIndex);
        // 父路径不存在，则返回false
        if (!fileMap.containsKey(parentPath)){
            return false;
        }
        // 文件记录
        fileMap.put(path,value);
        return true;
    }

    public int get(String path) {
        // 获取文件的值，不存在就是-1
        return fileMap.getOrDefault(path,-1);
    }
}

/**
 * Your FileSystem object will be instantiated and called as such:
 * FileSystem obj = new FileSystem();
 * boolean param_1 = obj.createPath(path,value);
 * int param_2 = obj.get(path);
 */
```