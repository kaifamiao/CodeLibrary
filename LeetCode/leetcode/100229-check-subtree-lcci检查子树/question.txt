check-subtree-lcci
检查子树。你有两棵非常大的二叉树：T1，有几万个节点；T2，有几万个节点。设计一个算法，判断 T2 是否为 T1 的子树。

如果 T1 有这么一个节点 n，其子树与 T2 一模一样，则 T2 为 T1 的子树，也就是说，从节点 n 处把树砍断，得到的树与 T2 完全相同。

<strong>示例1:</strong>

<pre><strong> 输入</strong>：t1 = [1, 2, 3], t2 = [2]
<strong> 输出</strong>：true
</pre>

<strong>示例2:</strong>

<pre><strong> 输入</strong>：t1 = [1, null, 2, 4], t2 = [3, 2]
<strong> 输出</strong>：false
</pre>

<strong>提示：</strong>

<ol>
	树的节点数目范围为[0, 20000]。
</ol>

检查子树
T1and T2 are two very large binary trees, with T1much bigger than T2. Create an algorithm to determine if T2 is a subtree of T1.

A tree T2 is a subtree of T1if there exists a node n in T1such that the subtree of n is identical to T2. That is, if you cut off the tree at node n, the two trees would be identical.

<strong>Example1:</strong>

<pre>
<strong> Input</strong>: t1 = [1, 2, 3], t2 = [2]
<strong> Output</strong>: true
</pre>

<strong>Example2:</strong>

<pre>
<strong> Input</strong>: t1 = [1, null, 2, 4], t2 = [3, 2]
<strong> Output</strong>: false
</pre>

<strong>Note: </strong>

<ol>
	The node numbers of both tree are in [0, 20000].
</ol>
