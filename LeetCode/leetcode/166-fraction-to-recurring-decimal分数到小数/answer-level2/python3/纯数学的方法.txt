这题，难点在于循环节的寻找，要么知道循环节多少位，要么在计算小数的时候，来检查是否出现循环了。

还有一种思路，根据循环节的特性来处理。

```
如果1≤b<a， a没有2或者5的质因数，并且a与b互质，那么b / a的循环节位数等于: min{e∈N:10^e≡1( mod a)}
```

例如a = 7，那么根据上述定理可以找到最小的e = 6 即 1000000 % 7 = 1，那么循环节就是6位。

还有一个性质

```
如果n和m >=3，且2和5都不整除m * n，并且n与m是互质的正整数，则1 / (n * m) 的循环位数是1 / n 与1 / m循环小数位数的最小公倍数;
```

例如 21，等于 3 * 7，那么1 / 21的循环节长度与 1 / 7 相同。

有了前两个，我们可以知道任何一个分数是否存在循环节，存在的话循环节的长度是多少。

现在需要计算循环节是什么，比如 73 / 350，可以通过对350进行去除2 ,5 因子的方式推导出

```
73 / 350 => (1/2) * (1/5) * (1/5) * (73 / 7)
=> (1/2) * (1/5) * (1/5) * (10 + 3 / 7)
```

3 / 7 的循环节是6位(428571)，计算小数6次就可以了，但是这个循环节并不是 73 / 350的循环节(857142)，它实际上等于 6 / 7的循环节。

所以还需要通过对分数进行变换，推算出计算循环节最简化的分式

```
(1/2) * (1/5) * (1/5) * (73 / 7) => (1/2) * (1/5) * (1/5) * (1/2) * ( 73 * 2 / 7 )
=>(1/2) * (1/5) * (1/5) * (1/2) * (20 + 6 / 7)
```

可以推出一个通项的方式

```
如果 b / a = (0.5)^n * (0.2)^m * (b / p)，p为不含2和5因子的数

那么则根据 n和m的差值，补充相对应的2和5，
如果 n = m 则不需要补充，b / p的循环节和 b / a是一致的
如果 n > m 则需要补充 (n - m) 个5 
    => (0.5)^n * (0.2)^n * (b * (0.2)^(n-m) / p) 
    = >  (0.5)^n * (0.2)^n * ( int(b * (0.2)^(n-m) / p) + (b * (0.2)^(n-m) % p) / p)
如果m < n 则类似补充 (m -n)个2

其中(b * (0.2)^(n-m) % p) / p的循环节与 b / a是一致的
```

这样我们就可以根据max(n, m)与int(b * (0.2)^(n-m) / p) 的位数来确定整数部是否大于0，小数点加在哪里，或者整数部位0，小数点后面补几个0。

在实现的开始，要计算循环节的长度，也知道长度小于它最大的质数因子，如果质因子很大的话，很容易溢出。

所以求位数采用了同余定理，来避免溢出。

```
    def qpow(self, a, b, mod):
        ret = 1
        while b > 0:
            if b & 1:
                ret = ret * a % mod

            a = a * a % mod
            b >>= 1

        return ret
```

逻辑部分，先将容易的部分过滤掉

```
    def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        lf, rf = 1, 1
        if numerator < 0:
            lf = -1

        if denominator < 0:
            rf = -1


        res = ''
        if lf * rf < 0:
            res += '-'

        n = abs(numerator)
        d = abs(denominator)

        if d == 1:
            return str(n * lf * rf)

        if n % d == 0:
            return str(numerator // denominator)
```

去除2和5因子

```
        m = n % d
        i = int(n / d)

        t, f = 0, 0
        while d % 5 == 0:
            d = int(d / 5)
            f += 1 # 5的个数

        while d % 2 == 0:
            d = int(d / 2)
            t += 1 # 2的个数
```

处理不带循环节的类型

```
        if d == 1:
            ys = ''
            dd = abs(denominator)
            while m:
                ys += str(int(m * 10 / dd))
                m = m * 10 % dd

            res += str(i) + '.' + ys
            return res
```

下面开始处理循环节，先求循环节的位数

```
        e = 1
        while self.qpow(10, e, d) != 1:
            e += 1
```

开始变换分数，补充2或5 然后计算循环节

```
        ff = t - f if t > f else 0
        tf = f - t if f > t else 0

        s1 = str(int(n * (2 ** tf) * (5 ** ff) / d)) # 待处理的商，就是k + d / p中的k
        y = (n * (2 ** tf) * (5 ** ff)) % d # k + d / p 中的d

        # 计算循环节
        ys = ''
        for k in range(e):
            ys += str(int(y * 10 / d))
            y = y * 10 % d
```

拼装小数

```
        z = max(t,f) # 需要补充0或者小数点的位数
        if len(s1) > max(t,f): #整数部分长度大于0的个数，在商中加入小数点
            res += s1[:len(s1) - z] + '.' + s1[len(s1)-z:]
        else: # 整数部分长度小于0的个数，则在商前追加0
            res += '0.'
            res += '0' * (z - len(s1))
            res += s1


        res += '(' + ys + ')'

        return res
```
