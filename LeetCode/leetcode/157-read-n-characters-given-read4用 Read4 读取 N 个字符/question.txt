read-n-characters-given-read4
给你一个文件，并且该文件只能通过给定的<code>read4</code>方法来读取，请实现一个方法使其能够读取 n 个字符。

<strong>read4 方法：</strong>

API<code>read4</code>可以从文件中读取 4 个连续的字符，并且将它们写入缓存数组<code>buf</code>中。

返回值为实际读取的字符个数。

注意<code>read4()</code> 自身拥有文件指针，很类似于 C 语言中的 <code>FILE *fp</code> 。

<strong>read4 的定义：</strong>

<pre>参数类型: char[] buf
返回类型: int

注意: buf[] 是目标缓存区不是源缓存区，read4 的返回结果将会复制到 buf[] 当中。
</pre>

下列是一些使用 <code>read4</code> 的例子：

<pre><code>File file(&quot;abcdefghijk&quot;); // 文件名为 &quot;abcdefghijk&quot;， 初始文件指针 (fp) 指向 &#39;a&#39; 
char[] buf = new char[4]; // 创建一个缓存区使其能容纳足够的字符
read4(buf); // read4 返回 4。现在 buf = &quot;abcd&quot;，fp 指向 &#39;e&#39;
read4(buf); // read4 返回 4。现在 buf = &quot;efgh&quot;，fp 指向 &#39;i&#39;
read4(buf); // read4 返回 3。现在 buf = &quot;ijk&quot;，fp 指向文件末尾</code></pre>

<strong>read 方法：</strong>

通过使用 <code>read4</code> 方法，实现<code>read</code> 方法。该方法可以从文件中读取 n 个字符并将其存储到缓存数组<code>buf</code> 中。您<strong>不能</strong>直接操作文件。

返回值为实际读取的字符。

<strong>read的定义：</strong>

<pre>参数类型:   char[] buf, int n
返回类型:   int

注意: buf[] 是目标缓存区不是源缓存区，你需要将结果写入 buf[] 中。
</pre>



<strong>示例 1：</strong>

<pre><strong>输入： </strong>file = &quot;abc&quot;, n = 4
<strong>输出： </strong>3
<strong>解释： 当执行你的 rand 方法后，buf 需要包含 &quot;abc&quot;。 文件一共 3 个字符，因此返回 3。 注意 &quot;abc&quot; 是文件的内容，不是 buf 的内容，buf 是你需要写入结果的目标缓存区。 </strong></pre>

<strong>示例 2：</strong>

<pre><strong>输入： </strong>file = &quot;abcde&quot;, n = 5
<strong>输出： </strong>5
<strong>解释： 当执行你的 rand 方法后，buf 需要包含 &quot;abcde&quot;。文件共 5 个字符，因此返回 5。</strong>
</pre>

<strong>示例 3:</strong>

<pre><strong>输入： </strong>file = &quot;abcdABCD1234&quot;, n = 12
<strong>输出： </strong>12
<strong>解释： 当执行你的 rand 方法后，buf 需要包含 &quot;</strong>abcdABCD1234<strong>&quot;。文件一共 12 个字符，因此返回 12。</strong>
</pre>

<strong>示例 4:</strong>

<pre><strong>输入： </strong>file = &quot;leetcode&quot;, n = 5
<strong>输出： </strong>5
<strong>解释： 当执行你的 rand 方法后，buf 需要包含 &quot;</strong>leetc<strong>&quot;。文件中一共 5 个字符，因此返回 5。</strong>
</pre>



<strong>注意：</strong>

<ol>
	你 <strong>不能</strong> 直接操作该文件，文件只能通过 <code>read4</code> 获取而 <strong>不能</strong> 通过 <code>read</code>。
	<code>read</code> 函数只在每个测试用例调用一次。
	你可以假定目标缓存数组<code>buf</code> 保证有足够的空间存下 n 个字符。
</ol>

用 Read4 读取 N 个字符
Given a file and assume that you can only read the file using a given method<code>read4</code>, implement a method to read <em>n</em> characters.



<b>Method read4: </b>

The API<code>read4</code> reads 4 consecutive characters from the file, then writes those characters into the buffer array <code>buf</code>.

The return value is the number of actual characters read.

Note that<code>read4()</code> has its own file pointer, much like <code>FILE *fp</code> in C.

<b>Definition of read4:</b>

<pre>
    Parameter:  char[] buf
    Returns:    int

Note: buf[] is destination not source, the results from read4 will be copied to buf[]
</pre>

Below is a high level example of how <code>read4</code> works:

<pre>
<code>File file(&quot;abcdefghijk&quot;); // File is &quot;abcdefghijk&quot;, initially file pointer (fp) points to &#39;a&#39;
char[] buf = new char[4]; // Create buffer with enough space to store characters
read4(buf); // read4 returns 4. Now buf = &quot;abcd&quot;, fp points to &#39;e&#39;
read4(buf); // read4 returns 4. Now buf = &quot;efgh&quot;, fp points to &#39;i&#39;
read4(buf); // read4 returns 3. Now buf = &quot;ijk&quot;, fp points to end of file</code>
</pre>



<strong>Method read:</strong>

By using the <code>read4</code> method, implement the method<code>read</code> that reads <i>n</i> characters from the file and store it in thebuffer array<code>buf</code>. Consider that you <strong>cannot</strong> manipulate the file directly.

The return value is the number of actual characters read.

<b>Definition of read: </b>

<pre>
    Parameters:	char[] buf, int n
    Returns:	int

Note: buf[] is destination not source, you will need to write the results to buf[]
</pre>



<strong>Example 1:</strong>

<pre>
<strong>Input: </strong>file = &quot;abc&quot;, n = 4
<strong>Output: </strong>3
<strong>Explanation:</strong>After calling your read method, buf should contain &quot;abc&quot;. We read a total of 3 characters from the file, so return 3. Note that &quot;abc&quot; is the file&#39;s content, not buf. buf is the destination buffer that you will have to write the results to.
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input: </strong>file = &quot;abcde&quot;, n = 5
<strong>Output: </strong>5
<strong>Explanation: </strong>After calling your read method, buf should contain &quot;abcde&quot;. We read a total of 5 characters from the file, so return 5.
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input: </strong>file = &quot;abcdABCD1234&quot;, n = 12
<strong>Output: </strong>12
<strong>Explanation: </strong>After calling your read method, buf should contain &quot;abcdABCD1234&quot;. We read a total of 12 characters from the file, so return 12.
</pre>

<strong>Example 4:</strong>

<pre>
<strong>Input: </strong>file = &quot;leetcode&quot;, n = 5
<strong>Output: </strong>5
<strong>Explanation: </strong>After calling your read method, buf should contain &quot;leetc&quot;. We read a total of 5 characters from the file, so return 5.
</pre>



<strong>Note:</strong>

<ol>
	Consider that you <strong>cannot</strong> manipulate the file directly, the file is only accesible for <code>read4</code> but<strong>not</strong> for <code>read</code>.
	The <code>read</code> function will only be called once for each test case.
	You may assume the destination buffer array,<code>buf</code>,is guaranteed to have enoughspace for storing<em>n</em>characters.
</ol>
