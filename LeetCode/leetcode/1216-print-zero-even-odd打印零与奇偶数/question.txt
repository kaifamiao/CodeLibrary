print-zero-even-odd
假设有这么一个类：

<pre>class ZeroEvenOdd {
 public ZeroEvenOdd(int n) { ... }     // 构造函数
  public void zero(printNumber) { ... }  // 仅打印出 0
  public void even(printNumber) { ... }  // 仅打印出 偶数
  public void odd(printNumber) { ... }   // 仅打印出 奇数
}
</pre>

相同的一个<code>ZeroEvenOdd</code>类实例将会传递给三个不同的线程：

<ol>
	线程 A 将调用<code>zero()</code>，它只输出 0 。
	线程 B 将调用<code>even()</code>，它只输出偶数。
	线程 C 将调用<code>odd()</code>，它只输出奇数。
</ol>

每个线程都有一个<code>printNumber</code> 方法来输出一个整数。请修改给出的代码以输出整数序列<code>010203040506</code>... ，其中序列的长度必须为 2<em>n</em>。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>n = 2
<strong>输出：</strong>&quot;0102&quot;
<strong>说明：</strong>三条线程异步执行，其中一个调用 zero()，另一个线程调用 even()，最后一个线程调用odd()。正确的输出为 &quot;0102&quot;。
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>n = 5
<strong>输出：</strong>&quot;0102030405&quot;
</pre>

打印零与奇偶数
Suppose you are given the following code:

<pre>
class ZeroEvenOdd {
 public ZeroEvenOdd(int n) { ... }     // constructor
  public void zero(printNumber) { ... }  // only output 0&#39;s
  public void even(printNumber) { ... }  // only output even numbers
  public void odd(printNumber) { ... }   // only output odd numbers
}
</pre>

The same instance of <code>ZeroEvenOdd</code> will be passed to three different threads:

<ol>
	Thread A will call<code>zero()</code>which should only output 0&#39;s.
	Thread B will call<code>even()</code>which should only ouput even numbers.
	Thread C will call <code>odd()</code>which should only output odd numbers.
</ol>

Each of the threads is given a<code>printNumber</code> method to outputan integer. Modify the given program to output the series<code>010203040506</code>... where the length of the series must be 2<em>n</em>.



<strong>Example 1:</strong>

<pre>
<b>Input:</b> n = 2
<b>Output:</b> &quot;0102&quot;
<strong>Explanation:</strong> There are three threads being fired asynchronously. One of them calls zero(), the other calls even(), and the last one calls odd(). &quot;0102&quot; is the correct output.
</pre>

<strong>Example 2:</strong>

<pre>
<b>Input:</b> n = 5
<b>Output:</b> &quot;0102030405&quot;
</pre>
