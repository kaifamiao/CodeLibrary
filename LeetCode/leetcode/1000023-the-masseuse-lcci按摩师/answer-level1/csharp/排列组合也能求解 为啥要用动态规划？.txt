### 解题思路
我排列组合列出所以结果 取最大值 也能求解啊 为啥要看一个乱七八糟的动态规划
那么我相信所有人也都知道 排列组合既然是列出所有结果 那么必然从各种角度来看 一定是最浪费时间的 所以有更快的方法 为啥不用（因为不知道鸭）

-----以上都是废话

说到动态规划 不会的人肯定多脸懵逼 就像想要了解诶一个人 首先要了解他想要什么 动态规划想要什么 他想屁吃 咳咳 他想把问题简体化 就像这题 你就算给我
长度100的数组  我只看前几个 找出规律就ok 那么什么是规律 就是 只有 1个数 2个数 3个数 4个数 N个数时候存在的必然联系

让我们一个一个来看

长度1 返回 0 根本不考虑好嘛
长度2 比个大小返回最大值
长度3 这里就有意思了 你细品 长度3是不是 取长度2时候的最大值    和长度1时候最大值+长度3的值 
长度4 长度3品明白了 长度4是不是就比下 长度3时候的最大值    和长度2时候最大值+长度4的值

品明白了 就往下走
answer[i] = Max(answer[i-1] , answer[i-2] + int[i]) 

看到这里 是否知道 动态规划的核心就是 上一步的最优解 和上上步的最优解加上这一步的值 对比出新的最优解 

代码解析：
int dp0 = nums[0]; 它现在是什么 是nums[0]这个值么 它不是 他是数组长度为1时候的最优解 
int dp1 = nums[1]; 那么它是什么 也自然不是nums[1] 这个值 他是上上步最优解 加上这一步的值 上上步没有 当然就剩这个值了

那么int dpt0 = Math.Max(dp0, dp1); 求的是什么 不就是答案 如果数组长度为2 直接就可以返回了啊 当然数组更长还得往下走

int dpt1 = dp0 + nums[i]; 这里是啥 上上步结果加这一步的值
dp0 = dpt0; 上一步的结果
如果 循环结束了 是不是 返回下 dp0, dpt1 它2谁大就是答案 没结束 
dp1 = dpt1;  把值存下来 新一轮对比 直到循环结束 


那个 目的其实是想推理下 它这个动态规划的公式是怎么出来的 细品 

### 代码

```csharp
public class Solution {
    public int Massage(int[] nums) {
         if(nums.Length == 0) return 0;
         if(nums.Length == 1) return nums[0];
         int dp0 = nums[0];
         int dp1 = nums[1];
         for(int i = 2; i < nums.Length; i++)
         {
             int dpt0 = Math.Max(dp0, dp1);
             int dpt1 = dp0 + nums[i];

             dp0 = dpt0;
             dp1 = dpt1;
         }

         return Math.Max(dp0, dp1);
    }
}
```