
### 题目描述

给你一个由 `'('`、`')'` 和小写字母组成的字符串 s。

你需要从字符串中删除最少数目的 `'('` 或者 `')'` （可以删除任意位置的括号)，使得剩下的「括号字符串」有效。

请返回任意一个合法字符串。

有效「括号字符串」应当符合以 **任意一条** 要求：

- 空字符串或只包含小写字母的字符串
- 可以被写作 `AB`（`A` 连接 `B`）的字符串，其中 `A` 和 `B` 都是有效「括号字符串」
- 可以被写作 `(A)` 的字符串，其中 `A` 是一个有效的「括号字符串」

### 示例
**示例 1：**

>**输入：** s = "lee(t(c)o)de)"
**输出：**"lee(t(c)o)de"
**解释：**"lee(t(co)de)" , "lee(t(c)ode)" 也是一个可行答案。

**示例 2：**
>**输入：** s = "a)b(c)d"
**输出：**"ab(c)d"

**示例 3：**
>**输入：** s = "))(("
**输出：**""
**解释：** 空字符串也是有效的

**示例 4：**
>**输入：** s = "(a(b(c)d)"
**输出：**"a(b(c)d)"



### 思路
这题其实非常简单，要移除无效的括号，那么只要找到所有无效的括号就行了。怎么找呢？方法类似于经典问题——"括号匹配"，用栈就可以很容易地解决，具体如下：

比如对于这样一个括号串 `)(())(()`，如果要找到不合法括号的位置，可以这样做：

首先，用一个`invalidIndex`数组标记无效括号的索引，用一个栈存放所有遍历到的左括号的索引，

然后从前往后扫描这个串，对于第`i`个括号：

- 若为`(`，先进栈（栈中存的是下标），并且标记为无效的，即`invalidIndex[i] = true`
- 若为`)`，这时先判断栈是否为空：

    - 若为空，说明右括号`)`在左括号`(`之前出现了，那显然是**无效括号**，即`invalidIndex[i] = true`；
    - 若不为空，那么这个右括号`)`和上一个出现的左括号`(`可以组成合法括号，就从栈中弹出一个元素，将其修正为合法的， 即`temp = stack.pop()`,`invalidIndex[temp] = false`
    
通过上述操作，我们可以记录下所有的**无效括号**的下标，再往后就很简单了。至此，就不难得出如下代码：

### 代码

代码可能不是那么优雅，但是思路还是很清晰的。

```java
class Solution {
    public String minRemoveToMakeValid(String s) {
        Stack<Integer> bracketIndex = new Stack<>();
        boolean[] invalidIndex = new boolean[s.length()]; 
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                bracketIndex.push(i);
                invalidIndex[i] = true;
            }
            if (s.charAt(i) == ')') {
                if (bracketIndex.empty()) {
                    invalidIndex[i] = true;
                } else {
                    invalidIndex[bracketIndex.pop()] = false;
                }
            }
        }
        for (int i = 0; i < s.length(); i++) {
            if (!invalidIndex[i]) {
                result.append(s.charAt(i));
            }
        }
        return result.toString();
    }
}
```
![image.png](https://pic.leetcode-cn.com/a4c3e717f19d832fef151271e5c0898d5b6ae5c15ca320395e6642353454911d-image.png)
