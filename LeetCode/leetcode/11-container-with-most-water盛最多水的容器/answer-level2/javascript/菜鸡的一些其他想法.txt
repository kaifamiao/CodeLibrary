解法如下
```
var maxArea = function (height) {
    let [l, r] = [0, height.length - 1]
    var res = -1
    while (l < r) {
        res = Math.max(res, Math.min(height[l],height[r]) * (r - l))
        if (height[l] > height[r]) {
            r--
        } else {
            l++
        }
    }
    return res
};
```



双指针已经明白了，两边夹到中间结束即可以O（n）解出来
但是在解题过程中发现了一些其他的细节
1.读题来看，只需要返回最大的结果值，并不需要知道具体是那两个下标面积最大
2.秉着能用加减就不用乘除的思想，以为要把两边的最小值保存下来，然后推进的时候比较推进的值与最小值的大小，如果小则不再进行面积比较，继续推进，这样就可以省下一步算面积并比较的过程

但是结果比较残酷，时间和空间在结果上并不占优，同时，刨去掉下标和左右值的记录，用Max和Min函数可以做到保留变量最少的效果，从中也只保留了最基础的一个分支，在满足题目的要求下达到最简，效率上也不落后。

同时也给一定的启发：
    1. 在题目上可以不拘泥于不同状况排除，在考虑到逻辑的可接受，就可以用代码尝试
    2. 看清题目，要求什么，目标就是什么，要的最大面积，一切以最大面积为主，横纵坐标已经高度其实并不是必须的。