### 解题思路

终于搞明白为什么相同高度不会错过最优解了。因为是要最大的容量，如果双指针指向的高度一样，要再向内移动的话有比双指针此时容量要大的话内部就必须要有两个或以上比它们高的板子。如果只要一根比它们高的话，以短板为高，宽度变小了，容量不可能变大，所以哪边移动都无所谓，如果一根比它们高的都没有的话，不用说了吧。如果有两根或以上的话，此时可能存在最大容量，不过此时你随便移动一处，它都会达到最近最高的那个位置，此时还剩下至少一根比原来的高的，而另一边的高度比刚移动到的低了，此时这边的就会移动，直到移动比它高的那根，此时又可以循环了。

总结：相同高度的则移动任意一遍都是相同的结果。

说了这么多，不知道有没有表达清楚。

### 代码

```cpp
class Solution {
public:
    int maxArea(vector<int>& height) {
        int len = height.size();
        int area = 0;

        int i = 0;
        int j = len - 1;

        while (i!=j) {
            int temp = min(height[i], height[j]);
            if ( (j-i) * temp > area) {
                area = (j-i) * temp;
            }

            if (height[i] > height[j])
                j--;
            else
                i++;
        }

        return area;
    }
};
```