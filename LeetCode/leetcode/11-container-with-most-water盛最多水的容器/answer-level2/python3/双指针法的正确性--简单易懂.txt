根据官方发布的解题步骤：以首末两点为起点，较短的那一根向内侧移动，直到两指针相遇。要证明这种方法的正确性，只需要证明该方法得到的面积的移动轨迹经过最大面积。
以该图片为例：![image.png](https://pic.leetcode-cn.com/26ec23a4ad5c9e1b92d2f219c8c97ad1778f9639def437bef53ebc63b2dccb45-image.png)
此时最左面的红柱向右移动一步，这代表什么？代表以`height[0]`为端点，除了`height[n-1]`(也就是最后一个点)以外的点都不会再被遍历到，为什么可以这样呢?因为`height[0] < height[n-1]`，所以以`height[0]`为端点，其他任意一点为另一个端点，所构成图形的面积，都小于$height[0]*(n-1)$。
由于我们已经找到了以`height[0]`为端点的图形的最大值，所以可以删除该点，继续看剩下的点。这样又回到了最初的起点，所以，双指针的遍历方法，相当于找的是以每个点为端点的图形的最大面积，那么就一定包含了整个问题的最大面积
