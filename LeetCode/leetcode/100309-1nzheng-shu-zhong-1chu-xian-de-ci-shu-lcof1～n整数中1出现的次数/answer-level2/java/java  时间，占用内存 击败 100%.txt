### 解题思路
此处撰写解题思路
448 =  0~99 + (100~199) + (200~299) + (300~399) + (400~448)
448 =  0~99 + (100~199) + 2*(200~299) + (400~448)
448 =  3*(0~99) + (100~199)  + (400~448)
448 =  3*(0~99) + 100个1+(0~99)  + (400~448)
448 =  4*(0~99) + (400~448)
448 =  4*(10+10*(0~9)) + (400~448)
448 =  4*(10+10*1) + (400~448)
448 =  4*20 + (400~448)
448 =  4*20 + C(48)

5353=  5*300 + C(353)

65351= 6*4000 + C(5351)

### 代码

```java
class Solution {
    public int countDigitOne(int n) {
        int k = bit(n);
        return count(n,k);

    }

    private int count(int n, int k) {
//递归结束条件
        if(k==1 ){
            if(n>=1)
                return 1;
            return 0;
        }
        int sum = 0;
        int pow = (int) Math.pow(10, k - 1);//10
        int y = n%pow;//计算余数，比如123   y=23
        n = n/pow;//计算首位数，比如123  n=1
        if(n==1){
            sum = y+1+(k-1)*(pow/10);//y+1是计算百分位1 的个数  比如123，百分位1有23+1=24个 
        }else {
            sum = pow + n*(k-1)*(pow/10);//如果只有1位，那么1的个数为1
                                        //如果有2位 0~99 那么1的个数为 10+8*1+1+1=10+10*1
                                        //10代表10~19 十位数上有10个数，                                                           //8代表91，81到21，有8个1；
                                        //1代表11，个位数上的1，也可以理解为后面所有位1的总数
                                        //1代表个位数上的1的总数
                                        //公式为 C(2位数)=10+C(1)*10=10+10=20
                                        //三位数公式为 C(3位数)=100+C(2)*10=100+200=300
                                        
        }

        if(y==0)
            return sum;
        sum += count(y,bit(y));//最后在加上234中，两位数34中的个数！
        return sum;
    }

//计算位数的
    private int bit(int n){
        int temp = n/10;
        int k = 1;
        while (temp!=0){
            temp=temp/10;
            k++;
        }
        return k;
    }
}
```