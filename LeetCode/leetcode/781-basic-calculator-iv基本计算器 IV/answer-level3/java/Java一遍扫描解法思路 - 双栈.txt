#### 解题思路：

**栈：**

在这道题目中，我们需要使用两个栈：主栈和操作符栈。我们线性扫描 `expression`，并对遇到的变量、常量、操作符进行入栈或者其他的操作。

对于主栈，我们可以：

- 将变量或常量压入栈中；
- 将栈顶两个元素弹出，并进行某种运算（加、减、乘）后，将结果压入栈中。

对于操作符栈，我们可以：

- 将栈顶元素弹出；
- 将操作符压入栈中。

注意，仅当操作符栈为空，或者栈顶元素的优先级低于想要入栈的元素时，才可以进行压栈操作。否则，我们需要将栈顶元素弹出，直到满足压栈条件为止。操作符的优先级如下：`(` < `)` < `+` = `-` < `*`。
还需要注意的是：
（1） `(` 无条件入栈的，以保证括号的优先级最高。
（2）遇到 `)` 时，我们将栈顶元素弹出，直到弹出 `(` 为止，并且 `)` 本身不进入栈中。

**举例：**

例如，我们想要计算 `((5 - 12) * (12 - 7) + (7 - 5)) * (5 - 12)`。为了方便描述，我们使用 `|` 当作光标，其左侧为已经扫过的字符串，其右侧为未扫描字符串。其次，规定下面的描述中，左侧为栈顶。最后，我们在下列描述中跳过了空格。

> `|((5 - 12) * (12 - 7) + (7 - 5)) * (5 - 12)`
主栈：
操作符栈：
解释：开始之前。

> `(|(5 - 12) * (12 - 7) + (7 - 5)) * (5 - 12)`
主栈：
操作符栈：`(`
解释：栈空，操作符入栈。（或者解释为 `(` 无条件入栈。）

> `((|5 - 12) * (12 - 7) + (7 - 5)) * (5 - 12)`
主栈：
操作符栈：`(`，`(`
解释：`(` 无条件入栈。

> `((5| - 12) * (12 - 7) + (7 - 5)) * (5 - 12)`
主栈：`5`
操作符栈：`(`，`(`
解释：遇到常量，将其入栈。

> `((5 -| 12) * (12 - 7) + (7 - 5)) * (5 - 12)`
主栈：`5`
操作符栈：`(`，`(`，`-`
解释：`(` 的优先级比 `-` 低，因此 `-` 入栈。

> `((5 - 12|) * (12 - 7) + (7 - 5)) * (5 - 12)`
主栈：`5`，`12`
操作符栈：`(`，`(`，`-`
解释：遇到常量，将其入栈。

> `((5 - 12)| * (12 - 7) + (7 - 5)) * (5 - 12)`
主栈：`-7`
操作符栈：`(`
解释：遇到了 `)`，弹出操作符栈栈顶元素。发现弹出的操作符为 `-`，因此我们将主栈栈顶两元素取出相减，将结果压回主栈。继续弹出操作符栈顶元素，发现是 `(`，结束。

> `((5 - 12) *| (12 - 7) + (7 - 5)) * (5 - 12)`
主栈：`-7`
操作符栈：`(`，`*`
解释：`(` 的优先级比 `*` 低，因此 `*` 入栈。

> `((5 - 12) * (|12 - 7) + (7 - 5)) * (5 - 12)`
主栈：`-7`
操作符栈：`(`，`*`，`(`
解释：`(` 无条件入栈。

> `((5 - 12) * (12| - 7) + (7 - 5)) * (5 - 12)`
主栈：`-7`，`12`
操作符栈：`(`，`*`，`(`
解释：遇到常量，将其入栈。

> `((5 - 12) * (12 -| 7) + (7 - 5)) * (5 - 12)`
主栈：`-7`，`12`
操作符栈：`(`，`*`，`(`，`-`
解释：`(` 的优先级比 `-` 低，因此 `-` 入栈。

> `((5 - 12) * (12 - 7|) + (7 - 5)) * (5 - 12)`
主栈：`-7`，`12`，`7`
操作符栈：`(`，`*`，`(`，`-`
解释：遇到常量，将其入栈。

> `((5 - 12) * (12 - 7)| + (7 - 5)) * (5 - 12)`
主栈：`-7`，`5`
操作符栈：`(`，`*`
解释：遇到了 `)`，弹出操作符栈栈顶元素。发现弹出的操作符为 `-`，因此我们将主栈栈顶两元素取出相减，将结果压回主栈。继续弹出操作符栈顶元素，发现是 `(`，结束。

> `((5 - 12) * (12 - 7) +| (7 - 5)) * (5 - 12)`
主栈：`-35`
操作符栈：`(`，`+`
解释：由于 `*` 的优先级不低于 `+`，因此 `+` 不能入栈，需要先将 `*` 弹出。弹出后，取出主栈栈顶两个元素相乘，将结果压回主栈。继续观察操作符栈栈顶元素， `(` 的优先级低于 `+`，可以入栈。

> `((5 - 12) * (12 - 7) + (|7 - 5)) * (5 - 12)`
主栈：`-35`
操作符栈：`(`，`+`，`(`
解释：`(` 无条件入栈。

> `((5 - 12) * (12 - 7) + (7| - 5)) * (5 - 12)`
主栈：`-35`，`7`
操作符栈：`(`，`+`，`(`
解释：遇到常量，将其入栈。

> `((5 - 12) * (12 - 7) + (7 -| 5)) * (5 - 12)`
主栈：`-35`，`7`
操作符栈：`(`，`+`，`(`，`-`
解释：`(` 的优先级比 `-` 低，因此 `-` 入栈。

> `((5 - 12) * (12 - 7) + (7 - 5|)) * (5 - 12)`
主栈：`-35`，`7`，`5`
操作符栈：`(`，`+`，`(`，`-`
解释：遇到常量，将其入栈。

> `((5 - 12) * (12 - 7) + (7 - 5)|) * (5 - 12)`
主栈：`-35`，`2`
操作符栈：`(`，`+`
解释：遇到了 `)`，弹出操作符栈栈顶元素。发现弹出的操作符为 `-`，因此我们将主栈栈顶两元素取出相减，将结果压回主栈。继续弹出操作符栈顶元素，发现是 `(`，结束。

> `((5 - 12) * (12 - 7) + (7 - 5))| * (5 - 12)`
主栈：`-33`
操作符栈：
解释：遇到了 `)`，弹出操作符栈栈顶元素。发现弹出的操作符为 `+`，因此我们将主栈栈顶两元素取出相加，将结果压回主栈。继续弹出操作符栈顶元素，发现是 `(`，结束。

> `((5 - 12) * (12 - 7) + (7 - 5)) *| (5 - 12)`
主栈：`-33`
操作符栈：`*`
解释：栈空，操作符入栈。

> `((5 - 12) * (12 - 7) + (7 - 5)) * (|5 - 12)`
主栈：`-33`
操作符栈：`*`，`(`
解释：`(` 无条件入栈。

> `((5 - 12) * (12 - 7) + (7 - 5)) * (5| - 12)`
主栈：`-33`，`5`
操作符栈：`*`，`(`
解释：遇到常量，将其入栈。

> `((5 - 12) * (12 - 7) + (7 - 5)) * (5 -| 12)`
主栈：`-33`，`5`
操作符栈：`*`，`(`，`-`
解释：`(` 的优先级比 `-` 低，因此 `-` 入栈。

> `((5 - 12) * (12 - 7) + (7 - 5)) * (5 - 12|)`
主栈：`-33`，`5`，`12`
操作符栈：`*`，`(`，`-`
解释：遇到常量，将其入栈。

> `((5 - 12) * (12 - 7) + (7 - 5)) * (5 - 12)|`
主栈：`-33`，`-7`
操作符栈：`*`
解释：遇到了 `)`，弹出操作符栈栈顶元素。发现弹出的操作符为 `-`，因此我们将主栈栈顶两元素取出相减，将结果压回主栈。继续弹出操作符栈顶元素，发现是 `(`，结束。

> `((5 - 12) * (12 - 7) + (7 - 5)) * (5 - 12)|`
主栈：`231`
操作符栈：
解释：字符串扫描已经结束，将操作符栈所有剩余操作符弹出。

这例子好像太长了。

**其他问题：**

还有一些问题需要我们考虑：

1. 变量与常量的储存形式？
2. 输出格式（幂次序和字典序）如何保证？

这些问题就请大家各显神通吧。

#### 代码:（待优化）

```Java [-Java]
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

/**
 * @question 770. 基本计算器 IV
 * @url https://leetcode-cn.com/problems/basic-calculator-iv/
 */
public class Solution {

    public static List<String> basicCalculatorIV(String expression, String[] evalvars, int[] evalints) {
        class Item implements Comparable<Item> {
            int coeff;
            private ArrayList<String> factors;

            private Item(String factor, int coeff) {
                this.factors = new ArrayList<>();
                this.factors.add(factor);
                this.coeff = coeff;
            }

            private Item(int coeff) {
                this.factors = new ArrayList<>();
                this.coeff = coeff;
            }

            private Item() {
                this.factors = new ArrayList<>();
                this.coeff = 0;
            }

            @Override
            public int compareTo(Item item) {
                if (this.factors.size() == item.factors.size()) {
                    int index = 0;
                    while (index < factors.size() && this.factors.get(index).equals(item.factors.get(index))) {
                        index += 1;
                    }
                    return (index == factors.size()) ? 0 : this.factors.get(index).compareTo(item.factors.get(index));
                } else {
                    return item.factors.size() - this.factors.size();
                }
            }

            @Override
            public String toString() {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(coeff);
                for (String factor : factors) {
                    stringBuilder.append("*").append(factor);
                }
                return stringBuilder.toString();
            }

            Item mul(Item item) {
                Item result = new Item();
                result.coeff = this.coeff * item.coeff;
                result.factors.addAll(this.factors);
                result.factors.addAll(item.factors);
                result.factors.sort(String::compareTo);
                return result;
            }
        }

        class Expr {
            private ArrayList<Item> items;

            private Expr(Item item) {
                this.items = new ArrayList<>();
                this.items.add(item);
            }

            private void add(Expr expr) {
                items.addAll(expr.items);
                items.sort(Item::compareTo);
                clean();
            }

            private void mul(Expr expr) {
                ArrayList<Item> result = new ArrayList<>();
                for (Item item1 : items) {
                    for (Item item2 : expr.items) {
                        result.add(item1.mul(item2));
                    }
                }
                items = result;
                items.sort(Item::compareTo);
                clean();
            }

            private void clean() {
                for (int i = 0; i < items.size(); i++) {
                    while (i + 1 < items.size() && items.get(i).compareTo(items.get(i + 1)) == 0) {
                        items.get(i).coeff += items.get(i + 1).coeff;
                        items.remove(i + 1);
                    }
                    if (i < items.size() && items.get(i).coeff == 0) {
                        items.remove(i--);
                    }
                }
            }

            private Expr operate(Expr expr, String op) {
                switch (op) {
                    case "+":
                        add(expr);
                        break;
                    case "-":
                        for (Item item : expr.items) {
                            item.coeff *= -1;
                        }
                        add(expr);
                        break;
                    case "*":
                        mul(expr);
                        break;
                }
                return this;
            }
        }

        HashMap<String, Integer> map = new HashMap<>();
        for (int i = 0; i < evalvars.length; i++) {
            map.put(evalvars[i], evalints[i]);
        }

        LinkedList<Expr> mainStack = new LinkedList<>();
        LinkedList<String> symStack = new LinkedList<>();
        int index = 0;
        while (index < expression.length()) {
            if (expression.charAt(index) == ' ') {
                index += 1;
            } else if (expression.charAt(index) >= '0' && expression.charAt(index) <= '9') {
                int x = 0;
                while (index < expression.length() && expression.charAt(index) >= '0' && expression.charAt(index) <= '9') {
                    x = x * 10 + expression.charAt(index++) - '0';
                }
                mainStack.push(new Expr(new Item(x)));
            } else if (expression.charAt(index) >= 'a' && expression.charAt(index) <= 'z') {
                StringBuilder stringBuilder = new StringBuilder();
                while (index < expression.length() && expression.charAt(index) >= 'a' && expression.charAt(index) <= 'z') {
                    stringBuilder.append(expression.charAt(index++));
                }
                String factor = stringBuilder.toString();
                if (map.containsKey(factor)) {
                    mainStack.push(new Expr(new Item(map.get(factor))));
                } else {
                    mainStack.push(new Expr(new Item(stringBuilder.toString(), 1)));
                }
            } else if (expression.charAt(index) == '(') {
                symStack.push("(");
                index += 1;
            } else if (expression.charAt(index) == ')') {
                while (!symStack.isEmpty() && !symStack.peek().equals("(")) {
                    Expr expr2 = mainStack.pop();
                    Expr expr1 = mainStack.pop();
                    mainStack.push(expr1.operate(expr2, symStack.pop()));

                }
                symStack.pop();
                index += 1;
            } else if (expression.charAt(index) == '*') {
                while (!symStack.isEmpty() && symStack.peek().equals("*")) {
                    Expr expr2 = mainStack.pop();
                    Expr expr1 = mainStack.pop();
                    mainStack.push(expr1.operate(expr2, symStack.pop()));
                }
                symStack.push("*");
                index += 1;
            } else {
                while (!symStack.isEmpty() && (symStack.peek().equals("+") || symStack.peek().equals("-") || symStack.peek().equals("*"))) {
                    Expr expr2 = mainStack.pop();
                    Expr expr1 = mainStack.pop();
                    mainStack.push(expr1.operate(expr2, symStack.pop()));
                }
                symStack.push((expression.charAt(index) == '+') ? "+" : "-");
                index += 1;
            }
        }
        while (!symStack.isEmpty()) {
            Expr expr2 = mainStack.pop();
            Expr expr1 = mainStack.pop();
            mainStack.push(expr1.operate(expr2, symStack.pop()));
        }

        ArrayList<String> result = new ArrayList<>();
        Expr expr = mainStack.pop();
        expr.clean();
        for (Item item : expr.items) {
            result.add(item.toString());
        }
        return result;
    }
}
```