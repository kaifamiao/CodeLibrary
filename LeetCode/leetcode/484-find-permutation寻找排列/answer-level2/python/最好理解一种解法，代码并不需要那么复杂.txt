### 解题思路
思路如下：
D:递减，I:递增；s的长度加1为返回数组（1~n）长度，所以s为空时，必定返回[1]；
不为空时该怎么解题呢，我们举个例子，比如s为"DDIDD",一步一步来
1、首先不管s是否为空肯定有个原始数组为[1]
2、s="D"时，结果为[2,1],相当于在1前面插入2
3、s="DD"时，结果为[3,2,1],相当于在数组最前面插入3，这都是固定结果
4、s="DDI"时，这时我按照贪心，肯定要插入最小的数字4，关键是插在哪，I为递增，所以我们直接在最后插入4，结果为[3,2,1,4]
5、s="DDID"时，现在按照贪心到了5这个值，因为是递减的关系，所以我们插在4的前面，结果为[3,2,1,5,4]
6、s="DDIDD"时，现在最大值为6，递减，所以我们在5之前插入，结果为[3,2,1,6,5,4]
......
按照上面的逻辑，我们可以轻松得出最终结果，要注意的就是需要一个变量来记录每次递增后的位置，这个是后面每次插入递减值得位置
### 代码

```python3
class Solution:
    def findPermutation(self, s: str) -> List[int]:
        if not s: return [1]
        res, asc = [1], 0
        for i in range(len(s)):
            if s[i:i+1] == 'D':
                res.insert(asc, i + 2)
            else:
                res.append(i + 2)
                asc = i + 1
        return res
```