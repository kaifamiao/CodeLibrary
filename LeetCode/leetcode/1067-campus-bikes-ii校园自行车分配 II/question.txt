campus-bikes-ii
在由 2D 网格表示的校园里有<code>n</code>位工人（<code>worker</code>）和 <code>m</code>辆自行车（<code>bike</code>），<code>n &lt;= m</code>。所有工人和自行车的位置都用网格上的 2D 坐标表示。

我们为每一位工人分配一辆专属自行车，使每个工人与其分配到的自行车之间的曼哈顿距离最小化。

<code>p1</code> 和<code>p2</code>之间的曼哈顿距离为<code>Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|</code>。

返回每个工人与分配到的自行车之间的曼哈顿距离的最小可能总和。



<strong>示例 1：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/01/1261_example_1_v2.png" style="height: 264px; width: 264px;">

<pre><strong>输入：</strong>workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
<strong>输出：</strong>6
<strong>解释：</strong>
自行车 0 分配给工人 0，自行车 1 分配给工人 1 。分配得到的曼哈顿距离都是 3, 所以输出为 6 。
</pre>

<strong>示例 2：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/01/1261_example_2_v2.png" style="height: 264px; width: 264px;">

<pre><strong>输入：</strong>workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
<strong>输出：</strong>4
<strong>解释：</strong>
先将自行车 0 分配给工人 0，再将自行车 1 分配给工人 1（或工人 2），自行车 2 给工人 2（或工人 1）。如此分配使得曼哈顿距离的总和为 4。
</pre>



<strong>提示：</strong>

<ol>
	<code>0 &lt;= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] &lt; 1000</code>
	所有工人和自行车的位置都不相同。
	<code>1 &lt;= workers.length &lt;= bikes.length &lt;= 10</code>
</ol>

校园自行车分配 II
On a campus represented as a 2D grid, there are <code>N</code> workers and <code>M</code> bikes, with <code>N &lt;= M</code>. Each worker and bike is a 2D coordinate on this grid.

We assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.

The Manhattan distance between two points <code>p1</code> and <code>p2</code> is <code>Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|</code>.

Return the minimum possible sum of Manhattan distances between each worker and their assigned bike.



<strong>Example 1:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/03/06/1261_example_1_v2.png" style="width: 264px; height: 264px;" />

<pre>
<strong>Input: </strong>workers = <span id="example-input-1-1">[[0,0],[2,1]]</span>, bikes = <span id="example-input-1-2">[[1,2],[3,3]]</span>
<strong>Output: </strong><span id="example-output-1">6</span>
<strong>Explanation: </strong>
We assign bike 0 to worker 0, bike 1 to worker 1. The Manhattan distance of both assignments is 3, so the output is 6.
</pre>

<strong>Example 2:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/03/06/1261_example_2_v2.png" style="width: 264px; height: 264px;" />

<pre>
<strong>Input: </strong>workers = <span id="example-input-2-1">[[0,0],[1,1],[2,0]]</span>, bikes = <span id="example-input-2-2">[[1,0],[2,2],[2,1]]</span>
<strong>Output: </strong><span id="example-output-2">4</span>
<strong>Explanation: </strong>
We first assign bike 0 to worker 0, then assign bike 1 to worker 1 or worker 2, bike 2 to worker 2 or worker 1. Both assignments lead to sum of the Manhattan distances as 4.
</pre>



<strong>Note:</strong>

<ol>
	<code>0 &lt;= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] &lt; 1000</code>
	All worker and bike locations are distinct.
	<code>1 &lt;= workers.length &lt;= bikes.length &lt;= 10</code>
</ol>