## 36.二叉搜索树与双向链表

### Information

* TIME: 2020/02/16
* LINK: [Click Here](https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/)
* TAG: `BST`

### Description

> 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。
>
> 我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。

### My Answer -1

> 迭代法求后序线索化
>
> 记录上一个访问的节点`pre`，当前访问节点`now`
> `left`记录前驱，`right`记录后继
>
> 那么可得
>
> * `pre.right = now`
> * `now.left = pre`
>
> 解释一下为什么这么修改可行
>
> 修改`pre`的`right`：pre是访问过的节点，now是当前节点，如果把now看作根，pre是左子树的最后一个节点，`right`一定是访问过的，修改不会影响遍历
>
> 修改`now.left`：根据中序遍历的遍历顺序，左子树部分已经完成遍历，所以`left`可修改
>
> 至于为什么初始化`pre = lastNode`
>
> 题目说**第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点**
>
> 这么初始化会导致遍历回到`firstNode`(遍历到了`lastNode`，然后指向了`right`)，在结尾加上判定，回到`firstNode`就直接退出就可

```java
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
    public Node treeToDoublyList(Node root) {
        if(root == null) return null;
        Node firstNode = root;
        Node lastNode = root;
        while(firstNode.left != null){
            firstNode = firstNode.left;
        }
        while(lastNode.right != null){
            lastNode = lastNode.right;
        }
        LinkedList<Node> stack = new LinkedList<>();
        Node cur = root;
        Node pre = lastNode;
        while(!stack.isEmpty() || cur != null){
            while(cur != null){
                stack.addLast(cur);
                cur = cur.left;
            }
            Node now = stack.removeLast();
            pre.right = now;
            now.left = pre;

            pre = now;
            cur = now.right;
            if(cur == firstNode) break;
        }
        return firstNode;
    }
}
```

### My Answer -2

> 中序遍历递归，记录遍历的前驱`pre`

```java
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
    private Node pre;
    public Node treeToDoublyList(Node root) {
        if(root == null) return null;
        pre = null;
        Node firstNode = root;
        Node lastNode = root;
        while(firstNode.left != null){
            firstNode = firstNode.left;
        }
        while(lastNode.right != null){
            lastNode = lastNode.right;
        }
        inOrder(root);
        firstNode.left = lastNode;
        lastNode.right = firstNode;
        return firstNode;
    }
    private void inOrder(Node root){
        if(root == null) return;

        inOrder(root.left);

        if(pre != null){
            this.pre.right = root;
            root.left = this.pre;
        }
        pre = root;

        inOrder(root.right);
    }
}
```

### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/bd95ad9e8f03fe1d02583155489de11ff82c27081ae3b256603180d917c25ed6-file_1581833558463)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

