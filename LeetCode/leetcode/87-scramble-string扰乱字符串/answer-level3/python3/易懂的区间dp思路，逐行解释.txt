### 关于区间dp
**背景**：给定一个序列或字符串要进行一些操作，从最后一步出发，要将序列或字符串去头、去尾，如果做过最长回文子串，你就就可以想一下这样子的操作。区间型 $dp$ 一般用 $dp[i][j]$ ，$i$ 代表左端点，$j$ 代表右端点，若有其他维度可再添加，若两个端点之间存在联系，则可再压缩空间。力扣上还有一些题也属于区间 $dp$，我推荐大家做一下，下面列出了一些
- [5. 最长回文子串](https://leetcode-cn.com/problems/longest-palindromic-substring/)
- [516. 最长回文子序列](https://leetcode-cn.com/problems/longest-palindromic-subsequence/)
- [312. 戳气球](https://leetcode-cn.com/problems/burst-balloons/)
- [1246. 删除回文子数组](https://leetcode-cn.com/problems/palindrome-removal/)（这个题微软面试问的很多）
---
回归正题，开始解答


### 初步分析
给定两个字符串 $T$ 和 $S$，假设 $T$ 是由 $S$ 变换而来

- 如果 $T$ 和 $S$ 长度不一样，必定不能变来
- 如果长度一样，顶层字符串 $S$ 能够划分为 $S_1$ 和 $S_2$ ，同样字符串 $T$ 也能够划分为 $T_1$ 和 $T_2$
  - 情况一：没交换，$S_1 ==> T_1$，$S_2 ==> T_2$
  - 情况二：交换了，$S_1 ==> T_2$，$S_2 ==> T_1$
- **子问题**就是分别讨论两种情况，$T_1$ 是否由 $S_1$ 变来，$T_2$ 是否由 $S_2$ 变来，或 $T_1$ 是否由 $S_2$ 变来，$T_2$ 是否由 $S_1$变来。
![image.png](https://pic.leetcode-cn.com/bc453287ed380cf1d8652fdf184508f2106879d1550b1b65f3b7dcd00c21cb32-image.png)


### 得到状态
$dp[i][j][k][h]$ 表示 $T[k..h]$ 是否由 $S[i..j]$ 变来。由于变换必须长度是一样的，因此这边有个关系 $j - i = h - k$ ，可以把四维数组降成三维。$dp[i][j][len]$ 表示从字符串 $S$ 中 $i$ 开始长度为 $len$ 的字符串是否能变换为从字符串 $T$ 中 $j$ 开始长度为 $len$ 的字符串  

### 转移方程
- $dp[i][j][k]$$=$ 
    - $OR_{1<=w<=k-1}$  $\left\{ dp[i][j][w]\ \ \&\& \ \  dp[i+w][j+w][k-w] \right\}$  或 
    - $OR_{1<=w<=k-1}$  $\left\{ dp[i][j+k-w] [w] \ \ \&\& \ \  dp[i+w][j][k-w] \right\}$ 

解释下：枚举 $S_1$ 长度 $w$（从 $1～k-1$，因为要划分），$f[i] [j] [w]$ 表示 $S_1$ 能变成 $T_1$，$f[i+w] [j+w] [k-w]$表示 $S_2$能变成 $T_2$，或者是 $S_1$ 能变成 $T_2$， $S_2$ 能变成 $T_1$。

### 初始条件
对于长度是 $1$ 的子串，只有相等才能变过去，相等为 $true$，不相等为 $false$。

### 得到答案
还记得我们的定义吗？$dp[i][j][len]$ 表示从字符串 $S$ 中 $i$ 开始长度为 $len$ 的字符串是否能变换为从字符串 $T$ 中 $j$ 开始长度为 $len$ 的字符串，所以答案是 $dp[0][0][n]$。 时间复杂度 $O(N^4)$，空间复杂度$O(N^3)$

如果您觉得我的题解对您有帮助的话，麻烦给个赞鼓励一下吧^o^


### 代码

```java
class Solution {
    public boolean isScramble(String s1, String s2) {
        char[] chs1 = s1.toCharArray();
        char[] chs2 = s2.toCharArray();
        int n = s1.length();
        int m = s2.length();
        if (n != m) {
            return false;
        }
        boolean[][][] dp = new boolean[n][n][n + 1];
        // 初始化单个字符的情况
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j][1] = chs1[i] == chs2[j];
            }
        }

        // 枚举区间长度 2～n
        for (int len = 2; len <= n; len++) {
            // 枚举 S 中的起点位置
            for (int i = 0; i <= n - len; i++) {
                // 枚举 T 中的起点位置
                for (int j = 0; j <= n - len; j++) {
                    // 枚举划分位置
                    for (int k = 1; k <= len - 1; k++) {
                        // 第一种情况：S1 -> T1, S2 -> T2
                        if (dp[i][j][k] && dp[i + k][j + k][len - k]) {
                            dp[i][j][len] = true;
                            break;
                        }
                        // 第二种情况：S1 -> T2, S2 -> T1
                        // S1 起点 i，T2 起点 j + 前面那段长度 len-k ，S2 起点 i + 前面长度k
                        if (dp[i][j + len - k][k] && dp[i + k][j][len - k]) {
                            dp[i][j][len] = true;
                            break;
                        }
                    }
                }
            }
        }
        return dp[0][0][n];
    }
}
```

当然也可以用递归写

```java []
class Solution {
    public boolean isScramble(String s1, String s2) {
        // 长度不等，必定不能变换
        if (s1.length() != s2.length()) {
            return false;
        }
        // 长度相等，先特判下
        if (s1.equals(s2)) {
            return true;
        }
        // 看一下字符个数是否一致，不同直接return false
        int n = s1.length();
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            char c1 = s1.charAt(i);
            char c2 = s2.charAt(i);
            map.put(c1, map.getOrDefault(c1, 0) + 1);
            map.put(c2, map.getOrDefault(c2, 0) - 1);
        }
        for (Character key : map.keySet()) {
            if (map.get(key) != 0) {
                return false;
            }
        }

        // 相同的话，开始判断判断，满足一个就能 return true
        for (int i = 1; i < n; i++) {
            boolean flag =
                    // S1 -> T1，S2 -> T2
                    (isScramble(s1.substring(0, i), s2.substring(0, i)) && isScramble(s1.substring(i), s2.substring(i))) ||
                    // S1 -> T2，S2 -> T1
                    (isScramble(s1.substring(0, i), s2.substring(n - i)) && isScramble(s1.substring(i), s2.substring(0, s2.length() - i)));
            if (flag) {
                return true;
            }
        }
        return false;
    }
}
```

```python []
class Solution:
    def isScramble(self, s1: str, s2: str) -> bool:
        if len(s1) != len(s2):
            return False
        if s1 == s2:
            return True
        if sorted(s1) != sorted(s2):
            return False

        for i in range(1, len(s1)):
            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]) or \
                    (self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i])):
                return True
        return False
```