sum-of-root-to-leaf-binary-numbers
给出一棵二叉树，其上每个结点的值都是<code>0</code>或<code>1</code>。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为<code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>，那么它表示二进制数<code>01101</code>，也就是<code>13</code>。

对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。

以<strong><code>10^9 + 7</code></strong>为<strong>模</strong>，返回这些数字之和。



<strong>示例：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/05/sum-of-root-to-leaf-binary-numbers.png" style="height: 200px; width: 304px;">

<pre><strong>输入：</strong>[1,0,1,0,1,0,1]
<strong>输出：</strong>22
<strong>解释：</strong>(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22
</pre>



<strong>提示：</strong>

<ol>
	树中的结点数介于 <code>1</code> 和 <code>1000</code> 之间。
	node.val 为<code>0</code> 或<code>1</code>。
</ol>

从根到叶的二进制数之和
Given a binary tree, each node has value <code>0</code>or <code>1</code>. Each root-to-leaf path represents a binary number starting with the most significant bit. For example, if the path is <code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>, then this could represent <code>01101</code> in binary, which is <code>13</code>.

For all leaves in the tree, consider the numbers represented by the pathfrom the root to that leaf.

Return the sum of these numbers.



<strong>Example 1:</strong>

<span id="example-output-1"><img alt="" src="https://assets.leetcode.com/uploads/2019/04/04/sum-of-root-to-leaf-binary-numbers.png" style="width: 304px; height: 200px;" /></span>

<pre>
<strong>Input: </strong><span id="example-input-1-1">[1,0,1,0,1,0,1]</span>
<strong>Output: </strong><span id="example-output-1">22</span>
<strong>Explanation: </strong>(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22
</pre>



<strong>Note:</strong>

<ol>
	The number of nodes in the tree is between <code>1</code> and <code>1000</code>.
	node.val is <code>0</code> or <code>1</code>.
	The answer will not exceed <code>2^31 - 1</code>.
</ol>
