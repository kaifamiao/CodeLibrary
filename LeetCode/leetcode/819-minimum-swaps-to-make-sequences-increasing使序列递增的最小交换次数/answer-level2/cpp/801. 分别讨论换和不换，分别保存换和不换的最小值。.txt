### 解题思路
我枯了。这是我遇到最难理解的动态规划。
但是想通了也还好。
注释应该比较清楚了 。

### 代码

```cpp
class Solution {
public:
    int minSwap(vector<int>& A, vector<int>& B) {
        vector<vector<int>> dp(A.size(),vector<int>(2,0));
        dp[0][0] = 0;
        dp[0][1] = 1;
        for(int i=1; i<A.size(); i++){
            //1. 已经各自有序
            //2. 存在交叉
            //3. 既有序，也交叉
            if(A[i-1]<A[i]&&B[i-1]<B[i]){// 各自有序
                if(A[i-1]<B[i] && B[i-1]<A[i]){// 且存在交叉
                    dp[i][0] = min(dp[i-1][0],dp[i-1][1]);
                    dp[i][1] = min(dp[i-1][0],dp[i-1][1])+1;
                }else{// 有序但不存在交叉
                    dp[i][0] = dp[i-1][0];//不交换，再上一轮不交换的基础上，不变。
                    dp[i][1] = dp[i-1][1]+1; // 由于不存在交叉，所以如果要交换的话，得在上一轮交换的基础上，本轮再次交换
                }
            }else{//无序，则必然存在交叉
                dp[i][0] = dp[i-1][1];// 由于必须交叉，所以如果要不换的话，必须在上一轮交换的基础上，本轮才可以不交换
                dp[i][1] = dp[i-1][0]+1;// 同上，必须在上一轮不交换的基础上，本轮交换
            }
        }
        return min(dp[dp.size()-1][0],dp[dp.size()-1][1]);
    }
};
```


可以优化成两个变量的形式，空间复杂度O（1），但是没必要。