minimum-swaps-to-make-sequences-increasing
我们有两个长度相等且不为空的整型数组<code>A</code>和<code>B</code>。

我们可以交换<code>A[i]</code>和<code>B[i]</code>的元素。注意这两个元素在各自的序列中应该处于相同的位置。

在交换过一些元素之后，数组<code>A</code>和<code>B</code>都应该是严格递增的（数组严格递增的条件仅为<code>A[0] &lt; A[1] &lt; A[2] &lt; ... &lt; A[A.length - 1]</code>）。

给定数组<code>A</code>和<code>B</code>，请返回使得两个数组均保持严格递增状态的最小交换次数。假设给定的输入总是有效的。

<pre>
<strong>示例:</strong>
<strong>输入:</strong> A = [1,3,5,4], B = [1,2,3,7]
<strong>输出:</strong> 1
<strong>解释: </strong>
交换 A[3] 和 B[3] 后，两个数组如下:
A = [1, 3, 5, 7] ， B = [1, 2, 3, 4]
两个数组均为严格递增的。</pre>

<strong>注意:</strong>

<ul>
	<code>A, B</code>两个数组的长度总是相等的，且长度的范围为<code>[1, 1000]</code>。
	<code>A[i], B[i]</code>均为<code>[0, 2000]</code>区间内的整数。
</ul>

使序列递增的最小交换次数
We have two integer sequences <code>A</code> and <code>B</code> of the same non-zero length.

We are allowed to swap elements <code>A[i]</code> and <code>B[i]</code>. Note that both elements are in the same index position in their respective sequences.

At the end of some number of swaps, <code>A</code> and <code>B</code> are both strictly increasing. (A sequence is <em>strictly increasing</em> if and only if <code>A[0] &lt; A[1] &lt; A[2] &lt; ... &lt; A[A.length - 1]</code>.)

Given A and B, return the minimum number of swaps to make both sequences strictly increasing. It is guaranteed that the given input always makes it possible.

<pre>
<strong>Example:</strong>
<strong>Input:</strong> A = [1,3,5,4], B = [1,2,3,7]
<strong>Output:</strong> 1
<strong>Explanation: </strong>
Swap A[3] and B[3].  Then the sequences are:
A = [1, 3, 5, 7] and B = [1, 2, 3, 4]
which are both strictly increasing.
</pre>

<strong>Note:</strong>

<ul>
	<code>A, B</code> are arrays with the same length, and that length will be in the range <code>[1, 1000]</code>.
	<code>A[i], B[i]</code> are integer values in the range <code>[0, 2000]</code>.
</ul>
