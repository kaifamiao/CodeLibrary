
# 动态规划

已知递推公式：$T_{n + 3} = T_{n} + T_{n + 1} + T_{n + 2}$

设 $a = n + 3$，那么则有 $T_{n} = T_{a}$，又因为：

```txt
n + 3 = a               ... 两边同时减 3
n + 3 - 3 = a - 3
n = a - 3
# 即 T_{n} = T_{a - 3}

n + 3 = a               ... 两边同时减 2
n + 3 - 2 = a - 2
n + 1 = a - 2
# 即 T_{n + 1} = T_{a - 2}

n + 3 = a               ... 两边同时减 1
n + 3 - 1 = a - 1
n + 2 = a - 1
# 即 T_{n + 2} = T_{a - 1}
```

综上，可得 $T_{a}$ 的递推公式：

$$
T_{a} = T_{a - 3} + T_{a - 2} + T_{a - 1}
$$

$T_{a}$ 的递推公式就是动态规划的转移方程。

## 代码实现

```js
function tribonacci(n) {
  const f = [0, 1, 1];

  for (let a = 3; a <= n; a++) {
    f[a] = f[a - 3] + f[a - 2] + f[a - 1];
  }

  return f[n];
}
```

## 复杂度分析

* 时间复杂度：$ O(n) $.
* 空间复杂度：$ O(n) $.
