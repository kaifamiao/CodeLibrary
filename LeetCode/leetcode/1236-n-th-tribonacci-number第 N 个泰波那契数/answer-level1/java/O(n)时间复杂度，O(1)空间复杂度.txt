### 代码：

```
public int tribonacci(int n) {
    int a = 0, b = 1, c = 1;
    while(n-- > 0) {
        c = a + b + c;
        b = c - a - b;
        a = c - a - b;
    }
    return a;
}
```
### 复杂度

* O(n)时间复杂度；O(1)空间复杂度；

### 执行结果

> 执行用时 :0 ms, 在所有 Java 提交中击败了100.00%的用户
> 内存消耗 :33.8 MB, 在所有 Java 提交中击败了100.00%的用户

### 说明

![509-02.png](https://pic.leetcode-cn.com/1e445012875cde986ee7022d1a5bad7eb2c728ba9ebb7761ff7b37a27a3199a5-509-02.png)

上图为程序初始化的状态。通过每次循环将数轴上的`c`、`b`、`a`依次往右移动一位，最终使`a`位于`i=n`即可返回，遍历次数为n次。

该解法可适用与同类题目，如斐波那契数则只需要两个变量，如果定义为`f(n)=f(n-1)+f(n-2)+f(n-3)+f(n-4)`，则增加一个变量即可，如此类推。