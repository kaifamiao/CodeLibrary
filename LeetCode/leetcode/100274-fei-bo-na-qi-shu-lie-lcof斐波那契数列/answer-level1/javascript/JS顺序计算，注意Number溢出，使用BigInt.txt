### 解题思路
基本动态规划问题，唯一需要注意的一点就是整数溢出的问题，在JS中，按照IEEE 754-2008标准的定义，所有数字都以双精度64位浮点格式表示。在此标准下，无法精确表示的非常大的整数将自动四舍五入。确切地说，JS 中的Number类型只能安全地表示-9007199254740991 (-(2^53-1)) 和9007199254740991(2^53-1)之间的整数，任何超出此范围的整数值都可能失去精度。可以在控制台中输入一下代码查看。所以使用BigInt来进行数据计算和取模。
```
 console.log(Number.MAX_SAFE_INTEGER) 
 //9007199254740991
```
可以看出整数已经溢出了，所以取模时会因为丢失精度的问题无法正确计算，这也就是为什么在n=79以后会比正确结果少1的问题。

### 代码

```javascript
/**
 * @param {number} n
 * @return {number}
 */
var fib = function(n) {
    if (n <2) {
        return n
    }
    r = [0n, 1n]
    for (let i = 2; i <=n; i++) {
        r[i] = (r[i - 1] + r[i - 2])
    }n
    return r[n] % 1000000007n
};
```