
```javascript
/**
 * @param {number} n
 * @return {number}
 */
var fib = function(n) {

    //1.非常普通，没有优化的递归通项公式解法

    //优点：非常容易想到，fib在不加额外参数且不引入外部变量的情况下只能这么调用自身
    //缺点：fib会重复计算之前的项，计算结果是一次性的，极其浪费时间和空间，在本题必定超时，完全无法通过

    /*
        if(n<=1)return n;
        return ( fib(n-1) + fib(n-2) ) % 1000000007;

    */

    //2.普通的尾调用自身（尾递归）+ES6尾调用优化解法

    //优点：不创建新的栈帧，现有栈帧被重复利用，不会爆栈，性能比未经优化的递归明显提高
    //缺点：需要反复清除栈帧的数据，性能不如下面的循环解法

    /*
        'use strict';
        function f(n,a=1,b=1){
            if(n<=1)return n;
            if(n==2)return b ;
            return f(n-1,b,(a+b) % 1000000007);//最后一步，调用自身，将数据处理的步骤变成参数的变化
        }
        return f(n);
    */

    //3.不错的递归+动态规划解法

    //优点：空间换时间，所有计算结果都被缓存，下一次计算直接读取缓存结果，性能比较好
    //缺点：需要额外的储存空间，空间复杂度高

    //注：动态规划的思想是，通过保存中间计算结果，减少结果计算时间

    /*
        let dp = [0,1]
        function f(n){
            if(dp[n]!=undefined){
                return dp[n];
            }
            dp[n] = f(n-1) + f(n-2);
            return dp[n] % 1000000007;
        }
        return f(n);
    */

    //4.很好的循环计算解法

    //优点：每一次计算结果都能得到利用，易于理解，只保存前两个计算结果，性能最优
    //缺点：没有明显的缺点，在本题中记得看清题目中取模的要求

    //注：其他题解有提到，但这题不需要用到新的BigInt类型，取模就是为了防止结果溢出，
    //而且中间计算结果也达不到 Number.MAX_SAFE_INTEGER (9007199254740991) 的量级
    //变量c不是必要的，可以直接用代数方法或ES6解构赋值做进一步优化，这种循环解法也可以看做是一种动态规划解法

    
        if(n<=1)return n;
        let a=b=1,c=0;
        while(n-->0){

            a = b;
            b = c;
            c = (a + b) % 1000000007;

        }
        return c;
    

};
```