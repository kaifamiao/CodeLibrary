### 解题思路
如果仅仅是用简单递归，在时间复杂度闪就会WA，然后就需要用动态规划的想法去简化计算量。
对于这个问题，我的思路是从小到大算回去，把沿途的结果进行记录，推到n。
关于题目描述中的取模这里提一句，要在计算中就取，不要等到结果再取，在计算过程中就已经达到取模要求了，如果没有取，可能会溢出。
tips:顺便多哔哔一句，动态规划一直是被当做比较难的一部分算法内容，事实上如果会写这道题就算会动态规划了，其他更难的动态规划是在于状态方程的求解，这题的状态转移是简单的求和，其他动态规划题目可能需要有其他的条件，但是总归是换汤不换药的。说这句是因为在学动态规划的时候被一些关于它有多难多难的流言蜚语搞得很头疼，以至于学起来畏畏缩缩，比较吃力。也想表达一个感受，就是许多时候困难并不存在问题本身，而在于别人不负责任的言语。天下无难事，只怕有心人。共勉！

### 代码

```java
class Solution {
    public int fib(int n) {
        if(n==0||n==1){
            return n;
        }
     long  []dp=new  long[n+1];
    dp[0]=0;
    dp[1]=1;

    for(int i=2;i<=n;i++){

        dp[i]=dp[i-1]+dp[i-2]; //状态转移处
        dp[i]=dp[i]% 1000000007;
    }
    return (int)dp[n];




    }
}
```