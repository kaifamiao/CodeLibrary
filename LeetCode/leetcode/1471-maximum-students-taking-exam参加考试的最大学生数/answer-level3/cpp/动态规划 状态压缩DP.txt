
状态压缩其实也就是，把一个复杂的状态用一个int数表示，比如 00011010，表示一行的状态，0 和 1 分别表示...，然后我们用这二进制数的十进制表示这个状态。

那么从 int 数怎么得到每一个位置上的状态，那就是进行位运算，求出这个 int 数上的每一位是 0 还是 1 即可。

## 解题思路

一开始的想法是，利用 暴力对 每个点进行 dfs，那么这个的时间复杂度（因为要对每一个点判断，每一个点都可放和不放两种情况）为 `O(2 ^ (n * m)) = O(2 ^ 64)` 会超时。

然后我们发现，每一行只有最多 8 个位置，那么一共由 `2 ^ 8` 种 可能，我们用 `1` 表示这个位置坐下学生，`0` 表示这个位置不坐学生

同时，每一行的状态，只与上一行存放的状态有关，所以是 考虑使用动态规划 DP。

动态规划三步走 ： 

1） 设变量， `dp[ i ][ cur ]` 表示，第 i 行的安排学生状态为 cur是，前 i 行可以坐下的学生最大值

2）状态转移，如果对于这个状态 cur （要判断是否满足条件），
```math
dp[i][cur] = max(dp[i][cur],dp[i - 1][pre] + cnt)
```
也就是枚举上一行的所有可能转移到 cur 的状态 pre，如果都满足条件，那么就是 + 当前行 cur 的 坐下的学生数（也就是 1 的 个数）

3）初始化，因为有一些状态不符合条件，我们初始化为 -1 （ - 1 表示这个状态不符合条件），`dp[ 0 ][ 0 ] = 0` ，（我们安排学生的是从第一行开始），所以前面没安排学生，那么状态肯定是 0，学生数 = 0；（`dp[ 0 ][ 其他状态 ] = -1`，没安排学生，也就是不会由其他状态存在，所以这些状态都是不符合要求的 ）

所以整个程序的过程

1）枚举所有行，所有当前状态，所有上一行的状态

2）发现上一行的状态 = -1，那就是不可能从上一行转移过来，那么这个上一行状态可以不考虑，跳过

3）对于当前状态 满不满足要求（也就是，在有学生的位置，这个位置不能是座位，也不能这一行的左右两边是学生，也不能是上一行的左右两边是学生）

4）如果这个状态满足要求，那就可以状态转移了

5）最后的答案是 dp[ n ][ 所有状态 ] 中的最大值（因为不知道哪种状态时最大值，所有从所有状态中选）

 

时间复杂度 `O(n * 2^m * 2^m * m)`，第一个是所有行，第二个是当前状态，第三个是上一行状态，第四个是对于这一行的状态，位运算判断这个位满不满足条件



#### 1）复杂度分析

时间复杂度是`O(n * 2^m * 2^m * m)`



#### 2）AC代码

```cpp
class Solution {
public:
    int maxStudents(vector<vector<char>>& seats) {
        int n = seats.size(), m = seats[0].size();
        int lim = (1 << m);
        // -1 表示这个状态实现不了
        vector<vector<int> > dp(n + 1, vector<int>(lim, -1));
        // 0 行只有 0状态 = 0 （其他状态实现不了，错误的 = -1）
        dp[0][0] = 0;
 
        for(int i = 1;i <= n; ++i)
        {
            for(int cur = 0; cur < lim; ++cur)
            {
                for(int pre = 0; pre < lim; ++pre)
                {
                    // 表示上一行状态是无效的，不会转移过来
                    if(dp[i - 1][pre] == -1) continue;
                    // 判断当前状态 cur 满不满足要求，同时计算cur 中 1 的个数，也就是学生数量
                    bool flag = true;
                    int cnt = 0;
 
                    for(int j = 0;j < m; ++j)
                    {
                        // 如果这个是0 ，不安排学生，那就满足条件
                        if(((cur >> j) & 1) == 0) continue;
                        // 1 的个数
                        ++cnt;
 
                        // 这个 位置是 1，同时，是座位，不满足条件
                        if(seats[i - 1][j] == '#'){
                            flag = false;
                            break;
                        } 
                        // 当前行，这个位置坐了学生，左右两边应该不能是学生，如果是，不满足条件
                        if(j + 1 < m && (((cur >> (j + 1)) & 1) == 1)){
                            flag = false;
                            break;
                        }
                        if(j - 1 >= 0 && (((cur >> (j - 1)) & 1) == 1)){
                            flag = false;
                            break;
                        }
                        // 当前行这个位置是学生，那么上一行的左右两边不能是学生，是的话，这个状态不满足条件
                        if(j + 1 < m && (((pre >> (j + 1)) & 1) == 1)){
                            flag = false;
                            break;
                        }
                        if(j - 1 >= 0 && (((pre >> (j - 1)) & 1) == 1)){
                            flag = false;
                            break;
                        }
 
                    }
                    // 满足条件才状态转移
                    if(flag)
                        dp[i][cur] = max(dp[i][cur], dp[i - 1][pre] + cnt);
                }
            }
        }
        int ans = 0;
        for(int cur = 0; cur < lim; ++cur)
        {
            ans = max(ans, dp[n][cur]);
        }
        return ans;
 
    }
};
```
