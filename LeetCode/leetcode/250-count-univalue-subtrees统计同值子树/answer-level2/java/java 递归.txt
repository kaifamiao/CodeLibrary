**思路**
同值子树的情况可能会有以下几种情况
1. 叶子节点一定是同值子树，即
```java
    root.left == null || isSame(root.left) && root.val == root.left.val;
```
2. 只有左儿子，而且左儿子已经是同值子树并且当前节点值必须等于左儿子的节点值，这样当前子树也是同值子树。即
```java
    isSame(root.left) && root.val == root.left.val
```
3. 只有右儿子，同上。即
```java
    isSame(root.right) && root.val == root.right.val
```
4. 同时拥有左右儿子，那么也就是2，3步要同时满足

具体代码（优化后）如下：
```java
class Solution {
    private int ansCount = 0;

    private boolean isSame(TreeNode root) {
        if (root == null) {
            return true;
        }

        boolean isLeftOk = false;
        if (root.left == null || isSame(root.left) && root.val == root.left.val) {
            isLeftOk = true;
        }

        boolean isRightOk = false;
        if (root.right == null || isSame(root.right) && root.val == root.right.val) {
            isRightOk = true;
        }

        if (isLeftOk && isRightOk) {
            ansCount++;
            return true;
        }

        return false;
    }

    public int countUnivalSubtrees(TreeNode root) {
        isSame(root);
        return ansCount;
    }
}
```

**复杂度**
时间复杂度：$O(n), n$为树的节点个数，因为很明显dfs会遍历每个节点。
空间复杂度：$O(1)$。
