代码与详细注释如下：
```C++ []
class Solution {
public:
    pair<string, int> generateAbbr(string w, vector<int>& indices) {
        if (indices.empty())
            return {to_string(w.size()), 1};
        pair<string, int> res;
        string str;
        int cnt = 0;
        int prev_ind = -1;
        for (auto ind : indices) {
            if (ind > prev_ind + 1) {
                str += to_string(ind - prev_ind - 1);
                ++cnt;
            }
            str += w[ind];
            ++cnt;
            prev_ind = ind;
        }
        if (w.size() > indices.back() + 1) {
            str += to_string(w.size() - indices.back() - 1);
            ++cnt;
        }
        return {str, cnt};
    }
    string minAbbreviation(string target, vector<string>& dictionary) {
        int N = target.size();
        int M = 1 << N;
        vector<string> new_dict;
        for (auto w : dictionary) {
            // 只选取那些长度与target一致的做后续分析，因为两个单词长度不一样，缩写一定不一样，因此可以直接跳过
            if (w.size() == N) {
                new_dict.push_back(w);
            }
        }
        if (new_dict.empty())
            return to_string(target.size()); 
        string res;
        int res_cnt = INT_MAX;
        for (int i = 0; i < M; ++i) {
            // 位运算获取当前数字情况下，应该取的字母下标集合
            vector<int> indices;
            for (int j = 0; j < N; ++j) {
                if (i & (1 << j)) {
                    indices.push_back(j);
                }
            }
            // 看是否符合条件
            bool match = true;
            for (auto w : new_dict) {
                bool all_same = true;
                for (auto j : indices) {
                    if (w[j] != target[j]) {
                        all_same = false;
                        break;
                    }
                }
                if (all_same) {
                    match = false;
                    break;
                }
            }
            if (!match)
                continue;
            // 符合条件，则生成缩写，并更新最终结果
            auto p = generateAbbr(target, indices);
            if (p.second < res_cnt) {
                res = p.first;
                res_cnt = p.second;
            }
        }
        return res;
    }
};
```
