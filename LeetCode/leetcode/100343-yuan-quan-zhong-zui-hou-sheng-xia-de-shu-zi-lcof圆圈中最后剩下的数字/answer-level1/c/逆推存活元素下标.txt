### 解题思路 -- 逆推存活元素的下标

1. 首先做一个设定，每轮删除一个后，把下一个元素作为第一个，再进行下一轮删除。

    以n=8, m=3为例：
    第一轮删除：
    删除前：[0,1,2,3,4,5,6,7]
    删除后：[0,1,3,4,5,6,7]
    移动后：[3,4,5,6,7,0,1]
    第二轮删除：
    删除前：[3,4,5,6,7,0,1]
    删除后：[3,4,6,7,0,1]
    移动后：[6,7,0,1,3,4]

2. 所以只有一个元素的时候，假设为a（值多少不重要），a的下标肯定为0。

```
    [a]
```

3. 回滚到两个元素的时候，基于前面的设定，删除后把下一个元素放到第一个，那么把删除的元素放到最后，假设为b，如下：
```
    [a,b]
```
    把[a,b]右移m个元素，还原到刚删除倒数第3个元素的时候，由于长度为2，超出范围，重新计算下下标，
    因为已知a是最后存活的元素，此时，计算可得a的下标为 (0 + m) % 2

4. 循环下去，可得倒数第三轮a的下标为 ((0 + m) % 2) % 3，最终逆推到第n层，把n层还原。 

```
1 ---> 0
2 ---> (0 + m) % 2
3 ---> ((0 + m) % 2) % 3
4 ---> (((0 + m) % 2) % 3) % 4
...
```

### 代码

```c
int lastRemaining(int n, int m){
    int pos = 0;
    for(int i = 2; i <= n; i++){
        pos = (pos + m) % i;
    }
    return pos;
}
```