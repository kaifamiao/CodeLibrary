### 解题思路
此处撰写解题思路
当人数=n时，出局的数字为(m-1)(数字从0开始，所以第m个数字是m-1)。

此时人数=n-1，而计数是继续从m开始的，可以将m的编号映射为0，以此重新构建一个队列。

m变为了0，可以得到 人数=n队列 -> 人数=n-1队列 之间的数字映射关系，即:

        x'= (x - m + (n - 1)) % (n - 1)

        x'          一个数字在人数=n-1时的编号
        x           一个数字在人数=n时的编号
        n-1         当前人数=n-1
        +(n-1)      例:n=5,m=3。n=5时，编号为1的数，在n=4时，编号变为了1-3+4=2。
        %(n-1)      到末尾了从头继续取

题目要求得到圆圈里最后一个数字，按照上面的思路，当只剩下一个数后，经过从新编号，这个数的编号必为0。

当然，我们知道，0并不是这个留下来的数真正的编号，但是我们知道从 人数n队列 -> 人数=n-1队列 的编号
映射关系。

那么也可以反过来推导出从 人数=n-1队列 到 人数=n队列 时的编号映射关系，上面是-m,那么反过来就是+m，即:

        x = (x' + m) % n

我们现在知道这个数在人数=1时的编号为1，那么这个数在人数=2时的编号 = ( 1 + m) % 2。

重复推算，直到人数=n时，我们就得到了最后幸存的数的原本编号。

### 代码

```golang
func lastRemaining(n int, m int) int {
    end := 0
    for i := 2; i <= n; i++ {
        end = (end + m) % i
    }
    return end
}
```