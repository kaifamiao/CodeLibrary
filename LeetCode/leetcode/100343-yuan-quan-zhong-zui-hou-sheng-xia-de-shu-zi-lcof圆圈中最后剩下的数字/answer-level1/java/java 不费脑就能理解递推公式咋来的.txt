1. 开始元素个数为 n，从 0 开始编号时，则每个元素的的编号为：
        0, 1, ..., n - 2, n - 1 (删除前个数为n)       
  删除第 m 个元素，其编号为 (m - 1) % n, 令 k = m % n, 则第一轮删除元素后的编号为：
        0, 1, ..., k - 2, k, ..., n - 2, n - 1 (删除后个数为 n - 1)
2. 第二轮删除开始时，必定是从 k 开始数，此时将 k 排在第一位：
        k, k + 1, ..., n - 2, n - 1, 0, 1, ..., k - 3, k - 2    序列 (1)
3. 接下来对序列重新从 0 开始编号（元素个数总数为 n - 1）：
        0, 1,  ..., n - 3, n - 2    序列 (2)
   对应下来就是 0 -> k,
               1 -> k + 1,
               ...
               k - 2 -> n - 2
   假设最后删除的元素在序列 (2) 中的编号为 x, 那么对应在序列 (1) 中的编号则为 (k + x) % n,
   此编号即为删除前的编号，可以得到 (k + x) % n = ((m % n) + x) % n = (m + x) % n;
   此时即可得到递推公式 f(n, m) = (m + f(n - 1, m)) % n, 对于基准情况就是：当 n = 1 时, 编号为 0.
   迭代形式就不写了，主要还是更好地理解递推公式咋来的
```
class Solution {
    public int lastRemaining(int n, int m) {
        return f(n, m);
    }

    public int f(int n, int m) {
        if (n == 1) return 0;
        return (m + f(n - 1, m)) % n;
    }
}
```