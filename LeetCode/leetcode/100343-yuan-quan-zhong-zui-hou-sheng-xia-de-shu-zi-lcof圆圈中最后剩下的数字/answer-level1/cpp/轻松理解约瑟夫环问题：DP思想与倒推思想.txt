

### 1.以DP思想理解
我们首先用`f(n, m)`表示n个数字，每次删除第m个，最后剩下的数字:
    1. 对于n-1个数字：0,1,2，...,n-3,n-2；我们假设最后剩下的数字为x，其在数组中坐标也为x；
    2. 对于n个数字，每次删除m个：
    - 我们先将其删除一次，删除第m%n个数字，由于从0开始，最终删除的数字为m%n-1(例如删除第1个，则是删除的0),结果为0,1,2,...,m%n-2,m%n,...,n-2,n-1；
    - 对于n个数字的第二次删除，实际为：m%n,...,n-1,...,0,1,2...,m%n-2;我们可以将其看作n-1个数字，每次删除m个，从第一点我们已经假设，f(n-1,m)=x,最后剩下的结果是x，是数组中的第x个数，不过由于此时删除是从m%n开始的，我们需要从m%n数到第x个数，则有：`f(n, m)=(m%n+x)%n=(m+x)%n=(m+f(n-1,m))%n`。
    3. 边界条件：最后必须剩下一个数字，那么考虑f(2,m):当m%2==1时，删除第一个数0，f(2,m)=1;当m%2==0时，删除第2个数1，f(2,m)==0;总结则有`f(2,m)=m%2;`

#### 代码：

```cpp
class Solution {
public:
    int lastRemaining(int n, int m) 
    {
        return n == 2 ? m % 2 : (m + lastRemaining(n - 1, m)) % n;
    }
};
```

### 2.以倒推思想理解
倒推思想本质就是从剩下一个数字时答案在数组中的坐标推算其在最开始的时候在数组中的坐标，用id(i)来表示在数组剩下i个数时，最终答案的坐标。
    1. 当剩下一个数字时，它的坐标一定有：`id(1)=0`，
    2. 那么可以倒推该数字在剩下两个数时，坐标为：`id(2) = (id(1) + m) % 2`;
    3. 以此类推，最后的答案在还有n个数时，坐标为：`id(n) = (id(n-1) + m) % n`;
    4. 而当还剩n个数时，就是初始状态，数组从0开始，坐标就等于其值，最后答案就为id(n)

对比DP思想解法的最终答案可以发现，两者的公式几乎一样，都是`f(n) = (m + f(n - 1)) % n`，唯一个区别就是边界条件，DP边界条件为：`f(2) = m % 2`；而倒推的边界条件为`f(1) = 0`;

#### 代码
```cpp
class Solution {
public:
    int lastRemaining(int n, int m) {
        int id = 0;
        for(int i = 2; i <= n; i++)
            id = (id + m) % i;
        return id;
    }
};
```
![image.png](https://pic.leetcode-cn.com/1c0f162f0e7c107e82265c82c91266ef8312bc6eb29736bbf1d7eb913b68ef77-image.png)
