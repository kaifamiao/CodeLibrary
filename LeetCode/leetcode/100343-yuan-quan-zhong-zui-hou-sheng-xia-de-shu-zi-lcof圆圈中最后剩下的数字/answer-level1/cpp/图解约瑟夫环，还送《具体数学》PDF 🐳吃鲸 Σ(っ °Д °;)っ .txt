约瑟夫问题比较难想的点有两个：
1. 当数到最后一个结点不足m个时，需要跳到第一个结点继续数。
2. 每轮都是上一轮被删结点的下一个结点开始数 m 个。

第一点比较好解决，可以通过取余来完成。
第二点的解决方案是：将删除结点的后继作为下一轮的第一个结点，后续结点依次排列。这样每轮都是从首结点开始数 m 个了。

![约瑟夫环.png](https://pic.leetcode-cn.com/ca58eb3c94ea0e4d40e1cc7cffc18c5c78f9fd10c1f23c3d84ec79f6360c00ef-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF.png)

通过观察上图中的**结点对应关系**可以发现：设下一轮的最后结点编号为 p，那么当前一轮的最后结点为**从被删除结点向后偏移 p+1 处的结点** ！！！
换一个更好用代码实现的描述方式：**从被删除结点的下一个结点偏移 p 处的结点**，编号为 ((m%n) + p)%n
一个递推式子已经呼之欲出了！！！**OMG ！！！**
设函数 f(n,m) 输出最后结点的编号，结点编号从 0 开始，n 为结点个数，m 为删除步长。
$$
f(n,m) = \left\{ \begin{array}{c}
0, &n = 1 \\ 
((m\%n) + f(n-1, m))\%n, &n > 1 \\     
\end{array}\right. 
$$
n = 1 时显然成立。接下来分析一下 n > 1 时式子：
![约瑟夫环公式.png](https://pic.leetcode-cn.com/28bbdf257dbd73f695581789fb04d9222c8912d4c03de5a3475a9d4204b01d43-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E5%85%AC%E5%BC%8F.png)

```
class Solution {
public:
    int f(int n, int m) {
        if (n == 1) {
            return 0;
        }
        return (m + f(n-1, m)) % n; //在不考虑溢出的情况下，(a%d + c)%d == (a+c)%d
        //return (m%n + f(n-1, m)) % n;
    }
    int lastRemaining(int n, int m) {
        return f(n,m);
    }
};
```
        🐳🐳🐳🐳🐳 我割 🐳🐳🐳🐳🐳
**如果想了解约瑟夫问题更多，可以参看 《具体数学》 第 1.3 章节。该章节介绍了约瑟夫问题的故事背景，并翔实的描述了推导过程。**

### 关注公众号 👏 [HelloNebula](https://pic.leetcode-cn.com/f18e68ed2306a147b615407e0b0260900672940df4a2fd9a7f7dc9b91e23e55e.jpg) 👏 回复 “具体数学” 获取下载链接 ~

**如果感觉对你有帮助，那就反手一个赞吧~b(￣▽￣)d**