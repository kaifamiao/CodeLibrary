![WechatIMG130.jpeg](https://pic.leetcode-cn.com/86f1f202410623a4354315ed7b5e595fc502a1af9233ad69cdf85feb520ac57d-WechatIMG130.jpeg)

先看上面的图，试试找规律。每一行数字是遍历第 `i` 行时会翻转的灯。

一开始写的模拟，不出所料的超时。
然后陷入深深的思考，规律在哪里？
首先想到的是当遍历到 `i` 时，哪些灯会受影响，比较容易看出是可以被 `i` 整除的那些灯。
那么问题可以转化为每个位置`i`，可以被多少个数整除？（请看上面的图，有时候，没思路先画图）。
但是为了求这个数量，还是少不了一次遍历，需要从1到`i`,判断是否能整除 `i`。
就在我企图降低这个 `i` 的复杂度时，突然意识到，数量不是关键，奇偶才是关键！
对于一个数 `i`，如果`j` 能整除 i，那么 `i/j`也可以整除 `i`! 
有了这种对偶关系，`i` 的被除数的数量不就是偶数吗。
**除了一种情况**，`i` 是完全平方数，这时候会有一个 `j` == `i/j`，导致它的因子变成奇数个。
问题至此就很清晰了，只要判断1到`n` 有多少个完全平方数啊。

有时候思考真的很难，但总会有啊哈的乐趣。