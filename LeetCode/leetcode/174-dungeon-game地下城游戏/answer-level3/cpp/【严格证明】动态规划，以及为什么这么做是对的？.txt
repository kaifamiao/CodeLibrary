> 关注公众号【算法码上来】，每日算法干货马上就来！

![宣传图片.jpg](https://pic.leetcode-cn.com/40656bad5d9225c8f44d3aa2864a756abea95f1140cbcc570323572e9009d486-%E5%AE%A3%E4%BC%A0%E5%9B%BE%E7%89%87.jpg)

## 题解
### 错误解法
首先我们肯定想到的是从左上到右下动态规划，那么对于 $(i, j)$ 这个格子来说，它有两个选择，可以从 $(i-1, j)$ 或者 $(i, j-1)$ 过来。

我们令 $dp[i][j]$ 表示从左上角走到 $(i, j)$ 这个格子所需要的最小生命值，那么我们选择 $\min{\{dp[i-1][j], dp[i][j-1]\}}$ ，也就是两个**来向**中较小的那个走过来。但是考虑了当前格子的数值之后，路线上所需生命的最小值是可能增大的，而这时候可能选择两个来向中较大的那个反而更好（因为那个来向数值之和比较大），所以这里就产生了矛盾，无法求解。

举个简单的例子：

|  1（K）   |   -3  |  3   |
| :---: | :---: | :---: |
|   0  |  -2   |  0   |
|   -3  |  -3   |  -3（P）   |

这个例子中如果只看走到格子 $(1, 2)$ 的结果的话，肯定是 下 -> 右 -> 右 最好，因为这样初始生命只需要 2 就够了。而另一条路 右 -> 右 -> 下 则需要初始生命 3 。

但是如果继续走到格子 $(2, 2)$ ，那么最优方向一定是从 $(1, 2)$ 过来（另一个方向负数太多）。但是到 $(1, 2)$ 的最优路线保存的是 下 -> 右 -> 右 这一条，走到终点总和是 -4 ，初始所需最小生命增大为 5 。而另一条原本不怎么好的路线 右 -> 右 -> 下 总和是 -2 ，初始所需最小生命 3 ，所以仍然保持不变。

这样看来原本不好的路线在最后的结果里是可能会变好的，所以不好保存下来直接递推。

### 正确解法
既然从左上到右下没法动态规划，我们不妨从右下到左上动态规划看看。

我们令 $dp[i][j]$ 表示从 $(i, j)$ 这个格子走到右下角所需要的最小生命值，同样我们选择两个**去向**中的较小值 $\min{\{dp[i+1][j], dp[i][j+1]\}}$ 。然后考虑了格子 $(i, j)$ 之后， $dp[i][j]$ 就更新为：
$$
dp[i][j] = \max{\{1, \min{\{dp[i+1][j], dp[i][j+1]\}} - dungeon[i][j]\}}
$$
为什么这里选择两个去向中所需初始生命较小的那个就没问题了呢？

### 严格证明
![1.jpg](https://pic.leetcode-cn.com/df52125b008a8d419dcec193f9a3e74c015330cbfdbc6297c19bda29416e07e6-1.jpg)

考虑上图这种情况，这里我把 $(i, j)$ 抽象为了 $x$ ，右边一格抽象为了 $s$ ，右下角抽象为了 $t$ 。然后 $s \to t$ 走下面这条路所需初始生命值最小，路径上格子记为 $d$ ，另一条路径上格子记为 $d'$ 。

因为走路径 $d$ 所需的初始生命值更小，所以我们有：
$$
\max{\left\{ \max_k{\left\{ -\sum_{i=1}^k{d_i} \right\}}, 1 \right\}} < \max{\left\{ \max_k{\left\{ -\sum_{i=1}^k{d'_i} \right\}}, 1 \right\}}
$$
等价于：
$$
\max_k{\left\{ -\sum_{i=1}^k{d_i} \right\}} < \max_k{\left\{ -\sum_{i=1}^k{d'_i} \right\}}
$$
这时候我们在两边 $\max{\{\cdot\}}$ 里面同时加上 $-x$ ，大小关系是不会变的。

而错误解法中，考虑下图这种情况：
![2.jpg](https://pic.leetcode-cn.com/24d472020cac82e5b479696ced7383b5d545d3645400581879171e838912cff0-2.jpg)

同样我们可以得到：
$$
\max_k{\left\{ -\sum_{i=1}^k{d_i} \right\}} < \max_k{\left\{ -\sum_{i=1}^k{d'_i} \right\}}
$$

到这里为止和上面正确解法是一模一样的。但是，加上 $-x$ 之后，和上面正解的区别就是，**正解求和里每一项都加了，所以大小关系不变，但是错解只有一项加了（就是所有值全加起来），大小关系无法确定**。

## 代码
### c++
```cpp
class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int n = dungeon.size(), m = dungeon[0].size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, INT_MAX));
        dp[n][m-1] = dp[n-1][m] = 1;
        for (int i = n-1; i >= 0; --i) {
            for (int j = m-1; j >= 0; --j) {
                int minn = min(dp[i+1][j], dp[i][j+1]);
                dp[i][j] = max(1, minn-dungeon[i][j]);
            }
        }
        return dp[0][0];
    }
};
```