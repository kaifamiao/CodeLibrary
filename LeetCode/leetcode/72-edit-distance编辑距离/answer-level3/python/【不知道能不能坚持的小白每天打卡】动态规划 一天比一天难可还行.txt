### 解题思路
看了题解和评论，看到有些大牛或者题目刷多了的，是立马就想到dp的，我这里想记录的就是作为一个小白怎么想到要用dp。废话可能会有点多。
先说说一开始想到的错误的思路：
看完题目首先想到的是，能不能把题目化简成一个规律性的操作。比如，假如word1是除了rap以外的其他5种组合，word2是rap，word1变成word2都是要2步，然后猜想是否3个字母是最小规律。很快发现这个想法是错的，因为4个字符的时候就不行了，需要判断的东西开始多了起来。
就是因为有了上面这个想法，发现（至少我是想不到怎么换算成简单的规律）对单词的字符是删减、添加还是替换的选择变化是可以很多的，所以下意识的想法就是，gg，这题要用动态规划。
我作为一个小白对动态规划的理解不是很深，我的感觉就是中间步骤中的每一个状态都是可以根据前面的状态去推算出来。由于我之前对dp一直不是很熟悉，就想着去看看题解是不是真的要用dp。然后发现好像全都是，那就只能来学习一下怎么做dp，把硬骨头啃下。
下面我就说说我是怎么学习这个dp，仅供参考。
我的理解里，dp最核心就是要构建所谓的动态转移方程，也就是dp[i][j]跟dp[i-1][j]和dp[i][j-1]等的关系（当然也有一维的dp，这里不说了）。我感觉作为小白来说，第一个难点就是这个i和j分表要表示什么，都不知道表示什么怎么立方程？这里目前我感觉还是要靠经验，如果像我一样以前没学过dp的，可能最简单还是多做几道题来掌握规律。

官方题解里面解说是，假设已知hors变成ro的距离（最少操作数）是n，那horse变成ro的距离最多是n+1（因为只要horse变成hors，就是n了）。有了这种概念之后，可能还是不知道怎么简历方程。我们可以先从最简单的做起，假设word1是h，word2是r，那距离就是1；word1是ho，word2还是r，距离就是2；word1是hor，word2是r，距离是2；word1是hors，word2是r，距离是3...。这个时候是不是有点感觉了，我们姑且就无脑认定i遍历的是word1，j遍历的是word2，dp[0][0]=1，dp[1][0]=2，dp[2][0]=2，dp[3][0]=3...。有了这个概念之后，就可以想怎么找到之前说的dp[i][j]跟dp[i-1][j]和dp[i][j-1]等的关系了。这个关系放在关键思路里面说。
然后就是所谓的边界条件，我的理解就是怎么初始化这个dp[0][0]，dp[i][0]和dp[0][j]的这些初始值。就是因为ij大于1的时候由动态转移方程得出，那前面那些就需要hard set了。上面写了dp[0][0]=1，例子用的是word1是h，word2是r，其实是有点问题的，就是没考虑到word1是h，word2是''咋整；且不说当word是空，如果继续拿上面想法定义边界，我们也会发现dp[4][0]等于什么是需要推断的，并不容易初始化。
有了以上所说的概念，本题就没那么难了。我觉得对于小白来说最难反而是怎么在脑海里搭建这个dp的框架，而不是本题的关键思路。

**本题关键思路**：大家也可以去看官方解题的思路，可能也有人会跟我一样觉得例子举得有一点点抽象，我这里做一个补充。
如果word1为ra，word2为rap，要word1变成word2也就是word1+p，或者word2-p在计算操作数来说是一个道理。因此对word1添加一个字符的操作等价于对word2删除一个字符的操作，对word1删除一个字符的操作等价于对word2添加一个字符的操作。
假设我们现在遍历到了dp[1][1]，也就是word1为h，word2为r；dp[0][0]的word1为空，word2为空；dp[1][0]的word1为h，word2为空；dp[0][1]的word1为空，word2为r。
1. 如果我们已知word1为''到word2为r的距离是dp[0][1]，那word1为h到word2为r的距离就可以等价于把word1从h变成''，花费1个操作数，再加上dp[0][1]。
2. 同理，如果我们已知word1为h，word2为''的距离是dp[1][0]，那word1为h到word2为r的距离可以等价于先把word2变成''，花费1个操作数，再加上dp[1][0]。
3. 如果我们已知word1为''到word2为''的距离是dp[0][0]， 那word1为h到word2为r的距离就相当于把h直接替换成r花费一个操作数，也就是dp[0][0]+1。这个例子可能有点怪，再举个例子，如果一直word1为abcd到word2为r的距离是k，那word1为abcdk到word2为rr的距离就是先把abcd一顿操作变为r之后，word1此时为rk，word2是rr，那rk变rr就是把k替换成r，也就是1个操作数。这里需要注意的一点事，如果word1为abcdr，word2为rr，那只用把abcd变成r就行了，也就是不用花费操作数了。
以上3种操作，并不代表每一种都是最佳操作，但是最佳操作，一定在以上三种里面。说了这么多，关键就是这句话而已。所以dp[i][j]就是等于这三个操作的min值。

### 代码

```python3
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        # 就是判断一下word1和word2有没有是空的，空的话就直接是不空的长度了，如果都是空那加起来也是0
        if len(word1) * len(word2) == 0:
            return len(word1) + len(word2)
        # 因为还有word1为空或者word2为空，所以行列长度各加1
        dp = [[0 for _ in range(len(word2) + 1)] for _ in range(len(word1) + 1)]
        # 初始化边界，这个比较好理解，就是当word1为abc，word2为空时，a变为空就是1，ab变为空就是2...反之同理
        for i in range(len(word1) + 1):
            dp[i][0] = i
        for j in range(len(word2) + 1):
            dp[0][j] = j
        # 开始推导，一个一个来
        for i in range(1, len(word1) + 1):
            for j in range(1, len(word2) + 1):
                # 三种情况的基础值分别写一下
                left = dp[i - 1][j]
                down = dp[i][j - 1]
                down_left = dp[i - 1][j - 1]
                # 当新来那个字符不一样的时候，咱就都要花费1个操作数
                if word1[i - 1] != word2[j - 1]:
                    dp[i][j] = min(left + 1, down + 1, down_left + 1)
                # 当新来的那个字符word1和word2都一样的时候，就是等于不用操作嘛
                # 写成dp[i][j] = min(left + 1, down + 1, down_left)也是一样的
                else:
                    dp[i][j] = dp[i-1][j-1]
        return dp[len(word1)][len(word2)]

```