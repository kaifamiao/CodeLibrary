​​对于字符串匹配类型的动态规划问题,一般用二维数组dp[][],dp[i][j]表示的是字符串1的前i个字符和字符串2的前j个字符之间的匹配关系。

此题中dp[i][j]表示字符串1的前i个字符和字符串2的前j个字符完全匹配所需的最少操作数。

思路:
    f[i][j]代表的是前i个字符和前j个字符完全匹配所需的操作次数,当进行了这些操作之后,前i个字符和前j个字符需要达到完全匹配

    替换:对于f[i][j] 替换a[i],当进行完这次操作之后,需要前i个字符和前j个字符完全匹配,因此之前要有 : 前i - 1个字符和前j - 1个字符完全匹配,达到这些需要f[i-1][j-1]次操作,因此f[i][j] = f[i-1][j-1] + 1

    删除:对于f[i][j] 删除a[i],当进行完这次操作之后,需要前i - 1个字符和前j个字符完全匹配,因此之前要有 : 前i - 1个字符和前j个字符完全匹配,达到这些需要f[i-1][j]次操作,f[i][j] = f[i - 1][j] + 1

    插入:对于f[i][j] 插入a[i + 1],此时a[i + 1] 应等于 b[j],当进行完这次操作之后,需要前i个字符和前j个字符完全匹配,达到这些需要f[i][j - 1]次操作,因此之前要有 : 前i个字符和前j - 1个字符完全匹配,f[i][j] = f[i][j - 1] + 1

![思路.png](https://pic.leetcode-cn.com/6f8e6cffe46bb34dcbddb000b21b34a6a37c76092e7dbb476e4402a3f5bf8e94-%E6%80%9D%E8%B7%AF.png)
