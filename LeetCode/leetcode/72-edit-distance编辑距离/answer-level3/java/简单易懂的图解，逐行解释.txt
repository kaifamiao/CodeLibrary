### 分析
要变成一模一样，一定要有个顺序的概念，不然会做起来很麻烦，比如从左往右的顺序。现在拿到 $A$ 和 $B$ 两个字符串，$A$ 长度为 $n$，$B$ 长度为 $m$，编辑过后 $A$ 长度为 $m$ 且与 $B$ 的字符顺序一样。从最后一步出发，最后一步就是让 $A$ 的最后一个字符变为 $B$ 的最后一个字符，一共有三种操作，每种操作考虑一番，得到以下四种情况。

- 情况一：$A$ 最后插入 $B[m-1]$，才转换为 $B$，之前要做的就是要将 $A[0..n-1]$（变成 $B[0..m-2]$
- 情况二：$A$ 最后一个字符替换为 $B[n-1]$，才转换为B，之前要做的就是将 $A[0..n-2]$ 变成 $B[0..n-2]$
- 情况三：$A$ 删去最后一个字符，才能转换为 $B$，之前要做的就是要将 $A[0..n-2]$ 变成 $B[0..m-1]$
- 情况四：$A$ 和 $B$ 最后一个字符相等，之前要做的就是要将 $A[0..n-2]$ 变成 $B[0..m-2]$

**以最后一步调整为例**
![image.png](https://pic.leetcode-cn.com/10a6a65958e6d2b9b28aabdd4e8bdfed4d70bbcba6d7565993d152907e7be1fc-image.png)

### 状态
$dp[i][j]$ 代表 $A$ 中前 $i$ 个字符和 $B$ 中前 $j$ 个字符的最小编辑距离

### 转移方程

$dp[i][j]=min\left\{ dp[i][j-1]+1,dp[i-1][j-1]+1,dp[i-1][j]+1,dp[i-1][j-1] \&\& A[i-1] = B[j-1] \right\}$
- $dp[i][j-1]+1$，代表插入一个字符
- $dp[i-1][j-1]+1$，代表替换一个字符
- $dp[i-1][j]+1$，代笔删除一个字符
### 初始条件
一个空串和一个长度为L的串的最小编辑距离是L

时间复杂度 $O(n*m)$，空间复杂度 $O(n*m)$，可以用滚动数组优化

### 致谢
谢谢您的观看，新手写题解，有不正确的地方麻烦指正，我会立即更改

### 代码

```java
class Solution {
    public static int minDistance(String A, String B) {
        int n = A.length();
        int m = B.length();
        // 开 len + 1 方便处理空串
        int[][] dp = new int[n + 1][m + 1];

        // 如果 A 串为空串，到B的编辑距离就是 j
        for (int j = 0; j <= m; j++) {
            dp[0][j] = j;
        }
        // 同上
        for (int i = 0; i <= n; i++) {
            dp[i][0] = i;
        }
        // 枚举 A 串中前 i 个
        for (int i = 1; i <= n; i++) {
            // 枚举 B 串中前 j 个
            for (int j = 1; j <= m; j++) {
                // 前三种情况
                dp[i][j] = Math.min(dp[i][j - 1] + 1, Math.min(dp[i - 1][j] + 1, dp[i - 1][j - 1] + 1));
                // 第四种情况
                if (A.charAt(i - 1) == B.charAt(j - 1)) {
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - 1]);
                }
            }
        }
        return dp[n][m];
    }
}
```