__如果想理解这道题，首先我们需要了解二叉树的迭代遍历，这里以前序遍历为例：__

__如果小伙伴们已经掌握则可以跳到下一段__

核心思想为：

1. 每拿到一个 **节点** 就把它保存在 **栈** 中

2. 继续对这个节点的 **左子树** 重复 **过程1**，直到左子树为 **空**

3. 因为保存在 **栈** 中的节点都遍历了 **左子树** 但是没有遍历 **右子树**，所以对栈中节点 **出栈** 并对它的 **右子树** 重复 **过程1**

4. 直到遍历完所有节点

详细代码及过程注释如下：

```scala [-Scala]
import scala.collection.mutable
obejct TraversalTree {
  // 二叉树的前序遍历
  def preorderTraversal(root: TreeNode): List[Int] = {
    // 用一个栈来保存中间结果
    val stack = new mutable.Stack[TreeNode]()
    val result = new mutable.ListBuffer[Int]()
    var temp = root
    while(temp != null || stack.nonEmpty) {
      if (temp != null) {
        // 每遇到一个节点，就把它加入结果集，并把该节点保存到中间结果中
        result.+=(temp.value)
        stack.push(temp)
        // 先遍历左子树，一直走到空
        temp = temp.left
      } else {
        // 左子树走到空，就从获取已经遍历过左子树的中间结果，将它出栈，并遍历它的右子树
        val node = stack.pop()
        temp = node.right
      }
    }

    result.toList
  }
}
```

__接下来我们思考一下前序遍历和后序遍历之间的关系：__

前序遍历顺序为：根 -> 左 -> 右

后序遍历顺序为：左 -> 右 -> 根

**如果1：** 我们将**前序遍历**中**节点**插入结果链表**尾部**的逻辑，修改为将**节点**插入结果链表的**头部**

那么结果链表就变为了：右 -> 左 -> 根

**如果2：** 我们将遍历的顺序由**从左到右**修改为**从右到左**，配合**如果1**

那么结果链表就变为了：左 -> 右 -> 根

这刚好是后序遍历的顺序

__基于这两个思路，我们想一下如何处理：__

1. 修改前序遍历代码中，节点写入结果链表的代码，将**插入队尾**修改为**插入队首**

2. 修改前序遍历代码中，每次**先查看左节点再查看右节点**的逻辑，变为**先查看右节点再查看左节点**

__想清楚了逻辑，就可以开始编写代码了，详细代码和逻辑注释如下：__

```scala [-Scala]
import scala.collection.mutable
object BinaryTreeRightSideView {
  // 二叉树的后序遍历
  def postorderTraversal(root: TreeNode): List[Int] = {
    val stack = new mutable.Stack[TreeNode]()
    val result = new mutable.ListBuffer[Int]()
    var temp = root
    while(temp != null || stack.nonEmpty) {
      if (temp != null) {
        // 对应处理1，每次前序遍历时，都将节点写入结果链表头，而不是尾
        result.+=:(temp.value)
        stack.push(temp)
        // 对应处理2，每次先遍历右节点，再遍历左节点
        temp = temp.right
      } else {
        val node = stack.pop()
        // 对应处理2，每次先遍历右节点，再遍历左节点
        temp = node.left
      }
    }

    result.toList
  }
}
```

__复杂度分析__

- 时间复杂度：$O(n)$
  
  我们需要遍历树的每一个节点，树一共有 $n$ 个节点，所以时间复杂度为 $n$
- 空间复杂度：$O(n)$
  
  因为是迭代遍历，需要一个`stack`空间存储中间节点，还需要一个`result`空间存储结果，所以空间复杂度为 $2n$，也就是 $n$。
