### 方法一：普通竖式

**思路**

竖式运算思想，以 `num1` 为 `123`，`num2` 为 `456` 为例分析：

![](https://pic.leetcode-cn.com/d24bf3174a878890e1273fbe35426ecdfa932c33efb464ed3602f4d149ed343a){:width=500}
{:align=center}


遍历 `num2` 每一位与 `num1` 进行相乘，将每一步的结果进行累加。

**注意：**

- `num2` 除了第一位的其他位与 `num1` 运算的结果需要 **补0**
- 计算字符串数字累加其实就是 [415. 字符串相加](https://leetcode-cn.com/problems/add-strings/)

**实现**

```java [-Java]
class Solution {
    /**
    * 计算形式
    *    num1
    *  x num2
    *  ------
    *  result
    */
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }
        // 保存计算结果
        String res = "0";
        
        // num2 逐位与 num1 相乘
        for (int i = num2.length() - 1; i >= 0; i--) {
            int carry = 0;
            // 保存 num2 第i位数字与 num1 相乘的结果
            StringBuilder temp = new StringBuilder();
            // 补 0 
            for (int j = 0; j < num2.length() - 1 - i; j++) {
                temp.append(0);
            }
            int n2 = num2.charAt(i) - '0';
            
            // num2 的第 i 位数字 n2 与 num1 相乘
            for (int j = num1.length() - 1; j >= 0 || carry != 0; j--) {
                int n1 = j < 0 ? 0 : num1.charAt(j) - '0';
                int product = (n1 * n2 + carry) % 10;
                temp.append(product);
                carry = (n1 * n2 + carry) / 10;
            }
            // 将当前结果与新计算的结果求和作为新的结果
            res = addStrings(res, temp.reverse().toString());
        }
        return res;
    }

    /**
     * 对两个字符串数字进行相加，返回字符串形式的和
     */
    public String addStrings(String num1, String num2) {
        StringBuilder builder = new StringBuilder();
        int carry = 0;
        for (int i = num1.length() - 1, j = num2.length() - 1;
             i >= 0 || j >= 0 || carry != 0;
             i--, j--) {
            int x = i < 0 ? 0 : num1.charAt(i) - '0';
            int y = j < 0 ? 0 : num2.charAt(j) - '0';
            int sum = (x + y + carry) % 10;
            builder.append(sum);
            carry = (x + y + carry) / 10;
        }
        return builder.reverse().toString();
    }
}
```

**复杂度分析**

- 时间复杂度：*O*(*M N*)。$M,N$ 分别为 `num1` 和 `num2` 的长度。
- 空间复杂度：*O*(M+N)。用于存储计算结果。

### 方法二：优化竖式

该算法是通过两数相乘时，乘数某位与被乘数某位相乘，与产生结果的位置的规律来完成。具体规律如下：

- 乘数 `num1` 位数为 $M$，被乘数 `num2` 位数为 $N$， `num1 x num2` 结果 `res` 最大总位数为 **M+N**
- `num1[i] x num2[j]` 的结果为 `tmp`(位数为两位，"0x","xy"的形式)，其第一位位于 `res[i+j]`，第二位位于 `res[i+j+1]`。

结合下图更容易理解

![](https://pic.leetcode-cn.com/171cad48cd0c14f565f2a0e5aa5ccb130e4562906ee10a84289f12e4460fe164-image.png){:width=400}
{:align=center}



```java [-Java]
class Solution {
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }
        int[] res = new int[num1.length() + num2.length()];
        for (int i = num1.length() - 1; i >= 0; i--) {
            int n1 = num1.charAt(i) - '0';
            for (int j = num2.length() - 1; j >= 0; j--) {
                int n2 = num2.charAt(j) - '0';
                int sum = (res[i + j + 1] + n1 * n2);
                res[i + j + 1] = sum % 10;
                res[i + j] += sum / 10;
            }
        }

        StringBuilder result = new StringBuilder();
        for (int i = 0; i < res.length; i++) {
            if (i == 0 && res[i] == 0) continue;
            result.append(res[i]);
        }
        return result.toString();
    }
}
```

**复杂度分析**

- 时间复杂度：$O*(*M N*)$。$M,N$ 分别为 `num1` 和 `num2` 的长度。
- 空间复杂度：$O*(M+N)$。用于存储计算结果。

### 算法比较

| 算法     | 提交结果 | 执行用时 | 内存消耗 | 语言 |
| :------- | :------- | :------- | :------- | :--- |
| 普通竖式 | 通过     | 48 ms    | 43.8 MB  | Java |
| 优化竖式 | 通过     | 4 ms     | 36.6 MB  | Java |

**虽然两者时间复杂度和空间复杂度相同，但优化竖式执行速度提高很明显，普通竖式耗时主要还是对每步计算的字符串相加这个过程。**