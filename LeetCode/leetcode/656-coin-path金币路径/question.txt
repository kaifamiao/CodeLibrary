coin-path
给定一个数组 <code>A</code>（下标从 <code>1</code> 开始）包含 N 个整数：A<sub>1</sub>，A<sub>2</sub>，&hellip;&hellip;，A<sub>N</sub>和一个整数 <code>B</code>。你可以从数组 <code>A</code> 中的任何一个位置（下标为 <code>i</code>）跳到下标<code>i+1</code>，<code>i+2</code>，&hellip;&hellip;，<code>i+B</code>的任意一个可以跳到的位置上。如果你在下标为 <code>i</code> 的位置上，你需要支付 A<sub>i</sub> 个金币。如果 A<sub>i</sub> 是 -1，意味着下标为 <code>i</code> 的位置是不可以跳到的。

现在，你希望花费最少的金币从数组 <code>A</code> 的 <code>1</code> 位置跳到<code>N</code> 位置，你需要输出花费最少的路径，依次输出所有经过的下标（从 1 到 N）。

如果有多种花费最少的方案，输出字典顺序最小的路径。

如果无法到达 N 位置，请返回一个空数组。



<strong>样例 1 :</strong>

<pre><strong>输入:</strong> [1,2,4,-1,2], 2
<strong>输出:</strong> [1,3,5]
</pre>



<strong>样例 2 :</strong>

<pre><strong>输入:</strong> [1,2,4,-1,2], 1
<strong>输出:</strong> []
</pre>



<strong>注释 :</strong>

<ol>
	路径 Pa<sub>1</sub>，Pa<sub>2</sub>，&hellip;&hellip;，Pa<sub>n</sub>是字典序小于 Pb<sub>1</sub>，Pb<sub>2</sub>，&hellip;&hellip;，Pb<sub>m</sub>的，当且仅当第一个 Pa<sub>i</sub> 和 Pb<sub>i</sub> 不同的 <code>i</code> 满足 Pa<sub>i</sub> &lt; Pb<sub>i</sub>，如果不存在这样的 <code>i</code> 那么满足 <code>n</code> &lt; <code>m</code>。
	A<sub>1</sub> &gt;= 0。A<sub>2</sub>, ..., A<sub>N</sub>（如果存在）的范围是 [-1, 100]。
	A 数组的长度范围 [1, 1000].
	B 的范围[1, 100].
</ol>



金币路径
Given an array <code>A</code> (index starts at <code>1</code>) consisting of N integers: A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub>and an integer <code>B</code>. The integer <code>B</code> denotes that from any place (suppose the index is <code>i</code>) in the array <code>A</code>, you can jump to any one of the place in the array <code>A</code> indexed <code>i+1</code>, <code>i+2</code>, &hellip;, <code>i+B</code> if this place can be jumped to. Also, if you step on the index <code>i</code>, you have to pay A<sub>i</sub>coins. If A<sub>i</sub>is -1, it means you can&rsquo;t jump to the place indexed <code>i</code> in the array.

Now, you start from the place indexed <code>1</code> in the array <code>A</code>, and your aim is to reach the place indexed <code>N</code> using the minimum coins. You need to return the path of indexes (starting from 1 to N) in the array you should take to get to the place indexed <code>N</code> using minimum coins.

If there are multiple paths with the same cost, return the lexicographically smallest such path.

If it&#39;s not possible to reach the place indexed N then you need to return an empty array.

<b>Example 1:</b>

<pre>
<b>Input:</b> [1,2,4,-1,2], 2
<b>Output:</b> [1,3,5]
</pre>



<b>Example 2:</b>

<pre>
<b>Input:</b> [1,2,4,-1,2], 1
<b>Output:</b> []
</pre>



<b>Note:</b>

<ol>
	Path Pa<sub>1</sub>, Pa<sub>2</sub>, ..., Pa<sub>n</sub>is lexicographically smaller than Pb<sub>1</sub>, Pb<sub>2</sub>, ..., Pb<sub>m</sub>, if and only if at the first <code>i</code> where Pa<sub>i</sub>and Pb<sub>i</sub>differ, Pa<sub>i</sub>&lt; Pb<sub>i</sub>; when no such<code>i</code>exists, then<code>n</code> &lt; <code>m</code>.
	A<sub>1</sub> &gt;= 0. A<sub>2</sub>, ..., A<sub>N</sub> (if exist) will in the range of [-1, 100].
	Length of A is in the range of [1, 1000].
	B is in the range of [1, 100].
</ol>


