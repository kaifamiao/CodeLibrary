maximum-frequency-stack
实现 <code>FreqStack</code>，模拟类似栈的数据结构的操作的一个类。

<code>FreqStack</code>有两个函数：

<ul>
	<code>push(int x)</code>，将整数<code>x</code>推入栈中。
	<code>pop()</code>，它<strong>移除</strong>并返回栈中出现最频繁的元素。
	<ul>
		如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。
	</ul>
	
</ul>



<strong>示例：</strong>

<pre><strong>输入：</strong>
[&quot;FreqStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;],
[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]
<strong>输出：</strong>[null,null,null,null,null,null,null,5,7,5,4]
<strong>解释：</strong>
执行六次 .push 操作后，栈自底向上为 [5,7,5,7,4,5]。然后：

pop() -&gt; 返回 5，因为 5 是出现频率最高的。
栈变成 [5,7,5,7,4]。

pop() -&gt; 返回 7，因为 5 和 7 都是频率最高的，但 7 最接近栈顶。
栈变成 [5,7,5,4]。

pop() -&gt; 返回 5 。
栈变成 [5,7,4]。

pop() -&gt; 返回 4 。
栈变成 [5,7]。
</pre>



<strong>提示：</strong>

<ul>
	对<code>FreqStack.push(int x)</code>的调用中<code>0 &lt;= x &lt;= 10^9</code>。
	如果栈的元素数目为零，则保证不会调用 <code>FreqStack.pop()</code>。
	单个测试样例中，对<code>FreqStack.push</code>的总调用次数不会超过<code>10000</code>。
	单个测试样例中，对<code>FreqStack.pop</code>的总调用次数不会超过<code>10000</code>。
	所有测试样例中，对<code>FreqStack.push</code>和 <code>FreqStack.pop</code>的总调用次数不会超过<code>150000</code>。
</ul>



最大频率栈
Implement <code>FreqStack</code>, a class which simulates the operation of a stack-like data structure.

<code>FreqStack</code>has two functions:

<ul>
	<code>push(int x)</code>, which pushes an integer <code>x</code> onto the stack.
	<code>pop()</code>, which <strong>removes</strong> and returns the most frequent element in the stack.
	<ul>
		If there is a tie for most frequent element, the element closest to the top of the stack is removed and returned.
	</ul>
	
</ul>



<strong>Example 1:</strong>

<pre>
<strong>Input: </strong>
<span id="example-input-1-1">[&quot;FreqStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]</span>,
<span id="example-input-1-2">[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]</span>
<strong>Output: </strong><span id="example-output-1">[null,null,null,null,null,null,null,5,7,5,4]</span>
<strong>Explanation</strong>:
After making six .push operations, the stack is [5,7,5,7,4,5] from bottom to top.  Then:

pop() -&gt; returns 5, as 5 is the most frequent.
The stack becomes [5,7,5,7,4].

pop() -&gt; returns 7, as 5 and 7 is the most frequent, but 7 is closest to the top.
The stack becomes [5,7,5,4].

pop() -&gt; returns 5.
The stack becomes [5,7,4].

pop() -&gt; returns 4.
The stack becomes [5,7].
</pre>



<strong>Note:</strong>

<ul>
	Calls to <code>FreqStack.push(int x)</code>will be such that <code>0 &lt;= x &lt;= 10^9</code>.
	It is guaranteed that <code>FreqStack.pop()</code> won&#39;t be called if the stack has zero elements.
	The total number of <code>FreqStack.push</code> calls will not exceed <code>10000</code> in a single test case.
	The total number of <code>FreqStack.pop</code>calls will not exceed <code>10000</code> in a single test case.
	The total number of <code>FreqStack.push</code> and <code>FreqStack.pop</code> calls will not exceed <code>150000</code> across all test cases.
</ul>

<div>

</div>
