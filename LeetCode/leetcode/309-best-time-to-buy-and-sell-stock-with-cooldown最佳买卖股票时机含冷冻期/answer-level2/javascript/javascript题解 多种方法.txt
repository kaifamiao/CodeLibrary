[122.买卖股票的最佳时机Ⅱ](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/submissions/)    

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md) 

动态规划类解法可以参考[大神题解](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-lab/)。

## 方法一 峰底峰谷累加计算   

要想取得利润最大值，就要在某一段区间内的最低点买入，最高点卖出。   

区间最低点的特征是比前一天和后一天的价格都低，区间最高点的特征是该点的价格比前一天和后一天的都高，最后根据最高最低计算利润，然后累加即可。

详细分析可以参考[官方题解](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/mai-mai-gu-piao-de-zui-jia-shi-ji-ii-by-leetcode/)

```javascript
/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
    if (!Array.isArray(prices) || prices.length <= 0) return 0;
    let maxProfit = 0,
        low = 0,
        high = 0,
        index = 0;
    while (index < prices.length - 1) {
        while (index < prices.length - 1 && prices[index] >= prices[index+1]) {
            index++;
        }
        low = prices[index];
        while (index < prices.length - 1 && prices[index] <= prices[index+1]) {
            index++
        }
        high = prices[index];
        maxProfit += high - low;
    }
    return maxProfit;
};
```


## 方法二 累加计算   

本题主要依据数学分析，题目分析清楚了，代码很好写出来。   

本题不限制买卖次数，因此可以直接当天对比上一天的价格，有盈利就直接卖出，最后所得利润即为最大利润。

详细分析可以参考[官方题解](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/mai-mai-gu-piao-de-zui-jia-shi-ji-ii-by-leetcode/)

```javascript
/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
    if (!Array.isArray(prices) || prices.length <= 1) return 0;
    let max = 0;
    for (let i = 1; i < prices.length; i++) {
        if (prices[i] > prices[i-1]) {
            max += prices[i] - prices[i-1];
        }
    }
    return max;
};
```

## 常规动态规划

```javascript
/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
    if(prices.length === 0) {
        return 0
    }
    
    let dp = new Array(prices.lenth);
    for (let i = 0; i < prices.length; i++) {
        dp[i] = new Array(2).fill(0)
    }
    
    dp[0] = [0, -prices[0]]
    
    for (let i = 1; i < prices.length; i++) {
        dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i])
        dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] - prices[i]);
    }
    
    return dp[prices.length-1][0];
};
```

## 动态规划的优化

```javascript
/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
    if (prices.length === 0) {
        return 0
    }
    
    let dp_0 = 0, dp_1 = -prices[0];
    for (let i = 1; i < prices.length; i++) {
        let temp = dp_0;
        dp_0 = Math.max(dp_0, dp_1 + prices[i]);
        dp_1 = Math.max(dp_1, temp - prices[i])
    }
    return dp_0
};
```