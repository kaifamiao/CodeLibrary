### 解题思路

可直接利用归并排序中的归并思想, 不过由于 `A` 中末尾有足够的空间能够容纳 `B`, 因此, 只需对 `A` 和 `B` 进行逆向归并即可.

### 逆向归并

首先, 设置三个游标 `i`, `j` 和 `p`, 分别指向 `A` 的第 `m` 个元素, `B` 的第 `n` 个元素, `A` 的最后一个元素.

然后, 使用 `A[i]` 与 `B[j]` 进行大小比较, 大的元素放到 `A[p]` 中, 并且对 `i` 或 `j` 游标和 `p` 游标进行 `--` 操作.

注意, 由于是将元素从 `A` 和 `B` 中迁移至 `A` 中, 并且 `A` 和 `B` 本身为有序数组, 因此只需关注 `j` 的游标即可, 当 `B` 从后往前遍历完所有元素后, 即表示归并结束, 因为即使 `A` 中还有元素没被遍历到, 但 `A` 本身是有序的, 且 `A` 本身容量刚好足够容纳 `A` 和 `B`, 所以当 `B` 遍历完后, 如果 `A` 还没遍历完, `A` 没遍历的元素也已经在 `A` 中是有序的了.

![Go.jpg](https://pic.leetcode-cn.com/075979247bca989a8470705e39416b83c66db985178290c10cd2054f267e47fe-Go.jpg)


### 代码

```golang
func merge(A []int, m int, B []int, n int)  {
	i, j, p := m-1, n-1, m+n-1
	for j >= 0 {
		if i >= 0 && A[i] > B[j] {
			A[p] = A[i]
			i--
		} else {
			A[p] = B[j]
			j--
		}
		p--
	}
}
```