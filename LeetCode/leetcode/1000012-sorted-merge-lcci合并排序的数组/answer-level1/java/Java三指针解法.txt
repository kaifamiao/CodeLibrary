### 解题思路
为了达到时间和空间复杂度的最优化, 可以考虑从后向前去合并, 之所以可以这样做是因为A, B是两个排序后的数据.
A, B最后一个元素的最大者一定是要放在A数组的最后的.然后依次向前比较, 循环这个过程.

具体可以通过三个指针来实现.
* `al`指针指向A数组中最后一个非空位置即下标为`m-1`处
* `ar`指针指向A数组中后面的空位, 这个位置将是合并后A数组中最后一个非空的位置, 即下标为 `m + n - 1` 处.
* `br`指针指向B数组的最后一个位置.
计算过程如下:
1. br指针依次向左移, 直到移出边界.
2. 比较A[al] 与 B[br] 的大小关系, 将大者放入`A[ar]`处. 向前移动相应指针.
3. 外层循环结束的条件就是`br`指针移出了边界, 这个时候说明B中所有元素都合并入了A中

**注意点**
在合并的过程中, `al`指针可能先向左移出边界. 这种情况会出现在比如, A中的元素都比B中元素大, 这时会先把A中前半部分元素移到后半部分的位置上.
出现这种情况时, 可以直接将B中剩余元素直接copy到A中对应位置去即可.

### 代码

```java
class Solution {
    public void merge(int[] A, int m, int[] B, int n) {
        // check
        int ar = m + n - 1;
        int al = m - 1;
        int br = n - 1;
        while (br >= 0) {
            if (al < 0 || A[al] <= B[br]) {
                A[ar--] = B[br--];
            } else {
                A[ar--] = A[al--];
            }
        }
    }
}
```