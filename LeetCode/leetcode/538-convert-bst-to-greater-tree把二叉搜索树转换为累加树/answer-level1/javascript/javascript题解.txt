[538.把二叉搜索树转换为累加树](https://leetcode-cn.com/problems/convert-bst-to-greater-tree/submissions/)

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)  


## 方法一 先求和，在中序

通过一次遍历计算出树中所有节点的和，然后利用中序遍历去修改每一个节点的值，代码更加直观，可以直接看代码。

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
var convertBST = function(root) {
    if (root === null) return null;
    let sumOfTree = 0;
    let node = root;
    let stack = [node];
    while (stack.length > 0) {
        node = stack.pop();
        sumOfTree += node.val;
        node.right && stack.push(node.right);
        node.left && stack.push(node.left);
    }
    node = root;
    stack = [];
    while (stack.length > 0 || node !== null) {
        if (node) {
            stack.push(node);
            node = node.left;
        } else {
            node = stack.pop();
            sumOfTree -= node.val;
            node.val += sumOfTree;
            node = node.right;
        }
    }
    return root;
};
```


## 方法二 反中序   

在反中序过程中直接修改节点值。  

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
var convertBST = function(root) {
    if (root === null) return null;
    let stack = [],
        sum = 0;
    let node = root;
    while (stack.length > 0 || node !== null) {
        if (node) {
            stack.push(node);
            node = node.right;
        } else {
            node = stack.pop();
            sum += node.val;
            node.val = sum;
            node = node.left;
        }
    }
    return root;
};
```

## 方法三 反中序递归写法  

注意必须要确保sum能够动态变化。

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
var convertBST = function(root) {
    let sum = 0;
    function help(root) {
        if (root !== null) {
            help(root.right);
            sum += root.val;
            root.val = sum;
            help(root.left);
        }
        return root;
    }
    help(root);
    return root;
};
```