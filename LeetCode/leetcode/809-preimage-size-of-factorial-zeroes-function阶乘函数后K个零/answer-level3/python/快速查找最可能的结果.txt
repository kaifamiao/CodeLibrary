这道题的和之前很简单的那道，寻找阶乘后的0类似。首先，我们知道使用如下方式，我们可以获取一个数的阶乘中，尾巴地方0的数目：

```python
def zero_number(n):
    cnt = 0
    while n != 0:
        cnt += n / 5
        n /= 5
    return cnt
```

分析这道题目，是要找阶乘中包括给定K个零的数的总数。显而易见，这个总和要么是0，要么是5. 举个例子，25到29的阶乘后，都有6个零，那么对于K=6，结果是5. 再增加一个数，到30的时候，阶乘就多了一个0，变成7个0了。所以，问题的关键就变成了，阶乘中尾巴零的数目，不可能是哪些值。

比如，20到24的阶乘尾巴只有4个零，但是25到29的阶乘尾巴有6个零，5个零的情况偏偏就被跳过去了。这是因为25里边有两个5（25=5*5），所以为阶乘贡献了两个0.

比较简单的思路，就是遍历所有可能的数，看看K是否可能是我们之前算阶乘的结果。当然，这个遍历也是讲技巧的，因为每五个数阶乘后的零变化一次，因此遍历可以以步进5来进行。这是比较简单的思路，我没有尝试，因为题目给定K的取值范围比较大，这么遍历很可能超时。

那么，换一种思路，对于我们来说，从0开始往上遍历，不如从一个可能的最大值往下遍历，这样寻找数据会更快一些。记一个数$n$的阶乘中，尾巴0的数目为$f(n)$，$f(n)$的计算方法由以上代码给出，具体表示为：
$$
f(n) = \sum_{i=1}^{n}\lfloor \frac{n}{5^i} \rfloor
$$
实际上，循环没有执行$n$次，向下取整的结果就已经$0$了。

对于给定的数字$K$，很显然
$$
f(5K) = \sum_{i=1}^{5K}\lfloor \frac{5K}{5^i} \rfloor = K + \sum_{i=1}^{5K}\lfloor \frac{K}{5^i} \rfloor \ge K
$$
显然，$f(5K)$是$K$的一个上界。因此，我们完全可以从$5K$往下，以5为步长往下搜索。

既然我们可以确定上确界，能否找到一个下确界呢？如果找到一个准确的下确界，那么我们完全可以采用二分法，快速查找。显然，一个准确的下确界，$0$，是存在的，是否可以找到更加准确的？

我们回过头来，看看这个公式：
$$
f(n) = \sum_{i=1}^{n}\lfloor \frac{n}{5^i} \rfloor
$$
可以变化为：
$$
f(n) = \sum_{i=1}^{n}\lfloor \frac{n}{5^i} \rfloor \le \sum_{i=1}^{n} \frac{n}{5^i}
$$
而
$$
\sum_{i=1}^{n} \frac{n}{5^i} \le \sum_{i=1}^{+\infty}\frac{n}{5^i} = \frac{n}{4}
$$
也即
$$
f(n) \le \frac{n}{4}
$$
变换一下，有
$$
f(4n) \le n
$$

所以，我们可以得到
$$
f(4K) \le K \le f(5K)
$$

也就是说，我们可以直接把下确界推到$4K$。实际上$f(4K)$和$K$的值非常接近了，例如，$f(4\times 10^9)$的结果是$999999997$，和$K=10^9$只差三个数而已。所以比较理想的做法是直接从下确界开始搜索，直到找到合适的值为止。

以下为AC的代码：
```python
class Solution(object):
    def preimageSizeFZF(self, K):
        """
        :type K: int
        :rtype: int
        """
        def zero_number(n):
            cnt = 0
            while n != 0:
                cnt += n / 5
                n /= 5
            return cnt
        base = 4*K        
        while True:
            v = zero_number(base)
            if v == K:
                return 5
                #return base - (base % 5 ) + 5 # if we shall return the max value
            elif v > K:
                return 0
            base += 5
        return 0
```
