# 解答

方法一：栈 + 回溯

用栈判断括号是否有效：
1. 若栈为空，或当前元素为 '(', 则将其入栈。
2. 若栈不为空，且栈顶元素为'(', 当前元素为')', 则当前的有效括号长度加 2.
3. 若栈不为空，且栈顶部元素为')', 此时结束当前循环(即 upata 函数）。

若遍历结束后，栈内部元素不为空（即出现类似 "(()" 这样的字符串）,此时利用数学知识，构造变量 needSub 用以处理每一个无效 '(' 之后的长度值。

重复上述过程，直到遍历结束字符串。

代码：
```cpp
class Solution {
public:
    void update( string& s, vector<int>& rec, int& begin){
        stack<pair<char,int>> record;   //int 为下标
        int now = 0, i = begin;

        for( i = begin; i < s.size(); i++){
            if( record.empty() || s[i] == '(')
                record.push( {s[i], i});
            else if( record.top().first == '(' && s[i] == ')')
                record.pop(), now += 2;
            
            rec[i] = now;
            if( !record.empty() && record.top().first == ')'){
                begin = i + 1;
                return ;
            }
        }
        
        //记录无效的括号的位置
        vector<int> rec2( record.size());
        for( int i = record.size() - 1; i > -1; i--)
            rec2[ i] = record.top().second, record.pop();
        
        
        //数学处理
        int needSub = 0;
        for( int i = begin, k = 0; i < rec.size(); i++){
            if( k < rec2.size() && i == rec2[k])
                if( i == begin)
                    k++;
                else
                    needSub += rec[i - 1], k++;
            rec[i] -= needSub;
        }
        
        begin = i + 1;
        
    }
    int longestValidParentheses(string s) {
        vector<int> rec( s.size(), 0);
        
        for( int i = 0; i < s.size(); )
            update( s, rec, i);
        
        //寻找最大值
        int res = 0;
        for( auto it: rec)
            res = max( it, res);
        
        return res;
    }
};
```

方法二：动态规划。

有效的字符串必定以 ')' 结尾。

假设当前元素下标为 i, 且 s[i] = ')', dp 可以分为两种情况：
1. 若 dp[i - 1] == '(', 则为 "......()" 类型，此时 dp[i] = dp[i-2] + 2; 
2. 若 dp[i - 1] == ')	', 则为 "......))"类型，此时 dp[i] = dp[ i - 1] + dp[ i - dp[i-1] - 2] + 2;
