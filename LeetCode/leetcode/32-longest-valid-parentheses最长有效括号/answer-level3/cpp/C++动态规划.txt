### 解题思路
通过题目知道有效子串的长度为2的整数倍。即0、2、4等。。
构造一个与字符串等长的数组arr。数组每一位存储原字符串中以当前位为最右点的有效子串长度。

遍历原字符串：用下标i访问字符串s
（1）s[0]必为0，以其为有效串最右点，那么长度不符合。即arr[0]=0。
（2）s[i]=='('：这种情况将数组值arr[i]置为0，因为左括号不会是有效子串的最右点。
（3）s[i]==')'：这种情况下，可能发生s[i-1]为'('或')'，和arr[i-1]为0或非0。会有交叉情况发生，但s[i-1]为'('时arr[i-1]会是0。
    （3.1）如果s[i-1]=='('：那么s[i]和s[i-1]构成一个有效情况，此时还需要往i-1之前访问，即在可以访问s[i-2]的情况下，arr[i]=arr[i-2]+2。不能访问s[i-2]则直接arr[i]=2。
    （3.2）如果s[i-1]==')'：此时arr[i-1]可能为0或非0,为0的话就说明其前一位的右括号匹配不到合适的左括号，那么该位也匹配不到，即arr[i]=0；如果arr[i-1]不为0，说明前一位有以其为最右点的有效子串，我们判断该有效子串的最左点的前一位能否访问以及是否为左括号'('。如果s[i-1]所对应的有效子串最左点前一位可访问且为左括号，即可判断s[i]对应的有效子串至少是s[i-1]对应的长度加2，即arr[i]=arr[i-1]+2；但此时还存在问题，就是找到s[i]对应的左括号后还要判断其对应左括号的更左一位，如果可以访问更左一位的话，如“()(())”中s[5]对应s[2]，但s[1]也有其长度，且s[5]对应的长度应该加上s[1]对应的长度，即arr[5]+=arr[1]。

### 代码

```cpp
class Solution {
public:
    int longestValidParentheses(string s) {
        //遍历
        int len=s.length();
        if(len<2){
            return 0;
        }
        //子串长度一定是偶数，0、24.。。
        vector<int>arr(len,0);
        for(int i=1;i<len;i++){
            if(s[i]==')'){
                if(s[i-1]=='('){
                    arr[i]=i>2?arr[i-2]+2:2;
                }
                else{
                    if(arr[i-1]&&i-arr[i-1]>0){
                        if(s[i-arr[i-1]-1]=='('){
                            arr[i]=arr[i-1]+2;
                            if(i-arr[i-1]-1>0){
                                arr[i]+=arr[i-arr[i-1]-2];
                            }
                        }
                    }
                }
            }
        }
        // for(auto i:arr){
        //     cout<<i<<" ";
        // }
        // cout<<endl;
        return *max_element(arr.begin(),arr.end());
    }
};
```