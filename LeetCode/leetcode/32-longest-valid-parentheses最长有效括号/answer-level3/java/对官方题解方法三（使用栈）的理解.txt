### 解题思路
题目要求是寻找最大合法子串的长度

思路：
1. 合法子串的第一个字符必然是'('，最后一个字符必然是')'
2. 主要思路就是找到合法子串的第一个字符的前一个字符
3. 一开始初始化栈，push(-1)，处理字符串0位置开始的子字符串合法的情况
4. 假设当前元素为')'，且将栈顶出栈后，栈中还存在元素，那么可以确定，此时的元素位置为合法字符串的结束位置，且开始位置的前一个位置就是此时的栈顶，这个时候必然可以获得一个合法的子字符串
5. eg1,假设字符串都是右括号，如")))()"
    - 第一个字符为')'，将栈顶元素出栈，此时栈空，可以确定下一个合法子字符串的开始位置至少是下一个元素，所以将栈顶元素-1出栈，将当前字符位置0入栈
    - 第二个字符为')'，同上，将0出栈，1入栈
    - 第三个字符为')'，同上，将1出栈，2入栈
    - 第四个字符为'('，3入栈，
    - 第五个字符为')'，3出栈，栈内还有2，可以确定合法子串就是(2,4],此时的子串长度为2
    - 遍历结束，获得的最大长度就是2
6. eg2,"()(())"
    - 第一个字符为'('，0入栈
    - 第二个字符为')'，0出栈，当前合法子串为(-1,1],此时的子串长度为2
    - 第三个字符为'('，2入栈
    - 第四个字符为'('，3入栈
    - 第五个字符为')'，3出栈，当前合法子串为(2,4],此时的子串长度为2，不更新最大子串长度
    - 第六个字符为')'，2出栈，当前合法子串为(-1,5),此时的子串长度为6，更新最大子串长度为6
    - 遍历结束，获得最大长度就是6

### 代码

```java
class Solution {
    public int longestValidParentheses(String s) {
        char[] chs=s.toCharArray();
        Stack<Integer> stack=new Stack<>();
        stack.push(-1);
        int max=0;
        for(int i=0;i<chs.length;i++){
            if(chs[i]=='('){
                stack.push(i);
            }else{
                stack.pop();
                if(stack.isEmpty()){
                    stack.push(i);
                }else{
                    max=Math.max(max,i-stack.peek());
                }
            }
        }
        return max;
    }
}
```