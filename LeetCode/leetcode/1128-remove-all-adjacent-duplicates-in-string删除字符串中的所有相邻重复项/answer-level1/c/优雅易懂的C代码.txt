我们可以利用遍历下标总是不小于栈底top作为下标的值这个性质将S指向的内存空间作为栈空间。
原因很简单一开始栈空间膨胀和遍历速度是相同的，但是我们不断入栈的途中会有出栈，这就使得栈膨胀的速度永远不可能超过遍历的速度。
所谓遍历就是集合中所有元素都访问一遍。也就是说top只能操作我们访问过的数据，而不能没有操作我们未访问过的数据，因此这并不影响遍历。


```
char* removeDuplicates(char* S) {
    int top = 0;
    for (int read = 0; S[read]; read++, top++)
    {
        S[top] = S[read];     //字符串s字符逐一入栈
        if (top > 0 && S[top] == S[top - 1])  //查找是否有重复，若有出栈
            top -= 2;
    }
    S[top] = '\0';

    return S;
}
```

