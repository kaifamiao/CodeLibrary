[438.找到字符串中所有字母异位词](https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/)

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md) 

## 滑动窗口

参考[大神题解](https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/solution/hua-dong-chuang-kou-tong-yong-si-xiang-jie-jue-zi-/)，滑动窗口的问题有一个通用的解决方案：

```javascript
let left = 0, right = 0;
while (right < str.length) {
    window[str[right]]++; // 此处是伪代码，window是一个map
    right++;
    
    while(valid) {
        window.remove(str[left]);
        left++
    }
}
```

本题题解为：

```javascript
/**
 * @param {string} s
 * @param {string} p
 * @return {number[]}
 */
var findAnagrams = function(s, p) {
    let map = new Map(),
        window = new Map();
    let left = 0,
        right = 0,
        res = [],
        matchNum = 0; // 表示匹配到的字母的个数
    
    for (let i = 0; i < p.length; i++) {
        let char = p[i];
        if (!map.has(char)) {
            map.set(char, 1);
        } else {
            map.set(char, map.get(char)+1);
        }
    }
    
    while (right < s.length) {
        let char = s[right];
        if (map.has(char)) {
            if (!window.has(char)) {
                window.set(char, 1);
            } else {
                window.set(char, window.get(char)+1);
            }
            
            if (map.get(char) === window.get(char)) {
                matchNum++;
            }
        }
        
        right++;
        
        while (matchNum === map.size) {
            if (right - left === p.length) {
                res.push(left);
            }
            let tmpChar = s[left];
            if (map.has(tmpChar)) {
                window.set(tmpChar, window.get(tmpChar)-1);
                if (window.get(tmpChar) < map.get(tmpChar)) {
                    matchNum--;
                }
            }
            left++;
        }
    }
    return res;
};
```

## 时间100%

偷别人的方法。

```javascript
/**
 * @param {string} s
 * @param {string} p
 * @return {number[]}
 */
var findAnagrams = function(s, p) {
    let left = 0,
        right = 0,
        matchNum = 0;
    
    let res = [];
    
    let needs = new Array(128).fill(0);
    
    for (let c of p) {
        needs[c.charCodeAt()]++;
    }
    
    while (right < s.length) {
        let rKey = s.charCodeAt(right++);
        if (needs[rKey]-- > 0) matchNum++;
        while (matchNum === p.length) {
            if (right - left === p.length) {
                res.push(left);
            }
            let lKey = s.charCodeAt(left++);
            if (++needs[lKey] > 0) matchNum--;
        }
    }
    return res;
};
```