kill-process
给<strong>n</strong>个进程，每个进程都有一个独一无二的 <strong>PID </strong>（进程编号）和它的<strong>PPID</strong>（父进程编号）。

每一个进程只有一个父进程，但是每个进程可能会有一个或者多个孩子进程。它们形成的关系就像一个树状结构。只有一个进程的 PPID 是 0 ，意味着这个进程没有父进程。所有的 PID 都会是唯一的正整数。

我们用两个序列来表示这些进程，第一个序列包含所有进程的 PID ，第二个序列包含所有进程对应的 PPID。

现在给定这两个序列和一个 PID 表示你要杀死的进程，函数返回一个 PID 序列，表示因为杀这个进程而导致的所有被杀掉的进程的编号。

当一个进程被杀掉的时候，它所有的孩子进程和后代进程都要被杀掉。

你可以以任意顺序排列返回的 PID 序列。

<strong>示例 1:</strong>

<pre><strong>输入:</strong> 
pid =  [1, 3, 10, 5]
ppid = [3, 0, 5, 3]
kill = 5
<strong>输出:</strong> [5,10]
<strong>解释:</strong> 
           3
         /   \
        1     5
             /
            10
杀掉进程 5 ，同时它的后代进程 10 也被杀掉。
</pre>



<strong>注意:</strong>

<ol>
	被杀掉的进程编号一定在PID 序列中。
	n &gt;= 1.
</ol>



杀死进程
Given <b>n</b> processes, each process has a unique <b>PID (process id)</b> and its <b>PPID (parent process id)</b>. 

Each process only has one parent process, but may have one or more children processes. This is just like a tree structure.  Only one process has PPID that is 0, which means this process has no parent process. All the PIDs will be distinct positive integers.

We use two list of integers to represent a list of processes, where the first list contains PID for each process and the second list contains the corresponding PPID. 
 
Now given the two lists, and a PID representing a process you want to kill, return a list of PIDs of processes that will be killed in the end. You should assume that when a process is killed, all its children processes will be killed. No order is required for the final answer.

<b>Example 1:</b><br />
<pre>
<b>Input:</b> 
pid =  [1, 3, 10, 5]
ppid = [3, 0, 5, 3]
kill = 5
<b>Output:</b> [5,10]
<b>Explanation:</b> 
           3
         /   \
        1     5
             /
            10
Kill 5 will also kill 10.
</pre>


<b>Note:</b><br>
<ol>
The given kill id is guaranteed to be one of the given PIDs.
n >= 1.
</ol>
