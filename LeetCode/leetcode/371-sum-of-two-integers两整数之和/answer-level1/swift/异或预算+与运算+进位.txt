### 解题思路

假如要实现2+3

先把两个数字转换为二进制：
2：010
3：101

那么异或运算 2 ^ 3 会得到：
010
011 ^
——————————
001
既没有进位的加法结果；

如果与运算 2 & 3 则会得到：
010
011 &
——————————
010
如果把与预算的结果再向左位移1位的话
010 << 1 = 100
既相加的进位；

所以思想就是在进位为0之前不断让两数进行异或运算和与运算（位移1），并将两次运算的结果更新给两个数字

### 代码

```swift
class Solution {
    func getSum(_ a: Int, _ b: Int) -> Int {

        var sum = a ^ b
        var carry = (a & b) << 1

        //到进位为0为止循环计算
        while carry != 0 {
            (sum, carry) = (sum ^ carry, (sum & carry) << 1)
            //与运算"&" + 左位移符"<<"可以得到进位,异或运算"^"可以得到无进位的加法结果
        }

        return sum

    }
}
```