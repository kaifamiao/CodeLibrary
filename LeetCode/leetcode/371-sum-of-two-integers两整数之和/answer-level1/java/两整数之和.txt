求两个整数之和不让用加减运算，这还是人吗？
没办法算法有时就是要让你从非常规的角度思考问题，一看到题目要求的时候就在想是否可以通过“位运算”来模拟“加法”的过程，虽然有这个想法，却还是不知道要如何进行。
不懂就看别人的代码呗，看和理解别人的代码也是学习的一种方式嘛。

在“位运算”中有两个重要概念需要我们理解：
1. 异或运算相当于两个数的不带进位的加法，因为在异或运算中只有当两个位一个为0一个为1时结果才会1，其他情况结果都为0，可以进一步理解为同时为0时结果为0，但
没有进位，同时为1时结果为0但向高位产生了一个进位；
2. 与运算相当于两个数的进位，因为在与运算中只有两个位都为1时结果才会为1，相当于产生了一个进位，只是真正的进位需要向左移动一位。

对上面两个概念有了理解后就不难写出相关代码：
```
class Solution {
    public int getSum(int a, int b) {
        do {
            // 用一个临时变量保存a的初始值，因为在接下的两个运算中都有用到a的初始值，但第一个运算会更新它，
            // 所以这里先保存下来以方便第二个运算使用。
            int tmp = a;
            a = a ^ b;
            b = (tmp & b) << 1;
            // b 表示的是进位，当进位为0时表示整个计算结束。
        } while (b != 0);

        return a;
    }
}
```
