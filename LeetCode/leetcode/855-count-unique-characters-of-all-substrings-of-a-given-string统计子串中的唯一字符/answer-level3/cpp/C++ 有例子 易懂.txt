时间复杂度100%  
空间复杂度60.61%  

### 题目描述
题目要寻找每个子串中出现一次的字符串的数量的和。  

很显然，所有的子串个数为n!，假如我们用暴力的方法来写这道题，找到所有的子串后再分别求各子串出现一次的字符数量，肯定会超时。  
怎么去简化呢？我们可以简化为求每个字符在几个子串里只出现一次。  

例如：  

    "ABC"  
    'C'在子串"C","BC","ABC"中都出现一次，所以'C'能够为答案贡献3
    'B'在子串"B","AB","BC","ABC"中都出现一次，所以'B'能够为答案贡献4
    'A'在子串"A","AB","ABC"中都出现一次，所以'A'能够为答案贡献3
    ans=3+4+3=10

如此一来，这题就转化为两个问题：  
1.对于每一个字符来说，在哪一段区间只出现了一次  
2.在这一段区间内，这个字符可以为答案贡献多少（即在这段区间，这个字符可以存在于多少子串中）  

如何通过一段区间来计算这个字符存在于多少子串中呢？    
其实就是计算这个字符到最左端的距离再计算到最右端的距离，然后再乘起来。   
为什么可以这样计算呢？  
就是以这个字符左侧的任意字符开头，以这个字符右侧任意字符结束的子串数。  
例：

    "LEETCODE"  len=8
    计算'T'这个字符为答案贡献的数额
    首先找出只出现一次的区间[0,7]
    计算在最左端的距离3，可以以四个字符作为子串的开头：'L' 'E' 'E' 'T'
    计算在最右端的距离4，可以以五个字符作为子串的结束：'T' 'C' 'O' 'D' 'E'  
    随意组合4*5=20，因此'T'贡献20

看懂上面的之后继续往下看，给一个例子  

例：

    "LEETCODE"  len=8
    对于字符'L'，在区间[0,7]只出现一次，为答案贡献8(在该区间中,'L'可以存在于8个子串中)
    对于字符'E'，在区间[0,1]只出现一次，为答案贡献2
    对于字符'E'，在区间[2,6]只出现一次，为答案贡献5
    对于字符'T'，在区间[0,7]只出现一次，为答案贡献20
    对于字符'C'，在区间[0,7]只出现一次，为答案贡献20
    对于字符'O'，在区间[0,7]只出现一次，为答案贡献18
    对于字符'D'，在区间[0,7]只出现一次，为答案贡献14
    对于字符'E'，在区间[3,7]只出现一次，为答案贡献5
    ans=8+2+5+20+20+18+14+5=92

接下来只需要解决问题1，找到只出现一次的区间即可  

### 解决问题1，找到只出现一次的区间   
对于每一个字符，只需要记录区间左端点和右端点就可以找到这个区间了。   
用两个数组：left和right，分别记录左端点和右端点，都初始化为0    
一共只有26个字符，我们用一个长度为26的数组记录每一种字符上一次出现的位置   
用数组prev，记录上一次出现的位置   

寻找字符串"LEETCODE":

先找区间的左端点：  
首先初始化为-1，表示没有出现过  
然后从左往右遍历： 
例： 

    初始：
    prev: A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z
         -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
    left: 0 0 0 0 0 0 0 0

    对'L'操作：
    left:-1  0  0  0  0  0  0  0
    prev: A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z
         -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
    
    对'E'操作：
    left:-1 -1  0  0  0  0  0  0
    prev: A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z
         -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
    
    对'E'操作：
    left:-1 -1  1  0  0  0  0  0
    prev: A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z
         -1 -1 -1 -1  2 -1 -1 -1 -1 -1 -1  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
    后面同理

寻找区间的右端点：
首先初始化为8(len)，表示没有出现过  
然后从右往左遍历： 

    初始：
    prev: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
          8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8
    right:0 0 0 0 0 0 0 0

    对'E'操作:
    right:0 0 0 0 0 0 0 8
    prev: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
          8 8 8 8 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8

    对'D'操作:
    right:0 0 0 0 0 0 8 8
    prev: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
          8 8 8 6 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8

    对'O'操作:
    right:0 0 0 0 0 8 8 8
    prev: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
          8 8 8 6 7 8 8 8 8 8 8 8 8 8 5 8 8 8 8 8 8 8 8 8 8 8
    后面同理

你发现把 **left[i]+1,right[i]-1** 就是字符s[i]的区间，然后就可以轻易的求出答案    

### 代码

```cpp
class Solution {
public:
    int uniqueLetterString(string s) {
        int len=s.length();
        vector<int> left(len,-1);
        vector<int> right(len,-1);

        //求左端点
        vector<int> prev(26,-1);
        for(int i=0;i<len;i++){
            left[i]=prev[s[i]-'A'];
            prev[s[i]-'A']=i;
        }

        //求右端点
        for(int i=0;i<26;i++){
            prev[i]=len;
        }
        for(int i=len-1;i>=0;i--){
            right[i]=prev[s[i]-'A'];
            prev[s[i]-'A']=i;
        }

        //根据区间计算各字符的贡献
        long long int ans=0;
        for(int i=0;i<len;i++){
            ans=(ans+(i-left[i])*(right[i]-i))%1000000007;//计算
        }
        return ans;
    }
};
```

### 总结
双指针的解法，先从前扫到后，再从后扫到前  
时间复杂度100%   
空间复杂度60.61%    

写下题解，希望对大家有帮助，给个赞呗亲  