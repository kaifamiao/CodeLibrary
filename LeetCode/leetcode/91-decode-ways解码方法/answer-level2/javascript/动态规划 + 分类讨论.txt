&emsp;&emsp;本题中首先需要注意的是，后一个字符与前缀若干个字符的组合可以通过公式 $dp_i = dp_{i-1}+ dp_{i-2}$ 计算出来。原因很简单，如果后一个字符可以和前一个字符构成一个合法的字母序列，那么必存在两种情况。第一种情况下，仅选择当前字符生成字母，那么很明显组合数应当等于前一个字符的组合数 $dp_{i-1}$；第二种情况，选择前一个字符和当前字符共通构成一个字母，那么其组合数应当等于上上个字符的组合数 $dp_{i-2}$。把这两个组合数加在一起，就得到了当前的组合总数 $dp_i$，即上述的公式。

&emsp;&emsp;通过找规律的方法可以发现，这道题和动态规划求解斐波那契数列十分相似，核心公式都是 $dp_i = dp_{i-1}+ dp_{i-2}$，$dp_i$ 表示到某个序号 i 为止产生的组合总数。由于公式中涉及三项，所以我们必须先对 dp 数组进行初始化，如初始化 $dp=[1, 1]$，这样可以方便程序计算。

&emsp;&emsp;为了便于理解，我们可以把动态规划的求解过程看成是一个滑动窗口，窗口的大小为2，每次窗口向右滑动一格，窗口的结构可以看成 $w=[a_0, a_1]$，如下图所示：

![1.jpg](https://pic.leetcode-cn.com/e783d4e29e62448be6751d2b7b68dc588926dfe0f72756369f2da547d4894958-1.jpg)
{:align="center"}

&emsp;&emsp;由于0字符无法单独处理，我们需要对窗口中的数进行判断，可以先分四种情况进行讨论。
$$\begin{cases}
a_0=0, a_1  \not=0 \\
a_0=0,a_1=0  \\
a_0 \not=0, a_1=0 \\
a_0 \not=0, a_1 \not=0
\end{cases}$$
&emsp;&emsp;我们来分别讨论一下这几种情况下更新 dp 的方法：
1.  当$a_0=0$ 且 $a_1=0$，那么直接返回 0 即可，因为 00 无论如何也无法进行正确解析；
2. 当$a_0=0$ 且 $a_1\not=0$，可以考虑 103 这个数，在 03 的情况下和前缀只能产生一种组合，故而 $dp_i=dp_{i-1}$；
3. 当$a_0\not=0$，这种情况就比较复杂了，需要再分两种情况讨论：
$$\begin{cases}
int(a_0a_1) \le 26 \\
int(a_0a_1) \gt 26 
\end{cases}$$
1. 如果 $a_0\not=0$ 且 $a_1\not=0$ 且 $int(a_0a_1) \le 26$，那么直接套用 $dp_i=dp_{i-1}+dp_{i-2}$ 即可，因为无论是仅$a_1$还是$a_0a_1$都可以构成有效的字母；
2. 如果 $a_0\not=0$ 且 $a_1\not=0$ 且 $int(a_0a_1) \gt 26$，考虑 134 在 4 位置上 34 无法构成有效的字符，所以 4 只能单独存在，和前缀也只能组成一种组合，故而 $dp_i=dp_{i-1}$；
3. 当 $a_0\not=0$ 且 $a_1=0$ 且 $int(a_0a_1) \le 26$ ，考虑 120 在 0 位置上的 20 仅能构成一种组合，所以是$dp_i=dp_{i-2}$；
4. 最后，当$a_0\not=0$ 且 $a_1=0$ 且 $int(a_0a_1) \gt 26$ 的情况，考虑 170 在 0 位置上是和00一样无论如何也无法解析的，直接返回 0 即可。

综上，一共存在6种情况。编程和许多理工科的特点是类似的，只要分析清楚了，问题也就迎刃而解了。

代码实现如下所示：
```JavaScript []
var numDecodings = function(s) {
    if(s[0] == "0") return 0;
    let dp = [1, 1], len = s.length;
    for(let i=1; i < len; ++i) {
        if(s[i - 1] != "0") {
            let num = (s[i - 1] + s[i] | 0);
            if(num >= 1 && num <= 26) {
                dp[i + 1] = s[i] != "0"? dp[i - 1] + dp[i]: dp[i - 1];
            } else if(s[i] != "0") {
                dp[i + 1] = dp[i];
            } else {
                return 0;
            }
        } else if(s[i] != "0") {
            dp[i + 1] = dp[i];
        } else {
            return 0;
        }
    }
    return dp[len];
};
```