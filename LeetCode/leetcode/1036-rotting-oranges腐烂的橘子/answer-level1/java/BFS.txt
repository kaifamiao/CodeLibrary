## 994. 腐烂的橘子

### Information

* TIME: 2020/03/04
* LINK: [Click Here](https://leetcode-cn.com/problems/rotting-oranges/)
* TAG: `bfs`

### Description

> 在给定的网格中，每个单元格可以有以下三个值之一：
>
> 值 0 代表空单元格；
> 值 1 代表新鲜橘子；
> 值 2 代表腐烂的橘子。
> 每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。
>
> 返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。

### Example

```text
输入：[[2,1,1],[1,1,0],[0,1,1]]
输出：4

输入：[[2,1,1],[0,1,1],[1,0,1]]
输出：-1
解释：左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。
```

### My Answer

> BFS:
>
> * 统计未变质的橘子数量，同时将变质橘子压入队列
> * BFS，按层扩展，将未变质的橘子变质，减去相应数量
> * 如果没有剩下橘子，说明全部变质
>
> 特判：
>
> ```java
> //如果当前轮次没有橘子变质，直接跳出循环
> if(tmpNum == num) break;
> ```
>
> 当前层次遍历，没有橘子变质，可提前结束，此时天数**不能**`+1`

```java
class Point{
    public int x;
    public int y;
    public Point(int x, int y){
        this.x = x;
        this.y = y;
    }
}

class Solution {
    private int[][] dircts = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    public int orangesRotting(int[][] grid) {
        if(grid == null) return -1;
        int m = grid.length;
        int n = grid[0].length;
        LinkedList<Point> queue = new LinkedList<>();
        int num = 0;
        int ans = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1){
                    num++;
                }else if(grid[i][j] == 2){
                    queue.addLast(new Point(i, j));
                }
            }
        }

        while(!queue.isEmpty()){
            int size = queue.size();
            int tmpNum = num;
            for(int i = 0; i < size; i++){
                Point p = queue.pollFirst();
                for(int[] dirct : dircts){
                    int x = p.x + dirct[0];
                    int y = p.y + dirct[1];
                    if(x < 0 || x >= m || y < 0 || y >= n || grid[x][y] != 1) continue;
                    queue.addLast(new Point(x, y));
                    grid[x][y] = 2;
                    num--;
                }
            }
            //如果当前轮次没有橘子变质，直接跳出循环
            if(tmpNum == num) break;
            ans++;
            if(num == 0) break;
        }
        return num == 0? ans : -1;
    }
}
```

### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/4807c59141198230a3f2153522e4613f4d693ca5cfd269dc7ab0e750438acc29-file_1583307969324)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

