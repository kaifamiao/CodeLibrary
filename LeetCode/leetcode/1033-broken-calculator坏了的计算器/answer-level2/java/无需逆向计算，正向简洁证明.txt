**看官方题解和其他用户的题解都是各种逆向计算，其实这不必要，以下展示正向计算的思路。**

只需要讨论 Y > X时的情况。分为两步统计， cnt1为多少个乘法，cnt2为多少个减法。

显然我们必须把 X 乘到恰好比 Y 大的数，否则再怎么减也达不到要求……因此先求 cnt1.

那么，关键是 cnt2 怎么求呢？我们假设减法穿插在各个乘法之间，**如果在第一次乘法前减，那么最终等价于减去 $2^{cnt1}$, 如果在第二次乘法前减，最终等价于减去 $2^{cnt1 - 1}$，以此类推**。由于每次可以减多个1，因此最终要乘个系数，减了 a * $2^{cnt1}$ + b * $2^{cnt1 - 1}$ + ....

那么这个系数 a,b,c等等是多少呢，贪心即可，a越大越好，其次到b, c...


```java
class Solution {
    public int brokenCalc(int X, int Y) {
        if (Y <= X) return X - Y;
        int cnt1 = 0;
        while (X < Y) {
            X *= 2;
            cnt1 ++;
        }
        if (X == Y) return cnt1;
        int r = X - Y;
        int cnt2 = 0;
        for (int i = cnt1; i >= 0; i --) {
            int t = (int)Math.pow(2, i);
            int coeff = r / t;
            r = r % t;
            cnt2 += coeff;
            if (r == 0) break;
        }
        return cnt1 + cnt2;
    }
}
```
