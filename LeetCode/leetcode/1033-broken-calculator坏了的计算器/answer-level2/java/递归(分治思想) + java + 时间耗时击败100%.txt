## 思路分析
先分解来看,只能对 x 进行 -1 操作或者乘以 2
有一个可以明确的规则是能先 -1 就先 -1 
不然乘以 2 之后再 -1,相比较于 -1 之后再乘以 2,需要再进行一次 -1
例子:  5 -> 8   
先减再乘: (5 - 1) * 2 = 8      需要 2 次操作  
先乘再减:  5 * 2 - 1 - 1 = 8   需要 3 次操作

这个规则明确之后有以下几种情况
情况一 : X >= Y 直接返回 X - Y
情况二 : 当 Y 是奇数的时候,计算 X -> (Y+1) 的值再进行 -1 操作就可以了
情况三 : 当 X >= Y/2 返回 X - Y/2 + 1 (先执行 -1 操作到 Y 的一半,然后乘以2)
情况四 : 当 X < Y/2 计算 X -> Y/2 的值再进行一次操作就可以了(乘以2的操作)

## 代码
```
class Solution {
    public int brokenCalc(int X, int Y) {
        if (X >= Y){
            return X - Y;
        }
        if ((Y&1) == 1){
            return brokenCalc(X,Y+1)+1;
        }
        int temp = Y >> 1;
        if (X >= temp){
            return X - temp + 1;
        }
        return brokenCalc(X,temp)+1;
    }
}
```
