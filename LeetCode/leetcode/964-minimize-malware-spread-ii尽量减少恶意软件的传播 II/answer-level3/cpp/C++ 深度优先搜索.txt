```
class Solution {
public:
    void dfs(vector<vector<int> >& g, vector<bool>& visited, int i, vector<bool>& is_bad) {
        for (int j = 0; j < g.size(); ++j) {
            if (g[i][j] == 1 && !visited[j] && !is_bad[j]) {
                visited[j] = true;
                dfs(g, visited, j, is_bad);
            }
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        if (initial.size() == 1) return initial[0];
        int N = graph.size();
        vector<bool> visited(N, false);
        vector<bool> is_bad(N, false);
        for (auto i : initial) is_bad[i] = true;
        // srcs: -1: can not be reached
        // srcs: -2: can be reached by at least two initial nodes
        // srcs: >= 0 the src initial node that can reach
        vector<int> srcs(N, -1);
        for (auto i : initial) {
            fill(visited.begin(), visited.end(), false);
            dfs(graph, visited, i, is_bad);
            for (int j = 0; j < N; ++j) {
                if (srcs[j] == -2 || !visited[j]) continue;
                if (srcs[j] != -1) {
                    srcs[j] = -2;
                } else {
                    srcs[j] = i;
                }
            }
        }
        map<int, int> counts;
        for (auto i : initial) counts[i] = 0;
        for (int i = 0; i < N; ++i) {
            if (srcs[i] >= 0) {
                ++counts[srcs[i]];
            }
        }
        int max_count = 0;
        int max_ind = initial[0];
        for (auto& p : counts) {
            if (p.second > max_count || (p.second == max_count && p.first < max_ind)) {
                max_count = p.second;
                max_ind = p.first;
            }
        }
        return max_ind;
    }
};
```

![image.png](https://pic.leetcode-cn.com/9e60134776c8146f160c84b8d4fbbc7ebdfa7f3977ffa43e3d47c533e0dfb72b-image.png)
