思路：此题，乍一眼看上去，一点规律没有，甚至示例看起来都觉得莫名其妙，相信很多人看了这道题都会像我这么觉得，所以此题归属于明显的阅读理解加脑筋急转弯题型。<br/><br/>但是，如果我们从另一个角度去看此题，就会发现此题的意思所在了。于是我们尝试着倒着看示例，我们有一个数组，数组中元素不重复，且按照降序排列，我们称之为卡牌，初始值为[17,13,11,7,5,3,2]，我们有另一个队列，初始为空，我们每次将数组中未放入队列中的最大的数插入到队列中，然后我们把队首元素移到队尾，重复这个过程，直到数组中所有元素都被放入队列中为止。<br/>
第一次，我们选17，[17]->[17]<br/>
第二次，我们选13，[17, 13]->[13, 17]<br/>
第三次，我们选11，[13, 17, 11]->[17, 11, 13]<br/>
第四次，我们选 7，[17, 11, 13, 7]->[11, 13, 7, 17]<br/>
第五次，我们选 5，[11, 13, 7, 17, 5]->[13, 7, 17, 5, 11]<br/>
第六次，我们选 3，[13, 7, 17, 5, 11, 3]->[7, 17, 5, 11, 3, 13]<br/>
第七次，我们选 2，[7, 17, 5, 11, 3, 13, 2]，此时，数组中所有元素都在队列中，过程结束。我们需要将这个队列倒过来，于是我们便称这样的队列，是按递增顺序显示卡牌。<br/><br/>
于是解题代码如下：
```
class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        if (deck == null || deck.length < 1) {
            return deck;
        }
        
        Arrays.sort(deck);// 得到升序排列的数组
        
        Queue<Integer> queue = new LinkedList<>();
        for (int i = deck.length - 1;i >= 0;i--) {// 倒着遍历，便是按降序访问
            queue.add(deck[i]);// 选最大值插入队列
            if (i == 0) {// 数组中所有元素均在队列中，退出过程
                break;
            }
            
            queue.add(queue.poll());// 将队头元素插入到队尾中
        }
        
        for (int i = deck.length - 1;i >= 0;i--) {
            deck[i] = queue.poll();// 倒回去，得到answer
        }
        
        return deck;
    }
}
```