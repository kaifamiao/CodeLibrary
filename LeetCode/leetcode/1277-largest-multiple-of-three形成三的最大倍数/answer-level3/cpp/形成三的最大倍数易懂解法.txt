### 解题思路
思路大概讲一下：
我们先创建一个大小为10的数组y[10]={0,0,0,0,0,0,0,0,0,0}，接着遍历一遍向量，对应的位置就加一。
完成上面的工作我们就得到：y[i]是i在向量中出现的次数。
将0，1，2，3，4，5，6，7，8，9先分为2类数，一类是3的整数倍数，另一类是非3的整数倍数；第一类我们不用管，我们只管第二类就好。
对于1，2，4，5，7，8这6个数字，我们判断这6个数字与其各自出现次数的乘积的和：
sum=y[1]*1+y[2]*2+y[4]*4+y[5]*5+y[7]*7+y[8]*8;
学过数学的都知道，如果这个和等于3，那么由所有这些数字组成的数字是3的整数倍。
我们将这个和对3取余(sum%3),这时分三种情况。
1、恰好等于0
不做任何操作。
2、等于1
我们只要在对3取余等于1的那几个数字中删除一个就好。比如1、4、7，但是按照数字越大越好的规则，我们会优先删除1，然后是4和7。
但是会遇到一种情况，digits中没有1和4和7
这是我们转换思路，2个对3取余等于2的数的和，对3取余也是等于1的。比如 5%3=2; 8%3=2; (5+8)%3=1;
那么我们只要删除2个对3取余等于2的数，就能达到消除多余的1的效果。
也是按照数字越大越好的规则，我们会优先删除2，然后是5和8。
3、等于2
这种情况和上面那种情况有点相似。
我们优先删除1个对3取余等于2的，如果没有那样的数，那么我们删除2个对3取余等于1的，也可以达到同样的效果。

最后上面三种情况都遍历过了之后，将数字按从大到小的顺序依次输出就可以了。
有一种特殊情况就是输入[0,0,0,0,0,0,0]，按照我们上面的做法，会输出"0000000"，但实际是"0"
我们只要判断我们将要输出的字符串第一个是否为0，如果是，那就改成输出”0“；如果不是，那就直接输出。

执行用时 :16 ms, 在所有 C++ 提交中击败了100.00%的用户
内存消耗 :14.8 MB, 在所有 C++ 提交中击败了100.00%的用户
### 代码

```cpp
class Solution {
    
public:
    
    string largestMultipleOfThree(vector<int>& digits) 
    {
        int y[10]={0,0,0,0,0,0,0,0,0,0};
        for (int i=0;i<digits.size();i++)
        {
            y[digits[i]]=y[digits[i]]+1;
        }
        int sum=y[1]*1+y[2]*2+y[4]*4+y[5]*5+y[7]*7+y[8]*8;
        if(sum%3==0)
        {
            return num2string(y);
        }
        
        else if(sum%3==1)
        {
            if (y[1]!=0)
            {
                y[1]--;
            }
            else if (y[4]!=0)
            {
                y[4]--;
            }
            else if (y[7]!=0)
            {
                y[7]--;
            }
            else
            {
                int tmp=2;
                while(tmp>0 && y[2]!=0)
                {
                    tmp--;
                    y[2]--;
                }
                while(tmp>0 && y[5]!=0)
                {
                    tmp--;
                    y[5]--;
                }
                while(tmp>0 && y[8]!=0)
                {
                    tmp--;
                    y[8]--;
                }
            }
            return num2string(y);
        }
        else if(sum%3==2)
        {
            if (y[2]!=0)
            {
                y[2]--;
            }
            else if (y[5]!=0)
            {
                y[5]--;
            }
            else if (y[8]!=0)
            {
                y[8]--;
            }
            else
            {
                int tmp=2;
                while(tmp>0 && y[1]!=0)
                {
                    tmp--;
                    y[1]--;
                }
                while(tmp>0 && y[4]!=0)
                {
                    tmp--;
                    y[4]--;
                }
                while(tmp>0 && y[7]!=0)
                {
                    tmp--;
                    y[7]--;
                }
            }
            return num2string(y);
        }
        
        return num2string(y);
    }
    string num2string(int y[10])
    {
        string num="";
            for(int i=9;i>=0;i--)
            {
                while(y[i]>0)
                {
                    num.append(to_string(i));
                    y[i]=y[i]-1;
                }
            } 
        if (num.substr(0,1)=="0")
            return "0";
        return num;
    }
};
```