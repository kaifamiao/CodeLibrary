
```
[[10,14],[25,35],[17,27],[33,44],[4,15],[3,22],[66,90],[72,89]]  <- 输入

[[3,22],[4,15],[10,14],[17,27],[25,35],[33,44],[66,90],[72,89]]  <- 按首数字排序后

[[3,22],[17,27],[25,35],[33,44],[66,90],[72,89]]  <- 利用栈合并重叠区间，执行到 [10,14] 时

[[3,44],[66,90],[72,89]] <- 执行到 [33,44] 时

[[3,44],[66,90]]  <- 执行完时
```

### 思路

- 标签：`栈`
- 需要根据每个数字的区间**先排序**，如果没有想到这个，基本上没法做了
- 再需要利用栈，利用跟栈顶元素比较来判断是否重叠
  - 将数组第一组元素作为初始值构建一个栈
  - 栈顶元素依次跟数组其他元素比较，如果左侧元素大于栈顶元素，入栈
  - 如果左侧元素小于**等于**栈顶元素，且右侧元素也小于等于栈顶元素，说明当前区间被包含
  - 如果左侧元素小于等于栈顶元素，右侧元素大于栈顶元素，那么就弹出栈顶元素，压入右侧元素
- 时间复杂度：O(n)，不算排序

### 代码

```Python []
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        if len(intervals) == 0:
            return None
        intervals.sort()
        stack = [intervals[0][0], intervals[0][1]]
        for i in range(1, len(intervals)):
            if intervals[i][0] <= stack[-1]:
                if intervals[i][1] <= stack[-1]:
                    continue
                else:
                    stack.pop()
                    stack.append(intervals[i][1])
            else:
                stack.append(intervals[i][0])
                stack.append(intervals[i][1])
        res = []
        for i in range(0, len(stack), 2):
            res.append([stack[i], stack[i + 1]])
        return res
```


