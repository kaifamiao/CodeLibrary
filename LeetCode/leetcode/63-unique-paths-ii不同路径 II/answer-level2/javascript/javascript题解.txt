[62.不同路径二](https://leetcode-cn.com/problems/unique-paths-ii/submissions/)

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md) 


```javascript
/**
 * @param {number[][]} obstacleGrid
 * @return {number}
 */
var uniquePathsWithObstacles = function(obstacleGrid) {
    if (obstacleGrid === null || obstacleGrid.length <= 0) {
        return 1;
    }
    let m = obstacleGrid.length,
        n = obstacleGrid[0].length;
    // 初始化dp数组
    let dp = new Array(m);
    for (let i = 0; i < m; i++) {
        dp[i] = new Array(n).fill(0);
    }
    let rowTag = true,
        colTag = true;
    for (let i = 0; i < n; i++) {
        if (obstacleGrid[0][i] === 1) {
            rowTag = false;
        }
        if (obstacleGrid[0][i] === 0 && rowTag) {
            dp[0][i] = 1;
        } else {
            dp[0][i] = 0;
        }
    }
    for (let i = 0; i < m; i++) {
        if (obstacleGrid[i][0] === 1) {
            colTag = false;
        }
        if (obstacleGrid[i][0] === 0 && colTag) {
            dp[i][0] = 1;
        } else {
            dp[i][0] = 0
        }
    }
    
    for (let i = 1; i < m; i++) {
        for (let j = 1; j < n; j++) {
            if (obstacleGrid[i][j] === 0) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            } 
        }
    }
    return dp[m-1][n-1]
};
```

## 空间复杂度的优化

```javascript
/**
 * @param {number[][]} obstacleGrid
 * @return {number}
 */
var uniquePathsWithObstacles = function(obstacleGrid) {
    if (obstacleGrid[0][0] === 1) return 0;
    let m = obstacleGrid.length,
        n = obstacleGrid[0].length;
    let dp = new Array(n).fill(0);
    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            if (i === 0 && j === 0) {
                dp[j] = 1;
            }
            if (obstacleGrid[i][j] === 1) {
                dp[j] = 0;
            } else if (j > 0){
                dp[j] = dp[j] + dp[j-1];
            }
        }
    }
    return dp[n-1];
};
```