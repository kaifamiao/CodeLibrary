## 25.K 个一组翻转链表

### Information

* TIME: 2020/03/15
* LINK: [Click Here](https://leetcode-cn.com/problems/reverse-nodes-in-k-group/)
* TAG: `List`

### Description

> 给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。
>
> k 是一个正整数，它的值小于或等于链表的长度。
>
> 如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。

### Example

```text
示例：

给你这个链表：1->2->3->4->5

当 k = 2 时，应当返回: 2->1->4->3->5

当 k = 3 时，应当返回: 3->2->1->4->5
```

### My Answer

> 借助链表反转的思路
>
> 每次先找到`k`个节点后的节点`end`
>
> 从`cur`遍历到`end`执行头插，定义虚拟头指针
>
> 将反转后的链表接到当前虚拟尾`tmpCur`的后面
>
> * 在`cur` - `end`链表反转前，保存`cur`，因为反转后cur节点出现在链表尾，可定位到下一次`tmpCur`（也就是尾巴的位置）
> * 特判，如果走不到`k`步，不足`k`不反转，直接接到`tmpCur`

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode cur = head;
        ListNode tmpHead = new ListNode(-1);
        ListNode tmpCur = tmpHead;
        while(cur != null){
            int cnt = 0;
            ListNode end = cur;
            while(end != null && cnt != k){
                ++cnt;
                end = end.next;
            }
            if(cnt == k){
                ListNode pre = null;
                ListNode tmpEnd = cur;

                while(cur != end){
                    ListNode tmp = cur.next;
                    cur.next = pre;
                    pre = cur;
                    cur = tmp;
                }
                tmpCur.next = pre;
                tmpCur = tmpEnd;
                tmpCur.next = null;
            }else{
                tmpCur.next = cur;
                break;
            }
        }
        return tmpHead.next;
    }
}
```

### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/725bfdd86417b1e68675f4cb952e81a9ed12d222c8252e2699daa0012420ef6f-file_1584278943199)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

