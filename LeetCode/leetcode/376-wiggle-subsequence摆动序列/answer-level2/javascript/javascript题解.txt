[376.摆动序列](https://leetcode-cn.com/problems/wiggle-subsequence/submissions/)

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md) 

## 贪心算法

```javascript
/**
 * @param {number[]} nums
 * @return {number}
 */
var wiggleMaxLength = function(nums) {
    if (nums.length < 2) {
        return nums.length;
    }
    
    let prediff = nums[0] - nums[1];
    let count = prediff === 0 ? 1 : 2;
    
    for (let i = 0; i < nums.length-1; i++) {
        let diff = nums[i] - nums[i+1];
        if ((diff > 0 && prediff <= 0) || (diff < 0 && prediff >= 0)) {
            count++;
            prediff = diff
        }
    }
    return count
};
```

## 动态规划的空间优化

```javascript
/**
 * @param {number[]} nums
 * @return {number}
 */
var wiggleMaxLength = function(nums) {
    if (nums.length < 2) {
        return nums.length;
    }
    
    let up = 1,
        down = 1;
    for (let i = 0; i < nums.length-1; i++) {
        if (nums[i] > nums[i+1]) {
            up = down + 1;
        } else if (nums[i] < nums[i+1]) {
            down = up + 1;
        }
    }
    return Math.max(up, down);
};
```
