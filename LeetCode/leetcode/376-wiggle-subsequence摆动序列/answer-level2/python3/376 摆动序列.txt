* 使用动态规划求解。动态规划适用于求解「是否」，「有几种」这类型的问题，而如果一个问题要问为什么可以，可以的路径是什么；具体解决问题的各种方案是什么时，动态规划就不适用了。
* 动态规划类的问题求解有几个要素：1.状态，明确状态的含义是什么；2. 转移方程，当前状态转移到下一个状态的条件是什么；3.结果，求解的结果和状态之间的关系是什么。
* 关于这道题目，状态是：使用一个一维数组 dp，dp 的每一个元素都是一个有两个元素的数组，dp\[i]\[0] 表示以给定的数组 nums 中的 nums\[i] 作为最后一个数来形成的最长摆动序列；此时最后一个数与前一个数之间的差值符号（用 1，-1，0 表示，1 表示 nums\[i] - nums\[j] >0；-1 表示 nums\[i] - nums\[j] <0； 0 此时序列只有一个数）；dp\[i]\[1] 表示此时形成的最长摆动序列的长度；
* 转移方程：假设我们已经知道了 dp 的前 i-1 个结果，也就是说以 nums\[i-1] 作为摆动序列的最后一个元素，此时的摆动序列长度，与上一个数的差值符号已经知道；以 nums\[i-1] 作为摆动序列的最后一个元素，此时的摆动序列长度，与上一个数的差值符号已经知道 ... nums\[0] ... 已经知道；为了求解 dp\[i],我们从 nums\[i-1] 开始向前遍历，找到一个数 nums\[j] 使得，(nums\[i] - nums\[j]) 与 dp\[j]\[0] 的乘积小于 0，说明 nums\[i] 可以追加到以 nums\[j] 作为结尾的摆动序列后面，于是我们将 dp\[i]\[1] 置为 dp\[j]\[1] + 1;要注意的是，如果乘积等于 0，但是 nums\[i] - nums\[j] 不为 0，说明以 nums\[j] 作为结尾的只有一个数，此时也应当更新 dp\[i]\[1] 置 dp\[j]\[1] + 1；
* 结果：dp\[-1]\[0]