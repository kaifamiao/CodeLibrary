&emsp;&emsp;看到已经有很多人提出了很多种解法了，在此我就做一个小小的补充，以及思考的方法，我觉得知道程序怎么写并不重要，重要的是程序是怎么被设计出来的，程序在没写出来之前，在大脑中又是如何构思的。科学家总是喜欢把美丽的结果呈现在世人的眼前，而抹去推论时的线索和草稿，就好比盖好的大厦会拆除其脚手架，令人惊叹其成就，却无法学到真正思想的瑰宝。

&emsp;&emsp;简单来说，这道题其实是一个集合问题，假设有一个集合 $[e_1, e_2, ... , e_n]$ 。那么，其子集无非是 $[e_1(选 or 不选), e_2(选 or 不选), ... , e_n(选 or 不选)]$。

&emsp;&emsp;由于数组的长度可以为无限大，这让我们无从下手。不过，算法毕竟是逐步实现的，我们可以从小规模的问题入手。这时，我们把问题规模缩小一点，减少我们思考的范围。先思考一个元素，那无非就是选和不选，我们假定一开始数组是空的，那么在做完第一次选择之后，应该有两个数组$[[], [e_1]]$。然后，我们再考虑第二个元素，则有$[[], [e_1], [e_2], [e_1, e_2]]$。发现了吗？这里存在一个规律，$[[]] \rightarrow [[], [e_1]] \rightarrow [[], [e_1], [e_2], [e_1, e_2]]$，每次做选择之后的结果都是在上一步已知的集合上进行扩充得到的，即$当前的集合_i  = 集合_{i-1} \bigcup 从集合_{i-1}扩充后的集合$。那么，扩充的方式就是对$集合_{i-1}$中的每个子集加上一个新的元素$e_i$。

```javascript
var subsets = function(nums) {
    let ws = [[]];
    for(let i=0; i < nums.length; ++i) {
        for(let j=0, len = ws.length; j < len; ++j) {
            ws.push(ws[j].concat([nums[i]]));
        }
    }
    return ws;
};
```