
> 首发于 [http://xlindo.com/posts/8d34e813/](http://xlindo.com/posts/8d34e813/)
> 所有文章遵循[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)许可协议。请按许可使用。
串。

## 2 解题思路 - 动态规划解法

> 这个题真是费了很多心思。

最重要的一步是确定**状态转移方程**。

### 2.1 预设

* `res[j][i]`，`p[0:j]`与`s[0:i]`的匹配结果，`True`或者`False`
* `p[j]`，`p`的第`j`个字符，转移表中的行坐标
* `s[i]`，`s`的第`i`个字符，转移表中的列坐标

要建立的转移矩阵大概是下表这个感觉

|          | s[0] | s[1] | ...  | s[n] |
| :------: | :--: | :--: | :--: | :--: |
| **p[0]** |  T   |  T   |  T   |  T   |
| **p[1]** |  T   |  T   |  T   |  T   |
|   ...    |  T   |  T   |  T   |  T   |
| **p[m]** |  T   |  T   |  T   |  T   |


**注意**，文中的`i,j`位置的程序实现并不一定精确，主要用来阐述相对位置。即`i, j`表示当前位置，而`i-1, j-1`表示前一个位置。

### 2.2 情况分析

这里要考虑的点还比较琐碎，所以就以要取得一个匹配成功的结果为出发点，所举例证也都是对最后一个字符的匹配判断。这，要考虑**两大类，总共`4`小类情况**：

1. **`p[j]`不是`'*'`（情况1）**，即`p[j] == 'a~z' or p[j] == '.'`，此时只比较对应位置的单个字符。如果匹配，则只要之前的串能匹配，即`res[j-1][i-1]`为`True`，那么`res[j][i]`为`True`，否则为`False`。代码为：
```python
if p[j] != '*':
    if s[i] == p[j] or p[j] == '.':
        res[j][i] = res[j-1][i-1]
```
2. **`p[j]`为`'*'`**：因为`'[a~z]*' or '.*'`可以匹配零个或多个字符，所以要考虑分析`p`中`'*'`与上一个字符的组合，即`'[]*'`与当下`s[i]`的匹配情况，所以总是会考虑`p[j-1] ~ s[i]`。例如：
    * **`0`次匹配（情况2）：** 这种情况简单，例如`s = "aa", p = "aac*"`，这里使用`'c*'`匹配了`0`次。又如`s = "a", p = "aa*"`中的`'a*'`匹配`0`次。后面为了便于程序实现，将情况2.2纳入了情况3的分析。
      * 前一例 **（情况2.1）**，因为`p[j-1] != s[i]`，`'[]*'`组合实际上没有用，所以当前位置的结果就是组合之前的结果，就是`p[0:j-2]`与`s[0:i]`的匹配结果，**`res[j][i] = res[j-2][i]`；**
      * 第二例 **（情况2.2）**，虽然`p[j-1] == s[i]`，但`'[]*'`组合实际上没有作用，同样地，**`res[j][i] = res[j-2][i]`。**
    * **多次匹配（情况3）：** 例如`s = "aaa", p = "a*"`，这里`'a*'`匹配了`3`次`'a'`。
      * 此时，只要`s[i] == s[i-1]`，那么`p`中`'[]*'`组合要是能匹配前一个位置的`s[i-1]`，就也能匹配当前位置的`s[i]`。所以`res[j][i]`的结果不变，**即`res[j][i] = res[j][i-1]`。**



综上，由于要使用清晰的判断过程实现，所以分为了4种情况。即对于每一个位置的`res[j][i]`，其判断流程为：

```python
if p[j] != '*':
    # 情况1
    if s[i] == p[j] or p[j] == '.':
        res[j][i] = res[j-1][i-1]
else: 
    if p[j-1] == s[i] or p[j-1] == '.':
        # 情况3 or 情况2.2
        res[j][i] = res[j][i-1] or res[j-2][i]
    else:
        # 情况2.1
        res[j][i] = res[j-2][i]
```

这里还需要注意避免陷入前一步匹配结果的嵌套思考。因为动态规划的思想即是当下的推理就是建立在之前的结果之上的，考虑好当下的结果和转移方程，就是考虑了之后的判断基础。

### 2.3 程序实现上的考虑

上面虽然考虑到了各种情况，但在实际的实现中，还需要

1. 将要建立的表扩大一个位置，以表示`p[0:0]`和`s[0:0]`的匹配结果，`res[0][0]`总为`True`；
2. 在输入的字符串前加个相同的字符，比如空格`'  '`。

第一点很好理解，因为不那么做，判断`[j-2]`的时候可能就会溢出。这里说一下第二点。  

例如，`s = "aa", p = "a*"`，按照第一点和之前的推导，建立的$3\times 3$（不考虑标题栏，表中`0`为`False`，`1`为`True`）的表在`res[2][1]`将会是`0`，而这是不对的。

|         |      |   ‘a'   | 'a'  |
| :-----: | :--: | :-----: | :--: |
|         |  1   |    0    |  0   |
| **'a'** |  0   |    1    |      |
| **'*'** |  0   | ***0*** |      |

因为此时，还没有`res[j][i-1] or res[j-2][i]`的结果，其判断依据是初始化矩阵时填的`0`，这是错误的，尤其是对于`p=[]*`的情况，正确的值应该为`1`。

所以，若要给出正确的初始填值，考虑给一个相同的首字符来制造初始判断根据，这将不会影响最终的结果。于是对于`s = " aa", p = " a*"`，建立的$4\times 4$的表为

|         |      | **' '** | **'a'** | **'a'** |
| :-----: | :--: | :-----: | :-----: | :-----: |
|         |  1   |    0    |    0    |    0    |
| **' '** |  0   |    1    |    0    |    0    |
| **'a'** |  0   |    0    |    1    |    0    |
| **'*'** |  0   | ***1*** |    1    |    1    |

可以看到，`" a*"`与`" "`的匹配结果为`1`，给后面的判断提供了正确的初始依据。

## 3 代码

代码的坐标最终没有改成特别舒服的写法，其中`p`和`j`总是对应为某行，而`s`和`i`总对应为某列。因为循环从`1`开始，所以`s, p`的坐标要`-1`。

```python
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        s = ' ' + s
        p = ' ' + p
        len_s, len_p = len(s), len(p)
        res = [[0 for _ in range(len_s+1)] for _ in range(len_p+1)]
            
        res[0][0] = 1

        for i in range(1, len_s+1):
            for j in range(1, len_p+1):
                if p[j-1] != '*':
                    if s[i-1] == p[j-1] or p[j-1] == '.':
                        res[j][i] = res[j-1][i-1]
                else:
                    if p[j-2] == s[i-1] or p[j-2] == '.':
                        res[j][i] = res[j][i-1] or res[j-2][i]
                    else:
                        res[j][i] = res[j-2][i]

        return True if res[-1][-1] else False
```



应该所有情况都是考虑到了。若有不对的地方，请务必帮助我指出，谢谢。