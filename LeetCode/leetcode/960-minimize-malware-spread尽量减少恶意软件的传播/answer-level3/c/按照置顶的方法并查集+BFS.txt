```
int FindRoot(int *queue, int x) 
{
    while (queue[x] != x) {
        x = queue[x];
    }
    return x;
}

bool Union(int *queue, int x, int y) 
{
    int rootX = FindRoot(queue, x);
    int rootY = FindRoot(queue, y);
    if (rootX == rootY) {
        return false;
    } else {
        queue[rootY] = rootX;
        return true;
    }
}
void Succ(int *i, int size)
{
    *i = (*i + 1) % size;
}
int minMalwareSpread(int** graph, int graphSize, int* graphColSize, int* initial, int initialSize){
    if (graphSize == 0 || initialSize == 0) {
        return 0;
    }
    int uf[graphSize];
    int flag[graphSize];
    int conn[initialSize];
    memset(flag, 0, sizeof(int) * graphSize);
    memset(conn, 0, sizeof(int) * initialSize);
    for (int i = 0; i < graphSize; i++) {
        uf[i] = i;
    }

    for (int i = 0; i < initialSize; i++) {
        if (uf[initial[i]] != initial[i]) {
           
            conn[i] = 0;
            int root = FindRoot(uf, initial[i]);
            for (int j = 0;j < i;j++) {
                if (initial[j] == root) {
                    conn[j] = 0;
                    break;
                }
            }
            continue;
        }
        int init = initial[i];
        int queue[graphSize];
        int front = 0;
        int rear = 0;

        queue[rear] = init;
        conn[i]++;
        flag[init] = 1;
        Succ(&rear, graphSize);

        while (front != rear) {
            int tmp = queue[front];
            Succ(&front, graphSize);

            for (int j = 0;j < graphSize;j++) {
                if (flag[j] == 0 && graph[tmp][j] == 1) {
                    conn[i]++;
                    queue[rear] = j;
                    flag[j] = 1;
                    Succ(&rear, graphSize);
                    Union(uf, tmp, j);
                }
            }
        }

    }

    int res = 0;

    for (int i = 0; i < initialSize;i++) {
        if (conn[i] > conn[res]) {
            res = i;
        } else if (conn[i] == conn[res]) {
            if (initial[i] < initial[res]) {
                res = i;
            }
        }
    }
    return initial[res];
}
```
