### 解题思路
此处撰写解题思路

### 代码

```c
#define MIN(x, y) ((x) < (y)) ? (x) : (y)

void dfs(int** graph, int graphSize, int node, int* num, int numbers)
{
    num[node] = numbers;
    for (int j = 0; j < graphSize; j++) {
        if (graph[node][j] == 1 && num[j] == -1) {
            dfs(graph, graphSize, j, num, numbers);
        }
    }
    return;
}

int minMalwareSpread(int** graph, int graphSize, int* graphColSize, int* initial, int initialSize){
    
    int *num = calloc(graphSize, sizeof(int));
    memset(num, -1, graphSize*sizeof(int)); /* 初始化状态为-1, 表示未搜索过 */
    int numbers = 0;

    for (int i = 0; i < graphSize; i++) {
        if (num[i] == -1) {
            dfs(graph, graphSize, i, num, numbers++);
        }
    }    

    for (int i = 0; i < graphSize; i++) {
        printf("num %d\n", num[i]);
    }
    printf("numbers %d\n",numbers);

    int *size = (int *) calloc(numbers, sizeof(int));
    for (int i = 0; i < graphSize; i++) {
        size[num[i]]++;
        printf("idex(%d), num(%d), size %d\n", i, num[i], size[num[i]]);
    }

    int *colorCount = (int *) calloc(numbers, sizeof(int));
    for (int i = 0; i < initialSize; i++) {
        colorCount[num[initial[i]]]++;
        printf("idex(%d), num(%d), color %d\n", i, num[i], colorCount[num[initial[i]]]);
    }

    int ans = INT32_MAX;
    for (int i = 0; i < initialSize; i++) {
        int c = num[initial[i]];
        if (colorCount[c] == 1) {
            if (ans == INT32_MAX)
                ans = initial[i];
            else if (size[c] > size[num[ans]])
                ans = initial[i];
            else if (size[c] == size[num[ans]] && initial[i] < ans)
                ans = initial[i];
        }
    }

    if (ans == INT32_MAX)
        for (int i = 0; i < initialSize; i++) {
            ans = MIN(ans,initial[i]);
        }
    return ans;
}
```