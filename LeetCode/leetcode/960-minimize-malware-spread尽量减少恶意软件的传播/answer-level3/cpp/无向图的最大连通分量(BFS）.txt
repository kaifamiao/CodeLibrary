```
class Solution {
public:        
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int ans = INT_MAX;
        int maxNode = 0;
        vector<bool> visit(n,false);
        set<int> find;
        vector<int> count;
        vector<vector<int>> island;
        queue<int> qu;
        
        for(auto p : initial){
            find.insert(p);
        }
        
        for(auto p : initial){
            if(!visit[p]){
                vector<int> t;
                visit[p] = true;
                qu.push(p);
                t.push_back(p);
                int cnt = 1;
                
                while(!qu.empty()){
                    int curr = qu.front();
                    qu.pop();
                    
                    for(int i = 0;i < n; ++i){
                        if(!visit[i]&&graph[curr][i]){
                            qu.push(i);
                            visit[i] = true;
                            cnt++;
                            if(find.count(i)){
                                t.push_back(i);
                            }
                        }
                    }
                }
                island.push_back(t);
                count.push_back(cnt);
            }
        }
        
        for(int i = 0;i < island.size(); ++i){
            if(island[i].size() == 1){
                if(maxNode == count[i]){
                    ans = min(ans,island[i][0]);
                }else if(maxNode < count[i]){
                    maxNode = count[i];
                    ans = island[i][0];
                }
            }
        }
        
        if(ans == INT_MAX){
            for(auto p : initial){
                ans = min(ans,p);
            }
        }
        
        return ans;
    }   
};
```
