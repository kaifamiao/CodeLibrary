[减少恶意软件传播I](https://leetcode-cn.com/problems/minimize-malware-spread/)  
[减少恶意软件传播II](https://leetcode-cn.com/problems/minimize-malware-spread-ii/)

1. 将`graph`转换为一个`map`，用来记录与`key`联通的所有点(不包括`key`本身)，例如：`map.get(0)`表示所有与`0`相邻的点  
2. 将`initial`排序  
3. `dfs`或者`bfs`计算删除其中某一个点之后终状态对应的被恶意软件感染的点的数目  
4. 取上一步计算结果中最小值对应的节点



减少恶意软件传播`I`、`II`，唯一区别就是`count`方法中带注释的条件了:
```javascript
var minMalwareSpread = function(graph, initial) {
    let map = new Map();
    let N = graph.length;
    for(let i=0;i<graph.length;i++){
        for(let j=i+1;j<graph.length;j++){
            if(graph[i][j]===1){
                let connects = map.get(i)||[];
                connects.push(j);
                map.set(i,connects);
                
                connects = map.get(j)||[];
                connects.push(i);
                map.set(j,connects);
            }
        }
    }
    
    let result = Infinity;
    let ansNode;
    initial.sort((a,b)=>a-b);
    for(let i=0;i<initial.length;i++){
        let val = initial.splice(i,1)[0];
        let ans = count(new Set(initial),initial.concat([]),val);
        if(ans<result){
            result=ans;
            ansNode=val;
        }
        initial.splice(i,0,val);
    }
    return ansNode;
    
    function count(visited,stack,val){
        while(stack.length>0){
            let node = stack.shift();
            let next = map.get(node);
            if(!next)continue;
            for(let nn of next){
                 //与减少恶意软件传播I唯一的区别就是这个条件`nn!=val`若没这个条件就是`I`的答案了
                if(!visited.has(nn) && nn!=val){
                    visited.add(nn);
                    stack.push(nn);
                }
            }
        }
        return visited.size;
    }
};
```