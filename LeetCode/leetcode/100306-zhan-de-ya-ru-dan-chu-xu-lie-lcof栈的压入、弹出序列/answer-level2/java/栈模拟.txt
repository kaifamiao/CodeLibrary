## 31.栈的压入弹出序列

### Information

* TIME: 2020/02/15
* LINK: [Click Here](https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/)
* TAG: `Stack`

### Description

> 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。

### Example

```text
输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
输出：true
解释：我们可以按以下顺序执行：
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1
```

### My Answer

> 模拟
>
> 把`pushed`序列模拟入栈，当遇到栈顶元素等于`poped[idx]`，模拟出栈过程，如果能匹配（idx能指向序列末尾），那么`poped`是压栈序列的弹出序列

```java
class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        if(pushed == null || popped == null || pushed.length != popped.length){
            return false;
        }
        Stack<Integer> stack = new Stack<>();
        int num = popped.length;
        int idx = 0;
        for(int e : pushed){
            stack.push(e);
            while(idx < num && !stack.isEmpty() && stack.peek() == popped[idx]){
                stack.pop();
                idx++;
            }
            if(idx >= num) break;
        }

        return idx == num;
    }
}
```

### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/da53295ed42bbc5c5d94023d6a07aef4d482e15d0383e748473876b875d34080.png)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

