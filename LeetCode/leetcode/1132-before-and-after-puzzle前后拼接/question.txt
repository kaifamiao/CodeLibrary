before-and-after-puzzle
给你一个「短语」列表<code>phrases</code>，请你帮忙按规则生成拼接后的「新短语」列表。

「短语」（phrase）是仅由小写英文字母和空格组成的字符串。「短语」的开头和结尾都不会出现空格，「短语」中的空格不会连续出现。

「前后拼接」（Before and Afterpuzzles）是合并两个「短语」形成「新短语」的方法。我们规定拼接时，<strong>第一个短语的最后一个单词</strong> 和 <strong>第二个短语的第一个单词</strong> 必须相同。

返回每两个「短语」<code>phrases[i]</code>和<code>phrases[j]</code>（<code>i != j</code>）进行「前后拼接」得到的「新短语」。

注意，两个「短语」拼接时的顺序也很重要，我们需要同时考虑这两个「短语」。另外，同一个「短语」可以多次参与拼接，但「新短语」不能再参与拼接。

请你按字典序排列并返回「新短语」列表，列表中的字符串应该是 <strong>不重复的</strong> 。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>phrases = [&quot;writing code&quot;,&quot;code rocks&quot;]
<strong>输出：</strong>[&quot;writing code rocks&quot;]
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>phrases = [&quot;mission statement&quot;,
                &quot;a quick bite to eat&quot;,
               &quot;a chip off the old block&quot;,
               &quot;chocolate bar&quot;,
               &quot;mission impossible&quot;,
               &quot;a man on a mission&quot;,
               &quot;block party&quot;,
               &quot;eat my words&quot;,
               &quot;bar of soap&quot;]
<strong>输出：</strong>[&quot;a chip off the old block party&quot;,
     &quot;a man on a mission impossible&quot;,
     &quot;a man on a mission statement&quot;,
     &quot;a quick bite to eat my words&quot;,
      &quot;chocolate bar of soap&quot;]
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>phrases = [&quot;a&quot;,&quot;b&quot;,&quot;a&quot;]
<strong>输出：</strong>[&quot;a&quot;]
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= phrases.length &lt;= 100</code>
	<code>1 &lt;= phrases[i].length &lt;= 100</code>
</ul>

前后拼接
Given a list of <code>phrases</code>, generate a list ofBefore and After puzzles.

A <em>phrase</em> is a string that consists of lowercase English letters and spaces only. No space appears in the start or the end of a phrase. There areno consecutive spacesin a phrase.

<em>Before and Afterpuzzles</em> are phrases that are formed by mergingtwo phrases where the <strong>lastword of the firstphrase</strong> is the same as the <strong>first word of the second phrase</strong>.

Return theBefore and Afterpuzzles that can be formed by every two phrases<code>phrases[i]</code>and<code>phrases[j]</code>where<code>i != j</code>. Note that the order of matching two phrases matters, we want to consider both orders.

You should return a list of<strong>distinct</strong>strings <strong>sortedlexicographically</strong>.


<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> phrases = [&quot;writing code&quot;,&quot;code rocks&quot;]
<strong>Output:</strong> [&quot;writing code rocks&quot;]
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> phrases = [&quot;mission statement&quot;,
                  &quot;a quick bite to eat&quot;,
                 &quot;a chip off the old block&quot;,
                 &quot;chocolate bar&quot;,
                 &quot;mission impossible&quot;,
                 &quot;a man on a mission&quot;,
                 &quot;block party&quot;,
                 &quot;eat my words&quot;,
                 &quot;bar of soap&quot;]
<strong>Output:</strong> [&quot;a chip off the old block party&quot;,
        &quot;a man on a mission impossible&quot;,
        &quot;a man on a mission statement&quot;,
        &quot;a quick bite to eat my words&quot;,
         &quot;chocolate bar of soap&quot;]
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input:</strong> phrases = [&quot;a&quot;,&quot;b&quot;,&quot;a&quot;]
<strong>Output:</strong> [&quot;a&quot;]
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= phrases.length &lt;= 100</code>
	<code>1 &lt;= phrases[i].length &lt;= 100</code>
</ul>
