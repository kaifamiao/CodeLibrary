相信同学在看官方题解里面的数学方法里面时，会看到这样的式子：
$$\sqrt{2 C+\frac{1}{4}}-\frac{3}{2}<p \leq \sqrt{2 C+\frac{1}{4}}-\frac{1}{2}$$
或者是这个代码：
```
p = int((2 * candies + 0.25)**0.5 - 0.5)
```

**“我擦，这是什么鬼？？？”**
**“咦！这玩意到底咋来的？”**

我猜不少同学内心会这样想，我第一次看见数学解法的代码时也是一脸懵逼的。本帖会详细讲解我是怎么理解这个数学方法的，以及数学方法里面的每一步是怎么得到的，希望能帮助大家顺利理解。这里首先过一遍普通方法，这会帮大家加深对题目各个要素的记忆。<br><br>
### 1. 普通方法
### 思想：对小朋友们进行遍历，每次都发小朋友们应得数量的糖，直到剩下的糖不足以分发应得数量，就直接给最后那位倒霉孩子
- 代码实现时，有一些细节技巧，大家可以仔细品一品
```
class Solution:
    def distributeCandies(self, candies: int, num_people: int) -> List[int]:
        # 给小朋友们每人发个碗，用于装糖
        kids = [0] * num_people
        # 初始化第一轮
        i = 0

        # 只要糖还有，咱就继续发
        while candies > 0:
            # 这个i%num_people就很棒，随着i的增长，i对num_people进行取余数
            # 返回的数会一直是相应小朋友的正确下标
            # 用+=进行累加每一轮的新发的糖果
            # min的作用是，如果有一天糖不够了，就把那些最后剩余的糖给最后那个孩子
            kids[i % num_people] += min(i + 1, candies)
            
            # 手中糖的数量要记得减去每次发糖的数量
            candies -= i + 1
            # 这个小朋友发完了，下一位
            i += 1

        return kids
```

### 2. 数学方法
### 主要思想：给小朋友们发n次糖，每次发n个，假设最后的倒霉孩子拿不到完整的n+1个，而是c个，显然可以对前n项进行等差数列求和，然后根据c的限制条件构建不等式方程组，再进行求解即可得到结果p，意为我们可以完整无缺地发p次糖果，解出p可以发推出c，最后进行遍历，注意一下那个倒霉孩子即可。
- 注意，如果看不懂这个主要思想没关系，咱们来慢慢地捋一捋

首先我们手上有一把糖，眼前有一群嗷嗷待哺的小朋友等着你发糖。暂时先不考虑小朋友的数量，那么根据题意我们可以假设，如果每个小朋友都很幸运地能拿到完整的糖果，这就说明我们要发n次，每次发n个糖。

举个例子：我们手上有6个糖果，第1次发1个，第2次2个，第3次3个。这就很完美~

再看这个1,2,3,...,n的形式，可以联想到等差数列求和公式：
$$ 1 + 2 + 3 + ... + n = \frac{n(n+1)}{2}$$
这个式子就能根据糖果的数量反推出n，即要发多少次糖。你可能会说，这是所有小朋友们都能拿到完整糖果的情况，没有考虑那个拿不到完整糖果的倒霉孩子。别急，咱们这里假设一个数值`R`作为最后那一份不完美糖果的数量。那么这个`R`存在如下性质：
$$ 0 \leq  R < n + 1$$
这个式子就是说，最后这个倒霉孩子得到的糖果数量一定是大于等于0的，如果等于0，说明是完美无缺发给了所有小朋友。小于n+1是因为，如果`R`等于n+1的话，就使得完美的情况再次发生，即第n+1次发了n+1个糖。所以`R`必须是小于n+1的。

用C指代candies，所以我们手上总共的糖果数量可以写作：
$$ C = \frac{n(n+1)}{2} + R $$

这样，我们就可以对上面的不等式方程组进行推导：

$$
0 \leq C - \frac{n(n+1)}{2} <n+1
$$
写出这两个不等式方程组：
$$
\left\{\begin{array}{l}
0 \leq C-\frac{n(n+1)}{2} \\
C-\frac{n(n+1)}{2}<n+1
\end{array}\right.
$$
对两个不等式方程组进行简化，两边乘以-2，再移项，合并同类项
$$
\left\{\begin{array}{l}
 n^2 + n - 2C  \leq 0 \\
n^2 + 3n + 2 - 2C>0
\end{array}\right.
$$
到这里就很有意思了，相信大家都知道求根公式：
$$
x_{1,2}=\frac{-b \pm \sqrt{b^{2}-4 a c}}{2 a}
$$
我们知道n代表了发多少次糖，这必然是一个大于0的数，所以我们可以求出第一个方程组的根：
$$
n \leq \sqrt{2 C+\frac{1}{4}}-\frac{1}{2}
$$
同理，基于n必须为大于0的数，第二个不等式方程的根为：
$$
n > \sqrt{2 C+\frac{1}{4}}-\frac{3}{2}
$$
两个根进行合并之后就有：
$$
\sqrt{2 C+\frac{1}{4}}-\frac{3}{2}<n \leq \sqrt{2 C+\frac{1}{4}}-\frac{1}{2}
$$
因为C代表candies，是给定的数，所我们可以把$\sqrt{2 C+\frac{1}{4}}$看做一个常数$Constant$

可以清晰地看到n的取值范围变成了：
$$
Constant - 1.5<n \leq Constant-0.5
$$
这个范围的大小就是$Constant-0.5 - (Constant - 1.5) = 1$

**这就说明区间内只有一个整数，这个整数就是我们最终完美无缺分发糖果的次数，用p进行指代。这时p就等于区间的上界向下取整，一是因为上界是小于等于符号，二是因为向下取整不会出界，所以有：**
$$
p = (Constant - 0.5), 向下取整
$$
即
$$
p=\text { floor }\left(\sqrt{2 C+\frac{1}{4}}-\frac{1}{2}\right)
$$

这里的`floor()`函数表示向下取整的意思，python里面可以用`int()`表示，如`int(1.8)`就等于1

那么用python写出这个代码的话就是：
```
p = int((2 * candies + 0.25)**0.5 - 0.5)
```
**“卧槽！这不就是之前那个代码么！”**
**各位亲，惊不惊喜意不意外！**

到这里，大家就可以去喝一杯卡布奇诺了，因为后面的过程就变得简单了起来~
一杯卡布奇诺送给大家~

***
**咖 啡 ♂ 时 间**
***

喝完咖啡，我们再来看。显然，除了那个倒霉孩子以外，我们一共会进行p次完美地发糖果

对于剩余糖果数量R，根据式子$C=\frac{n(n+1)}{2}+R$，把求得的p代入n中即可，代码就是：
```
R = int(candies - (p + 1) * p * 0.5)
```

到这里，我们可以假设小朋友有n个人，这就说明我们就要发`p//n`轮，用`rows`指代。细心的你可能会考虑到`p<n`时的情况，是不是需要对`rows`加个1呢?

我想说，别急，这里咱们歇一波，后面会有办法把这个情况处理好~

接着看，现在我们用`rows`指代要完美地发几轮糖果，`kids`代表包含所有小朋友的列表，那么我们可以算出，第i个小朋友(i从1开始)总共得到了多少糖果，算法如下：
$$
kids[i]=i+(i+n)+(i+2n)+\ldots(i+(\text { rows }-1)* n)
$$
举个例子，如果一共有3个小朋友，那么第1位小朋友总共得到的糖果数量就是：
$$
kids[1]=1+(1+3)+(1+2*3)+\ldots(i+(\text { rows }-1) *3)
$$
可以看出这个`kids[i]`的糖果数量又是一个等差数列求和，可以根据求和公式
$$
\begin{aligned}
S_{n} &=\frac{n}{2}\left(a+a_{n}\right) \\
&=\frac{n}{2}[2 a+(n-1) d] \\
&=a n+d \cdot \frac{n(n-1)}{2}
\end{aligned}
$$
公式里面的a就是`kids`中的第一项i，n在公式里面意味着有多少项，就是`rows`，d就是小朋友的人数n

所以就有：
$$
d[i]=i \times \text { rows }+n \frac{\text { rows }(\text { rows }-1)}{2}
$$
这样我们就能算出每个小朋友的糖果数量啦~

等等，如果`p//n`中`p < n`会导致`rows`直接等于0，这咋整？

答案就是，我们可以用`cols = p % n`去专门负责只有一行的情况，以及最后一行的情况

显然`cols`是一个下标，指向最后那个没能拿到完美糖果数量的倒霉孩子，我们对于`i < cols`的孩子`kids[i]`，即倒霉孩子之前的幸运宝宝们，直接累加最后一轮的发放数量即可。对于倒霉孩子，剩下的都给他吧~

来，上代码：
```
class Solution:
    def distributeCandies(self, candies: int, num_people: int) -> List[int]:
        # 为了方便理解，把num_people赋值给n，即n个小朋友
        n = num_people
        # 套用上面推出来的公式，直接计算可以完整发放糖果的次数p
        p = int((2 * candies + 0.25)**0.5 - 0.5) 
        # 继续套用公式，算出完整发放糖果以后剩余的糖果数量
        R = int(candies - (p + 1) * p * 0.5)
        # 迭代rows轮，cols是倒霉孩子的下标
        rows, cols = p // n, p % n
        
        # 小朋友们端好了碗，等你发糖
        kids = [0] * n
        for i in range(n):
            # 性感coder，在线发糖
            kids[i] = (i + 1) * rows + int(rows * (rows - 1) * 0.5) * n
            # 最后一轮or在p<n时的第一轮
            if i < cols:
                kids[i] += i + 1 + rows * n
        # 最后的那个倒霉孩子开心的拿到了R颗糖       
        kids[cols] += R
        return kids
```

