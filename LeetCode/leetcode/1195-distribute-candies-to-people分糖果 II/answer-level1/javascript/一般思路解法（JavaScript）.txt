### 解题思路

先创建一个小朋友数量长度的数组，用0来填充，表示所有的小朋友分到的糖果数量，初始都为0。

然后定义两个数，分别为当前小朋友序号（初始值为0，表示第一个小朋友）、当前分发的糖果数量（初始值为1，表示第一个小朋友发1颗）。

当糖果数量大于0的时候循环分发，数量为0时就分发结束。

糖果数量大于0时，用while循环分发，分发完成后让小朋友的序号加一，分发糖果数量同时加一，剩余的糖果数量减到当轮分发的糖果数量。
在循环中需要判断最后一个小朋友是不是已经分发（当序号等于小朋友数量时表明已经分发到最后一人），返回第一个小朋友继续分发（小朋友序号设置为0）。

循环中还要同时判断剩余糖果数量是否已经不足（小于等于当前应该分发的数量），如果小于等于，就将剩余的所有糖果给予当前小朋友，并直接返回。

### 代码

```javascript
/**
 * @param {number} candies
 * @param {number} num_people
 * @return {number[]}
 */
var distributeCandies = function(candies, num_people) {
    const arr = new Array(num_people).fill(0)
    //定义小朋友的序号i，以及分发数量j
    let i = 0
    let j = 1
    while(candies > 0) {
        //如果最后一个小朋友已经发过,返回第一个小朋友继续发
        if(i === num_people) {
            i = 0
        }

        //如果糖果剩余数量已经等于分发数量
        if(candies <= j) {
            //就直接让当前的小朋友拿到所有剩余糖果
            //然后直接返回
            arr[i] += candies
            return arr
        }
        
        //分发糖果
        arr[i] += j
        //剩余糖果数量减一
        candies -= j
        // 孩子序号加一，分发数量加一
        i++
        j++
    }

    return arr
};
```