根据题意，需要设计一个运算，使得一次运算为自己，三次运算为0，用二进制表示即`00 -> 01 -> 10 -> 00`这样的运算流程。
```
00 (输入0) 00
00 (输入1) 01
01 (输入0) 01
01 (输入1) 10
10 (输入0) 10
10 (输入1) 00
```
令ab为原始数据，c为输入，可以看到:  
a输出1的情况有两种: "01 (输入1) 10", "10 (输入0) 10", 写作: a = ~~a~~bc + a~~b~~~~c~~
b输出1的情况有两种: "00 (输入1) 01", "01 (输入0) 01", 写作: b = ~~a~~~~b~~c + ~~a~~b~~c~~ = ~~a~~b^c

根据题意，最终出现三次的数都走到了00的状态，只有一个数只01的状态，此时a被清零，所以最终结果返回b即可。
```c++
int singleNumber(vector<int>& nums) {
    int a = 0, b = 0, t = 0;
    for (auto c : nums) {
        t = (~a & b & c) + (a & ~b & ~c);
        b = ~a & (b ^ c);
        a = t;
    }
    return b;
}
```