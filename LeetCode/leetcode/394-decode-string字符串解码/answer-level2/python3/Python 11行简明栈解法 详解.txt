## 思路
+ 这题烦就烦在它的括号是可以嵌套的
+ 括号嵌套就想到了栈
+ 我们在栈`stack`里存元祖，信息是“当前的字符串`this_str`”和“这个字符串要重复的次数`num`”。
+ 遍历`str`
+ 首先考虑简单的情况
    + 如果字符是数字，那么加到`num`上，注意字符和数字之间的转换。
    + 如果字符是字符，那么加到`this_str`里
+ 接着要考虑括号的开闭
    + 如果遇到了开括号，那么将当前读到的字符串（**上**层到这个中括号内的字符串）和要重复的次数（**这**层的中括号内要重复的次数）入栈，同时将`this_str`和`num`清空，以便进入下一层。比如说`3[5[a]]`，读到里面的中括号时，入栈的num是5。
    + 如果遇到了闭括号，那么从栈取出一项元祖，记`last_str`和`this_num`，此时的`this_str`是这层的字符，而`this_num`是这层需要的重复次数。最后将`this_str`重复响应次数后和之前的`last_str`结合。
+ 括号的内容有点复杂，要捋一捋。
+ 要知道`this_str`是会不断变大的，每次清空它前都把它状态放到`stack`里了。相当于一个带着两百块钱的没有资产的赌徒，但是他特厉害，每天赌博都能赢。这个`this_str`有时表示赌徒手上拿的现金，那么每天都会清零（清为200，准确地说）。表示总资产的时候，就是每天扩大。为什么有时表示每天的资产，有时表示总资产？就相当于每天的资产是总资产的**中括号**内。深入到中括号内部的时候就清零了，再中括号外部的时候，就是总资产了。当然中括号外部可能还有中括号。不知道这么说会不会更好理解？

执行结果：通过
执行用时 :40 ms, 在所有 Python3 提交中击败了95.51%的用户
内存消耗 :13.6 MB, 在所有 Python3 提交中击败了5.26%的用户 
## 代码
```Python
class Solution:
    def decodeString(self, s: str) -> str:       
        stack, this_str,num = [], '', 0
        for i in s:
            if i.isdigit():num = num * 10 + int(i)
            elif i.isalpha():this_str += i
            elif i == '[':
                stack.append((this_str,num))
                this_str, num = '', 0
            else: # i == ']'
                last_str, this_num = stack.pop()
                this_str = last_str + this_num * this_str
        return this_str
```
## 复杂度分析
+ 时间复杂度 $O(N)$，遍历了一遍字符串
+ 空间复杂度 $O(N)$，需要一个额外的栈