[394.字符串解码。](https://leetcode-cn.com/problems/decode-string/solution/)    

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)  

采用双栈分别记录出现过的数字和字符串，一次遍历即可得到结果。

```javascript
/**
 * @param {string} s
 * @return {string}
 */
var decodeString = function(s) {
    if (s.length === 0) return "";
    let res = "";
    let times = 0; // 用于记录当前的数字
    let numStack = [], // 记录出现过的数字
        strStack = []; // 记录出现过的字符
    for (let i = 0; i < s.length; i++) {
        let char = s[i];
        if (char >= "0" && char <= "9") {
            // 如果出现两位及以上数字字符，将其转化为正确的数字
            times = times * 10 + Number(char);
        } else if (char === "[") {
            // 遇到[字符时，将当前的数字和字符进行保存，分别存进对应的栈内
            // 然后重新计算出现的数字和字符
            numStack.push(times); 
            strStack.push(res);
            times = 0;
            res = "";
        } else if (char === "]") {
            // 出现]字符时，计算满足[]条件的字符串
            // 首先取出numStack中保存的字符的出现次数
            // 然后按照出现次数对res进行累加
            let tmpTimes = numStack.pop();
            let tmpStr = res;
            for (let k = 1; k < tmpTimes; k++) {
                res += tmpStr;
            }
            // 最后取出上一层[]内的字符加到res前面
            res = strStack.pop() + res;
            
        } else {
            // 如果遇到的是字母字符，则更新当前的字符串
            res += char;
        }
    }
    return res;
};
```