#### 方法一：哈希表

**思路**

因为每次转化的时候，会一次性的将 `str1` 中出现的所有的相同字母都改变成同一个字符。所以当 `str1` 中某两个下标 `i` 和 `j` 字符相同时，那么 `str2` 中这个两个下标的字符也必须相同。我们可以使用哈希表保存 `str1` 中每个第一次出现的字符对应 `str2` 中的字符。如果后面出现同样的字符，可以直接通过哈希表判断。

在转化的过程中我们还要保证转化的字符不能影响其他字符。比如 `str1 = abca`，`str2 = bcdb`。首先我们需要将第一个字符 `a` 转化为 `b`，此时两个字符串为 `str1 = bbcb`，`str2 = bcdb`。然后修改第二个字符 `b`。这个改动将会影响到第一次转化的字符，显然这种方法有问题。

于是我们可以使用临时变量的方法，即一个 `str2` 中不存在的字符过渡一下，最后将其再改回来。比如 `str1 = aabcc`，`str2 = ccdee`，这种情况下 `str1` 可以通过这样的步骤转化：`aabcc`，`ttbcc`，`ttbee`，`ccbee`，`ccdee`。也就是说如果当前 `str1` 中需要改变的字符应该从 $x$ 变成 $y$，可是 `str1` 中本来就有 $y$，这一步替换成 $y$ 之后会被后面的 $y$ 所影响从而再次改变的时候，我们需要找一个 $t$，这个 $t$ 没有在 `str2` 中出现过，用这个 $t$ 先替换 $x$，等后面的 $y$ 被替换之后，再用 $y$ 替换这个临时的 $t$。

**需要注意的是：**「后面」这个概念并笔试指索引顺序的前后，而是指变换顺序的先后，很明显可以看出，这里的变换顺序的先后和索引顺序无关，比如上面的例子中，优先将最后的 `cc` 变换成 `ee`，再变换 `b` 为 `d`。

**为什么要这样做（不按照索引顺序变换）呢？** 首先一个目的是为了防止后面的结果影响前面的结果，其实是因为如果可替换的字符数量有限，比如只有一个字符没有在 `str2` 中出现过，我们要优先完成这个位置的替换，然后把它「腾出来」留给后面的操作使用。

**结论：** 因为一共只有 26 个字符，如果 `str2` 中存在 26 个不同的字符，那么将无法进行转换。我们可以通过哈希表的方式，保存 `str2` 中出现的每一个字符。如果小于 26，那么就可以转换。

**代码**

```Golang [ ]
func canConvert(str1 string, str2 string) bool {
    if str1 == str2 { // 如果相等，不需要转换
        return true
    }
    m := map[byte]byte{} // 保存 str1 中字符对应 str2 中的字符
    exists := map[byte]bool{} // 保存 str2 中不同字符的个数
    for i := 0; i < len(str1); i++ {
        if _, ok := m[str1[i]]; !ok {
            m[str1[i]] = str2[i]
            exists[str2[i]] = true
        } else if m[str1[i]] != str2[i] {
            return false
        }
    }
    return len(exists) < 26
}
```

**复杂度分析**

- 时间复杂度：$O(n)$，其中 $n$ 为数组 `str1` 的长度。遍历一次数组 `str1`，访问哈希表的时间复杂度为 $O(1)$。

- 空间复杂度：$O(1)$，因为最多只有 `26` 个字符，所以两个哈希表的大小最大为 `26`。