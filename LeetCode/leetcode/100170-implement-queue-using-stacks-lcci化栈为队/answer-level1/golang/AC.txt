### 解题思路
和[面试题09. 用两个栈实现队列](https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/)一样

### 代码

```golang
type MyQueue struct {
    stack1 []int
    stack2 []int
}


/** Initialize your data structure here. */
func Constructor() MyQueue {
    return MyQueue{}
}


/** Push element x to the back of queue. */
func (this *MyQueue) Push(x int)  {
    this.stack1 = append(this.stack1, x)
}


/** Removes the element from in front of queue and returns that element. */
func (this *MyQueue) Pop() int {
    if len(this.stack1) == 0 {
        return -1
    }
    // stack1 -> stack2
    this.stack2 = make([]int, len(this.stack1))
    for i, j := len(this.stack1) - 1, 0;i >= 0;i, j = i - 1, j + 1 {
        this.stack2[j] = this.stack1[i]
    }
    // stack2 -> stack1
    for i, j := len(this.stack2) - 2, 0;i >= 0;i, j = i - 1, j + 1 {
        this.stack1[j] = this.stack2[i]
    }
    this.stack1 = this.stack1[:len(this.stack1)-1]
    return this.stack2[len(this.stack2)-1]
}


/** Get the front element. */
func (this *MyQueue) Peek() int {
    if len(this.stack1) == 0 {
        return -1
    }
    return this.stack1[0]
}


/** Returns whether the queue is empty. */
func (this *MyQueue) Empty() bool {
    return len(this.stack1) == 0
}


/**
 * Your MyQueue object will be instantiated and called as such:
 * obj := Constructor();
 * obj.Push(x);
 * param_2 := obj.Pop();
 * param_3 := obj.Peek();
 * param_4 := obj.Empty();
 */
```