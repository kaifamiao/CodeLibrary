implement-queue-using-stacks-lcci
实现一个MyQueue类，该类用两个栈来实现一个队列。<br><strong>示例：</strong><pre>MyQueue queue = new MyQueue();<br><br>queue.push(1);<br>queue.push(2);<br>queue.peek();  // 返回 1<br>queue.pop();   // 返回 1<br>queue.empty(); // 返回 false</pre><br><strong>说明：</strong><br><ul>你只能使用标准的栈操作 -- 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code> 和 <code>is empty</code> 操作是合法的。你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</ul>
化栈为队
Implement a MyQueue class which implements a queue using two stacks.


<strong>Example: </strong>

<pre>
MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);
queue.peek();  // return 1
queue.pop();   // return 1
queue.empty(); // return false</pre>



<b>Notes:</b>

<ul>
	You must use<i>only</i>standard operations of a stack -- which means only<code>push to top</code>,<code>peek/pop from top</code>,<code>size</code>, and<code>is empty</code>operations are valid.
	Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
	You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).
</ul>


