思路：
题目的要求就是在Z形变换后按行输出，那么我们就可以看每一行上，都有哪些字符（字符的索引），我们分别按2行~5行输出的情况来分析：

1. 按2行输出，每一行对应的字符索引为：
0  2  4  6 ...
1  3  5  7 ...

可以看出，每一行是一个等差数列，等差数列的公差为2；

2. 按3行输出，其中'x’ 表示该位置无字符：
0 x 4 x 8  ...
1 3 5 7 9  ...
2 x 6 x 10 ...

可以看出，第一行的公差为4，第二列的等差为2，第三列的等差公差为4

3. 按4行输出：
0  x  x  6  x  x  12
1  x  5  7  x  11 13
2  4  x  8  10 x  14
3  x  x  9  x  x  15

可以看出，第一行和最后一行的公差都是6，而第二行和第三行的公差就不同了，但是我们可以发现其中的规律：
对于第二行，公差是交替变化的，首先是4，然后是2，再接着是4，变成4,2,4,2的这种交替方式
对于第三行，公差也是交替变化的，首先是2，然后是4，再接着是2，变成2,4,2,4的这种交替方式。


4. 按5行输出：
0  x  x  x  8  x  x  x  16
1  x  x  7  9  x  x  15 17
2  x  6  x  10 x  14 x  18
3  5  x  x  11 13 x  x  19
4  x  x  x  12 x  x  x  20

可以看出，第一行和最后一行的公差都是6，而第二行和第三行的公差就不同了，但是其中存在的规律：
对于第二行，公差是交替变化的，首先是6，然后是2，再接着是6，变成6,2,6,2的这种交替方式
对于第三行，公差是不变的，都是4
对于第四行，公差又是交替变化的，首先是2，然后是4，再接着是2，变成2,4,2,4的这种交替方式。

从上面几种情况，我们可以归纳为：
第一行和最后一行，其公差是不变的，公差d与输出行数nRow的关系是d = (nRow - 1) * 2, 因此，我们在这两行上，我们直接获取字符串的索引序列即可（每行的序列不大于字符串的长度）：
0, (nRow - 1) * 2, (nRow - 1) * 4, (nRow - 1) * 8, ...
nRow - 1, (nRow - 1) * 3, (nRow - 1) * 5, (nRow - 1) * 7, ...

对于其他第i行，可以认为是存在两个公差，第一个公差是d1 = (nRow - 1 - i ) * 2, 而第二个公差d2 = 2 * i.

比如我们以4行输出一个长度为16的字符串Z型变换为例：
第一行，我们获取以索引0为起始，等差为6的序列       str[0], str[6], str[12]
第二行，我们获取以索引1为起始，等差为4,2交替的序列 str[1], str[5], str[7], str[11], str[13]
第三行, 我们获取以索引2为起始，等差为2,4交替的序列 str[2], str[4], str[8], str[10], str[14]
最后一行，我们获取以索引3为起始，等差为6的序列     str[3], str[9], str[15]

按每一行输出，就是我们变换的结果了！具体代码实现如下：

char * convert(char * s, int numRows){
    if (numRows == 0 || s == NULL) {
        return NULL;
    }
    if (numRows == 1) {
        return s;
    }

    int a[2];
    int j;
    int outIdex = 0;
    int aIdx = 0;
    char *pTemp = s;
	int d = (numRows - 1) * 2;
    int len = strlen(pTemp);
    char *pRet = malloc(len + 1);
    memset(pRet, '\0', (len + 1));

    for (int i = 0; i < numRows; i++) {
        j = i;
        if (i == 0 || i == (numRows - 1)) {
            while (j < len) {
                pRet[outIdex++] = pTemp[j];
				j += d;
            }			
        } else {
            a[0] = d - 2 * i;
            a[1] = d - a[0];
			while (j < len) {
                pRet[outIdex++] = pTemp[j];
                j += a[aIdx];
                aIdx = (aIdx + 1) % 2;
            }
            aIdx = 0;
        }
    }

    return pRet;
}



