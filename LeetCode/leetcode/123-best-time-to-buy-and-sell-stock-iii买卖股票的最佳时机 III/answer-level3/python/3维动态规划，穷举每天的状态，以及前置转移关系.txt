### 解题思路
3维动态规划

### 代码

```python3
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # 动态规划
        # dp[i天][最多完成k笔交易][当前是否持有] = 当前的最大利润
        day_state = [[0,0],[0,0],[0,0]] # 操作0、1、2次， 每次有两个可能的状态：3*2矩阵，元素值表利润
        dp = [day_state[:] for _ in range(len(prices)+1)]
        # 第-1天，不可能持有，也不可能有过交易，收益负无穷表示max不可选
        dp[0] = [[0,-float('inf')],[-float('inf')]*2,[-float('inf')]*2] 
        # 卖出 视为 完成一笔交易（k要+1）
        for i,v in enumerate(prices):
            dp[i+1][0][0] = 0
            dp[i+1][0][1] = max(dp[i][0][1], dp[i][0][0]-v) # 由前一天不操作，or 操作 而来， 只有这两种情况，下同
            dp[i+1][1][0] = max(dp[i][1][0], dp[i][0][1]+v) # 由前一天不操作，or 操作 而来， 只有这两种情况，下同
            dp[i+1][1][1] = max(dp[i][1][1], dp[i][1][0]-v)
            dp[i+1][2][0] = max(dp[i][2][0], dp[i][1][1]+v)
        return max(dp[-1][0][0],dp[-1][1][0],dp[-1][2][0])  # 肯定是最后一天 且 不持有 （递减序列最优是不操作）
        
```
# 若 k为无穷次无限制时， 可去掉k这个状态，3维dp简化为2维dp， 套路同

# 3维动态规划，面试的时候能考虑的清楚所有的状态 和 边界吗？

