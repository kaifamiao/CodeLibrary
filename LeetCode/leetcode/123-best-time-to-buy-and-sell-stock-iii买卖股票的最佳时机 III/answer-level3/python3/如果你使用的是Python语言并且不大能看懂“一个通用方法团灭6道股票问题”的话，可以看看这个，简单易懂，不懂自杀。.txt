其实这个问题吧，算是动态规划里面比较难的了。

买卖股票，最多两次。一天只能进行一种操作：买、卖或者无。只能买了才能卖，卖了才能买。
其实就是在所有天里面找一天买进，找一天卖出。再找一天买进，再找一天卖出（当然，可以买卖一次，或者是不买卖），在所有的可能情形里面找到可以达到的最大利润。
其实可以把买卖过程分开来看，如果买就是创造了使得利润变成-p1，如果卖就是使得利润变成-p1+p2。

我们可以设计一个这样的状态矩阵。
![image.png](https://pic.leetcode-cn.com/dd70670e92d486320745070b27ee878aa7688ebbfe5dc970eb4d4892c9302c2e-image.png)
其中每个空格里面都要填写的是该状态下的利润。

有人问，状态矩阵为何这么设计。很好回答。
交易次数肯定是有限制的，所以只有交易1次，交易2次，交易0次（不交易，如果是降序的股票价格，就最好不要交易，最大利润为0）。
当然每次交易里，有卖进也有卖出。如果买进：未持有股票变成持有股票，并且交易次数增加1次，并且使得利润加上负当天股票价格。如果卖出：那么持有股票变成未持有股票，并且使得利润加上正当天股票价格的利润。
这里是设定在买进股票的时候交易次数增加1次。

如果交易次数为0次，那么就不能持有股票，一旦持有股票，必然就是买进了，那么交易次数就增加了1次，就不再是0次。所以这个位置的利润就一定不存在。
![image.png](https://pic.leetcode-cn.com/deea43807f0ec4786fe5674bbde3b7c73f3cb1fd5eee0a16982949ab8ce57c49-image.png)
好了，如果是不交易（交易0次），并且未持有股票，那么利润就一定是0，毫无争议。
![image.png](https://pic.leetcode-cn.com/185beea8eefb09d56ade2d756e4baf9af37dc6ed20a48b64c812cfcf0a15b746-image.png)

然后就是买进卖出，买进卖出的过程了。如果第一次买进，那么
![image.png](https://pic.leetcode-cn.com/d43c799d0a9e0cbd3ff86e758aa2adff3d8252e6df4b46a92caaa701883a710c-image.png)
一直以来。我们是不是希望利润越来越高，也就是-p1越来越高，那么就是p1越低越低（也就是买进的时候花的钱越来越少）。
那怎么找呢，可以这样，如果找到一个比p1低的，就把他变成p1，如果没有就是保留原来的p1。
p1初始值是多少呢，当然是第一天的价格。如果第二天的价格比第一天的低，那么就是第二天的价格了。如果不是，那么保留第一天的。以此类推。

但是有人问道，只管找最低的p1，那么就不管了后面的卖和下一次交易了吗？显然不能这样。严格来说，找最低的p1，是在第一次卖出之前的最低的p1。（这个好理解吧）
那如何体现出来呢？这不容易，先找p1再找p2呗。
![image.png](https://pic.leetcode-cn.com/6eb34ce5c4330458920ac26b6863a30c742d407db48184acedf239b3cedce02a-image.png)
这-p1+p2也是如此，如果新的-p1+p2比原来的高，那么替换，如果不是的，那么就保留原来的。

好了，举个例子说明下前面的过程：（以[3,3,5,0,0,3,1,4]为例）
第一天：
![image.png](https://pic.leetcode-cn.com/58fcf9e859e9bd025b9a17b34fb49e270caff8c1ca95950a37dbc084b4b1426b-image.png)
第二天：
![image.png](https://pic.leetcode-cn.com/58fcf9e859e9bd025b9a17b34fb49e270caff8c1ca95950a37dbc084b4b1426b-image.png)
第2天的价格是3，那么红色位置就还是-3，因为第一天价格和第二天价格一样。
而绿色的位置还是0，因为新的-p1（虽然数值上没有发生变化）加上第二天的3之后是0和第一天的一样。

有人说了，不是先买再卖吗？不能在同一天内买卖。如果都是第二天的价格，先以-3的价格买进，再以+3的价格卖出，这样子不就错了吗？那如果是这样子，你可以把这种结果看作是没有交易！因为正负相抵，利润为0。但凡有一个后前价格有正差额的情况出现，这种情况就被冲走了。

第三天：
![image.png](https://pic.leetcode-cn.com/608178d62c1a22246d304663a6b4d0bcc274336233dae06e2f0544c898db3bba-image.png)
价格是5，那么红色位置还是-3，因为-5小于-3.但是绿色的位置就是2了，因为新的-3加上5等于2，大于以前的0。

其实，你们有没有发现，这里其实就是在找一个后前正差额最大的情况出现，但是注意一定是有前后顺序的，不然找差额最大就不是在做买卖了，可能会出现穿越的情况。而刚刚叙述的过程也体现了这一点，那就是先计算买进时候的负利润，再计算卖出时候的利润。

好了，还有下一次交易。下一次交易一定是发生在第一次交易之后，这个好像是废话。但是接下来的逻辑如下，注意理解！

交易1次那一行绿色的位置，显示出的就是到目前这一天为止，可以通过低买高卖获得的最大的利润，注意是到目前这天为止，并且注意不一定是在当天这一天卖出，也不一定是在第一天买入！好了，我们要做的是最多两次交易，那么第二次呢？我们可以计算出到目前这一天通过两次买卖股票获得的最大利润吗？如果可以的话，那么一天天的过去，到了最后一天，不就是我们要求的最大利润了？
有人可能要问了，如果一次交易就获得了最大利润，不能进行第二次交易怎么办？比如一个升序价格股票。或者是不交易，比如降序价格股票。等会解答。

既然说明了交易一次的绿色为止是到目前为止获得的最大的利润，那么不妨再往前走一步。买卖一次之后的下一步是再买，下下步是再卖。那么L3，这个位置是不是交易2次中的买进之后的最大利润？
![image.png](https://pic.leetcode-cn.com/e4854fbe106b11cc19e98a4fe1cacf542780f80cee709040eb4a263808fddb8e-image.png)
因为L3也是这么处理的，如果当天的利润L2减去当天价格大于以前的L3，那么替换，如果不是，那么就保留以前的。所以，其实就是到当天为止，能够达到的买买一次之后再买一次得到的最大利润。

以此类推，最后一个位置不就是到当天为止的买卖两次之后获得的最大利润，然后随着时间推移达到最后一天得到最终答案。