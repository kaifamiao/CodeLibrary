参考福如东海大佬的解答，利用双指针进行求解，分别定义两个容器f和b，f[i]代表从前往后在第i天进行一次交易的交易利润最大值；而b[i]代表从后往前交易到第i天的利润最大值，在求解完成后，进行比较交易两次还是交易一次利润最大（最多交易两次），最后返回利润最大值。
f[i]=max(f[i-1],prices[i]-min_price);
b[i]=mmax(b[i+1],max_price-prices[i]);
```
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.empty()) return 0;
        int n=prices.size();
        vector<int> f(n);
        vector<int> b(n);
        int min_price=prices[0];
        for(int i=1;i<n;i++){
            f[i]=max(f[i-1],prices[i]-min_price);
            min_price=min(prices[i],min_price);
        }
        int max_price=prices[n-1];
        for(int i=n-2;i>=0;i--){
            b[i]=max(b[i+1],max_price-prices[i]);
            max_price=max(max_price,prices[i]);
        }
        int res=0;
        for(int i=0;i<n-1;i++){
            res=max(res,max(f[i]+b[i+1],f[i]));
        }
        res=max(res,f[n-1]);
        return res;
    }
};
```
