### 解题思路
# 一.筛选过滤
对于字符串s我们可以先使用一些if语句来进行筛选过滤：
	1. 若字符串为空返回1(true);
	2. 若字符串的长度为奇数，则不可能完全左右括号两两匹配，因此返回0(false);
	3. 当字符串的首字母为一个右括号，则直接返回0(false)
在排除了上述条件后，便利用便可以利用下文的“堆栈”来进行操作判断了。
# 二.核心代码思路
用一个字符数组来模拟堆栈，用一个整型变量来模型栈顶指针，“堆栈”的大小和数组s的大小相同，从字符串s的第一个字符开始遍历，当前字符为左括号时，将当前元素“入栈”，否则栈顶元素“出栈”，若栈顶元素与当前字符不符合题意中的两条规则时，则直接返回0(false)，若数组遍历完成后，则判断“堆栈”是否为空，若不为空则返回0(false)，若为空则返回1(true)。

### 代码

```c
bool isValid(char* s) {
	if (!(*s))//空字符串返回真
		return 1;
	if (s[0] == ')' || s[0] == ']' || s[0] == '}')//开头出现右括号的直接输出false
		return 0;
	int len = strlen(s);
	if (len % 2 != 0)//括号肯定不能全部配对
		return 0;

	char* stack = (char*)malloc(sizeof(char) * (len));
	int i, index;//index为堆栈指针
	char c;
	i = 0;
	index = -1;
	while (s[i])
	{
		if (s[i] == '(' || s[i] == '[' || s[i] == '{')
		{
			index++;
			stack[index] = s[i];

		}
		else
		{
			c = stack[index];
			index--;
			if (!(c == '(' && s[i] == ')' || c == '[' && s[i] == ']' ||
				c == '{' && s[i] == '}'))
				return 0;
		}
		i++;
	}
	if (index >= 0)
		return 0;
	return 1;
}
```