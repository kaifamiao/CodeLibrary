### 解题思路
当开始接触题目时，我们会不禁想到如果计算出左括号的数量，和右括号的数量，如果每种括号左右数量相同，会不会就是有效的括号了呢？

事实上不是的，假如输入是 `[{]}`，每种括号的左右数量分别相等，但不是有效的括号。这是因为结果还与括号的位置有关。

仔细分析我们发现，对于有效的括号，它的部分子表达式仍然是有效的括号，比如 `{()[()]}` 是一个有效的括号，`()[{}]` 是有效的括号，`[()]` 也是有效的括号。并且当我们每次删除一个最小的括号对时，我们会逐渐将括号删除完。比如下面的例子。

![p1.png](https://pic.leetcode-cn.com/467248403853f33e0dabd80c644893ad22aa6069f261bd6a4c4d62e3d7df2f8c-p1.png)



这个思考的过程其实就是栈的实现过程。因此我们考虑使用栈，当遇到匹配的最小括号对时，我们将这对括号从栈中删除（即出栈），如果最后栈为空，那么它是有效的括号，反之不是。

![20.gif](https://pic.leetcode-cn.com/baa8829ac398e665eb645dca29eadd631e2b337e05022aa5a678e091471a4913-20.gif)




### 代码

```python []
class Solution:
    def isValid(self, s: str) -> bool:
        dic = {')':'(',']':'[','}':'{'}
        stack = []
        for i in s:
            if stack and i in dic:
                if stack[-1] == dic[i]: stack.pop()
                else: return False
            else: stack.append(i)
            
        return not stack
```
```C++ []
class Solution {
public:
    bool isValid(string s) {
        unordered_map<char,int> m{{'(',1},{'[',2},{'{',3},
                                {')',4},{']',5},{'}',6}};
        stack<char> st;
        bool istrue=true;
        for(char c:s){
            int flag=m[c];
            if(flag>=1&&flag<=3) st.push(c);
            else if(!st.empty()&&m[st.top()]==flag-3) st.pop();
            else {istrue=false;break;}
        }
        if(!st.empty()) istrue=false;
        return istrue;
    }
};
```

代码中我们使用了哈希表来判断是否能够形成括号，从而决定进行入栈操作还是出栈操作。


### 复杂度分析
- 时间复杂度：$O(N)$。遍历了一遍字符串。
- 空间复杂度：$O(N)$。最坏情况下，假如输入是 `(((((((`，栈的大小将是输入字符串的长度。

如有其他代码欢迎提供~如有问题欢迎讨论~