number-of-ways-to-stay-in-the-same-place-after-some-steps
有一个长度为<code>arrLen</code>的数组，开始有一个指针在索引<code>0</code> 处。

每一步操作中，你可以将指针向左或向右移动 1 步，或者停在原地（指针不能被移动到数组范围外）。

给你两个整数<code>steps</code> 和<code>arrLen</code> ，请你计算并返回：在恰好执行<code>steps</code>次操作以后，指针仍然指向索引<code>0</code> 处的方案数。

由于答案可能会很大，请返回方案数 <strong>模</strong><code>10^9 + 7</code> 后的结果。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>steps = 3, arrLen = 2
<strong>输出：</strong>4
<strong>解释：</strong>3 步后，总共有 4 种不同的方法可以停在索引 0 处。
向右，向左，不动
不动，向右，向左
向右，不动，向左
不动，不动，不动
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>steps = 2, arrLen = 4
<strong>输出：</strong>2
<strong>解释：</strong>2 步后，总共有 2 种不同的方法可以停在索引 0 处。
向右，向左
不动，不动
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>steps = 4, arrLen = 2
<strong>输出：</strong>8
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= steps &lt;= 500</code>
	<code>1 &lt;= arrLen&lt;= 10^6</code>
</ul>

停在原地的方案数
You have a pointer at index <code>0</code> in an array of size <code><font face="monospace">arrLen</font></code>. At each step, you can move 1 position to the left, 1 position to the rightin the array or stay in the same place (The pointer should not be placed outside the array at any time).

Given two integers<code>steps</code> and <code>arrLen</code>, return the number ofways such that your pointer still at index <code>0</code> after <strong>exactly </strong><code><font face="monospace">steps</font></code>steps.

Since the answermay be too large,return it <strong>modulo</strong><code>10^9 + 7</code>.


<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> steps = 3, arrLen = 2
<strong>Output:</strong> 4
<strong>Explanation: </strong>There are 4 differents ways to stay at index 0 after 3 steps.
Right, Left, Stay
Stay, Right, Left
Right, Stay, Left
Stay, Stay, Stay
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> steps = 2, arrLen = 4
<strong>Output:</strong> 2
<strong>Explanation:</strong> There are 2 differents ways to stay at index 0 after 2 steps
Right, Left
Stay, Stay
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input:</strong> steps = 4, arrLen = 2
<strong>Output:</strong> 8
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= steps &lt;= 500</code>
	<code>1 &lt;= arrLen&lt;= 10^6</code>
</ul>
