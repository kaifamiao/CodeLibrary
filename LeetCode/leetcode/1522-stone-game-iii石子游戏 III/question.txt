stone-game-iii
Alice 和 Bob 用几堆石子在做游戏。几堆石子排成一行，每堆石子都对应一个得分，由数组 <code>stoneValue</code> 给出。

Alice 和 Bob 轮流取石子，<strong>Alice</strong> 总是先开始。在每个玩家的回合中，该玩家可以拿走剩下石子中的的前 <strong>1、2 或 3 堆石子</strong> 。比赛一直持续到所有石头都被拿走。

每个玩家的最终得分为他所拿到的每堆石子的对应得分之和。每个玩家的初始分数都是 <strong>0</strong> 。比赛的目标是决出最高分，得分最高的选手将会赢得比赛，比赛也可能会出现平局。

假设 Alice 和 Bob 都采取 <strong>最优策略</strong> 。如果 Alice 赢了就返回 <em>&quot;Alice&quot;</em> <em>，</em>Bob 赢了就返回<em> &quot;Bob&quot;，</em>平局（分数相同）返回 <em>&quot;Tie&quot;</em> 。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>values = [1,2,3,7]
<strong>输出：</strong>&quot;Bob&quot;
<strong>解释：</strong>Alice 总是会输，她的最佳选择是拿走前三堆，得分变成 6 。但是 Bob 的得分为 7，Bob 获胜。
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>values = [1,2,3,-9]
<strong>输出：</strong>&quot;Alice&quot;
<strong>解释：</strong>Alice 要想获胜就必须在第一个回合拿走前三堆石子，给 Bob 留下负分。
如果 Alice 只拿走第一堆，那么她的得分为 1，接下来 Bob 拿走第二、三堆，得分为 5 。之后 Alice 只能拿到分数 -9 的石子堆，输掉比赛。
如果 Alice 拿走前两堆，那么她的得分为 3，接下来 Bob 拿走第三堆，得分为 3 。之后 Alice 只能拿到分数 -9 的石子堆，同样会输掉比赛。
注意，他们都应该采取 <strong>最优策略 </strong>，所以在这里 Alice 将选择能够使她获胜的方案。</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>values = [1,2,3,6]
<strong>输出：</strong>&quot;Tie&quot;
<strong>解释：</strong>Alice 无法赢得比赛。如果她决定选择前三堆，她可以以平局结束比赛，否则她就会输。
</pre>

<strong>示例 4：</strong>

<pre><strong>输入：</strong>values = [1,2,3,-1,-2,-3,7]
<strong>输出：</strong>&quot;Alice&quot;
</pre>

<strong>示例 5：</strong>

<pre><strong>输入：</strong>values = [-1,-2,-3]
<strong>输出：</strong>&quot;Tie&quot;
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= values.length &lt;= 50000</code>
	<code>-1000&lt;= values[i] &lt;= 1000</code>
</ul>

石子游戏 III
Alice and Bob continue theirgames with piles of stones. There are several stones<strong>arranged in a row</strong>, and each stone has an associatedvalue which is an integer given in the array<code>stoneValue</code>.

Alice and Bob take turns, with <strong>Alice</strong> starting first. On each player&#39;s turn, that playercan take <strong>1, 2 or 3 stones</strong>fromthe <strong>first</strong> remaining stones in the row.

The score of each player is the sum of values of the stones taken. The score of each player is <strong>0</strong>initially.

The objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.

AssumeAliceand Bob<strong>play optimally</strong>.

Return <em>&quot;Alice&quot;</em> ifAlice will win, <em>&quot;Bob&quot;</em> if Bob will win or <em>&quot;Tie&quot;</em> if they end the game with the same score.


<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> values = [1,2,3,7]
<strong>Output:</strong> &quot;Bob&quot;
<strong>Explanation:</strong> Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> values = [1,2,3,-9]
<strong>Output:</strong> &quot;Alice&quot;
<strong>Explanation:</strong> Alice must choose all the three piles at the first move to win and leave Bob with negative score.
If Alice chooses one pile her score will be 1 and the next move Bob&#39;s score becomes 5. The next move Alice will take the pile with value = -9 and lose.
If Alice chooses two piles her score will be 3 and the next move Bob&#39;s score becomes 3. The next move Alice will take the pile with value = -9 and also lose.
Remember that both play optimally so here Alice will choose the scenario that makes her win.
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input:</strong> values = [1,2,3,6]
<strong>Output:</strong> &quot;Tie&quot;
<strong>Explanation:</strong> Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.
</pre>

<strong>Example 4:</strong>

<pre>
<strong>Input:</strong> values = [1,2,3,-1,-2,-3,7]
<strong>Output:</strong> &quot;Alice&quot;
</pre>

<strong>Example 5:</strong>

<pre>
<strong>Input:</strong> values = [-1,-2,-3]
<strong>Output:</strong> &quot;Tie&quot;
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= values.length &lt;= 50000</code>
	<code>-1000&lt;= values[i] &lt;= 1000</code>
</ul>