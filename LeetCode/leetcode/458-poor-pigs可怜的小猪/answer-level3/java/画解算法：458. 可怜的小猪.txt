## 解题方案

### 思路：

**标签：数学**

这道题初看的时候，很多人会纠结：到底需要多少只小猪，而每只小猪又应该具体如何喝水才能判断出哪只水桶有毒药？

这道题最开始不要去关注细节，去想到底应该怎么喂水。而是应该先思考在考察哪方面的问题，数组、链表、二叉树还是数学？那么仔细思考就能得出结论，本质上在考察数学中的 **进制** 问题。

举例说明：

- 假设：总时间 `minutesToTest = 60`，死亡时间 `minutesToDie = 15`，`pow(x, y)` 表示 `x` 的 `y` 次方，`ceil(x)`表示 `x` 向上取整
- 当前有 $1$ 只小猪，最多可以喝 `times = minutesToTest` / `minutesToDie = 4` 次水
- 最多可以喝 $4$ 次水，能够携带 `base = times + 1 = 5` 个的信息量，也就是（便于理解从 $0$ 开始）：
  - (1) 喝 $0$ 号死去，$0$ 号桶水有毒
  - (2) 喝 $1$ 号死去，$1$ 号桶水有毒
  - (3) 喝 $2$ 号死去，$2$ 号桶水有毒
  - (4) 喝 $3$ 号死去，$3$ 号桶水有毒
  - (5) 喝了上述所有水依然活蹦乱跳，$4$ 号桶水有毒
  - 结论是 $1$ 只小猪最多能够验证 $5$ 桶水中哪只水桶含有毒药，当 `buckets ≤ 5` 时，`answer = 1`
- 那么 $2$ 只小猪可以验证的范围最多到多少呢？我们把每只小猪携带的信息量看成是 **base进制数**，$2$ 只小猪的信息量就是 `pow(base, 2) = pow(5, 2) = 25`，所以当 `5 ≤ buckets ≤ 25时`，`anwser = 2`
- 那么可以得到公式关系：`pow(base, ans) ≥ buckets`，取对数后即为：`ans ≥ log(buckets) / log(base)`，因为 `ans` 为整数，所以 `ans = ceil(log(buckets) / log(base))`

**时间复杂度：$O(1)$**

看到这里我们再去关注细节，$2$ 只小猪到底怎么喂水，在上述假设下，能够最多验证 $25$ 桶水呢？请看下方图画解答：

<![frame_00001.png](https://pic.leetcode-cn.com/b2b004f7d473b599e6ae4ec99afa038a784958c763ba6ff827667974d9503b29-frame_00001.png),![frame_00002.png](https://pic.leetcode-cn.com/a567fdd56f436c18b8ad011bce7bc6fa1f6f716c76fddbce4bc78214527a1165-frame_00002.png),![frame_00003.png](https://pic.leetcode-cn.com/1905ef0258bc52a4953cbd4b71c33dd9b9663dcc0ace1b93424bbf4e432e72ad-frame_00003.png),![frame_00004.png](https://pic.leetcode-cn.com/850ac54548c8b9cfcfd021f9627b02db97349d900b56b5b91b23fa1ffdbf370b-frame_00004.png),![frame_00005.png](https://pic.leetcode-cn.com/cef240603f731e95b4191d2d3137011a98c5de4f3c0f7b3adeebe23b8e2bd41f-frame_00005.png),![frame_00006.png](https://pic.leetcode-cn.com/c461c90cae4aa325d7da6f97fff9782aea47a0dcd28751805148061128768556-frame_00006.png),![frame_00007.png](https://pic.leetcode-cn.com/6e3ab855b5501d2a8122d44b6f36f4208ec72075a2565e44484f4c28badb48d5-frame_00007.png),![frame_00008.png](https://pic.leetcode-cn.com/9c7f685c72c3ce2b4f9e4fb5e117ae717d93387e6f85e1de1ca0704ff531e031-frame_00008.png),![frame_00009.png](https://pic.leetcode-cn.com/33fb0b35399d14630b575d4857964102f3a17da62740e6e24cca3750d656ef0c-frame_00009.png),![frame_00010.png](https://pic.leetcode-cn.com/be70b9bd76adc3c659509e6aca4159e4bbc895bea56006995e8176f4828f2b9b-frame_00010.png),![frame_00011.png](https://pic.leetcode-cn.com/55fbb12cf7dbfd651fc1512a23d2c2eecfc4017dc5b2539dfceb828dfdd40e23-frame_00011.png),![frame_00012.png](https://pic.leetcode-cn.com/f7ab3461e0b64df29ed4e896eb6a55fb8af337486b9909e1c9429e69ad9e04ae-frame_00012.png),![frame_00013.png](https://pic.leetcode-cn.com/bb1aad2bb3606aef1498163bea9dcd5be1297bfd5b5a53a8c641c5916d1ca1e9-frame_00013.png)>

### 代码:


```Java []
class Solution {
    public int poorPigs(int buckets, int minutesToDie, int minutesToTest) {
        int times = minutesToTest / minutesToDie;
        int base = times + 1;
        // base ^ ans >= buckets 
        // ans >= log(buckets) / log(base)
        double temp = Math.log(buckets) / Math.log(base);
        int ans = (int)Math.ceil(temp)
        return ans;
    }
}
```
```JavaScript []
/**
 * @param {number} buckets
 * @param {number} minutesToDie
 * @param {number} minutesToTest
 * @return {number}
 */
var poorPigs = function(buckets, minutesToDie, minutesToTest) {
    const times = minutesToTest / minutesToDie;
    const base = times + 1;
    // base ^ ans >= buckets 
    // ans >= log(buckets) / log(base)
    const temp = Math.log(buckets) / Math.log(base);
    const ans = Math.ceil(temp)
    return ans;
};
```
