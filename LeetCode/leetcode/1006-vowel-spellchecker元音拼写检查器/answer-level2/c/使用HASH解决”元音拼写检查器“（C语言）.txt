### 解题思路
典型单词查找问题，关键在于key的构建。由于是模糊查找，因此key也构建为模糊形式（统一），实际单词放到info结构体中进行二次查找

1.将单词表转为模糊形式，都变为大写，且元音归为A

2.将转换后单词表作为key，实际单词指针和个数作为val构建hash表

3.将待查询单词转为模糊形式

4.如果查到key，则进一步查询

5.进一步查询的难点在于优先级，设置3个指针，找到完全匹配则返回；否则记录第一个大小写差异和元音差异的单词

![image.png](https://pic.leetcode-cn.com/48312bf517fe51b71d5faa04842884fa11bf7c635ebb48eb87320eac5b312450-image.png)


### 代码

```c
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

#define INFO_SIZE   100

typedef struct _info_st
{
    char *word[INFO_SIZE];
    int num;
}info_st;

typedef struct _hash_st
{
    char key[8];
    info_st val;
    UT_hash_handle hh;
}hash_st;

// 由s生成key
void key_gen(char * key, char *s)
{
    int slen = strlen(s);

    for(int i = 0; i < slen; i++)
    {
        key[i] = s[i];

        if(key[i] >= 'a')
        {
            key[i] -= 'a' - 'A';
        }

        if(key[i] == 'A' || key[i] == 'E' || key[i] == 'I' || key[i] == 'O' || key[i] == 'U')
        {
            key[i] = 'A';
        }
    }

    key[slen] = '\0';
}

// 从info中查找s，返回最终结果
char* find_str(char *s, info_st *info)
{
    char *res1 = NULL;
    char *res2 = NULL;

    int slen = strlen(s);

    for(int i = 0; i < info->num; i++)
    {
        char *q = info->word[i];
        
        bool same = true;
        bool cap = true;

        for(int j = 0; j < slen; j++)
        {
            if(s[j] == q[j])
            {
                continue;
            }

            same = false;

            // 处理大小写
            int diff = (s[j] > q[j])? s[j] - q[j] : q[j] - s[j];
            if(diff == 'a' - 'A')
            {
                continue;
            }

            cap = false;
        }

        if(same == true)
        {
            return q;
        }
        else if(cap == true && res1 == NULL)
        {
            res1 = q;
        }
        else if(cap == false && res2 == NULL)
        {
            res2 = q;
        }
    }

    return (res1 != NULL)? res1 : res2;
}

char ff[] = "";

// 【算法思路】hash。难点在于构造key，key构造为统一小写，并且元音替换为'A'，val为字串指针数组+长度；
// 构造三个结果指针，指向第完全相同单词，第一个大小写差异字符，第一个元音差异字符
char ** spellchecker(char ** wordlist, int wordlistSize, char ** queries, int queriesSize, int* returnSize){
    hash_st *pool = (hash_st *)calloc(wordlistSize, sizeof(hash_st));
    int psize = 0;

    hash_st *head = NULL;

    // 生成hash表
    for(int i = 0; i < wordlistSize; i++)
    {
        hash_st *cur = &pool[psize];
        hash_st *tmph;
        
        key_gen(cur->key, wordlist[i]);

        HASH_FIND_STR(head, cur->key, tmph);

        if(tmph == NULL)
        {
            cur->val.word[0] = wordlist[i];
            cur->val.num = 1;

            HASH_ADD_STR(head, key, cur);
            psize++;
            continue;
        }

        tmph->val.word[ tmph->val.num++ ] = wordlist[i];
    }
/*
    hash_st *cur, *tmph;
    HASH_ITER(hh, head, cur, tmph)
    {
        printf("%s   ", cur->key);
    }
    printf("\n");
*/
    char **res = (char **)calloc(queriesSize, sizeof(char*));
    int rsize = 0;

    char tkey[8];

    // 从hash表查找数据
    for(int i = 0; i < queriesSize; i++)
    {
        key_gen(tkey, queries[i]);
        //printf("find: %s\n", tkey);

        hash_st *tmph;
        HASH_FIND_STR(head, tkey, tmph);

        if(tmph == NULL)
        {
            res[rsize++] = ff;
            continue;
        }

        //查找结果
        res[rsize++] = find_str(queries[i], &(tmph->val));
    }

    *returnSize = queriesSize;
    return res;
}
```