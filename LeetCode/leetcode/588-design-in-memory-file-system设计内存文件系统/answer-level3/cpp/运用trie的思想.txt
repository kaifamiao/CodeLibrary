### 解题思路
第一反应就是trie，只不过把isEnd改为isFile，再加上文件内容成员content

### 代码

```cpp
struct trie {
    bool isFile;
    string content;
    map<string, trie*> next;

    trie() : isFile(false) {}
};

class FileSystem {
public:
    FileSystem() {
        root = new trie();
    }
    
    vector<string> ls(string path) {
        vector<string> pathArray = pathSplit(path);
        trie* cur = root;

        for (const auto &each : pathArray) {
            cur = cur->next[each];
        }

        vector<string> result;
        if (cur->isFile == true) {
            result.push_back(pathArray.back());
        } else {
            for (const auto &each : cur->next) {
                result.push_back(each.first);
            }
        }

        return result;
    }
    
    void mkdir(string path) {
        vector<string> pathArray = pathSplit(path);
        trie *cur = root;

        for (const auto &each : pathArray) {
            if (cur->next.count(each) == 0) {
                cur->next[each] = new trie();
            }
            cur = cur->next[each];
        }
    }
    
    void addContentToFile(string filePath, string content) {
        vector<string> fileArray = pathSplit(filePath);
        trie *cur = root;

        for (const auto &each : fileArray) {
            if (cur->next.count(each) == 0) {
                cur->next[each] = new trie();
            }
            cur = cur->next[each];
        }

        cur->isFile = true;
        cur->content += content;
    }
    
    string readContentFromFile(string filePath) {
        vector<string> fileArray = pathSplit(filePath);
        trie* cur = root;

        for (const auto &each : fileArray) {
            cur = cur->next[each];
        }

        return cur->content;
    }
private:
    trie *root;

    vector<string> pathSplit(string path)
    {
        stringstream ss(path);
        string s;
        vector<string> answer;

        if (path.empty()) {
            return answer;
        }

        while (getline(ss, s, '/')) {
            answer.push_back(s);
        }

        return vector<string>(answer.begin() + 1, answer.end());
    }
};
```