import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums.length == 0) {
            return result;
        }
        List<Integer> tmp = new ArrayList<>();
        dfs(nums, tmp, result);
        return result;
    }

    private void dfs(int[] nums, List<Integer> tmp,
                     List<List<Integer>> result) {
        int n = nums.length;
        if (tmp.size() == n) {
            result.add(new ArrayList<>(tmp));
            return;
        }
        for (int i = 0; i < n; i++) {
            // nums[i] has not been visited
            if (!tmp.contains(nums[i])) {
                tmp.add(nums[i]);
                dfs(nums, tmp, result);
                tmp.remove(tmp.size() - 1);
            }
        }
    }
}