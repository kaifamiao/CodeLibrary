[106.从中序与后序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/submissions/)   

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)   

方法类似于[105.从前序与中序遍历序列构造二叉树](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8A%9B%E6%89%A3/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.md)。

理解中序和后序特点即可。   

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} inorder
 * @param {number[]} postorder
 * @return {TreeNode}
 */
var buildTree = function(inorder, postorder) {
    if (inorder.length <= 0 || postorder.length <= 0) return null;
    return help(inorder, postorder, postorder.length-1, 0, inorder.length-1);
};

function help(inorder, postorder, index, start, end) {
    if (start > end) return null;
    
    let pre = postorder[index];
    let tmpIndex = inorder.indexOf(pre);
    let node = new TreeNode(pre);
    node.right = help(inorder, postorder, index-1, tmpIndex+1, end);
    // 注意第三个参数，end-tmpIndex是右子树的长度
    node.left = help(inorder, postorder, index-(end - tmpIndex+1), start, tmpIndex-1);
    return node;
}
```