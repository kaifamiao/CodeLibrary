### 前提
解决此问题的关键在于要很熟悉树的各种遍历次序代表的什么，最好能够将图画出来。本题解带你先进行中序遍历和后续遍历二叉树，然后再根据遍历结果将二叉树进行还原。
#### 首先，来一棵树
![中序遍历构造二叉树.png](https://pic.leetcode-cn.com/b3dafe801ce8aaafde54f9e45c3d9fd206b1b94612f7ac518bcb0969a39f5461-%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.png)
#### 然后再看树的遍历结果
![树的遍历结果.png](https://pic.leetcode-cn.com/ea206eb543a5dabd80625250199187b892a5cbc58806b86a05790c2897fab8d9-%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E7%BB%93%E6%9E%9C.png)
### 根据中序和后序遍历结果还原二叉树
#### 中序遍历和后续遍历的特性
首先来看题目给出的两个已知条件**中序遍历序列**和**后序遍历序列** 根据这两种遍历的特性我们可以得出两个结论
1. 在后序遍历序列中,最后一个元素为树的根节点
2. 在中序遍历序列中,根节点的左边为左子树，根节点的右边为右子树

如下图所示
![树的特性.png](https://pic.leetcode-cn.com/3293e7ccb41baaf52adca7e13cc0f258e1c83a4c588f9b6cb3e86410a540f298-%E6%A0%91%E7%9A%84%E7%89%B9%E6%80%A7.png)
#### 树的还原过程描述
根据中序遍历和后续遍历的特性我们进行树的还原过程分析
1. 首先在后序遍历序列中找到根节点(最后一个元素)
2. 根据根节点在中序遍历序列中找到根节点的位置
3. 根据根节点的位置将中序遍历序列分为左子树和右子树
4. 根据根节点的位置确定左子树和右子树在中序数组和后续数组中的左右边界位置
5. 递归构造左子树和右子树
6. 返回根节点结束

#### 树的还原过程变量定义
需要定义几个变量帮助我们进行树的还原
1. HashMap memo 需要一个哈希表来保存中序遍历序列中,元素和索引的位置关系.因为从后序序列中拿到根节点后，要在中序序列中查找对应的位置,从而将数组分为左子树和右子树
2. int ri 根节点在中序遍历数组中的索引位置
3. 中序遍历数组的两个位置标记 [is, ie],is是起始位置，ie是结束位置
4. 后序遍历数组的两个位置标记 [ps, pe] ps是起始位置，pe是结束位置
#### 位置关系的计算
在找到根节点位置以后，我们要确定下一轮中，左子树和右子树在中序数组和后续数组中的左右边界的位置。
1. 左子树-中序数组 is = is, ie = ri - 1
2. 左子树-后序数组 ps = ps, pe = ps + ri - is - 1 (pe计算过程解释，后续数组的起始位置加上左子树长度-1 就是后后序数组结束位置了，左子树的长度 = 根节点索引-左子树)
3. 右子树-中序数组 is = ri + 1, ie = ie
4. 右子树-后序数组 ps = ps + ri - is, pe - 1

听不明白没关系，看图就对了,计算图示如下
![树的计算过程.png](https://pic.leetcode-cn.com/50d7d9c1ac4c66d7089f4cc6e16d053a918230e333710b8fe312f2c622030287-%E6%A0%91%E7%9A%84%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B.png)
#### 树的还原过程
![树的还原.png](https://pic.leetcode-cn.com/ac050d257073f47285353d7ad412fb832326237ea85948a8b69d338171d67543-%E6%A0%91%E7%9A%84%E8%BF%98%E5%8E%9F.png)

### 代码如下所示
```
class Solution {

    HashMap<Integer,Integer> memo = new HashMap<>();
    int[] post;

    public TreeNode buildTree(int[] inorder, int[] postorder) {
        for(int i = 0;i < inorder.length; i++) memo.put(inorder[i], i);
        post = postorder;
        TreeNode root = buildTree(0, inorder.length - 1, 0, post.length - 1);
        return root;
    }

    public TreeNode buildTree(int is, int ie, int ps, int pe) {
        if(ie < is || pe < ps) return null;

        int root = post[pe];
        int ri = memo.get(root);

        TreeNode node = new TreeNode(root);
        node.left = buildTree(is, ri - 1, ps, ps + ri - is - 1);
        node.right = buildTree(ri + 1, ie, ps + ri - is, pe - 1);
        return node;
    }
}
```
