菜鸟自己想的，没看题解和评论。（后来看了和奇偶数本质一样，所以看看思想就好）
1. dp[i]表示第i个数字的1的个数。利用动态规划有：我们已知dp[0]到dp[i-1]的所有值，接下来要做的就是如何用dp[0]到dp[i-1]退出dp[i]。
2.  本文求得是e二进制数中1的数目，很容易想到将数字书写成二进制然后右移计数二进制中1的个数，但这样每次右移之后，发现都会进行冗余运算。
比如数字5，二进制是101，右移一位是10，，数字4二进制是100，右移一位也是10，所以说若每次都将每个数字都全部右移来计数，发现会产生很大的冗余计算。这是我们观察5右移一位的数字可以发现，10是2的二进制，也就是dp[2]的位数，那么我们只需要根据5右移的第一位是否是1再加上dp[2]就得到了5的二进制位数了。
3. 所以状态转移方程为：dp[i]=dp[i>>1]+1 (i为奇数)，dp[i]=dp[i>>1]（i为偶数）。
代码：
class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> dp(num+1);        
        dp[0]=0;
        if(num==0)  return dp;
        dp[1]=1;
        if(num==1)  return dp;
        for(int i=2;i<=num;++i){
            int tmp=i;
            if(tmp%2==0){
                dp[i]=dp[(tmp>>1)];
            }
            else {
                dp[i]=dp[(tmp>>1)]+1;
            }
        }
        return dp;
    }
};
PS：未作优化，我认为在笔试的时候能做出来就行，优化什么的除非全出完了才有时间看...