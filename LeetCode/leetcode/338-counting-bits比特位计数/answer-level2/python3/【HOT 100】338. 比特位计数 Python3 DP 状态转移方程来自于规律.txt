### 解题思路
- 相似题型
- DP五要素
- 代码

### 相似题型
[198. 打家劫舍](https://leetcode-cn.com/problems/house-robber/solution/hot-100-198-da-jia-jie-she-python3-dp-he-hui-su-yi/)

### DP五要素
- **状态** -- 可以遍历
  在这里可以遍历的是数字，且只是一维
- **状态的选择**  -- 遍历的范围
  这个范围是从`0`到`num`，在代码里就是`for i in range(num+1)`，因为要取到`num`这个值
- **状态的转移**  -- 状态转移方程（画图）

![image.png](https://pic.leetcode-cn.com/a95d6e4bf1597c4a05270fda886c3e8c9f6220c3baf944d4b6c250bc4a2f0006-image.png)
  关于数字的二进制，我们能够知道，偶数的二进制最后一位肯定是`0`，因为它`num % 2 == 0`。
那么，`偶数+1肯定下一个数，并且是奇数，在这个基础上，我们就能知道，奇数的二进制的1的个数是前一个数（偶数）的二进制1的个数+1，因为偶数的二进制+1不会发生进位情况`，也就是图中红色框内的二进制们。

考虑完了奇数，我们来考虑一下偶数，**又因为偶数的二进制最后一位是0，那么代表我们把二进制整体右移一位（也就是除以2），对这个偶数的二进制的1的个数不会有影响**，那么我们就完成了DP里面的把问题拆分成更小问题的步骤，即为：`偶数的二进制1的个数 = 偶数//2的二进制1的个数`，也就是图中颜色相同的二进制们。

于是我们就得到了状态转移方程：
```python
if num % 2 == 0:
    # 偶数
    dp[num] = dp[num//2]
else:
    # 奇数
    dp[num] = dp[num-1] + 1
```

- **base case**  -- 初始化
  在状态转移方程中我们用到了`num-1`，所以代表我们要初始化`num=0`，遍历的时候从`num=1`开始，这样`num-1=0`就能从dp中直接获取对应的值
  当数字为`0`的时候，二进制为`0000`，**1的个数为0**，于是初始化为：`dp[0] = 0`

- 是否能优化空间复杂度
  这道题需要保存全部的值，而不是求最优或者极值，那么不能优化空间，需要保留dp的table。


### 代码

```python
class Solution:
    def countBits(self, num: int) -> List[int]:
        if num == 0:
            return [0]

        dp = [0 for i in range(num+1)]
        for i in range(1, num+1):
            if i % 2 == 0:
                dp[i] = dp[i//2]
            else:
                dp[i] = dp[i-1] + 1
                
        return dp
        
```

### 总结
今日感悟：在与人沟通交流或者询问问题的时候，一定要先捋清楚自己的思路，能够听懂别人并且让别人听懂自己，双方都理解对方，才算是有效沟通。清晰的表达来自于清晰的思路，写题解也是如此。前路漫漫，不进则退。