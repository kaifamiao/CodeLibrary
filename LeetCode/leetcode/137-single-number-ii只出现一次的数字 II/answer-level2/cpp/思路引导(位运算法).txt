看了许多热评，知道异或解法是怎么回事了，但是很难从解法中理解思路，也就是知道了方法，但是不知道为什么会想到这个方法，所以想从问题出发点一点点地整理，以便能对位运算融会贯通。

1、因为空间复杂度是O(1)，不能采用一对一的记录方式来记录每个数的次数，从而想到要用到XOR，XOR天生具备记忆功能，它可以用一个数记录多个数出现次数的能力；
2、但是XOR和一个数结合使用，只能记录一个数出现了一次或者两次，无法确定一个数是否出现了三次，所以需要增加记录的维度，XOR操作只有一种，所以只能增加一个数来达到目标；
3、使用两个数来记录数，因为存储介质只有这两个数，所以希望只出现一次的数就在这两个数中，或者这个两个数通过某个运算获得，最好的方式是出现了三次的数全部通过XOR抵消掉了，而出现了一次的数就在这两个数中的某一个；
4、将目标分解：记录数字和表达数字出现的次数
5、不管a、b两个数怎么去记录数字出现的次数，必须要记录当前的数字，a XOR x 和 b XOR x 可以将x的值记录在a、b之中；
6、继而，需要设计一套逻辑,使得这两个数a，b来表达数字出现的次数，无论如何设计，设计出来的逻辑*f*(x,a,b)满足下面的要求
   令两个数分别是 a，b，初始值是 a0,b0
   第一次输入x
   (a1,b1) = *f*(x,a0,b0)
   第二次输入x
   (a2,b2) =  *f*(x,a1,b1)
   第三次输入x
   (a0,b0) =  *f*(x,a2,b2) 
   第三次输入的时候，a、b回退到初始值，清除掉
   显然，a,b 有三种状态，初始状态因为没有记录x值，两个肯定都是0,另外两个状态，因为不仅要表达两种状态，还要记录x的值，
   可以设计成 x，0 和 0, x，也就是说 *f*(x,a,b) 第一次接受x的时候，x值记录在a上，第二次接受x的时候，x值记录在b上，第三次接受x的时候，清除记录。
   a和b记录x的值是相斥的，也就是要么a记录，要么b记录
![image.png](https://pic.leetcode-cn.com/19f5304959a0a9aa96adf61d523fea5954b9ba17fc4b79395ed797a62e136aea-image.png)

 7、 因为a、b都要记录x值，那么*f*(x,a,b)肯定有如下逻辑
     a = (a ^ x)
     b = (b ^ x)
     同时，a和b记录x值是相斥的，逻辑可以设计成
     a = (a ^ x) ^ b
     b = (b ^ x) ^ a
     在括号右边再XOR一次另一个值，就可以保证 a和b肯定不可能同时记录 x值，但这个方案有一个问题，因为在遍历所有数的时候，并不能保证所有的x都是同时出现的，可能还有y，而这种设计*f*(x,a,b) 在接受 y 的时候，理应不能变化的但是发生了变化
     a = (a ^ y) ^ b
     b = (b ^ y) ^ a
     因为 a与b再次XOR一次，导致a、b又同时记录了x值
     换一种设计
     a = (a ^ x) & ~b
     b = (b ^ x) & ~a
     这样同样能保证要么a记录x值，要么b记录x值，同时对于y，因为a & ~b ，在记录x的位上，是不会受影响的。
     假设 1 代表记录，0 代表不记录
     当前处于 a = 1，b = 0的时候，此时接受 y，y因为不等于x，所以为0
     a = (1 ^ 0) & ~0 = 1;
     b = (0 ^ 0) & ~1 = 0;
     显然，a、b记录x的状态没有变化，类似的 a =0,b = 1 也是如此。
     对于*f*(x,a,b)
     a = (a ^ x) & ~b
     b = (b ^ x) & ~a
     其实归根到底，&~内在逻辑是a和b的互相控制，
     初始状态下，a = 0,b = 0，对应的&~a = 1,a放开b获取新值的机会，对于的b也放开了a获取新值的机会；
     第一次接受x的时候，因为b放开了对a的控制，先获取新值1，同时，&~a = 0，从而锁住了b获取新值的机会，使得b虽然也接受了x，但值未发生变化，而a还是处于不被b锁住的状态，下次还可以获取新值；
     第二次接受x的时候，因为a还是不受限制，从而使得 a = 0，此时 &~a = 1，放开了b获取新值的控制，b = 1，同时，&~b = 0，从而锁住了a获取新值的机会；
     第三次接受x的时候，a因为受限制，无法获取值，b获取新值，b = 0 ，从而实现 状态还原。
    
     &~ 这个位运算符在此处使用的很精巧！！
```
int singleNumber(vector<int>& nums) {
	int a = 0, b = 0;
	for (auto num : nums) {
		a = (a ^ num) &~b;
		b = (b ^ num) &~a;
	}
	return a;
}
```

