由于异或的特点是相等归0，可以通过这个特点来进行消重，由于有三个相同的数的存在，所以，用两个变量来存储，一个记第一次和第三次出现，一个记第二次出现。

就有了如下过程：
1）某数第一次出现（即b中不存在），存于a
2）某数第二次出现（即a中存在，故从a中清除），存于b
3）某数第三次出现，本来要存于a，结果b中存在，所以，清零

如果某数出现了3次，就被清零，出现了一次，依然存于a中
a最终存储的数据即为出现了一次的那个数。

```
class Solution {
    func singleNumber(_ nums: [Int]) -> Int {
        var a : Int = 0
        var b : Int = 0
        nums.forEach { (num : Int) in
            a = (num ^ a) & ~b
            b = (num ^ b) & ~a
        }
        return a
    }
}
```
