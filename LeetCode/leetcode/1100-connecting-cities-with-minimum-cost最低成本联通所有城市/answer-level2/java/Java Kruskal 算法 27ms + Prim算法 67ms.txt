### Kruskal算法思路

Kruskal算法 = 贪心 + 并查集

流程：将所有边按cost从小到大排序，然后使用并查集依次尝试合并每个边：

- 如果合并成功，则加入这条边。
- 如果合并失败（边的两个节点已经是合并过的），说明产生了环，则丢弃这条边。

通过并查集合并后，每个连通分量节点都会有相同的root，因此检查所有节点的root：

- 如果检查到只有一个root，说明这个图只有一个连通分量，是连通图，返回cost。
- 如果检查到超过一个root，说明这个图有多个连通分量，不是一个连通图，返回-1。


### 代码

```java
class Solution {

    public int minimumCost(int N, int[][] connections) {
        // sort connections by cost from small to large
        Arrays.sort(connections, (a,b) -> a[2]-b[2]);

        int[] parent = new int[N+1];
        for (int i = 1; i <= N; ++i) {
            parent[i] = i;
        }

        int cost = 0;
        for (int[] edge : connections) {
            if (union(edge[0], edge[1], parent)) {
                cost += edge[2];
            }
        }

        // System.out.println(Arrays.toString(parent));

        int p = -1;
        for (int i = 1; i <= N; ++i) {
            int root = findRoot(i, parent);
            if (p == -1) {
                p = root;
            } else if (p != root) {
                return -1;
            }
        }
        return cost;
    }

    public int findRoot(int x, int[] parent) {
        while (x != parent[x]) {
            parent[x] = parent[parent[x]];
            x = parent[x];
        }
        return x;
    }

    public boolean union(int a, int b, int[] parent) {
        a = findRoot(a, parent);
        b = findRoot(b, parent);
        if (a == b) return false;
        parent[a] = b;
        return true;
    }
}
```

![image.png](https://pic.leetcode-cn.com/6da78de1ed1417011e40de96d454ebc6f55266945b7684a1eb03fe66dbe6efb0-image.png)


## Prim算法思路与优化

这道题也可以用Prim算法实现。Kruskal算法每次添加一个最小的边，而Prim算法则是每次添加一个距离已选取节点集最近的点。

流程：

1. 集合S表示已选取的节点集。
2. 选任意一个节点作为起始节点 `a`，放到集合S中。更新其他节点到集合S的最近距离，因为当前S只有一个节点 `a`，即到节点 `a` 的距离。
3. 选取距离S最近的一个节点 `b`，放到集合S中。更新其他节点到集合S的最近距离，也就是 `min { adj[a][i], adj[b][i] }`。
4. 继续选取、更新，直到N个节点都被选取。


实际提交发现，Prim算法效果远不如Kruskal好。

1. 题目给的是边（connections），而使用Prim算法，需要快速得到两个节点之间的距离。如果每次都直接遍历connections，复杂度太高，因此需要先转换成邻接矩阵或邻接表。而**选择合适的邻接矩阵或邻接表**，是能否解决本题的一大关键。

2. 另外一个关键点就是，获取距离最小的节点，可以直接遍历，也可以借助PriorityQueue实现。

下面给出多种Prim算法的实现，并做简单分析。

### 解法1：超出内存限制

最基础的Prim算法实现，使用二维数组保存邻接矩阵，暴力搜索查找距离最小的节点。

代码应该是正确的，在简单的测试用例中运行是正确的。但是由于邻接矩阵太大，导致超出了内存限制，提交未通过。

```java
class Solution {

    public int minimumCost(int N, int[][] connections) {

        int INF = Integer.MAX_VALUE;

        // graph[i][j]:
        //     INF: not reachable
        //     x: distance
        int[][] graph = new int[N+1][N+1];
        for (int i = 1; i <= N; ++i) {
            for (int j = 1; j <= N; ++j) {
                if (i == j) graph[i][j] = 0;
                else graph[i][j] = INF;
            }
        }
        for (int[] edge : connections) {
            int u = edge[0], v = edge[1], w = edge[2];
            graph[u][v] = graph[v][u] = w;
        }

        // dist[i]
        //     d: current min distance from one of added nodes
        //     INF: distance is inf, not reachable
        int[] dist = new int[N+1];
        Arrays.fill(dist, INF);
        // added nodes
        boolean[] added = new boolean[N+1];

        // set node [1] as candidates
        dist[1] = 0;

        int cost = 0;
        for (int k = 0; k < N; ++k) { // N nodes to add

            // find node with min distance
            int min = INF;
            int node = -1;
            for (int i = 1; i <= N; ++i) {
                if (!added[i] && dist[i] < min) {
                    min = dist[i];
                    node = i;
                }
            }

            // no reachable node found
            if (node == -1) {
                return -1;
            }

            // add [node]
            cost += dist[node];
            added[node] = true;

            // update dist[i] with distance from [node] to [i]
            for (int i = 1; i <= N; ++i) {
                if (added[i]) continue;
                if (graph[node][i] == INF) continue;
                dist[i] = Math.min(dist[i], graph[node][i]);
            }
        }
        return cost;
    }
}
```

### 解法2：超出时间限制

优化Prim算法，使用HashMap数组保存领接表，借助PriorityQueue选取距离最小的节点。

超出时间限制。

```java
class Solution {

    public int minimumCost(int N, int[][] connections) {

        // graph[i].get(j):
        //     x: distance
        //     null: not reachable
        Map<Integer, Integer>[] graph = new HashMap[N+1];
        for (int i = 1; i <= N; ++i) {
            graph[i] = new HashMap<>();
        }
        for (int[] edge : connections) {
            int u = edge[0], v = edge[1], w = edge[2];
            graph[u].put(v, w);
            graph[v].put(u, w);
        }

        // heap: candidates
        //     int[0]: distance from added nodes
        //     int[1]: node
        PriorityQueue<int[]> heap = new PriorityQueue<>((a,b) -> a[0] - b[0]);
        // added nodes
        boolean[] added = new boolean[N+1];

        // add node [1] to the candidate collection
        heap.offer(new int[]{0, 1});

        int cost = 0;
        for (int k = 0; k < N; ++k) { // N nodes to add

            // find node with min distance
            int[] min = findMin(heap, added);

            // no reachable node found
            if (min == null) {
                return -1;
            }

            int dist = min[0];
            int node = min[1];

            // add [node]
            cost += dist;
            added[node] = true;

            // add candidates with distance from [node]
            for (int i = 2; i <= N; ++i) {
                if (added[i]) continue;
                Integer d = graph[node].get(i);
                if (d != null) { // d == null: not reachable
                    heap.offer(new int[]{d, i});
                }
            }
        }
        return cost;
    }

    public int[] findMin(PriorityQueue<int[]> heap, boolean[] added) {
        while (heap.size() > 0) {
            int[] n = heap.poll();
            int node = n[1];
            if (!added[node]) {
                return n;
            }
        }
        return null;
    }
}
```

### 解法3：通过，67 ms

正在怀疑是不是自己写错了Prim算法的时候，借鉴了评论区的思路，重新优化了邻接表的表示方法，使用 `HashMap -> List -> int[]` 的形式。

这样在更新距离时，不需要再进行复杂的遍历，也不需要创建很多数组（HashMap邻接表和PriorityQueue中的元素格式是相同的，都是 `[node, distance]`），大大提高了性能。

终于提交通过，耗时67ms。而Kruskal算法的耗时是27ms，并且写起来更容易。

```java
class Solution {

    public int minimumCost(int N, int[][] connections) {

        // graph.get(i).get(x):
        //     int[0]: node
        //     int[1]: distance from [i] to [node]
        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] edge : connections) {
            int u = edge[0], v = edge[1], w = edge[2];
            List<int[]> list1 = graph.get(u);
            if (list1 == null) {
                list1 = new LinkedList<>();
                graph.put(u, list1);
            }
            list1.add(new int[]{v,w});

            List<int[]> list2 = graph.get(v);
            if (list2 == null) {
                list2 = new LinkedList<>();
                graph.put(v, list2);
            }
            list2.add(new int[]{u,w});
        }

        // heap: candidates
        //     int[0]: node
        //     int[1]: distance from one of added nodes
        PriorityQueue<int[]> heap = new PriorityQueue<>((a,b) -> a[1] - b[1]);
        // added nodes
        boolean[] added = new boolean[N+1];

        // add node [1] to the candidate collection
        heap.offer(new int[]{1, 0});

        int cost = 0;
        for (int k = 0; k < N; ++k) { // N nodes to add

            // find node with min distance
            int[] min = findMin(heap, added);

            // no reachable node found
            if (min == null) {
                return -1;
            }

            int node = min[0];
            int dist = min[1];

            // add [node]
            cost += dist;
            added[node] = true;

            // add candidates with distance from [node]
            List<int[]> list = graph.get(node);
            if (list != null) {
                for (int[] e : list) {
                    heap.offer(e);
                }
            }
        }
        return cost;
    }

    public int[] findMin(PriorityQueue<int[]> heap, boolean[] added) {
        while (heap.size() > 0) {
            int[] n = heap.poll();
            int node = n[0];
            if (!added[node]) {
                return n;
            }
        }
        return null;
    }
}
```
