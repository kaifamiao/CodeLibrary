flip-equivalent-binary-trees
我们可以为二叉树 T 定义一个翻转操作，如下所示：选择任意节点，然后交换它的左子树和右子树。

只要经过一定次数的翻转操作后，能使 X 等于 Y，我们就称二叉树 X <em>翻转等价</em>于二叉树 Y。

编写一个判断两个二叉树是否是<em>翻转等价</em>的函数。这些树由根节点<code>root1</code> 和 <code>root2</code>给出。



<strong>示例：</strong>

<pre><strong>输入：</strong>root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
<strong>输出：</strong>true
<strong>解释：</strong>我们翻转值为 1，3 以及 5 的三个节点。
<img alt="Flipped Trees Diagram" src="https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png" style="height: 220px; width: 500px;">
</pre>



<strong>提示：</strong>

<ol>
	每棵树最多有<code>100</code>个节点。
	每棵树中的每个值都是唯一的、在 <code>[0, 99]</code>范围内的整数。
</ol>



翻转等价二叉树
For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.

A binary tree Xis <em>flip equivalent</em> to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.

Write a function that determines whether two binary treesare <em>flip equivalent</em>. The trees are given by root nodes <code>root1</code> and <code>root2</code>.



<strong>Example 1:</strong>

<pre>
<strong>Input: </strong>root1 = <span id="example-input-1-1">[1,2,3,4,5,6,null,null,null,7,8]</span>, root2 = <span id="example-input-1-2">[1,3,2,null,6,4,5,null,null,null,null,8,7]</span>
<strong>Output: </strong><span id="example-output-1">true</span>
<strong>Explanation: </strong>We flipped at nodes with values 1, 3, and 5.
<img alt="Flipped Trees Diagram" src="https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png" style="font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;; width: 455px; height: 200px;" />
</pre>



<strong>Note:</strong>

<ol>
	Each tree will have at most <code>100</code> nodes.
	Each value in each tree will be a uniqueinteger in the range <code>[0, 99]</code>.
</ol>

<div>

</div>
