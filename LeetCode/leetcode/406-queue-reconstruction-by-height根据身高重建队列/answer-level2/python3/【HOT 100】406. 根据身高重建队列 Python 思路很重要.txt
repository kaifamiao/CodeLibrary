

### 1.根据hint思考
这道题拿到的时候有点迷惑，当然也开启了我的median刷题之路，看了hint能够考虑到，如果是最矮的人`[h_min, k_min]`，他应该站在哪里？当然是站在`index=k_min`的位置，因为任何一个人都比他高或相等

找到了最矮的人，那么第二矮的人呢，就要考虑是在最矮的人左边或者右边了，因为他在不在最矮的人前面影响着最矮的人的k，那么这个思路好像有点不太能往下想（当然是因为我想不出来-_-）

但是从这一点可以延伸出两个有用的信息：
- 1.我们可以按身高排序的逐个向队列中插入新的人
- 2.但是我们可以换个角度，从高到矮的插入，因为在高的人前面插入矮的人，并不影响高的人的k


### 2.新思路的思考

这是一个很好的思路：
> 从高到矮的往队列里k的位置上插入新的人，高个子站好了，矮个子插入到k的位置，也不会影响高个子

那么就需要将这个队列先排序：`按照高度h降序，k升序的顺序排列`
那么就要用到Python的`sort()`的方法，并且对于`key`要用到`lambda`形式来保证两个元素一降一升
```python
# 先按-x[0]排序，相同第一个元素按照第二个元素的升序排列
people.sort(key=lambda x : (-x[0], x[1]))
```

然后就需要依次向新队列插入新的人了：
```
class Solution:
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        
        # 对队列进行从高到矮的排序，相同高度按前面有k个人进行升序排列
        # 默认是升序，所以从高到矮排序需要对高度取负排列
        people.sort(key=lambda x: (-x[0], x[1]))
        
        res = []
        
        # 遍历，每次新队列中插入一个人，从高到矮插入
        # 高个子站好了，矮个子往前插入也不影响高个子前面的k个人，（k必须为身高大于或等于h的人）
        for p in people:
            res.insert(p[1], p)
        
        return res
```



### 3.总结与反思
思路是写代码之前最为重要的一步，要理清思路，如何去解决问题，然后用合适的数据结构去完成
当然更重要的是坚持，多看多做，思路才能被打开
今天看到上一次看长难句还是六月份的事情了，现在都已经十二月了，半年都过去了，如果每天坚持哪怕只读一句话，也能有很好的提升，所以现在一定要坚持，包括写leetcode题，从七月开始，断断续续，虽然每天是有很多事情要做，但是一定要扣时间来做这些，为了提升自己，对工作也有帮助作用
一定要努力，要做得更久做得更好