sort-items-by-groups-respecting-dependencies
公司共有<code>n</code>个项目和 <code>m</code>个小组，每个项目要不没有归属，要不就由其中的一个小组负责。

我们用<code>group[i]</code>代表第<code>i</code>个项目所属的小组，如果这个项目目前无人接手，那么<code>group[i]</code> 就等于<code>-1</code>。（项目和小组都是从零开始编号的）

请你帮忙按要求安排这些项目的进度，并返回排序后的项目列表：

<ul>
	同一小组的项目，排序后在列表中彼此相邻。
	项目之间存在一定的依赖关系，我们用一个列表 <code>beforeItems</code>来表示，其中<code>beforeItems[i]</code>表示在进行第<code>i</code>个项目前（位于第 <code>i</code>个项目左侧）应该完成的所有项目。
</ul>

<strong>结果要求：</strong>

如果存在多个解决方案，只需要返回其中任意一个即可。

如果没有合适的解决方案，就请返回一个 <strong>空列表</strong>。



<strong>示例 1：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/22/1359_ex1.png" style="height: 181px; width: 191px;"></strong>

<pre><strong>输入：</strong>n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]
<strong>输出：</strong>[6,3,4,1,5,2,0,7]
</pre>

<strong>示例2：</strong>

<pre><strong>输入：</strong>n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]
<strong>输出：</strong>[]
<strong>解释：</strong>与示例 1 大致相同，但是在排序后的列表中，4 必须放在 6 的前面。
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= m &lt;= n &lt;= 3*10^4</code>
	<code>group.length == beforeItems.length == n</code>
	<code>-1 &lt;= group[i] &lt;= m-1</code>
	<code>0 &lt;= beforeItems[i].length &lt;= n-1</code>
	<code>0 &lt;= beforeItems[i][j] &lt;= n-1</code>
	<code>i != beforeItems[i][j]</code>
</ul>

项目管理
There are<code>n</code>items eachbelonging to zero or one of<code>m</code>groups where <code>group[i]</code>is the group that the <code>i</code>-th item belongs to and it&#39;s equal to <code>-1</code>if the <code>i</code>-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.

Return a sorted list of the items such that:

<ul>
	The items that belong to the same group are next to each other in the sorted list.
	There are somerelationsbetween these items where<code>beforeItems[i]</code>is a list containing all the items that should come before the<code>i</code>-th item in the sorted array (to the left of the<code>i</code>-th item).
</ul>

Return any solution if there is more than one solution and return an <strong>empty list</strong>if there is no solution.


<strong>Example 1:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2019/09/11/1359_ex1.png" style="width: 191px; height: 181px;" /></strong>

<pre>
<strong>Input:</strong> n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]
<strong>Output:</strong> [6,3,4,1,5,2,0,7]
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]
<strong>Output:</strong> []
<strong>Explanation:</strong>This is the same as example 1 except that 4 needs to be before 6 in the sorted list.
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= m &lt;= n &lt;= 3*10^4</code>
	<code>group.length == beforeItems.length == n</code>
	<code>-1 &lt;= group[i] &lt;= m-1</code>
	<code>0 &lt;= beforeItems[i].length &lt;= n-1</code>
	<code>0 &lt;= beforeItems[i][j] &lt;= n-1</code>
	<code>i != beforeItems[i][j]</code>
	<code>beforeItems[i]</code>does not containduplicates elements.
</ul>
