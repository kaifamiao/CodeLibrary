1. 暴力法无法在规定时间内完成所有实例，因此不是合适的解法。但是仔细分析暴力法，其中有许多重复的计算，因此考虑使用动态规划的方法来解决。通过递推公式dp[i, j] = dp[i+1, j-1] && s[i] == s[j]来设计程序，保存中间结果以求得最终结果，且通过重复使用一维dp[]，可降低空间复杂度。
2. 可将问题转化为求两个字符串的最长公共子串问题，同样采用动态规划的思想，初始化二维数组dp[][]全为0.递推公式为：如果s[i] == s[j],那么dp[i, j] = dp[i-1, j-1] + 1，且当i或者j为0时，dp[i,j]为1。但是针对本题，还需要判断翻转后的字符串的公共子串的下标和翻转前的是否能对应上。并且可以重复使用一维dp[]，降低空间复杂度。
3. 针对回文串的特性，还可以使用中心扩展法。针对奇数和偶数的情况，如aba和abba。有n+n-1种情况需要遍历。此法相对简单且结果好。