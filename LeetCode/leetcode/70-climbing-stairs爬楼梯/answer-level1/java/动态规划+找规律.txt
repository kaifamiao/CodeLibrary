### 解题思路
动态规划原创第一题，记录一下~
这题一看，重叠子问题，果断动态规划了。dp[i]表示当台阶总数为i时，不同的走法的总数。也就是每一个下角标对应一个以该下角标为台阶总数时的走法总数（动态规划常见的想法）。既然用动态规划，最重要的就是状态转移方程（递推关系式），也就是数学归纳法中用k状态下的结果推算k+1状态下的结果的计算方法。一开始还在想dp[i]和dp[i-1]还有dp[i-2]有什么关系，是不是还要按每一步是1阶还是2阶进行分类讨论。后来从1写到7写开之后，才发现方法数的排列结果和斐波那契数列完全吻合，也就是dp[i]=dp[i-1]+dp[i-2]，再考虑一下base case，然后就ac了。

### 代码

```java
class Solution {
    public int climbStairs(int n) {
        // dp[i]表示 总共走i阶台阶条件下 所有可能的走法数
        // dp[i] = dp[i - 1] 如果只多一阶的话，走法数一样
        // dp[i] = dp[i - 2] + 2 如果多两阶的话，走法数多两种
        if(n < 2) return n;
        int[] dp = new int[n + 1];  // 最多需要爬n阶(每次一阶)，所以dp数组设置成n+1 角标[0, n]
        dp[0] = 0;  // 如果0阶，0种走法
        dp[1] = 1;  // 如果只有1阶，只有一种走法
        dp[2] = 2;
        // int[] steps = new int[]{1, 2};
        for(int i = 3; i < n + 1; i++) {  // [2, n]
            // 状态转移方程? 取决于奇偶?
            dp[i] = dp[i - 1] + dp[i - 2]; // 找规律：斐波那契数列        
        }
        return dp[n];        
    }
}
```