思路： 假设有20阶
f(1)=1;
f(2)=2;
f(3)详细分解一下：第一步要么是1步，要么是2步；1步的话，还剩2阶，等同于f(2);2步的话，还剩一步，等同于f(1). 故 = f(2)+f(1);
f(4), 跟f(3)一样的思路，走完第一步即可， = f(3)+f(2);
..
规律就是f(n) = f(n-1)+f(n-2),n>=3。很明显的斐波那契数。

所以，代码写起来就相对简单了，依次记下来前后两个数即可。
```
 public int climbStairs(int n) {
        //很明显f(n) = f(n-1)+f(n-2)
        //记下来前后两个数即可
        if (n == 1) {
            return 1;
        }
       int a = 1, b =2, t;
        for (int i = 3; i < n + 1; i++) {
            t = a;
            a = b;
            b = b + t;
        }
        return b;
    }
```

这道题的问题在于，n没有限定范围。发现当n=46时，f(n)已经超过了java里int的最大值，比较尴尬。


