### 解题思路

典型的DP题目:
- 首先想一下数组的含义应该是什么
  这里就是:求什么设什么,所以我们设dp[i] = 上楼梯的方法数;

- 然后,求状态转化方程:
    最终我们要求的是dp[i]，要想求出他，必须先求出他前面的，也就是怎么到达最后一个台阶的，无非是两种方法，一个是跳一步，一个是跳两步，即dp[i-1]与dp[i-2];

- 所以方程为: `dp[i]=dp[i-1]+dp[i-2]`

- 最后求初始值,看看那几个数是方程求不出来的,显然i=1的时候方程无意义,因为数组的下标不能是负数,所以初始值应该是dp[0]dp[1]和dp[2],因为将2带进去方程求得是不对的,这里容易出错.

- 还有是优化,空间复杂度可以优化,因为一直是3个数的循环

### 代码

```java
class Solution {
    public int climbStairs(int n) {
        
        if (n<=2) {
            return n;
        }

        int[] dp = new int[n+1];

        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 2;

        for (int i=3; i<=n; i++) {
            dp[i] = dp[i-1] + dp[i-2];
        }

        return dp[n];
    }
}
```