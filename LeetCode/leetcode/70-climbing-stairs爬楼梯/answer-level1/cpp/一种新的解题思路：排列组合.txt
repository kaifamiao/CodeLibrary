**整体思路**：
最终的到达方式中，肯定无外乎三种情况：
1、全为1阶到达；
2、有1阶+有2阶(这里需要考虑的问题就是各占多少个)；
3、全为2阶到达；

重点考虑情况2：(这里不妨以2阶的数量k作为研究对象)
k=0, 此时情况等价于在n  个位置上，只有1阶这一个元素摆放，所以方法有C(n,0)种；
k=1, 此时情况等价于在n-1个位置上，有1个元素为2阶，其他元素全为1阶，所以排列方式为C(n-1,1)种；
k=2, 此时情况等价于在n-2个位置上，有2个元素为2阶，其他元素全为1阶，所以排列方式为C(n-2,2)种；
.....
k=n/2(先考虑n为偶数),
     此时情况等价于在n-n/2个位置上，有n/2个元素为2阶，其他元素全为1阶，所以排列方式为C(n-n/2,n/2)种；

最后将上述所有排列方式求和即为最终的到达方式。
附代码
```
class Solution {
public:
    long long GetCni(int n, int i) {
        i = (n - i > i)? i : (n - i);
        if(i == 0) return 1;
        else return GetCni(n, i-1)*(n-i+1)/i;
    }
    int climbStairs(int n) {
        int i = 0;
        int Sum = 0;
        while(i <= n/2) {
            Sum += GetCni(n-i, i);
            //cout << "i = " << i << "Cni = " << Sum << "\n";
            i++;
        }

        return Sum;
    }
};
```
