### 解题思路
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶




这类问题，因为每次可以走1步或者2步，  所以S(n) = S(n-1) + S(n-2)

可以画图最后一步只能分1步进或者2步进 完成， 这样没有重复直接相加即可。

奇怪直接递归会超时， 参考官方题解用了个数组先算出来也行。

### 代码

```c


int climbStairs(int n){
    
    int i;
    int *dp = malloc((n+1)*sizeof(int));
    dp[0] = 1;
    dp[1] = 2; 
    for(i=2;i<n;i++){
        dp[i] = dp[i-1] + dp[i-2]; 
    }
    i = dp[n-1];
    free(dp);
    return i;
}
```