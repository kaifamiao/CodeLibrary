```java
private boolean find(TreeNode root, int value) {
    if (root == null) {
        return false;
    }

    if (root.val == value) {
        return true;
    } else if (root.val < value) {
        return find(root.right, value);
    } else {
        return find(root.left, value);
    }
}

public boolean twoSumBSTs(TreeNode root1, TreeNode root2, int target) {
    if (root1 == null) {
        return false;
    }

    // 使用或运算进行短路操作，找到就终止
    return find(root2, target - root1.val) || twoSumBSTs(root1.left, root2, target) ||
            twoSumBSTs(root1.right, root2, target);
}
```
**思路：**
1. 遍历其中一棵BST1,遍历到每个结点的时候，取出该结点值node.val，求得(target-node.val)的值拿到BST2去查找，找到就返回true。
2. 若同步步骤1没找到，则递归遍历BST1的左子树和BST1的右子树，不断执行步骤1，直到找到或者所有节点遍历完也未找到为止。