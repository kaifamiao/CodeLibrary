### 1. 题目分析
- 由于数独为$9\times 9$结构，故为了验证是否有效需要两轮循环
- 优化的关键就在于**如何通过一次两轮循环，完成横、纵、小宫的有效性判断**，需要简单推导一下坐标之间的关系

### 2. 简单推导
我们假设外层循环变量为$i$，内层循环变量为$j$，那么：
- $board[i][.]$表示第$i$行，$board[.][j]$表示第$j$列
- $board[i][j]$唯一表示第$i$行，第$j$列的元素
- 如何用坐标表示小宫内的格子？
    - 由于一共有$9$个小宫，每个小宫有$9$格，每次遍历时都会依次检查小宫里的每一格。相当于**固定一个小宫$i$，遍历小宫内的格子$j$**。
    - 如图所示，九个小宫用不同的颜色表示，每个小宫的左上角为小宫的第$0$个格子(深色标记)。
    - 我们设标号顺序为从左往右，从上往下。那么：
      - 格子$A$可以记为：第$5$宫，第$3$格($i=5,j=3$)，坐标为$(4,6)$
      - 格子$B$可以记为：第$6$宫，第$5$格($i=6,j=5$)，坐标为$(7,2)$
      - 格子$C$可以记为：第$8$宫，第$1$格($i=8,j=1$)，坐标为$(6,7)$
![image.png](https://pic.leetcode-cn.com/9422813a29a996ca41ddcbb3649444c41acd2153075be537ec88fb1ca3b9104a-image.png)
    - 下面我们求出小宫的标号(第$i$宫)、小宫内格子的标号(第$j$格)的坐标
![image.png](https://pic.leetcode-cn.com/4bf9994d56f87dc4f45727793438bd99e7eaa2c4ab663fd25950b7f9d6faafdf-image.png)

      - 首先求第$i$宫，第$0$格的坐标
        - 横坐标(行)：第$i$宫向下偏移(行偏移)了$i/3$个宫，一个小宫占$3$行，故横坐标为$3*(i/3)$
        - 纵坐标(列)：第$i$宫向右偏移(列偏移)了$i\%3$个宫，一个小宫占$3$列，故横坐标为$3*(i\%3)$
        - 故第$i$宫，第$0$格的坐标为
       $$(3*(i/3), 3*(i\%3))$$
      - 然后求第$j$格相对于第$0$格的偏移
        - 横坐标(行)：第$j$格相对于第$0$格，偏移了$j/3$行
        - 纵坐标(列)：第$j$格相对于第$0$格，偏移了$j\%3$列
        - 故第$j$格相对于第$0$格的偏移为：
      $$(j/3, j\%3)$$
      - 综上所述，第$i$宫，第$j$格的坐标为：
      $$(3*(i/3)+j/3, 3*(i\%3)+j\%3)$$
- 由嵌套循环的知识(**外层固定，内层遍历**)：
  - $borad[i][j]$表示了对固定的一行$i$，遍历列$j$(即每次检查一整行)
  - $board[j][i]$表示了对固定的一列$i$，遍历行$j$(即每次检查一整列)
  - $board[3*(i/3)+j/3][3*(i\%3)+j\%3]$表示了对固定的宫$i$，遍历格$j$(即每次检查一个宫)

### 3. 位运算
- 基本知识：
    - 与运算($a \& b$)：$a,b$均为$1$时，返回$1$，否则返回$0$
    - 异或运算($a$ $^$ $b$)：$a,b$不同时为$0$或$1$时，返回$1$，否则返回$0$
- 本题可以使用一个$9$位二进制数判断数字是否被访问。第$k$位数为$1$代表已加入，为$0$代表未加入
- 更新方式(记九位数为$val$，传入的数字为$n$)：
  - 判断是否加入：将九位数右移位$n$位，与$1$进行与运算
    - 结果为$0$：未加入，将传入的数字加入九位数
    - 结果为$1$：已加入，返回`false`
  - 将传入的数字加入九位数：将$1$左移位$n$位，与$val$异或即可
- 例子：对于数字$1010010000$，其第$4,7,9$位为$1$，表示当前$4,7,9$已经访问过了
  - 新来数字为$3$：
    - 将$1010010000$右移3位得到$1010010$，与$1$进行与运算，结果为$0$，未访问过。
    - 将$1$左移位$3$位得到$1000$，异或后得到$1010011000$
  - 新来数字为$4$：
    - 将$1010010000$右移4位得到$101001$，与$1$进行与运算，结果为$1$，访问过。
    - 返回`false`
### 4. Coding
```java
public boolean isValidSudoku(char[][] board) {
    for(int i = 0; i < 9; i ++){
        // hori, veti, sqre分别表示行、列、小宫
        int hori = 0, veti = 0, sqre = 0;
        for(int j = 0; j < 9; j ++){
            // 由于传入为char，需要转换为int，减48
            int h = board[i][j] - 48;
            int v = board[j][i] - 48;
            int s = board[3 * (i / 3) + j / 3][3 * (i % 3) + j % 3] - 48;
            // "."的ASCII码为46，故小于0代表着当前符号位"."，不用讨论
            if(h > 0){
                hori = sodokuer(h, hori);
            }
            if(v > 0){
                veti = sodokuer(v, veti);
            }
            if(s > 0){
                sqre = sodokuer(s, sqre);
            }
            if(hori == -1 || veti == -1 || sqre == -1){
                return false;
            }
        }
    }
    return true;
}

private int sodokuer(int n, int val){
    return ((val >> n) & 1) == 1 ? -1 : val ^ (1 << n);
}
```
时间复杂度$O(1)$，空间复杂度$O(1)$。
<br>执行结果如下图：
![image.png](https://pic.leetcode-cn.com/07fc273cc550e2f7098d481e6beb5aa32b13ad3b1142508c1f8e7ebf5fb006af-image.png)
