![image.png](https://pic.leetcode-cn.com/c67c18ed7af6dcaeb5da51e5286a96e384c9ec8ec6b9a94eb88963de880aced6-image.png)
<br>
均击败99%，都很容易理解！
<br>

**其他Java相关优化操作：**
1. 数组最大长度为`tokens.length / 2 + 1`
2. switch代替if-else，效率优化
3. Integer.parseInt代替Integer.valueOf,减少自动拆箱装箱操作

附两种方法：
**纯数组模拟栈实现(推荐)：**
```java
class Solution {
	//纯数组模拟栈实现(推荐)   3 ms	36 MB
	public static int evalRPN(String[] tokens) {
		int[] numStack = new int[tokens.length / 2 + 1];
		int index = 0;
		for (String s : tokens) {
			switch (s) {
			case "+":
				numStack[index - 2] += numStack[--index];
				break;
			case "-":
				numStack[index - 2] -= numStack[--index];
				break;
			case "*":
				numStack[index - 2] *= numStack[--index];
				break;
			case "/":
				numStack[index - 2] /= numStack[--index];
				break;
			default:
				// numStack[index++] = Integer.valueOf(s);
				//valueOf改为parseInt，减少自动拆箱装箱操作
				numStack[index++] = Integer.parseInt(s);
				break;
			}
		}
		return numStack[0];
	}
}
```
**栈实现：**
```java
class Solution {
	// 栈实现   8 ms	36.7 MB	
	public static int evalRPN(String[] tokens) {
		Stack<Integer> numStack = new Stack<>();
		Integer op1, op2;
		for (String s : tokens) {
			switch (s) {
			case "+":
				op2 = numStack.pop();
				op1 = numStack.pop();
				numStack.push(op1 + op2);
				break;
			case "-":
				op2 = numStack.pop();
				op1 = numStack.pop();
				numStack.push(op1 - op2);
				break;
			case "*":
				op2 = numStack.pop();
				op1 = numStack.pop();
				numStack.push(op1 * op2);
				break;
			case "/":
				op2 = numStack.pop();
				op1 = numStack.pop();
				numStack.push(op1 / op2);
				break;
			default:
				numStack.push(Integer.valueOf(s));
				break;
			}
		}
		return numStack.pop();
	}
}
```
