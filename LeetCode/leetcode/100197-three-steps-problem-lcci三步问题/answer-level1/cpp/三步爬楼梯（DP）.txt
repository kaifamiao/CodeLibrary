### 解题思路
- 动态规划思想
- dp[i]表示爬到第i层楼梯有多少种方法。显然dp[1] = 1; dp[2] = 2; dp[3] = 4;
- 对于第i层楼梯可以有3中方法到达：
    - 从第i-3层楼梯一步到达；
    - 从第i-2层楼梯一步到达；
    - 从第i-1层楼梯一步到达；
    - 注意：从第i-2层楼梯两步到达的情况已经包含在从第i-1层楼梯一步到达的情况里面了，不能重复计算。
- 因此状态转移方程为：dp[i] = dp[i - 3] + dp[i - 2] + dp[i - 1];
- 注意题目中数据较大，取模的时候不能三个数加起来再取模，会溢出。要dp[i - 3] + dp[i - 2]的和先取模，然后再＋dp[i - 1]，再取模。

### 代码

```cpp
class Solution {
public:
    int waysToStep(int n) {
        int dp[n + 1];
        for(int i = 1; i <= n; i++){
            if(i == 1)  dp[i] = 1;
            else if(i == 2)     dp[i] = 2;  //边界条件
            else if(i == 3)     dp[i] = 4;  //边界条件
            else{                           //状态转移方程
                int temp = (dp[i - 3] + dp[i - 2]) % 1000000007;    //取模注意不要溢出
                dp[i] = (temp + dp[i - 1]) % 1000000007;
            }
        }
        return dp[n];
    }
};
```