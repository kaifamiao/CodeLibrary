clumsy-factorial
通常，正整数 <code>n</code> 的阶乘是所有小于或等于 <code>n</code> 的正整数的乘积。例如，<code>factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>。

相反，我们设计了一个笨阶乘 <code>clumsy</code>：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(/)，加法(+)和减法(-)。

例如，<code>clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1</code>。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。

另外，我们使用的除法是地板除法（<em>floor division</em>），所以<code>10 * 9 / 8</code>等于<code>11</code>。这保证结果是一个整数。

实现上面定义的笨函数：给定一个整数 <code>N</code>，它返回 <code>N</code> 的笨阶乘。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>4
<strong>输出：</strong>7
<strong>解释：</strong>7 = 4 * 3 / 2 + 1
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>10
<strong>输出：</strong>12
<strong>解释：</strong>12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
</pre>



<strong>提示：</strong>

<ol>
	<code>1 &lt;= N &lt;= 10000</code>
	<code>-2^31 &lt;= answer &lt;= 2^31 - 1</code> （答案保证符合 32 位整数。）
</ol>

笨阶乘
Normally, the factorial of a positive integer <code>n</code>is the product of all positive integers less than or equal to <code>n</code>. For example, <code>factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>.

We instead make a <em>clumsy factorial:</em>using the integers in decreasing order, weswap out the multiply operations for a fixed rotation of operations:multiply (*), divide (/), add (+) and subtract (-) in this order.

For example, <code>clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1</code>. However, these operations are still applied using the usual order of operations of arithmetic: we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.

Additionally, the division that we use is <em>floor division</em>such that<code>10 * 9 / 8</code>equals<code>11</code>. This guarantees the result isan integer.

<code><font face="sans-serif, Arial, Verdana, Trebuchet MS">Implement the</font>clumsy</code>functionas defined above: given an integer <code>N</code>, it returns the clumsy factorial of <code>N</code>.



<strong>Example 1:</strong>

<pre>
<strong>Input: </strong>4
<strong>Output:</strong>7
<strong>Explanation:</strong> 7 = 4 * 3 / 2 + 1
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input: </strong><span id="example-input-1-1">10
</span><strong>Output: </strong><span id="example-output-1">12
</span><strong>Explanation: </strong>12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
</pre>



<strong>Note:</strong>

<ol>
	<code>1 &lt;= N &lt;= 10000</code>
	<code>-2^31 &lt;= answer &lt;= 2^31 - 1</code> (The answer is guaranteed to fit within a 32-bit integer.)
</ol>
