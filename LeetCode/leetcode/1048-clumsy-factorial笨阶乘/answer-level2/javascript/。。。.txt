```
/**
 * @param {number} N
 * @return {number}
 * N = 1 1
 * N = 2 2
 * N = 3 6
 * N = 4 7
 * 令K = N - 2
 * 当N >= 5时,有
 * N * (N - 1) / (N - 2) = N + 1(题目说的除法取地板， 直接四则运算就是这个结果，没什么好证明的)
 * 或者换个说法，K>=3时，(K + 2) * (k + 1) / k = k + 3
 * 当k <= 2时 (K + 2) * (k + 1) / k = k ** 2 + 3 + 2 / k
 * N = 5 7 ==> N + 2
 * N = 6 8 ==> N + 2
 * N = 7 6 ==> N - 1
 * N = 8 9 ==> N + 1
 * 当N >= 9 时，
 * N * (N - 1) / (N - 2) + ... + ... + [(N- 3) - (N - 4) * (N - 5) / (N - 6)]  + ... + 余项
 * 前面知道N * (N - 1) / (N - 2) = N + 1， 
 * 那么 (N- 3) - (N - 4) * (N - 5) / (N - 6) = 0
 * 同理(N- 6) - (N - 7) * (N - 8) / (N - 9) = 0
 * 以此类推，当N >= 9 时结果就是前面三项N * (N - 1) / (N - 2)再加最后的余项
 * 那么最后的余项是多少呢?
 * 当N % 4 = 0 余项是+5 - 4 * 3 / 2 + 1 = 0, 结果就是 N + 1 + 0 = N + 1
 * 当N % 4 = 1，余项是+2 -1，结果就是N + 1 + 2 - 1 = N + 2
 * 当N % 4 = 2，余项是+3 - 2 * 1，结果就是N +1 + 3 - 2 * 1 = N + 2
 * 当N % 4 = 3,余项是+4 - 3 * 2 / 1,结果就是N + 1 + 4 - 3 * 2 / 1 = N - 1
 * 当5 <= N <=8 时，也符合这个规律，可以合并进来，
 * 那么结果就分两种情况
 * 1.N <= 4
 * 2. N >= 5
 */
const res1 =[1, 2, 6, 7]
var clumsy = function(N) {
    if(N <= 4) return res1[N - 1]
    switch(N % 4) {
        case 0: return N + 1
        case 1: return N + 2
        case 2: return N + 2
        case 3: return N - 1
    }
};

```
