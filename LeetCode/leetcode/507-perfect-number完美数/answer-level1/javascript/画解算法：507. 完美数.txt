## 解题方案

### 思路:

- 标签：数学
- 首先由于完美数的定义，需要排除自身，所以数字 $1$ 一定不是完美数
- 其次我们需要计算 `num` 除了它自身以外的所有正因子之和 `sum`，正因子必然是成对出现的，故而我们只需要遍历到 `num` 的平方根 `sqrt` 即可
  - 以 $36$ 为例，它的非自身外正因子有，`1、2、3、4、6、9、12、18`，其中 $1$ 和 $6$ 单独计算，`[2, 18]、[3, 12]、[4, 9]`都是对应关系、
  - 所以只需要遍历到 $36$ 的平方根 $6$ 就可以获取全部正因子
  - $1$ 单独计算的原因是要排除自身，$6$ 单独计算的原因是 `6 * 6 = 36`，两个值相同，故而只能计算一遍
- 时间复杂度：$O(\sqrt{n})$，$n$ 为 `num` 的大小

**Tips：完美数只有 6, 28, 496, 8128, 33550336 这几个，可以通过判断该数字是否为以下几个来解决**

### 代码:


```Java []
class Solution {
    public boolean checkPerfectNumber(int num) {
        if(num == 1) {
            return false;
        }
        int sum = 1; // 正整数一定会有一个1，同时不用考虑自身，所以单独处理
        int i = 2;
        double sqrt = Math.sqrt(num);
        for(;i < sqrt;i++) {
            if(num % i == 0) {
                sum += i;
                sum += num / i;
            }
        }
        // 此处单独处理的原因在于只需要加1次i值，如果在循环中会加2次
        if(i * i == num) {
            sum += i;
        }
        return sum == num;
    }
}
```

```JavaScript []
/**
 * @param {number} num
 * @return {boolean}
 */
var checkPerfectNumber = function(num) {
    if(num == 1) {
        return false;
    }
    let sum = 1; // 正整数一定会有一个1，同时不用考虑自身，所以单独处理
    let i = 2;
    const sqrt = Math.sqrt(num);
    for(;i < sqrt;i++) {
        if(num % i == 0) {
            sum += i;
            sum += num / i;
        }
    }
    // 此处单独处理的原因在于只需要加1次i值，如果在循环中会加2次
    if(i * i == num) {
        sum += i;
    }
    return sum == num;
};
```


### 画解:


<![1.png](https://pic.leetcode-cn.com/88c97bb2549b88550d4803c21323b587b00f417a2f101dfcc2506ea6e650f579-1.png),![2.png](https://pic.leetcode-cn.com/bf8a4e9d480b929682d42755b465f9881e0e70a53af9ed63017ab6382d9ce3b6-2.png),![3.png](https://pic.leetcode-cn.com/a03dc2e168395a66608d8a904d656fa216c1293818b8e45f7be3071412d358dc-3.png),![4.png](https://pic.leetcode-cn.com/7efafc636754d3d85bc42b62d2e5f0b88122636b226ae6548f47ef1ced900bd8-4.png),![5.png](https://pic.leetcode-cn.com/e2315b424e57cbbbcdaf77bcb9ee402c37848b5ff9fc15ad1446d24379295e1a-5.png),![6.png](https://pic.leetcode-cn.com/e0695c676d03d05df34839f90d9d6da8137db6c45a69e569564a7602950f1dd8-6.png),![7.png](https://pic.leetcode-cn.com/7a5e6f7987bfd9759383afeff186f4463c8f40895b18d61399914a1704584931-7.png),![8.png](https://pic.leetcode-cn.com/03df2d253382cdd5181e73e9d21ac854833ac25d1a2b010faef43f1ace2cf117-8.png),![9.png](https://pic.leetcode-cn.com/f25f298bfee33bdff5185658b840c0e624556349e6ad74a90dc692d1e7caac15-9.png)>



