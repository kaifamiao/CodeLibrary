思路：首先分析题目所包含的状态：一共有n天，每天可能偷也可能不偷，因此可以用dp[n][2]来表示出所有状态，并且dp[n][2]的取值为当前状态下已经抢劫的最大收益，举个例子:dp[1][0]=5代表第2天不抢劫的最大收益为5（索引从0开始，所以dp[1]代表第2天），现在我们开始总结状态转移方程，根据题目我们不难得出：dp[i][0]=max(dp[i-1][0], dp[i-1][1])，形象解释就是第i天不偷的最大收益，等于第i-1天不偷的最大收益和第i-1天偷的最大收益中较大的值（因为求的是dp[i][0]，表示第i天不偷，因此前一天可能偷也可能不偷），dp[i][1]=dp[i-1][0]+nums[i]，形象解释就是第i天偷的最大收益，等于第i-1天不偷的最大收益加上第i天家里的钱（因为求的是dp[i][1]，表示第i天偷，因此前一天肯定不能偷），这样就做好了前期工作。可以看到每个状态只与前一天的状态有关，因此我们可以只用两个变量dp_i_0和dp_i_1来代替状态数组dp[n][2]，因为第1天之前不可能偷窃，所以dp_i_1的base case初始化为一个很小的负数来代表不可能性，第1天之前不偷的收益肯定为0，所以dp_i_0的base case初始化为0，代码如下：
```
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dp_0, dp_1 = 0, -1000000000
        for i in range(len(nums)):
            tmp = dp_0
            dp_0 = max(dp_0, dp_1)
            dp_1 = tmp+nums[i]
        return max(dp_0, dp_1)
```
