__分析：__

由于小偷不能偷相邻房屋，因此容易让人联想到对奇数偶数元素求和的方法。但是仔细想想这道题又不能完全用奇偶数的方法，例如`[3,1,1,5,1,7,1]`这样的房屋排列，无论小偷偷奇数位置的房屋还是偶数位置的房屋都不能偷得最多的钱。所以小偷不是只能偷相隔一间的房屋，还可以选择相隔两间的（这样求和的元素就是奇偶混杂的），但是如果相隔两间以上就没必要了，因为这中间的房屋只要不相隔都是可以偷的。

__总结：__

根据以上分析，我们发现这道题需要使用动态规划算法，偷到第i个房屋可能是跨过了前面两个房屋（第i-3个），也可能是跨过了前面一个房屋（第i-2个）。`dp[i]`表示偷完第i个房屋持有的总现金，`nums[i]`表示第i个房屋内的现金，公式就是：
```
dp[i] = max(dp[i-2]+nums[i], dp[i-3]+nums[i])
```
然后就是初始化dp数组的问题。`dp[0]`自然就是偷第一个房屋的现金数，没有什么好选择的，因此`dp[0] = nums[0]`，同理`dp[1] = nums[1]`。而偷到第三个房屋只能是偷完第一个房屋过来，所以`dp[2] = nums[0] + nums[2]`。
最后在返回结果时要注意，因为偷最后一个房屋和偷倒数第二个房屋肯定是不一样的偷法，不知道哪种偷的更多，因此直接返回最大值即可。

__代码：__
```
class Solution:
    def rob(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 0:
            return 0
        if n <= 2:
            return max(nums)
        i = 3
        dp = [nums[0]] + [nums[1]] + [nums[0] + nums[2]] + [0] * (n-3)
        while i < n:
            dp[i] = max(dp[i-2]+nums[i], dp[i-3]+nums[i])
            i += 1
        return max(dp)
```