#### 解题思路：
看到最短路径，首先想到的就是 BFS，BFS 不行再考虑 DP。

那么我们先考虑 BFS，很显然，我们只要把蛇每次走位的坐标存到队列中，先进先出（FIFO），只要和目标坐标相等，即可返回。
我在这里没有存每个点的横坐标和纵坐标。通过一个值去计算两个坐标 比如当前值为 8（表的大小为 `m*n`）， 横坐标 = `8%n`, 纵坐标 = `8/n`，假设当前位置是 `(x1, x2)`

那么蛇都有哪几种走位呢：
1. **如果没有障碍，则向右移动一个单元格。并仍然保持身体的水平／竖直状态**
因为题目说了仍然保持身体的水平/竖直状态，所以蛇在竖直状态也是可以向右平移
![snake1.gif](https://pic.leetcode-cn.com/7d901d3fb531bedbb4fc67c336f89925bf150a0bdd2302d5ec9a71f83ae0bd73-snake1.gif){:width=300}  ![snake2.gif](https://pic.leetcode-cn.com/75c0027d91c15c9909bf8b2a4530de236c0e96cd409f1f9c956c4cddba050088-snake2.gif){:width=300}
我们不用刻意去考虑这两种状态 只需要检查`(x1 + 1)`和`(x2 + 1)`是否有障碍物
2. **如果没有障碍，则向下移动一个单元格。并仍然保持身体的水平／竖直状态**
水平和竖直状态都是可以向下移动
![snake3.gif](https://pic.leetcode-cn.com/71687d8add024ade4112b2b89f99578cfe2ea3b928aca4b79a2f340b4013458a-snake3.gif){:width=300} ![snake4.gif](https://pic.leetcode-cn.com/ec7eee8a0c8d989e67dc9af26a0494f13996c7214ba2ab2843b8699c3662f034-snake4.gif){:width=300}
这里也不用刻意去考虑这两种状态 只需要检查`（x1 + n)`和`（x2 + n）`是否有障碍物
3. **如果它处于水平状态并且其下面的两个单元都是空的，就顺时针旋转 90 度**
这里只有水平状态才可以移动
![snake5.gif](https://pic.leetcode-cn.com/ea1b4c837ce7d5cfe865dbd9766650bf69f7357e4e5e387c15089bf7944dfeeb-snake5.gif){:width=300}
通过图可以发现这种状态是检查`（x1 + n）`和`（x2 + n）`是否有障碍物，可以归到第 2 种状态中

4. **如果它处于竖直状态并且其右面的两个单元都是空的，就逆时针旋转 90 度**
![snake6.gif](https://pic.leetcode-cn.com/cd54f2f50f4980948f6ac2db337e1f0a39bf06b6fb0b0d3b7fe8d7fc373658b1-snake6.gif){:width=300}
通过图可以发现这种状态是检查`（x1 + 1）`和`（x2 + 1）`是否有障碍物，可以归到第1种状态中


通过分析，我们只需要检查两种状态
1. 如果`（x1 + 1)` 和 `（x2 + 1)` 没有障碍物，向右平移，如果是竖直状态，还可以旋转
2. 如果`（x1 + n)` 和 `（x2 + n)` 没有障碍物，向下平移，如果是水平状态，还可以旋转

然后就是基本的 BFS 了，符合条件且没有访问过，加入到队列中，步数 +1，一直循环直到到达目的地或者队列为空。
#### 代码：
```go [-Go]
func minimumMoves(grid [][]int) int {
	m, n := len(grid), len(grid[0])
	visited := map[[2]int]bool{}
	targetX, targetY := m*n-2, m*n-1
	stack := [100000][3]int{}
	start, end := 0, 0
	stack[start] = [3]int{0, 1, 0}

	check := func(x, y, step int) bool {
		if x == targetX && y == targetY {
			return true
		}
		if visited[[2]int{x, y}] {
			return false
		}
		visited[[2]int{x, y}] = true
		end++
		stack[end] = [3]int{x, y, step + 1}
		return false
	}

	for start <= end {
		a, b, step := stack[start][0], stack[start][1], stack[start][2]
		start++
		x0, y0 := a/n, a%n
		x1, y1 := b/n, b%n
		// 向右
		if y0+1 < n && grid[x0][y0+1] == 0 && y1+1 < n && grid[x1][y1+1] == 0 {
			if check(n*x0+y0+1, n*x1+y1+1, step) {
				return step + 1
			}

			if y0 == y1 { // 竖直状态
				if check(a, n*x0+y0+1, step) {
					return step + 1
				}
			}
		}

		// 向下
		if x0+1 < m && grid[x0+1][y0] == 0 && x1+1 < m && grid[x1+1][y1] == 0 {
			if check(n*x0+y0+n, n*x1+y1+n, step) {
				return step + 1
			}

			if x0 == x1 { // 水平状态
				if check(a, n*x0+y0+n, step) {
					return step + 1
				}
			}
		}
	}
	return -1
}

```
