minimum-moves-to-reach-target-with-rotations
你还记得那条风靡全球的贪吃蛇吗？

我们在一个<code>n*n</code>的网格上构建了新的迷宫地图，蛇的长度为 2，也就是说它会占去两个单元格。蛇会从左上角（<code>(0, 0)</code>和<code>(0, 1)</code>）开始移动。我们用 <code>0</code> 表示空单元格，用 1 表示障碍物。蛇需要移动到迷宫的右下角（<code>(n-1, n-2)</code>和<code>(n-1, n-1)</code>）。

每次移动，蛇可以这样走：

<ul>
	如果没有障碍，则向右移动一个单元格。并仍然保持身体的水平／竖直状态。
	如果没有障碍，则向下移动一个单元格。并仍然保持身体的水平／竖直状态。
	如果它处于水平状态并且其下面的两个单元都是空的，就顺时针旋转 90 度。蛇从（<code>(r, c)</code>、<code>(r, c+1)</code>）移动到 （<code>(r, c)</code>、<code>(r+1, c)</code>）。<br>
	<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/28/image-2.png" style="height: 134px; width: 300px;">
	如果它处于竖直状态并且其右面的两个单元都是空的，就逆时针旋转 90 度。蛇从（<code>(r, c)</code>、<code>(r+1, c)</code>）移动到（<code>(r, c)</code>、<code>(r, c+1)</code>）。<br>
	<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/28/image-1.png" style="height: 121px; width: 300px;">
</ul>

返回蛇抵达目的地所需的最少移动次数。

如果无法到达目的地，请返回<code>-1</code>。



<strong>示例 1：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/28/image.png" style="height: 439px; width: 400px;"></strong>

<pre><strong>输入：</strong>grid = [[0,0,0,0,0,1],
               [1,1,0,0,1,0],
              [0,0,0,0,1,1],
              [0,0,1,0,1,0],
              [0,1,1,0,0,0],
              [0,1,1,0,0,0]]
<strong>输出：</strong>11
<strong>解释：
</strong>一种可能的解决方案是 [右, 右, 顺时针旋转, 右, 下, 下, 下, 下, 逆时针旋转, 右, 下]。
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>grid = [[0,0,1,1,1,1],
              [0,0,0,0,1,1],
              [1,1,0,0,0,1],
              [1,1,1,0,0,1],
              [1,1,1,0,0,1],
              [1,1,1,0,0,0]]
<strong>输出：</strong>9
</pre>



<strong>提示：</strong>

<ul>
	<code>2 &lt;= n &lt;= 100</code>
	<code>0 &lt;= grid[i][j] &lt;= 1</code>
	蛇保证从空单元格开始出发。
</ul>

穿过迷宫的最少移动次数
In an<code>n*n</code>grid, there is a snake that spans 2 cells and starts moving from the top left corner at <code>(0, 0)</code> and <code>(0, 1)</code>. The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at<code>(n-1, n-2)</code>and<code>(n-1, n-1)</code>.

In one move the snake can:

<ul>
	Move one cell to the rightif there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.
	Move down one cellif there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.
	Rotate clockwise if it&#39;s in a horizontal position and the two cells under it are both empty. In that case the snake moves from<code>(r, c)</code>and<code>(r, c+1)</code>to<code>(r, c)</code>and<code>(r+1, c)</code>.<br />
	<img alt="" src="https://assets.leetcode.com/uploads/2019/09/24/image-2.png" style="width: 300px; height: 134px;" />
	Rotate counterclockwiseif it&#39;s in a vertical position and the two cells to its right are both empty. In that case the snake moves from<code>(r, c)</code>and<code>(r+1, c)</code>to<code>(r, c)</code>and<code>(r, c+1)</code>.<br />
	<img alt="" src="https://assets.leetcode.com/uploads/2019/09/24/image-1.png" style="width: 300px; height: 121px;" />
</ul>

Return the minimum number of moves to reach the target.

If there is no way to reach the target, return<code>-1</code>.


<strong>Example 1:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2019/09/24/image.png" style="width: 400px; height: 439px;" /></strong>

<pre>
<strong>Input:</strong> grid = [[0,0,0,0,0,1],
               [1,1,0,0,1,0],
              [0,0,0,0,1,1],
              [0,0,1,0,1,0],
              [0,1,1,0,0,0],
              [0,1,1,0,0,0]]
<strong>Output:</strong> 11
<strong>Explanation:
</strong>One possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> grid = [[0,0,1,1,1,1],
              [0,0,0,0,1,1],
              [1,1,0,0,0,1],
              [1,1,1,0,0,1],
              [1,1,1,0,0,1],
              [1,1,1,0,0,0]]
<strong>Output:</strong> 9
</pre>


<strong>Constraints:</strong>

<ul>
	<code>2 &lt;= n &lt;= 100</code>
	<code>0 &lt;= grid[i][j] &lt;= 1</code>
	It is guaranteed that the snake starts at empty cells.
</ul>
