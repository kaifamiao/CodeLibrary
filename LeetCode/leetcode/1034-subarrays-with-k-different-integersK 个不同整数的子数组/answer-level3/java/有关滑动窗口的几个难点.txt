# 滑动窗口

如果你不知道什么是滑动窗口，那么请先学习一下这个博客[https://mp.weixin.qq.com/s/6YeZUCYj5ft-OGa85sQegw]()

我的思路来自于@custer学习笔记的题解法，但是有一点我搞不清楚，这一点是关于当滑动窗口的限制失效的时候，除了移动左窗口，我们还应该
干什么？

以下是原作者的一段分析
```
[1,2,1,2,3]  // 窗口满足条件
 l r         // 满足条件的子数组 [1,2]

[1,2,1,2,3]  // 窗口满足条件
 l   r       // 满足条件的子数组 [1,2],[2,1],[1,2,1]

[1,2,1,2,3]  // 窗口满足条件
 l     r     // 满足条件的子数组 [1,2],[2,1],[1,2,1],[1,2],[2,1,2],[1,2,1,2]

[1,2,1,2,3]  // 窗口不满足条件，移动左指针至满足条件
 l       r   

[1,2,1,2,3]  // 窗口满足条件
       l r   // 满足条件的子数组 [1,2],[2,1],[1,2,1],[1,2],[2,1,2],[1,2,1,2],[2,3]

作者：custergo
链接：https://leetcode-cn.com/problems/subarrays-with-k-different-integers/solution/custerxue-xi-bi-ji-by-custergo-12/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
```
最后他得出的结论是，如果右指针向前移动，且把新元素添加进窗口之后还能保证不同元素个数是k个的话，那么就在原有增量的基础上加1，并把本次增量加到最终的结果上
如果右指针向前移动，且把新元素添加进窗口之后不同元素个数大于k个的话，那么此时窗口的限制条件被破坏，需要依靠把左指针向前移动来重新使窗口满足限制条件。

上面的一段话用代码就是这样表示的
```
while (hash[a[left]] > 1 || diffMembers > k) 
{
    if (diffMembers>k)
    {
        increasement = 1;
        diffMembers --; 
    }
    else increasement++;
    hash[a[left]]--;
    left++;
}

```
理解的关键在于，窗口被限制在仅包含K个不同的数据这个条件。根据这个条件我们能推出什么呢？ 

1. 当新进元素没破坏限制条件（即加入了一个原窗口中已经有的元素）时，此时问题就转化为**如何计算新进元素能和之前元素组成的子数组**；
2. 当新进元素破坏了限制条件（即加入了一个原窗口中没有的元素）时，此时问题就转化了**如何让窗口重新恢复到限制的条件下，并计算此时的子数组个数**

我们先来分析一下情况1，先看原作者的一段示例

```
[1,2,1,2,3]  // 窗口满足条件
 l r         // 满足条件的子数组 [1,2]

[1,2,1,2,3]  // 窗口满足条件
 l   r       // 满足条件的子数组 [1,2],[2,1],[1,2,1]
```
我们注意到，当1被添加进来时，新增了两个符和条件的子数组[2,1]和[1,2,1]，仔细观察发现他俩是新增的1和原来的[1,2]通过一次组合形成的，而[1,2,1]
是新组成的更大的子数组，只要有新元素进入窗口，就会产生一个这样的更大的数组

再看新增2的情况
```
[1,2,1,2,3]  // 窗口满足条件
 l   r       // 满足条件的子数组 [1,2],[2,1],[1,2,1]

[1,2,1,2,3]  // 窗口满足条件
 l     r     // 满足条件的子数组 [1,2],[2,1],[1,2,1],[1,2],[2,1,2],[1,2,1,2]
```
可以看到新增的[1,2]是与原[1,2,1]的最后一位1组合而成，[2,1,2]是与原[2,1]组成的,而[1,2,1,2]是每次都会出现的一个。

看到了吗，每次进来一个已有的数字之后，该数字都会与**上次新增的子数组**进行一次组合并且新增一个长度加1的更大的数组，
因此，原作者说*可以看到对于一段连续的数组，新的元素进来，窗口增加1，每次的增量都会在前一次增量的基础上加1。*

接下来，我们分析一下情况2，即如何让窗口重新恢复到限制的条件下，并计算此时的子数组个数

这个情况要比情况1简单，当新增元素不在原窗口中时，此时为了让窗口满足条件，需要缩小窗口，即剔除掉一个元素
由于新增元素是从后加入窗口的，故剔除掉的元素应该是另外一个元素，比如说
```
[1,2,1,2,3]  // 窗口满足条件
       l r   // 满足条件的子数组 [1,2],[2,1],[1,2,1],[1,2],[2,1,2],[1,2,1,2],[2,3]
```
此时必须剔除1，因为3与2组成了新的子区间，而1没有与3毗邻，故需要剔除掉1，这个过程只需要把左指针向前移动就好了，
没必要做不必要的比较，因为当左指针移动到3的前一个元素时，此时窗口内必然只有3与3的前一个元素。此时增量为1（[2,3]）
