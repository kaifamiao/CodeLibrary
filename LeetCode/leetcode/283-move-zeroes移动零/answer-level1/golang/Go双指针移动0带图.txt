定义p1（图中↓）和p2（图中↑），p1=0，p2=1（如果数组长度大于1的话），然后循环，退出条件是p2超越边界。

如果发现p1=0，此时判断p2<br>
&nbsp;&nbsp;&nbsp;&nbsp;p2指向0，则p2向右移动<br>
&nbsp;&nbsp;&nbsp;&nbsp;p2指向非0，则交换p1和p2，同时双方向右移动<br>
如果发现p1!=0，则双方同时向右移动


动图：


```
 ↓      
[0, 	1,	0,	3,	12] //初始，p1=0 && p2!=0，交换后同时移动
        ↑
		
        ↓
[1, 	0,	0,	3,	12] // p1=0 && p2=0，p2移动
                ↑
				
        ↓
[1, 	0,	0,	3,	12] // p1=0 && p2!=0，交换后同时移动
                        ↑
						
                ↓
[1, 	3,	0,	0,	12] // p1=0 && p2!=0，交换后同时移动
                                ↑
                        ↓
[1, 	3,	12,	0,	0] // p2越界，移动完成
                                    ↑
```

代码

```
func MoveZeros(nums []int) {
	length := len(nums)
	if length <= 1 {
		return
	}
	p1, p2 := 0, 1
	for p2 < length && p1 < length {
		if nums[p1] != 0 { // p1对应的元素不为0，则p1和p2同时向右移动
			p1++
			p2++
		} else { // p1对应的元素为0
			if nums[p2] == 0 { // 如果p2对应的元素也是0，则p2向右移动
				p2++
			} else { // 如果p2对应的元素不是0，则交换p1和p2，然后同时向右移动
				nums[p1], nums[p2] = nums[p2], nums[p1]
				p1++
				p2++
			}
		}
	}
}
```