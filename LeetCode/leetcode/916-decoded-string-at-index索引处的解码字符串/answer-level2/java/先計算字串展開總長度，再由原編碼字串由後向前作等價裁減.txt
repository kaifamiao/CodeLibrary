### 解题思路
閱讀完 官方題解 後，不太清楚其解題思路，故理解程式碼後，用自己的方式再描述一次。

將編碼字串完整展開後，可能產出巨量長度的字串，超出內存限制，造成求解失敗。

因為展開後字串可能包含大量重覆子字串，我們可以由後向前(由右向左)透過等價交換，將重覆字串作裁減後求解。

舉例來說，假設編碼字串為 `ab2cd3` 且 `K=10` 則處理方式如下:
先計算展開後字串總長度為 18 。
```text 
size=((2*2)+2)*3=18;
```
因為我們僅知展開字串長度，並不知展開字串內的每一個字元為何，我們可以由編碼字串由後向前反推。
```text
sNo = size ;// sNo: 代表目前展開字串的第 sNo 個字元
[ a b 2 c d 3 ] // 我們由後向前計算, sNo=18, K=10  
            ^-- 數字3代表展開字串內(1~sNo)有重覆3次,我們直接作裁減
            ^-- sNo=18, sNo/3=6, 字元18和字元6會相同, 故將 sNo 改成 6    
            ^-- 因上述裁減操作, K 需作等價交換 K=K%sNo, K=10%6=4
```
經上述操作，己將 sNo=7~18 作裁減，K等價交換成 4，繼續由後向前檢查
```text
[ a b 2 c d 3 ] // 我們由後向前計算, sNo=6, K=4 
      | | ^-- sNo=6, 因 K!=sNo 故需再向前檢查
      | ^---- sNo=5, 因 K!=sNo 故需再向前檢查
      ^------ sNo=4, 數字2代表展開字串內(1~sNo)有重覆2次,我們直接作裁減
      ^------ sNo=sNo/2=2, K=K%sNo=4%2=0
```
經上述操作，己將 sNo=3~18 作裁減，K等價交換成 0，繼續由後向前檢查。
另外，當 K=0 時表示 K 為 `1~sNo`間最後一個字元
```text
[ a b 2 c d 3 ] // 我們由後向前計算, sNo=2, K=0
    ^--------- 若當前不為數字，且 K==0 或 sNo==K 表當前字元為解
```








### 代码

```java
class Solution {
    public String decodeAtIndex(String S, int K) {
        char[] chs=S.toCharArray();
        long size=0;//用來計算 展開後的字串總長 
        for(char ch:chs){
            if(Character.isDigit(ch)) size*=(int)(ch-'0');
            else size++;
        }
        if(K>size) return null;//若 K 大於字串長度則不存在解
        long sNo=size;/* sNo:用來指向展開後字串的第幾個字元(由1開始) */
        for(int ix=chs.length-1;ix>=0;ix--){// 利用解碼前字串, 由後向前計算 K 的字元或作等價對換
            char ch=chs[ix];
            // 當等價置換後 K==0 表 1~sNo 內最後一個字元為解
            if(K==0 && Character.isLetter(ch)) return String.valueOf(ch);
            if(Character.isDigit(ch)){//若由後向前看到數字, 表示 sNo, 和 K 可作等價對換
                int dgt=(int)(ch-'0');//表 0~sNo 內有重覆 dgt 次
                sNo=sNo/dgt; // 因為重覆 dgt 次，故對 sNo 作等價交換
                K%=sNo; // 同理 K 也可作等價交換
            }else if( K==sNo ){//若 K==sNo 表當前字元為解
                return String.valueOf(ch);
            }else{//未找到解，續續向前檢查
                sNo--;
            }
        }
        return null;
    }
}
```