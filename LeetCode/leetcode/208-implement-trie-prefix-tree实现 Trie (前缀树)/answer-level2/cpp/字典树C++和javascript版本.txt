
## 算法思路

字典树的特征

- 根为空节点，没有值
- 每一个节点包含三个属性：值、叶子节点集合、是否为某一单词的结束
- 叶子节点集合可以用 hash表和数组实现
  - 此题 字母均为 小写字母，可以用`treeNode *next[26];`存储叶子

节点定义；三要素：值，后继节点，是否是单词结尾

```javascript
function Node(val, isEnd) {
    this.val = val      // 值
    this.child = {}     // 后继节点
    this.isEnd = isEnd || false // 单词结尾;用于查找
}
```

根节点实现

```javascript
var Trie = function () {
    this.root = new Node() // 根节点没有值，为空节点
};
```

## 完整版代码实现（C++版本）

```cpp
struct treeNode {
    bool isEnd; // 是否存在已当前位置结尾的单词 
    treeNode *next[26]; // 仅适用于全部是小写字母a-z的情况；更为鲁棒的情况`map<char, treeNode*> next;`

    treeNode() {
        isEnd = false;
        memset(next, 0, sizeof(next));
    }
};

class Trie {
public:
    treeNode *root; // 共有变量，供外部程序访问字典树
    Trie() {
        root = new treeNode();
    }

    void insert(const string &word) {
        treeNode *node = root;
        for (char c : word) {
            if (node->next[c - 'a'] == NULL) {
                node->next[c - 'a'] = new treeNode(); // 存在分支
            }
            node = node->next[c - 'a']; // 向后插入字符
        }
        node->isEnd = true; // 到达单词某位 
    }

    bool search(const string &word) {
        treeNode *node = root;
        for (char c : word) {
            node = node->next[c - 'a']; // 向后迭代
            if (node == NULL) {
                return false; // 当前位置字符不存在
            }
        }
        return node->isEnd; // 搜索存在单词
    }

    bool startsWith(const string &prefix) {
        treeNode *node = root;
        for (char c : prefix) {
            node = node->next[c - 'a']; // 向后迭代
            if (node == NULL) {
                return false; // 当前位置字符不存在
            }
        }
        return node != NULL; // 最后一个字符存在
    }
};
```

## javascript版本实现

```javascript
function Node(val, isEnd){
    this.val = val
    this.child = {}
    this.isEnd = isEnd|| false
}
/**
 * Initialize your data structure here.
 */
var Trie = function() {
    this.root = new Node()
};

/**
 * Inserts a word into the trie. 
 * @param {string} word
 * @return {void}
 */
Trie.prototype.insert = function(word) {
    let cur = this.root
    for (let c of word){
        if (cur.child[c] == null) cur.child[c] = new Node(c)
        cur = cur.child[c]
    }
    cur.isEnd = true;
};

/**
 * Returns if the word is in the trie. 
 * @param {string} word
 * @return {boolean}
 */
Trie.prototype.search = function(word) {
    let cur = this.root
    for (let c of word){
        if (cur.child[c] == null) return false
        cur = cur.child[c]
    }
    return cur.isEnd
};

/**
 * Returns if there is any word in the trie that starts with the given prefix. 
 * @param {string} prefix
 * @return {boolean}
 */
Trie.prototype.startsWith = function(prefix) {
    let cur = this.root
    for (let c of prefix){
        if (cur.child[c] == null) return false
        cur = cur.child[c]
    }
    return true
};

/**
 * Your Trie object will be instantiated and called as such:
 * var obj = new Trie()
 * obj.insert(word)
 * var param_2 = obj.search(word)
 * var param_3 = obj.startsWith(prefix)
 */
```
