### 解题思路
该题解决思路参考了**快速排序的双指针**方法，解决思路如下:
* 入参检查
* 创建双指针m和n，m从前向后移动，n从后向前移动
* 移动指针m和n，遇到元音字母就互换，遇到非元音字母则移动指针
* 当m>=n时，表明数组遍历完毕，所有的元音字母均互换成功

**Note:**本题的解法取自快速排序算法的双指针，如果能够理解快速排序算法，则很容易看明白下述代码的逻辑。

本题的时间复杂度为O(N^2), 空间复杂度为O(1)。

### 代码

```c
char * reverseVowels(char * s)
{
    //入参检查
    if(!s)
    {
        return s;
    }

    //双指针循环遍历数组
    int m = 0;
    int n = strlen(s)-1;
    char tmp;
    while(m<n)
    {
        //m指针遇到元音字母，跳出循环，并记录下标
        while((m<n) && ((s[m] != 'a') && (s[m] != 'e') && (s[m] != 'i') && (s[m] != 'o') && (s[m] != 'u'))
               && ((s[m] != 'A') && (s[m] != 'E') && (s[m] != 'I') && (s[m] != 'O') && (s[m] != 'U')))
        {
            m++;
        }

        //n指针遇到元音字母，跳出循环，并记录下标
        while((m<n) && ((s[n] != 'a') && (s[n] != 'e') && (s[n] != 'i') && (s[n] != 'o') && (s[n] != 'u'))
               && ((s[n] != 'A') && (s[n] != 'E') && (s[n] != 'I') && (s[n] != 'O') && (s[n] != 'U')))
        {
            n--;
        }

        //将m和n记录的数组下标对应的元音字母互换位置
        tmp = s[m];
        s[m] = s[n];
        s[n] = tmp;

        //m和n指针下标各自移动一位
        m++;
        n--;
    }
    return s;
}
```