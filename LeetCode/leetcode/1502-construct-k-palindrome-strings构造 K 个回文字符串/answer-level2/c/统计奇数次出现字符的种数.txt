## 原理
如果一个字符在字符串中出现奇数次，就称这个字符为**奇数次出现**。
例如字符串"annabelle"，该字符串中字符的出现次数统计如下：  

|a|b|e|l|n|
|-|-|-|-|-|
|2|1|2|2|2|
只有一种字符'b'奇数次出现。  

注意到答案与字符出现的顺序无关，于是不妨将输入的字符串看作字符的集合。

设字符集合s的大小为l，奇数次出现的字符种数为c。
【命题一】若c = 0，则对任意的正整数k <= l，s可以构成k个非空回文串。
【证明】若c = 0，即s中所有字符都是偶数次出现。不妨对s中的字符作替换，使每种字符都出现两次，得到集合s'。
例如s = "aabbbb"，替换为s' = "aabbcc"。
易见若s'可以构成k个非空回文串，则s也一定可以。
- s'可以构成一个非空回文串，如"abccba"；
- s'可以构成两个……，如"bcacb" + "a"；
- s'可以构成三个……，如"bccb" + "a" + "a";
- s'可以构成四个……，如"cbc" + "b" + "a" + "a";
……
……
- s'可以构成l个……，如"c" + "c" + "b" + "b" + "a" + "a"。

【命题二】s可以构成k个非空回文串当且仅当c <= k <= l.
【证明】
充分性：若c <= k <= l，则用c个奇数次出现的字符（各不相同）可以构成c个回文串。接着只要用剩余的l - c个字符构成k - c个非空回文串即可。注意k - c <= l - c，且剩余的字符中没有奇数次出现了。套用命题一可知这个任务可以完成。
必要性：若k < c，由于每个回文串最多只能含一个奇数次出现，任务无法完成。若l < k，易见任务无法完成。

用命题二就可以编写代码了。

## 代码

```
bool canConstruct(char * s, int k){
    int table[26] = {0};
    int l = strlen(s);
    for (int i = 0; i < l; ++i) {
        ++table[s[i] - 'a'];
    }
    int count = 0;
    for (int i = 0; i < 26; ++i) {
        count += table[i] & 1;
    }
    return count <= k && k <= l;
}
```
