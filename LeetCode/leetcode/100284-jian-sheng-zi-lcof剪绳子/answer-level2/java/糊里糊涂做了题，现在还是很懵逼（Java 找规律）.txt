### 解题历程

初看此题，直觉就觉得将绳子切的越多越好！

怎样将绳子切的最多呢？肯定是两米一段嘛！然后，我试了几个样例，却发现两米根本不行，但是几乎所有的真相都指向了 **`3`** 这个神奇的数字！

所以，我首先写出了下面的代码：

```java
class Solution {
    public int cuttingRope(int n) {
        if (n <= 3) return n-1;
        if (n == 4) return n;
        
        int product = 1;
        while (n > 3) {
            product *= 3;
            n -= 3;
        }
        return product*n;
    }
}
```

然后测试了 `2-10` 这9个样例，发现大多数样例的结果都是正确的，但是 `7` 和 `10` 这两个样例却不太对！

我的代码的拆分方式：

```
7 = 3 + 3 + 1
10 = 3 + 3 + 3 + 1
```

样例的拆分方式：

```
7 = 3 + 4
10 = 3 + 3 + 4
```

唉！那不就是到4之后，就不再拆分了吗？如此看，再加个特判不就行了？

```java
class Solution {
    public int cuttingRope(int n) {
        if (n <= 3) return n-1;
        if (n == 4) return n;
        
        int product = 1;
        while (n > 3) {
            if (n == 4) break;
            
            product *= 3;
            n -= 3;
        }
        return product*n;
    }
}
```

`2-10` 的结果没问题，嗯！**提交！** 嗯？过了？？？可是，为什么呢？

### 小猜测

数学奇差的我，对为啥以 `3` 为一段可得出最优解也进行了一个小的思考，或许答案就藏在开始的几个特判里：

- 绳长 `1`, 不可再次分割
- 绳长 `2`, 可以再次分割，`1+1`，但是分割之后的乘积小于原始绳长。
- 绳长 `3`, 和 `2` 一样，也可以再次分割，`1+2`，但是分割之后的乘积同样小于原始绳长。
- **绳长 `4`, 可以再次分割，`2+2`，分割之后的乘积等于原始绳长。**
- ......

发现绳长在大于 `4` 之后，**分割之后的最大乘积均可以大于原始绳长**。

**那么，可以认为 `1` `2` `3` 为基础绳长（`4`可以分为 `2+2`，并且其乘积不小于 `4`，故 `4` 不是基础绳长），而 `3` 又是三者中最大的，故将绳子截成 `3` 的时候，其乘积最大。**


**以上只是个人的一个小猜测，如果有大佬知道严谨的数学证明，还请批评指正，在评论中告诉我哦！谢谢啦！**
