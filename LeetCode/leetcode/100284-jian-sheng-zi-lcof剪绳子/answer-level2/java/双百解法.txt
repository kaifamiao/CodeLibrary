**第一次双百**
据题意可知：切割的段数最小是2，最大是n。因此m从2到n开始遍历，每次求得商和余数。**下面以`n = 8`为例：**
1. 当分成2段时，商为4，余数为0，因此2段是(4, 4)；
2. 当分成3段时，商为2，余数是2，因此3段是(2, 3, 3)；
3. 当分成4段时，商为2，余数是0，因此4段是(2, 2, 2, 2)；
4. 当分成5段时，商为1，余数是3，因此5段是(1, 1, 2, 2, 2)；
5. 当分成6段时，商为1，余数是2，因此6段是(1, 1, 1, 1, 2, 2)；
6. 当分成7段时，商为1，余数是1，因此7段是(1, 1, 1, 1, 1, 1, 2)；
7. 当分成8段时，商为1，余数是0，因此8段是(1, 1, 1, 1, 1, 1, 1, 1)。

观察可得发现：**分段中商的个数和余数有关系，商`s`的个数为`m-y`个，其他数为`s+1`，其个数为`y`个。**
规律总结好，直接放代码。

```Java []
class Solution {
    public int cuttingRope(int n) {
        int max = 1;
        for (int m = 2; m <= n; m++) {
            int s = n / m; // 商
            int y = n % m; // 余数
            int res = 1;
            for (int i = 0; i < m - y; i++) {
                res *= s;
            }
            for (int i = 0; i < y; i++) {
                res *= s + 1;
            }
            if (res > max) {
                max = res;
            }
        }
        return max;
    }
}
```
