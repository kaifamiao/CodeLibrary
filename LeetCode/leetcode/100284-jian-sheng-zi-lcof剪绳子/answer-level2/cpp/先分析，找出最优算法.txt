### 解题思路
经过分析后的算法，时间复杂度和空间复杂度都很低。

首先，所有的数都可以分成素数之和，由于题解要求的是相乘，那么在对n进行分解的时候，排除掉1这个数。
其次，看其余素数的优先级，2，3，5，7等这些素数，
n * 5 < n * 2 * 3, 
n * 7 < n * 2 * 2 * 3,
.....,
因此，当分解到为这些素数的时候，将5，7以上的素数也转换成2和3组合的形式，即，将n全部转变成2和3组合的形式。也就是将n对3取余，即n % 3，看结果值。分三种情况：0，1，2。
1） 当余数为0时，得到全部为3的乘积最大。因为 n * 2 * 1  < n * 3
2） 当余数为1时，由于 n * 3 * 1 < n * 2 * 2，因此，取出一个3，转换成2 * 2的形式.
3） 当余数为2时，正好将n分解成2和3组合的情况。

### 代码

```cpp
class Solution {
public:
    int cuttingRope(int n) {
        if(n == 2 || n == 3)
            return n-1;
        if(n % 3 == 0)
            return pow(3, n/3);
        if(n % 3 == 1)
            return pow(3, n/3-1) * 2 * 2;
        return pow(3, n/3) * 2;
    }
};
```