### 解题思路
 -x ->~x+1
 x&-x 等于x的二进制表示里最右边一个一

方法一： n>0&&(1<<30)%n==0;
方法二： 判断 (n & (-n)) == n ，这种运算有个名称叫 lowbit，即取出 n 二进制位中从低位数第一个 1 的位置 k ，并返回 2^k。判断 (n & (-n)) == n 成立即意味着 n 二进制位中从低位数第一个 1 的位置就是最高位。
方法三： 判断 n & (n - 1) == 0 ，若成立，则显然 n 只有最高的二进制位是 1，后续的二进制位都是 0，符合 2 的幂次

### 代码

```cpp
class Solution {
public:
    bool isPowerOfTwo(int n) {
        return n>0 ? ((n & -n) == n):false;
    }
};
```