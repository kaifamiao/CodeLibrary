### 解题思路

这个题目是要判断s3是否有s1和s2交错合并形成，首先可以做一个简单判断，

看一下字符串s1的长度n1加上字符串s2的长度n2，是否等于s3的长度n3.

如果不相等，就说明s3肯定不是s1和s2的交错合并结果，直接返回false即可。

否则我们再做进一步分析，字符串s1和s2可以交错形成许多不同的字符串，

但这些字符串都有一个共同的特点，就是

> 交错合并字符串中的第一个字符，要么等于s1的第一个字符，要么等于s2的第一个字符。

类似的，

> 交错合并字符串中的最后一个字符，要么等于s1的最后一个字符，要么等于s2的最后一个字符。

于是我们既可以从 s3 的第一个字符切入，也可以从 s3 的最后一个字符切入来分析求解这个问题。

假设这里我们先来看 s3 的最后一个字符。

用 s3 的最后一个字符去对比 s1 和 s2 最后的一个字符，如果发现等于 s1 最后的字符，

于是为了判断 s3 是否由 s1 和 s2 交错合并而成，

就只需要判断s3的剩余前缀子串是否可以由 s1 的剩余前缀子串 和 s2 交错合并而成。 

这个问题本质上和原问题是相同的，只不过问题规模变小了，是原问题的一个子问题。

因此我们可以定义出一个通用状态来表示这类问题的解。

由于这个问题涉及到s1、s2和s3共三个字符串，包含3个变量，

很自然地，我们可以想到用一个三维数组表示状态，比如说，我们可以用

**d(i,j,k)表示s1长度为i的前缀子串，与s2长度为j的前缀子串，是否可以交错合并形成s3长度为k的前缀子串**

这样我们就可以计算d(n1,n2,n3)的值，其中n1、n2、n3分别是s1、s2、s3的长度，

接下来，我们就是找出i,j,k的**递推式**。

我们先把这三个前缀子串画出来，具体是哪个字符不用管，

- s1 长度为 i 的前缀子串是 0~i-1,总共i个字符。
- s2 长度为 j 的前缀子串是 0~j-1，总共j个字符，
- s3 长度为 k 的前缀子串是 0~k-1,总共k个字符.

和上面演示的一样，去考察这三个子串最后一个字符，分别是 s1[i-1]、s2[j-1]、s3[k-1]

我们前面已经说过，交错合并后的字符串最后一个字符要么来自 s1 的最后一个字符，

要么来自 s2 的最后一个字符，因此在这里我们可以拿 s3[k-1] 去和 s1[i-1] 或 s2[j-1] 对比。

如果 s3[k-1] 等于 s1[i-1],那我们在只需要看 s1 的 0~i-2,s2 的 0~j-1 是否可以交错合并形成 s3 的0~k-2,

而这个结果可以由状态 d(i-1,j,k-1) 来表示。

也就是说如果 s3[k-1] == s1[i-1] 并且 d(i-1,j,k-1) 为 true，那么 d(i,j,k) 就为 true

类似的，如果 s3[k-1] == s2[j-1] 并且 d(i,j-1,k-1) 为 true，那么 d(i,j,k) 也会等于true

这两种情况中，只要有一种为 true，d(i,j,k) 就会等于 true，因此我们把这两种情况或起来，

有了这个递推式，我们只要从小到大遍历i,j,k的值，就可以计算出最后的答案d(n1,n2,n3).

在这个递推式中还有一个隐藏的约束条件，也就是：

**只有当s1前缀子串的长度i加上s2前缀子串的长度j，等于s3前缀子串的长度k，s3的前缀子串才可能是另外两个子串的交错合并结果，即d(i,j,k)才有可能为true。**

因此对于k我们可以不去遍历所有值，只要确定 i 和 j 的值以后，只要让k等于i加j即可。

其他的k值不用管，接下来我们看一下这个算法的**边界情况**。

也就是i或j等于0的情况，首先是 d(0,0,0) 即 s1、s2、s3 都为空字符串，

两个空字符串可以交错合并形成另一个空字符串，因此 d(0,0,0) 等于 true。

接着来看当 j 等于 0 时，我们要计算的是 d(i,0,k) 是 true 还是 false，

同样的这里也只有当 k 等于 i 加 j 时，d(i,0,k) 才有可能为 true。

因此我们只需要计算 d(i,0,i) 的值，其他的不同计算，保持默认值 false 即可。

这种情况下j等于固定值不能变，于是我们只要参考递推式中的第一种情况，把 k 换成 i 即可。

也就是 s3(i-1)==s1(i-1) 并且 d(i-1,0,i-1) 为 true,其中 i 从 1 遍历到 s1 的长度 n1

同理另一个边界情况是当 i 等于 0 时，我们要去计算 d(o,j,j) 的值，

这种情况下 i 固定为 0 不能变，我们只需要参考递推式中的第二种情况，把 k 换成 j 即可。

也就是 s3(j-1) 等于 s2(j-1) 并且 d(0,j-1,j-1) 为 true，其中 j 从 1 遍历到 s2 的长度 n2。

有了这些初始条件，我们只需要让 i 从 1 遍历到 n1，j 从 1 遍历到 n2，不断去计算 d(i,j,k) 的值，

最后就可以得到这个问题的答案，d(n1,n2,n3)

这个算法的时间复杂度主要花在 i、j 这两层循环上，因此时间复杂度是 O(n1*n2)，其中 n1 和 n2 分别是 s1 和 s2 的长度。

使用了一个辅助的三维数组 d，因此空间复杂度是 O(n1*n2*n3),其中 n1 和 n2 和 n3 分别是 s1 和 s2 和 s3 的长度。

### 代码

```golang
// 三维辅助数组 Time: O(n1*n2), Space: O(n1*n2*n3)
func isInterleave(s1 string, s2 string, s3 string) bool {
  // 把三个字符串长度分别赋值给n1、n2、n3，方便使用
  n1, n2, n3 := len(s1), len(s2), len(s3)
  if n1+n2 != n3 { // 如果n1加n2不等于n3
    return false // 就无需进行后面的判断，直接返回false
  }
  // 否则定义三维辅助数组d
  d := make([][][]bool, n1+1)
  for i := range d {
    d[i] = make([][]bool, n2+1)
    for j := range d[i] {
      d[i][j] = make([]bool, n3+1)
    }
  }
  // 并初始化d(0,0,0)等于true
  d[0][0][0] = true
  // 然后计算j等于0的边界情况,让i从1遍历到n1
  for i := 1; i <= n1; i++ {
    // 然后计算d(i,0,i)是否为true
    d[i][0][i] = d[i-1][0][i-1] && s1[i-1] == s3[i-1]
  }
  // 类似的我们还要计算i等于0的边界情况,让j从1遍历到n2
  for j := 1; j <= n2; j++ {
    // 然后计算d(0,j,j)它为true的条件是
    d[0][j][j] = d[0][j-1][j-1] && s2[j-1] == s3[j-1]
  }
  // 计算一般情况下的d(i,j,k)
  for i := 1; i <= n1; i++ {
    // 使用两层循环i从1遍历到n1,j从1遍历到n2
    for j := 1; j <= n2; j++ {
      // 然后计算出第三个维度值k
      k := i + j
      // 接下来计算d(i,j,k)的值,它为true有两种可能
      // 1. d(i-1,j,k-1)为true并且s1[i-1]等于s3[k-1]
      // 2. d(i,j-1,k-1)为true并且s2[j-1]等于s3[k-1]
      d[i][j][k] = (d[i-1][j][k-1] && s1[i-1] == s3[k-1]) ||
        (d[i][j-1][k-1] && s2[j-1] == s3[k-1])
    }
  }
  return d[n1][n2][n3] // 退出循环后返回d(n1,n2,n3)即可
}
```

### 解题思路
最后我们再对这个算法做一点小优化，这个算法虽然使用了一个三维数组d来表示状态，

但事实上，第三个维度有意义的值完全依赖于前两个维度，也就是之前说的，一旦i和j的值确定下来，

就只需要让k等于i加j即可，对于其他的k值，d(i,j,k)都一定等于false，

正因如此，第三个维度其实是冗余了，可以直接删掉，也就是我们只需要一个二维辅助数组即可。

空间复杂度可以降到O(n1*n2)

### 代码

```golang
// 二维辅助数组 Time: O(n1*n2), Space: O(n1*n2)
func isInterleave(s1 string, s2 string, s3 string) bool {
  n1, n2, n3 := len(s1), len(s2), len(s3)
  if n1+n2 != n3 { 
    return false
  }
  d := make([][]bool, n1+1)
  for i := range d {
    d[i] = make([]bool, n2+1)
  }
  d[0][0] = true
  for i := 1; i <= n1; i++ {
    d[i][0] = d[i-1][0] && s1[i-1] == s3[i-1]
  }
  for j := 1; j <= n2; j++ {
    d[0][j] = d[0][j-1] && s2[j-1] == s3[j-1]
  }
  for i := 1; i <= n1; i++ {
    for j := 1; j <= n2; j++ {
      k := i + j
      d[i][j] = (d[i-1][j] && s1[i-1] == s3[k-1]) ||
        (d[i][j-1] && s2[j-1] == s3[k-1])
    }
  }
  return d[n1][n2] 
}
```