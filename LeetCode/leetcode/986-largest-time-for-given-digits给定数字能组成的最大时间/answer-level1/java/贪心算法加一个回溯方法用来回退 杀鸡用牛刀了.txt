这道题其实没必要用贪心、回溯这些的，数组就4位，没什么回旋的余地，直接枚举还方便一些。不过自己做的时候思路是想贪心的，但掉坑后改一改就变成这样了，就按这样写题解啦~ 也提供些不同的思路给大家抛砖引玉啦~

这道题有个特点，就是开头得选2以下（包括2）的最大数，然后如果是2开头的话，第二个数得选包括3以下的最大数；第三个数得选包括5以下的最大数。其他情况都是求最大就行，所以自己一开始想直接贪心的。

后来一个测试用例：“0，2，6，6”提示了我：自己写的贪心太贪了，这个测试用例会掉坑里。所以要补了个回溯的方法来退回去，而这道题比较特殊，其实只需要回溯到开头，改为不用2开头就可以了，其他时候都不需要回溯（因为这个贪心算法唯一会被坑的地方就是开头选完2以后，如果第二个数把原本放在第三个数的数字选走了而后面第三位刚好没有小于等于5的数可供选择的话，就会出错）。所以添加一个贪心掉坑后用的回退一步的方法notStartWith2(),就直接过了。

代码懒得优化了，重复比较多。想优化的话，可以重构一下重复代码。

执行用时 :3 ms, 在所有Java提交中击败了77.19%的用户

内存消耗 :34.2 MB, 在所有Java提交中击败了94.12%的用户

```java
class Solution {
    boolean[] B=new boolean[4];//用来表示数字是否使用过
    //下面方法思路主要就是先贪一波，贪失败了就去把开头限定为不为2再贪一波，哈哈哈
    public String largestTimeFromDigits(int[] A) {
        Arrays.sort(A);//先排序方便后面findMax方法及时break
        int index = findMax(2,A);
        if(index==-1) return "";
        StringBuilder sb = new StringBuilder();//用StringBuilder方便组合字符串
        sb.append(A[index]);
        B[index]=true;
        if(A[index]==2){
            index=findMax(3,A);
        } 
        else{
            index=findMax(9,A);
        }
        if(index==-1) return "";//这里findMax寻找失败的话是不需要回退使用notStartWith2方法的，因为如果小于等于3的都没有，找小于等于1的来代替2开头就更加找不到了。
        sb.append(A[index]);
        sb.append(":");
        B[index]=true;
        index = findMax(5,A);
        if(index==-1) return notStartWith2(A);//这里寻找失败可能是太贪了，所以用notStartWith2回退一下
        sb.append(A[index]);
        B[index]=true;
        index = findMax(9,A);//这里一定找的到
        sb.append(A[index]);
        return sb.toString();
    }
    
    private String notStartWith2(int[] A) {
        Arrays.fill(B,false);
        int index = findMax(1,A);
        if(index==-1) return "";
        StringBuilder sb = new StringBuilder();
        sb.append(A[index]);
        B[index]=true;
        index=findMax(9,A);
        if(index==-1) return "";
        sb.append(A[index]);
        sb.append(":");
        B[index]=true;
        index = findMax(5,A);
        if(index==-1) return "";
        sb.append(A[index]);
        B[index]=true;
        index = findMax(9,A);
        if(index==-1) return "";
        sb.append(A[index]);
        return sb.toString();
    }
    
    private int findMax(int cap,int[] A){
        int maxIndex=-1;
        int max=-1;
        for(int i=0;i<4;i++){
            if(A[i]>cap) break;
            if(B[i]) continue;
            if(A[i]>max){
                max=A[i];
                maxIndex=i;
            }
        }
        return maxIndex;
    }
}
```

