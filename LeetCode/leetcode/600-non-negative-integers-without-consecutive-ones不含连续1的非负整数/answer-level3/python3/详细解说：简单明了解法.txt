任取一数num, 假设为0b000110001001
不考虑连续的1限制，比其小的所有二进制数为以下组合（把每个1变为0，后面接所有可能的数字）可能数目加起来：
num=0b000110001001
（1）0b000110001000： 2^0种可能
（2）0b000110000xxx： 2^3种可能
（3）0b00010xxxxxxx： 2^7种可能
（4）0b0000xxxxxxxx： 2^8种可能

现在考虑连续的1，这里有两个问题：
1）如果前缀（相对于xxx来说）里面包含11，则不符合条件，比如（1）和（2）
2）xx也不能包含连续的1

如果xxx不能有连续的1，我们看规律：f(xxx的位数)=可能的数目
f(0) = 1：  特殊情况
f(1) = 2：  0，1
f(2) = 3：  00,01,10
f(4) = 4：  000,001,010,100,101
f(n) = ?：  0加上f(n-1)里的数字,1加上f(n-1)里0开头的数暨10加上f(n-2)里的所有数
这是个斐波那契数列

所有现在我们会做了：num先加1，这样num本身被包含在比num+1小的数字里。从右往左，碰到11，说明之前的结果都不符合条件，先把结果清零。碰到1，结果加f()。


```
class Solution:
    def findIntegers(self, num: int) -> int:
        num += 1 #找比num+1小的符合条件的所有数字，这样包含了num
        prev, curr = 1, 1  #curr = f(0)，每次循环变为f(1), f(2)...
        ret = 0
        while num:
            if num & 3 == 3: #如果是0b11结尾，清除之前结果
                ret = 0
            if num & 1: #如果是0b1结尾，加上f()
                ret += curr
            num >>= 1 # 右移一位
            prev, curr = curr, prev + curr # 斐波那契额数列计算
        return ret
```


