### 解题思路

我的老天, 看题目看了半天, 这都什么鬼描述, 我滴乖乖...

**从[-k,k] 区间中, 取出任意数, 和数组A中的任意项相加**, (题目中的:将 x 加到 A[i] 中, ...还以为把这个数push到A中, 你说相加就相加嘛...)

相加以后会产生多个数组B, 因为 可以取出 **任意数** 加到 **数组的任意项**

从这些数组B中, 选出一个Bmax - Bmin 是这些数组中 最小值的, 并返回这个最小值, **(差值是正整数, 最小值为0)**


我们来看例题解析:

```
如 A=[0, 10]  k = 2   此时:x 可取的值有 [-2,-1,0,1,2]

要得到最小值, 就要使A中 最大值变小点, 最小值变大点,  可得 [0 + 2, 10 + -2], 
```

**就是拿 A中的最小值加上 [-k,k]区间中的最大值, A中的最大值加上[-k,k]区间中的最小值.**

当然, 这是一种情况

```
如 A=[3, 8]  k = 3   此时:x 可取的值有 [-3,-2,-1,0,1,2, 3]

按照上面的说法变成了 [6, 5], 明显这得不到最小差值, 毕竟[5,5] [6,6] 这些都比他好.
```

所以, 我们可以规避这种情况, 

当A中的最小值加上 [-k,k]区间中的最大值 的值 **大于** A中的最大值加上[-k,k]区间中的最小值的值 时 **直接返回** 0 

为什么? 其实很简单, 从第二道例子就可以看出, 既然 都可以 **大于**了, 那么我们也可以选一个相对小一点的数, 让它们 **等于**

毕竟X 是 可选的, 

**不管 A 中有多少项, 既然x可以让最大值和最小值相等, 那么中间的项肯定也可以!** 就是这么的自信.

文字有些啰嗦. 其实直接看代码发现会比较简单.

### 代码

```javascript
/**
 * @param {number[]} A
 * @param {number} K
 * @return {number}
 */
  var smallestRangeI = function(A, K) {
    let max = Math.max(...A)
    let min = Math.min(...A)
    if(max - K < min + K){
      return 0
    } else {
      return max - K - (min + K)
    }
};
```