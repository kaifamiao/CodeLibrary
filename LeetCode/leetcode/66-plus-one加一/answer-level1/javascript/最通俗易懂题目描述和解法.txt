不要看让人蛋疼的机器翻译的题目描述，直接看我的翻译。
**我最反感的就是那些喜欢用一些术语把简单问题搞复杂的人，简直在浪费大家的生命！翻译用点心行不？**！

**问题翻译**: 
把一个整数的每一位从高位到低位按顺序存在一个数组中，我们对这个整数加1，返回这个整数计算结果的数组。

**解题思路**
最先想到的就是直接转换成数字计算再拆分成数组，一行就可以搞定，结果跑测试的时候才发现有的测试用例超过了最大长度，结果只能自己模拟进位，好处是不受长度限制，我整理了各种不同情况通过条件判断，发现这样会让自己陷入在循环中各种if else的沼泽里，重新整理思路后发现，**我们只需要从低位到高位循环遍历，判断是不是9就可以了，不是9因为不需要进位处理就+1跳出循环返回整个数组，是9就改成0，在下个循环会进位+1**，其他的什么都不要管，假如每位都是9，循环结束就在最后数组前插入一个1就好了。

**实现代码**

简单清晰好理解。
```
/**
 * @param {number[]} digits
 * @return {number[]}
 */
var plusOne = function(digits) {
    let length = digits.length;
    for(let i=length-1; i>=0; i--){ 
        if(digits[i] !== 9){
            digits[i]++;
            return digits;  
        }
        digits[i] = 0;
    }
    digits.unshift(1);
    return digits;
};
```

