#### 1. 深度优先搜索（DFS）

为了方便自上而下的DFS，我们先把输入的`父亲表示法` 转换成邻接表形式的`孩子表示法`，
然后进行DFS。 在DFS的时候我们需要求该子树的结点数值之和，以及结点个数。特别地，如果子树和为0，则子树结点个数重置为0.

说明：
好像这里将父节点的值的引用传给孩子方便改写的代码，不是很容易理解（包括本人）。
我的初衷是，孩子结点再计算完自己的值之后，将其值加到父亲结点上（这里DFS相当于后根遍历，孩子的值会先被更新），
同时返回孩子子树的结点数。

这个过程也相等于下面这两个过程：
```
class Solution {
public:
    vector<vector<int> > child; // 邻接表
    int dfs_sum(int root, vector<int>& value){
        // 计算子树的和，并返回
        if(child[root].size() == 0)
            // 叶子结点
            return value[root];
        // DFS 所有孩子结点，并将其子树的值加到根上,由于是DFS，所以孩子的值会先被计算
        for(auto it: child[root])
            value[root] += dfs_sum(it,value);
        return value[root];
    }
    int dfs_count(int root, vector<int>& value){
        // 统计所有子树的结点树（未删除的）
        if(value[root] == 0) return 0; // 被删除了
        if(child.size() == 0){
            return value[root] != 0; // 叶子结点
        }
        int cnt = (value[root] != 0); // 先统计根节点
        for(auto it : child[root]){
            cnt += dfs_count(it,value);
        }
        return cnt;
    }
    int deleteTreeNodes(int nodes, vector<int>& parent, vector<int>& value) {
        child.resize(nodes);
        for(int i=0;i<nodes;i++){
            if(parent[i] != -1){
                child[parent[i]].push_back(i);
            }
        }
        // 求和
        dfs_sum(0,value);
        return dfs_count(0,value);
    }
};
```
**原来写法（值的引用传递）**
不是在孩子DFS返回的时候加到父亲结点上，而是父亲将自己的值的引用传给孩子，在DFS的同时进行更改。
```
class Solution {
public:
    vector<vector<int> > child; // 邻接表
    int dfs(int root,int& father, vector<int>& value){
        // 返回其子树的结点数目, 并统计该子树的和
        if(child[root].size() == 0){// 叶子结点
            if(value[root] == 0) return 0; // 删除
            father += value[root];
            return 1; // 叶子结点
        } 
        // DFS孩子结点
        int childrens = 1; // 根节点
        for(auto it : child[root])
            childrens += dfs(it,value[root],value);
        if(value[root] == 0) return 0;
        else{
            father += value[root];
            return childrens;
        }
    }
    int deleteTreeNodes(int nodes, vector<int>& parent, vector<int>& value) {
        child.resize(nodes);
        for(int i=0;i<nodes;i++){
            if(parent[i] != -1){
                child[parent[i]].push_back(i);
            }
        }
        return dfs(0,value[0],value);
    }
};
```

#### 2. 层次遍历（BFS）

由于输入的形式是以层次遍历输入的，所以，我们可以先从下到上BFS逆序将子树的值汇聚到父亲结点，然后从上到下BFS顺序BFS，如果该树的值为0，则将其广播到子树，以表示我们该删除该子树的所有结点，同时，统计没有删除的结点。

```
class Solution {
public:
    int deleteTreeNodes(int nodes, vector<int>& parent, vector<int>& value) {
        // 从下到上汇聚
        for(int i=nodes-1;i>=0;i--){
            if(parent[i] != -1) value[parent[i]] += value[i];
        }
        // 从上到下发散
        int ans = 0;
        for(int i=0;i<nodes;i++){
            if(parent[i] != -1 && value[parent[i]] == 0) value[i] = 0; // 广播
            if(value[i] != 0) ans++;
        }
        return ans;
    }
};
```

