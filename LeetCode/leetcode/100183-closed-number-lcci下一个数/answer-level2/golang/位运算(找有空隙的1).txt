就是找到1之间空隙进行左右移动取得大小值

1: 比当前小的最接近的数就是从后往前的1后面一位是0的右移一位(后面的1全部靠左)
2: 比当前大的最接近的数就是从后往前的1前面一位是0的左移一位(后面的1全部靠右)

比如: 1010011
略小: 第2个1后面是0则后移一位: 1000, 后面的两个1挨着当前1: 1110（计算方式: 当前1后面的空位全是置为1然后与其右移后面1个数位数做异或, 111^(111>>2)）, 即1001110

比如: 10110
略大: 第2个1前面是0则左移一位: 1000, 后面1个1靠右: 1001 (计算方式：后面1的个数填充做或运算, 1<<1 - 1), 即11001

```
func findClosedNumbers(num int) []int {
	find := 0
	ans := []int{-1, -1}
	sn := 0
	on := uint(0) // sn中1的个数
	for num > 0 {
		pn := num & (-num)
		num &= num - 1
		// 1<<30判断是否超出范围
		if pn&(1<<30) == 0 && num&(pn<<1) == 0 && ans[0] == -1 {
			ans[0] = num | (pn << 1) | (1<<on - 1)
			find++
		}
		// pn<=1无略小值
		if pn > 1 && sn&(pn>>1) == 0 && ans[1] == -1 {
			ans[1] = num | (pn >> 1) | ((pn>>1 - 1) ^ (pn>>1-1)>>on)
			find++
		}
		if find == 2 {
			break
		}
		sn |= pn
		on++
	}
	return ans
}
```
