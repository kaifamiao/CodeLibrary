首先过滤一下题目中的废话，提取有用信息如下：
1. 有两条路，Road1和Road2，组成十字路口；
2. 车与车的唯一有用的区别就是它在Road1上还是Road2上；
3. 每辆车代表一个线程；
4. TrafficLight这个类，就是红绿灯遥控器，很明显每个车都要抢这个遥控器；

综上所述，整理一下思路：
- 用一个Semaphore代表红绿灯。
- 设置两个布尔变量，表示Road1和Road2当前是不是绿灯
- 当车拿到红绿灯遥控器后，根据当前路口情况，判断是先变灯再通过，还是直接通过

思路其实很好理解，代码也很简单，就是题目理解起来太费劲了。。。
另外说下arrivalTimes是什么意思，我的理解，就是测试用例时，每辆车所代表的线程的sleep时间。所以你在函数参数中看不到这个，他是测试时用的，模拟不同车的先来后到。（但对这个题目要求来说没什么意义，可能以后会出个红绿灯II的题目吧。。。）

下面上代码：
```
class TrafficLight {
        private Semaphore greenLight;//红绿灯遥控器
        private boolean road1CanGo;//表示道路1是绿灯
        private boolean road2CanGo;//表示道路2是绿灯

        public TrafficLight() {
            this.greenLight = new Semaphore(1, true);
            this.road1CanGo = true;
            this.road2CanGo = false;
        }

        public void carArrived(
                int carId,           // ID of the car
                int roadId,          // ID of the road the car travels on. Can be 1 (road A) or 2 (road B)
                int direction,       // Direction of the car
                Runnable turnGreen,  // Use turnGreen.run() to turn light to green on current road
                Runnable crossCar    // Use crossCar.run() to make car cross the intersection
        ) {
            try {
                greenLight.acquire();//申请获取遥控器
                //如果当前车道已经是绿灯了，直接通过
                if ((roadId == 1 && road1CanGo) || (roadId == 2 && road2CanGo)) crossCar.run();
                else if (roadId == 1 && !road1CanGo) {//否则，如果道路1不是绿灯，用遥控器变成绿灯
                    turnGreen.run();
                    road1CanGo = true;
                    road2CanGo = false;
                    crossCar.run();
                } else if (roadId == 2 && !road2CanGo) {//如果道路2不是绿灯，用遥控器变成绿灯
                    turnGreen.run();
                    road2CanGo = true;
                    road1CanGo = false;
                    crossCar.run();
                }
                greenLight.release();//最后把遥控器归还
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
```
注释很清楚了，就不多说了。
代码肯定不是最优解，仅分享一种思路，多交流多进步。