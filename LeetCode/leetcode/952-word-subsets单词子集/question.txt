word-subsets
我们给出两个单词数组 <code>A</code>和<code>B</code>。每个单词都是一串小写字母。

现在，如果<code>b</code> 中的每个字母都出现在 <code>a</code> 中，<strong>包括重复出现的字母</strong>，那么称单词 <code>b</code> 是单词 <code>a</code> 的子集。 例如，&ldquo;wrr&rdquo; 是 &ldquo;warrior&rdquo; 的子集，但不是 &ldquo;world&rdquo; 的子集。

如果对 <code>B</code> 中的每一个单词<code>b</code>，<code>b</code> 都是 <code>a</code> 的子集，那么我们称<code>A</code> 中的单词 <code>a</code> 是<em>通用的</em>。

你可以按任意顺序以列表形式返回<code>A</code> 中所有的通用单词。



<ol>
</ol>

<strong>示例 1：</strong>

<pre><strong>输入：</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;e&quot;,&quot;o&quot;]
<strong>输出：</strong>[&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;l&quot;,&quot;e&quot;]
<strong>输出：</strong>[&quot;apple&quot;,&quot;google&quot;,&quot;leetcode&quot;]
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;e&quot;,&quot;oo&quot;]
<strong>输出：</strong>[&quot;facebook&quot;,&quot;google&quot;]
</pre>

<strong>示例 4：</strong>

<pre><strong>输入：</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;lo&quot;,&quot;eo&quot;]
<strong>输出：</strong>[&quot;google&quot;,&quot;leetcode&quot;]
</pre>

<strong>示例 5：</strong>

<pre><strong>输入：</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;ec&quot;,&quot;oc&quot;,&quot;ceo&quot;]
<strong>输出：</strong>[&quot;facebook&quot;,&quot;leetcode&quot;]
</pre>



<strong>提示：</strong>

<ol>
	<code>1 &lt;= A.length, B.length &lt;= 10000</code>
	<code>1 &lt;= A[i].length, B[i].length&lt;= 10</code>
	<code>A[i]</code>和<code>B[i]</code>只由小写字母组成。
	<code>A[i]</code>中所有的单词都是独一无二的，也就是说不存在<code>i != j</code>使得<code>A[i] == A[j]</code>。
</ol>

单词子集
We are given two arrays <code>A</code> and <code>B</code> of words. Each word is a string of lowercase letters.

Now, say thatword <code>b</code> is a subset of word <code>a</code><strong></strong>if every letter in <code>b</code> occurs in <code>a</code>, <strong>including multiplicity</strong>. For example, <code>&quot;wrr&quot;</code> is a subset of <code>&quot;warrior&quot;</code>, but is not a subset of <code>&quot;world&quot;</code>.

Now say a word <code>a</code> from <code>A</code> is <em>universal</em> if for every <code>b</code> in <code>B</code>, <code>b</code>is a subset of <code>a</code>.

Return a list of all universal words in <code>A</code>. You can return the words in any order.



<ol>
</ol>

<div>
<strong>Example 1:</strong>

<pre>
<strong>Input: </strong>A = <span id="example-input-1-1">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id="example-input-1-2">[&quot;e&quot;,&quot;o&quot;]</span>
<strong>Output: </strong><span id="example-output-1">[&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>
</pre>

<div>
<strong>Example 2:</strong>

<pre>
<strong>Input: </strong>A = <span id="example-input-2-1">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id="example-input-2-2">[&quot;l&quot;,&quot;e&quot;]</span>
<strong>Output: </strong><span id="example-output-2">[&quot;apple&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>
</pre>

<div>
<strong>Example 3:</strong>

<pre>
<strong>Input: </strong>A = <span id="example-input-3-1">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id="example-input-3-2">[&quot;e&quot;,&quot;oo&quot;]</span>
<strong>Output: </strong><span id="example-output-3">[&quot;facebook&quot;,&quot;google&quot;]</span>
</pre>

<div>
<strong>Example 4:</strong>

<pre>
<strong>Input: </strong>A = <span id="example-input-4-1">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id="example-input-4-2">[&quot;lo&quot;,&quot;eo&quot;]</span>
<strong>Output: </strong><span id="example-output-4">[&quot;google&quot;,&quot;leetcode&quot;]</span>
</pre>

<div>
<strong>Example 5:</strong>

<pre>
<strong>Input: </strong>A = <span id="example-input-5-1">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id="example-input-5-2">[&quot;ec&quot;,&quot;oc&quot;,&quot;ceo&quot;]</span>
<strong>Output: </strong><span id="example-output-5">[&quot;facebook&quot;,&quot;leetcode&quot;]</span>
</pre>



<strong>Note:</strong>

<ol>
	<code>1 &lt;= A.length, B.length &lt;= 10000</code>
	<code>1 &lt;= A[i].length, B[i].length&lt;= 10</code>
	<code>A[i]</code> and <code>B[i]</code> consist only of lowercase letters.
	All words in <code>A[i]</code> are unique: there isn&#39;t <code>i != j</code> with <code>A[i] == A[j]</code>.
</ol>
</div>
</div>
</div>
</div>
</div>
