### 解题思路
此处撰写解题思路
刚开始没有太好的思路，参看后发现无论使用1<<n还是使用N & (N-1)的规律都可以。
扩展：
计算0的个数：先计算1的格式然后用32减去1的个数即可。

### 代码

```cpp
class Solution {
public:
    int hammingWeight(uint32_t n) {
        // 两种方法：
        //1、最直观的方法就是和1<<n其中n从1到31依次用只有一个1的二进制数和原数判断
        // 其实已经可以了 但是还是要执行32次
        /*
        int ret = 0;
        for(int i=0;i<31;i++)
        {
            if(n & (1<<i)) 
            {
                ret ++ ;
            }
        }
        return ret;
        */
        // 2、根据 N & (N-1) 每次都可以消除二进制最后一位的1 这样一直消下去最后会是0 的规律来判断
        int ret = 0;
        while(n)
        {
            ret ++;
            n &= (n-1);
        }
        return ret;
    }
};
```