### 解题思路
方法一：n & i

这是最直观的方式，依次判断整数的每一位是否为 1 。

判断第 1 位：n & 1

判断第 2 位：n & (1 << 1)

......

判断第32位：n & (1 << 31)

### 代码

```cpp
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int ret = 0;
        for (int i = 0; i < 32; i++) {
            if (n & (1 << i))
                ret++;
        }
        return ret;
    }
};
```


方法二：N & (N - 1)​


使用这个方法，基于这样一个事实：

- 一个数 nn 与一个比它小 11 的数（n - 1n−1）进行与运算（\&&）之后，得到的结果会消除 nn 中最低位的 11.
我们看两个例子：

示例1: 7 & 6
00111
      &   =》 00110
00110

示例2: 8 & 7
01000
      &   =》 00000
00111
可以看到，n \& (n - 1)n&(n−1) 得到的结果，就是将 nn 最低位 11，换成 00 之后的值。

根据这个，编码思路就是，每次都使用该运算法则消去 11 ，每运算一次计数器 + 1+1，直至 nn 为 00 .
```
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int ret = 0;
        while (n) {
            n &= n-1;
            ret++;
        }
        return ret;
    }
};
```
