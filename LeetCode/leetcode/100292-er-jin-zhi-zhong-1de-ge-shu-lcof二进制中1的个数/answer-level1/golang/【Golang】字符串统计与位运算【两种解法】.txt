# 解法一

**将num转化为二进制字符串再进行遍历统计**

--执行时间: 0 ms  --消耗内存: 2 MB

```go
func hammingWeight(num uint32) int {
    n:=0
    nums:=fmt.Sprintf("%b",num)
    for _,char:=range nums{
        if char=='1'{
            n++
        }
    }
    return n
}
```

---


# 解法二:位运算

**每次&操作后，0111(7)的二进制数中最右边的1都被消除1个**

**消除的次数则等于1的个数**

--执行时间: 0 ms  --消耗内存: 2 MB

```go
func hammingWeight(num uint32) int {
    n:=0//统计1的个数
    for num!=0{
        n++
        num&=(num-1)//n=n&(n-1);
    }
    return n
}
```
---

# 示例

**n&=(n-1)位运算示例**

**当n=7时**

>        0111(7) 
>     &  0110(6)
>     -------------    
>        0110(6)
>          ↓       --6-1=5    
>        0110(6) 
>      & 0101(5)
>     -------------    
>        0100(4)    
>           ↓       --4-1=3    
>        0100(4) 
>     &  0011(3)
>      -------------   
>        0000(0)    →退出循环

**可知:每次&操作后，0111(7)的二进制数中最右边的1都被消除1个**

**消除的次数=3，也等于1的个数=3**

