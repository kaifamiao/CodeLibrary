## 37.序列化二叉树

### Information

* TIME: 2020/02/17
* LINK: [Click Here](https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/)
* TAG: `BFS`

### Description

> 请实现两个函数，分别用来序列化和反序列化二叉树。

### Example

```text
你可以将以下二叉树：

    1
   / \
  2   3
     / \
    4   5

序列化为 "[1,2,3,null,null,4,5]"
```

### My Answer

> 本题基于层次遍历

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder("[");
        LinkedList<Integer> tree = new LinkedList<>();
        LinkedList<TreeNode> queue = new LinkedList<>();
        queue.addLast(root);
        
        while(queue.size() != 0){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                TreeNode node = queue.removeFirst();
                if(node == null){
                    tree.add(null);
                }else{
                    tree.add(node.val);
                    queue.addLast(node.left);
                    queue.addLast(node.right);
                }
            }
        }
        while(tree.size() != 0 && tree.getLast() == null){
            tree.removeLast();
        }
        for(int i = 0; i < tree.size(); i++){
            if(i == 0){
                sb.append(tree.get(i).toString());
            }else{
                sb.append("," + tree.get(i));
            }
        }
        sb.append("]");
        //System.out.println(sb.toString());
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] elements = data.split("[\\[\\]\\,]");
        List<Integer> list = new ArrayList<>();
        for(String s : elements){
            if(s.length() == 0) continue;
            if(s.charAt(0) == 'n'){
                list.add(null);
            }else{
                list.add(new Integer(s));
            }
        }
        if(list.size() == 0) return null;
        LinkedList<TreeNode> queue = new LinkedList<>();
        int idx = 0;
        TreeNode root = new TreeNode(list.get(idx++));
        queue.addLast(root);
        while(!queue.isEmpty() && idx < list.size()){
            int queueSize = queue.size();
            for(int i = 0; i < queueSize; i++){
                TreeNode node = queue.removeFirst();
                Integer left = idx < list.size()? list.get(idx++) : null;
                Integer right = idx < list.size()? list.get(idx++) : null;
                if(left != null){
                    TreeNode leftNode = new TreeNode(left);
                    node.left = leftNode;
                    queue.addLast(leftNode);
                }
                if(right != null){
                    TreeNode rightNode = new TreeNode(right);
                    node.right = rightNode;
                    queue.addLast(rightNode);
                }
            }
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
```

### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/3504ec8b81323ac4f40e7ee760f2e5c1397c7c7538ff90e4c690b36ae8b9c3c3-file_1581943832953)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

