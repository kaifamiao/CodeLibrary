the-earliest-moment-when-everyone-become-friends
在一个社交圈子当中，有<code>N</code>个人。每个人都有一个从<code>0</code> 到<code>N-1</code>唯一的 id编号。

我们有一份日志列表<code>logs</code>，其中每条记录都包含一个非负整数的时间戳，以及分属两个人的不同id，<code>logs[i] = [timestamp, id_A, id_B]</code>。

每条日志标识出两个人成为好友的时间，友谊是相互的：如果 A 和 B 是好友，那么 B 和 A 也是好友。

如果 A 是 B 的好友，或者 A 是 B 的好友的好友，那么就可以认为 A 也与 B 熟识。

返回圈子里所有人之间都熟识的最早时间。如果找不到最早时间，就返回 <code>-1</code> 。



<strong>示例：</strong>

<pre><strong>输入：</strong>logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], N = 6
<strong>输出：</strong>20190301
<strong>解释：</strong>
第一次结交发生在 timestamp = 20190101，0 和 1 成为好友，社交朋友圈如下 [0,1], [2], [3], [4], [5]。
第二次结交发生在 timestamp = 20190104，3 和 4 成为好友，社交朋友圈如下 [0,1], [2], [3,4], [5].
第三次结交发生在 timestamp = 20190107，2 和 3 成为好友，社交朋友圈如下 [0,1], [2,3,4], [5].
第四次结交发生在 timestamp = 20190211，1 和 5 成为好友，社交朋友圈如下 [0,1,5], [2,3,4].
第五次结交发生在 timestamp = 20190224，2 和 4 已经是好友了。
第六次结交发生在 timestamp = 20190301，0 和 3 成为好友，大家都互相熟识了。
</pre>



<strong>提示：</strong>

<ol>
	<code>1 &lt;= N &lt;= 100</code>
	<code>1 &lt;= logs.length &lt;= 10^4</code>
	<code>0 &lt;= logs[i][0] &lt;= 10^9</code>
	<code>0 &lt;= logs[i][1], logs[i][2] &lt;= N - 1</code>
	保证 <code>logs[i][0]</code> 中的所有时间戳都不同
	<code>Logs</code>不一定按某一标准排序
	<code>logs[i][1] != logs[i][2]</code>
</ol>

彼此熟识的最早时间
In a social group, there are <code>N</code> people, with unique integer ids from <code>0</code> to <code>N-1</code>.

We have a list of <code>logs</code>, where each <code>logs[i] = [timestamp, id_A, id_B]</code> contains a non-negativeinteger timestamp, and the ids of two different people.

Each log represents the time in which two different people became friends. Friendship is symmetric: if A is friends with B, then B is friends with A.

Let&#39;s say that person A is acquainted with person B if A is friends with B, or A is a friend of someone acquainted with B.

Return the earliest time for which every person became acquainted with every other person. Return -1 if there is nosuchearliest time.



<strong>Example 1:</strong>

<pre>
<strong>Input: </strong>logs = <span id="example-input-1-1">[[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]]</span>, N = <span id="example-input-1-2">6</span>
<strong>Output: </strong><span id="example-output-1">20190301</span>
<strong>Explanation: </strong>
The first event occurs at timestamp = 20190101 and after 0 and 1 become friends we have the following friendship groups [0,1], [2], [3], [4], [5].
The second event occurs at timestamp = 20190104 and after 3 and 4 become friends we have the following friendship groups [0,1], [2], [3,4], [5].
The third event occurs at timestamp = 20190107 and after 2 and 3 become friends we have the following friendship groups [0,1], [2,3,4], [5].
The fourth event occurs at timestamp = 20190211 and after 1 and 5 become friends we have the following friendship groups [0,1,5], [2,3,4].
The fifth event occurs at timestamp = 20190224 and as 2 and 4 are already friend anything happens.
The sixth event occurs at timestamp = 20190301 and after 0 and 3 become friends we have that all become friends.
</pre>



<strong>Note:</strong>

<ol>
	<code>2 &lt;= N &lt;= 100</code>
	<code>1 &lt;= logs.length &lt;= 10^4</code>
	<code>0 &lt;= logs[i][0] &lt;= 10^9</code>
	<code>0 &lt;= logs[i][1], logs[i][2] &lt;= N - 1</code>
	It&#39;s guaranteed that all timestamps in <code>logs[i][0]</code> are different.
	<code>logs </code>are not necessarily ordered by some criteria.
	<code>logs[i][1] != logs[i][2]</code>
</ol>
