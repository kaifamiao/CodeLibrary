

### 思路

- 标签：`字符串`、`二进制`
- 按照正常的思路，直接使用二进制相加求和；或者转换为十进制求和后，再转换回二进制
- 直接使用二进制相加，将两个字符串长度变为相同，短的前面用 0 补齐，从后往前遍历相加，最后将结果反转。
- 二进制相加，1 + 1 = 10，1 为进位。直接使用二进制相加，进位和当前值情况比较多，比较复杂
- 时间复杂度：O(n)，需要遍历所有元素
- 空间复杂度：O(n)，额外需要长度为 N 的字符串存放结果

### 代码

```Python []
# Python3
class Solution:
    def addBinary(self, a: str, b: str) -> str:
        if len(a) < len(b):
            a = (len(b) - len(a)) * "0" + a
        if len(b) < len(a): 
            b = (len(a) - len(b)) * "0" + b
        maxLen = max(len(a),len(b))
        carry = 0
        sumStr = ""
        for i in reversed(range(maxLen)):
            if int(a[i]) + int(b[i]) + carry == 3:
                sumStr += "1"
                carry = 1
            elif int(a[i]) + int(b[i]) + carry == 2:
                sumStr += "0"
                carry = 1
            else:
                sumStr += str(int(a[i]) + int(b[i]) + carry)
                carry = 0
        if carry == 1: # 如果还有进位，加上进位
            sumStr += "1"
        return sumStr[::-1] ## 反转 sumStr
```

Python3 直接使用内置函数，先转换为 10 进制相加，再转换为 2 进制

```python []
# Python3
class Solution:
    def addBinary(self, a: str, b: str) -> str:
        return bin(int(a, 2) + int(b, 2))[2:]
```

- int()，其他类型数据转换为 int，第二个参数为数据的进制
- bin()，将十进制转换为二进制，默认前面有 `0b`，所以截取第二个字段以后数据

### 测试用例

| 输入             | 输出    |
| ---------------- | ------- |
| "11"<br>"1"      | "100"   |
| "1010"<br>"1011" | "10101" |
| "0"<br>"0"       | "0"     |
| "1111"<br>"1111" | "11110" |

