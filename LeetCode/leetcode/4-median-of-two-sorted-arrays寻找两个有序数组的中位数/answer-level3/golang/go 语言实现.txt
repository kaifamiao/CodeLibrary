### 解题思路
我们先来看看本题的题意以及“中位数”的理解；
顾名思义：中位数，即处在中间位置的数；
如果是一维数组的话，那么如果数组个数是奇数，则中位数为最中间的那个数；如果数组个数是偶数个，则中位数为最中间的两个数和的平均值.
同样地，对于2个有序数组来讲，那如何理解中位数，首先：因为2个数组都是有序的，我们可以把两个数组合并为同一个数组，然后再合并后再像一维数组一样在其中定位“中间位置”即可.
但绝不能理解为，单独寻找每一个有序数组中位数，然后将所有中位数和除以2.
比如下面几个用例.
[1,3,9]
[5,8]
合并后是[1,3,5,8,9]，则这两个数组的中位数自然就是5了

[1,3,9]
[10]
合并后是[1,3,9,10]，则这两个有序数组的中位数自然就是3和9了，然后求和平均，即(3+9)/2 等于 6.0

[1,4,9]
[10]
合并后是[1,4,9,10]，则这两个有序数组的中位数自然就是4和9了，然后求和平均，即(4+9)/2 等于6.5

[1,4,5,9]
[5,5,5]
合并后是[1,4,5,     5       ,5,5,9]，则这两个有序数组的中位数自然就是5了.

[1,4,8,9 ]
[2,4,6,7,8]
[1,2,4,4, 6 ,7,8,8,9]

首先，基于以上分析， 能先到的最暴力的解法就是：先合并，再寻找；
合并思路，因为两个都是有序的，所以可以考虑采用2个指针分别指向2个数组的头部，然后逐一比较，并把每次比较后最小的放到合并后的数组中；
寻找合并后的中位数：根据上述定义，然后再合并后的数组中，寻找中间位置返回即可.

### 代码

```golang
func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
    res := merge(nums1,nums2)
    midNum := searchMid(res)
    return midNum
}
func merge(num1 []int,num2 []int)[]int{
    var i,j int 
    len1,len2 := len(num1),len(num2)
    var res = make([]int,len1 + len2)
    for k :=0;k< (len1 + len2);k++ {
        if j==len2 ||
            (i<len1 && j<len2 && num1[i]<num2[j]){
            res[k] = num1[i]
            i++
            continue
        }
        if i==len1 ||
            (i<len1 && j<len2 && num1[i] >=num2[j]){
            res[k] = num2[j]
            j++
        }
    }
    return res
}
func searchMid(res []int)float64{
    len := len(res)
    if(len%2 == 0){
        return float64 (res[len/2 -1] + res[len/2])/2.0 // 需要将和先转换为float后再除以2
    }
    return float64(res[len/2])
}
```