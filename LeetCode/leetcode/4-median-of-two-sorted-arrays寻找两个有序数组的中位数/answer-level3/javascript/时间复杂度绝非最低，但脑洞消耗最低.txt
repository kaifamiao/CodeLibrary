算法肯定有很多种，每个人思路可能都不一样，仅作为分享和供讨论
- #步骤：
  *1.两个数组合并  2.将新的数组排序  3.返回中位数*
- **1.两个数组合并**
- 第一种：最小白的方式，用for循环将其他两个数组中元素挨个放入新数组中，但这会产生多余的时间复杂度
- 第二种：用concat方法直接合并数组
- ![11.jpg](https://pic.leetcode-cn.com/a02a93db62174a1880560dcb3beb29b2137d38c8fc883485cd572c98b02ba827-11.jpg)
- ![22.jpg](https://pic.leetcode-cn.com/ed98b2126e2d9b02ea72acfa47f0de00b77bc03cee653caca73133e4d2a581e1-22.jpg)
- **2.将新的数组排序**
- 选择一种排序算法，我用的是冒泡排序，时间复杂度为O(m*n)，并没有达到要求，不过其他排序最好的也就O(m*logn),想不出能达到要求的了
![333.jpg](https://pic.leetcode-cn.com/56500b166a521904fb0825ecd96d76de10d85508fa41adef0576eef56c8fff0e-333.jpg)
- **3.返回中位数**
- 若数组长度为奇数：就返回中间那个数，因为是奇数所以a.length/2是小数，用parseInt()去掉小数正好是中位数下标。
- 若数组长度为偶数：返回数组中间两位数之和的一半
- **完整代码**
- 整个程序时间复杂度在于排序上，所以就是O(m*n)。
- ![4555.jpg](https://pic.leetcode-cn.com/a4212f82292f16ca8434556a1f06d59901ffedad71de1f6742ec08af7865d552-4555.jpg)
