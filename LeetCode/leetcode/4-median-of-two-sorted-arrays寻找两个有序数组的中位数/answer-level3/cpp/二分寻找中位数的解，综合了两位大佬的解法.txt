# 解答
这道题难度在于运行时间的限制。

如果不考虑运行时间，我们的解决方法有很多：

方法一：将两个数组合并，排序后选择中位数。运行时间为O(nlogn).

方法二：利用有序的特性，将两个数组合并成为一个有序数组，随后选择中位数。运行时间为O(n).

当然，前两种方法可行但不满足题意，这里也就不再贴出代码。

着重来看运行时间为 O(log(m+n)) 的方法。

首先来看中位数的概念：在数组中，中位数满足其两边的元素个数相同。例如对于数组 odd = [1,2,3], 它的中位数为 2; 对于数组 even = [1,2,3,4], 它的中位数为 (2 + 3) / 2 = 2.5. 

结合题目，将中位数的概念拓展到两个数组上：

nums1 = [a1, a2,..., an],  nums = [b1,b2,...,bm]

其中位数为满足：[ nums1[1,..,left1 - 1],  nums2[ 1,...,left2 - 1] | nums1[left1, ...an], nums[ left2, ..., bn]]

关键在于保证 '|' 两侧的元素个数相同。

假设取出 nums1 中左侧 i 个元素，num2 中左侧取出 j 个元素，为保证两侧的元素个数相等，有 i + j = n - i + m - j, 即 j = (m+n+1)/2 - i 或者 j = (m+n)/2 - i 个元素。（由于是int类型，因此1的存在并不影响最终结果）

很明显，数值 i 是基于二分查找来选定的。如果来判断二分的条件？其关键在于 nums2[ left2 - 1] 与 nums1[left1] 值的比较。

如下图，若 nums1[ left1] > nums2[ left2 - 1], 则说明 nums1 中左侧元素过多，将边界 right1 = i;
![在这里插入图片描述](https://pic.leetcode-cn.com/f2d60ce6e7c6e0773d79f57cfefb763e25c5ab1b22d56ffebea8a85debcf5f97.png)

如下图，若 nums1[ left1] < nums2[ left2 - 1], 则说明 nums2 中左侧元素过多，需要将 j 变小，根据 i 与 j 的关系，可以将边界 left1 = i + 1;
![在这里插入图片描述](https://pic.leetcode-cn.com/3d4e216ed74128828adfb4570c166e1e8463401f976380317cc3fdcf4f1a9f6a.png)


当出现边界情况时候。

若 left1 == 0 或者 left2 == 0, 此时切割到了最前面，如下图。若 left1 == 0, 最大值为nums2[ n - 1]. 若 left2 == 0, 则最大值为 nums1[m-1] ![在这里插入图片描述](https://pic.leetcode-cn.com/3f4c3875f4cce4ed799df4828be1ccdf8f29b7e0a47efdfe5118b6fdca211c98.png)
若 left1 == m 或者 left2 == n,此时切割到了最后面，如下图。若 left1 == m , 最小值为 nums1[i]; 若 left2 == n, 则最小值为num2[j].

图例：![在这里插入图片描述](https://pic.leetcode-cn.com/877a0fd2c430932665b48c2ac64af20fc1ea45409498ced6fb7a29f8d3ee6760.png)

代码：
```cpp
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		//保证 nums1.size() < nums2.size();
        if( nums1.size() > nums2.size()) 
        	return findMedianSortedArrays(nums2, nums1);
        
        int k = (nums1.size() + nums2.size() + 1)/2;
        
		int left = 0, right = nums1.size();
        while(left < right){	// 寻找合适的切割位置（即 i 的值）
            int i = left + (right - left)/2;	//用下标来决定个数
            int j = k - i;
            if( nums1[i] < nums2[j-1])
                left = i + 1;	
            else
                right = i;
        }
        
        int i = left;
        int j = k - left;
        int c1 = max(i <= 0 ? INT_MIN:nums1[ i - 1],
                     j <= 0 ? INT_MIN:nums2[ j - 1]);
        if( (nums1.size() + nums2.size()) % 2 == 1)
            return c1;
        int c2 = min(i >= nums1.size() ? INT_MAX:  nums1[i],
                     j >= nums2.size() ? INT_MAX : nums2[j]);
        return (c1 + c2) * 0.5;
    }
};

//算法的运行时间为 O(logn)
```