参考大佬们的解法，对nums1在0，nums1.size()的区间内求i，使得nums1[i]>nums2[j-1] && nums2[j]>nums1[i-1]，同时满足left的长度等于right，其中left包含nums1[0...i-1],nums2[0,j-1],而right包含nums1[i,m-1],nums2[j,n-1]的内容，注意边界条件地判断，同时因为j=(m+n+1)/2，为了保证j>=0，需要使n>=m，因此不满足条件的需要置换，实现代码如下：
```
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m=nums1.size(),n=nums2.size();
        if(m>n){
            swap(m,n);
            swap(nums1,nums2);
        }
        int iMin=0,iMax=m,halfLen=(m+n+1)/2;
        while(iMin<=iMax){
            int i=iMin+(iMax-iMin)/2;
            int j=halfLen-i;
            if(i<iMax && nums2[j-1]>nums1[i]) {
                iMin=i+1;
            }else if(i>iMin && nums1[i-1]>nums2[j]){
                iMax=i-1;
            }else{
                int maxLeft=0;
                if(i==0) maxLeft=nums2[j-1];
                else if(j==0) maxLeft=nums1[i-1];
                else maxLeft=max(nums2[j-1],nums1[i-1]);
                if((m+n)%2==1) return maxLeft;
                
                int minRight=0;
                if(i==m) minRight=nums2[j];
                else if(j==n) minRight=nums1[i];
                else minRight=min(nums1[i],nums2[j]);
                
                return (maxLeft+minRight)/2.0;
            }
        }
        return 0.0;
    }
};
```
