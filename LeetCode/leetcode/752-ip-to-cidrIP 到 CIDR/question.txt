ip-to-cidr
给定一个起始 IP 地址<code>ip</code>和一个我们需要包含的 IP 的数量<code>n</code>，返回用列表（最小可能的长度）表示的 CIDR块的范围。

CIDR 块是包含 IP 的字符串，后接斜杠和固定长度。例如：&ldquo;123.45.67.89/20&rdquo;。固定长度 &ldquo;20&rdquo; 表示在特定的范围中公共前缀位的长度。

<strong>示例 1：</strong>

<pre><strong>输入：</strong>ip = &quot;255.0.0.7&quot;, n = 10
<strong>输出：</strong>[&quot;255.0.0.7/32&quot;,&quot;255.0.0.8/29&quot;,&quot;255.0.0.16/32&quot;]
<strong>解释：
</strong>转换为二进制时，初始IP地址如下所示（为清晰起见添加了空格）：
255.0.0.7 -&gt; 11111111 00000000 00000000 00000111
地址 &quot;255.0.0.7/32&quot; 表示与给定地址有相同的 32 位前缀的所有地址，
在这里只有这一个地址。

地址 &quot;255.0.0.8/29&quot; 表示与给定地址有相同的 29 位前缀的所有地址：
255.0.0.8 -&gt; 11111111 00000000 00000000 00001000
有相同的 29 位前缀的地址如下：
11111111 00000000 00000000 00001000
11111111 00000000 00000000 00001001
11111111 00000000 00000000 00001010
11111111 00000000 00000000 00001011
11111111 00000000 00000000 00001100
11111111 00000000 00000000 00001101
11111111 00000000 00000000 00001110
11111111 00000000 00000000 00001111

地址 &quot;255.0.0.16/32&quot; 表示与给定地址有相同的 32 位前缀的所有地址，
这里只有 11111111 00000000 00000000 00010000。

总之，答案指定了从 255.0.0.7 开始的 10 个 IP 的范围。

有一些其他的表示方法，例如：
[&quot;255.0.0.7/32&quot;,&quot;255.0.0.8/30&quot;, &quot;255.0.0.12/30&quot;, &quot;255.0.0.16/32&quot;],
但是我们的答案是最短可能的答案。

另外请注意以 &quot;255.0.0.7/30&quot; 开始的表示不正确，
因为其包括了 255.0.0.4 = 11111111 00000000 00000000 00000100 这样的地址，
超出了需要表示的范围。
</pre>



<strong>注：</strong>

<ol>
	<code>ip</code>是有效的 IPv4 地址。
	每一个隐含地址 <code>ip + x</code> (其中<code>x &lt; n</code>) 都是有效的 IPv4 地址。
	<code>n</code>为整数，范围为<code>[1, 1000]</code>。
</ol>



IP 到 CIDR

Given a start IP address <code>ip</code> and a number of ips we need to cover <code>n</code>, return a representation of the range as a list (of smallest possible length) of CIDR blocks.

A CIDR block is a string consisting of an IP, followed by a slash, and then the prefix length.  For example: "123.45.67.89/20".  That prefix length "20" represents the number of common prefix bits in the specified range.


<b>Example 1:</b><br />
<pre>
<b>Input:</b> ip = "255.0.0.7", n = 10
<b>Output:</b> ["255.0.0.7/32","255.0.0.8/29","255.0.0.16/32"]
<b>Explanation:</b>
The initial ip address, when converted to binary, looks like this (spaces added for clarity):
255.0.0.7 -> 11111111 00000000 00000000 00000111
The address "255.0.0.7/32" specifies all addresses with a common prefix of 32 bits to the given address,
ie. just this one address.

The address "255.0.0.8/29" specifies all addresses with a common prefix of 29 bits to the given address:
255.0.0.8 -> 11111111 00000000 00000000 00001000
Addresses with common prefix of 29 bits are:
11111111 00000000 00000000 00001000
11111111 00000000 00000000 00001001
11111111 00000000 00000000 00001010
11111111 00000000 00000000 00001011
11111111 00000000 00000000 00001100
11111111 00000000 00000000 00001101
11111111 00000000 00000000 00001110
11111111 00000000 00000000 00001111

The address "255.0.0.16/32" specifies all addresses with a common prefix of 32 bits to the given address,
ie. just 11111111 00000000 00000000 00010000.

In total, the answer specifies the range of 10 ips starting with the address 255.0.0.7 .

There were other representations, such as:
["255.0.0.7/32","255.0.0.8/30", "255.0.0.12/30", "255.0.0.16/32"],
but our answer was the shortest possible.

Also note that a representation beginning with say, "255.0.0.7/30" would be incorrect,
because it includes addresses like 255.0.0.4 = 11111111 00000000 00000000 00000100 
that are outside the specified range.
</pre>


<b>Note:</b><br>
<ol>
<code>ip</code> will be a valid IPv4 address.
Every implied address <code>ip + x</code> (for <code>x < n</code>) will be a valid IPv4 address.
<code>n</code> will be an integer in the range <code>[1, 1000]</code>.
</ol>
