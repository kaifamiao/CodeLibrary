[128.最长连续序列](https://leetcode-cn.com/problems/longest-consecutive-sequence/solution/zui-chang-lian-xu-xu-lie-by-leetcode/)    

[力扣JS题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)


## 方法一   

在方法三暴力解法之上的优化，采用set记录所有的数组元素，在遍历的过程中，如果set中存在比当前数字小1的数字，则表示当前数字是某一序列中的一个数，则不对该数字进行遍历，只针对作为某一序列起始数字的数字进行遍历。   

```javascript
/**
 * @param {number[]} nums
 * @return {number}
 */
var longestConsecutive = function(nums) {
    if (!Array.isArray(nums) || nums.length === 0) return 0;
    let set = new Set();
    
    for (let num of nums) {
        set.add(num);
    }
    
    let max = 1;
    
    for (let num of nums) {
        if (!set.has(num-1)) {
            // 如果set中不包含比num小1的数
            // 即如果num是某一序列的起始数
            let times = 1, curNum = num;
            while (set.has(curNum+1)) {
                times++;
                curNum++;
            }
            max = Math.max(max, times);
        }
    }
    return max;
};
```


## 方法二    

先对数组进行排序，排序之后查找最长连续序列，查找过程中，遇到当前序列与上一个序列相同则跳过。   

时间复杂度为`O(nlogn)`，在力扣能跑过。

```javascript
/**
 * @param {number[]} nums
 * @return {number}
 */
var longestConsecutive = function(nums) {
    if (nums.length === 0 || !Array.isArray(nums)) return 0;
    nums.sort((a,b) => a-b);
    let max = -Infinity;
    let times = 1;
    for (let j = 1; j < nums.length; j++) {
        if (nums[j] === nums[j-1] + 1) {
            times++;
        } else if(nums[j] === nums[j-1]) {
            continue;
        } else {
            max = Math.max(max, times);
            times = 1;
        }
    }
    return Math.max(times, max);
};
```

## 方法三    

暴力解法，判断数组中的每一个数字组成的子序列的长度，取最长。时间复杂度为`O(n的三次方)`，在力扣中跑会超时。

```javascript
/**
 * @param {number[]} nums
 * @return {number}
 */
var longestConsecutive = function(nums) {
    let longest = 0;
    for (let num of nums) {
        let curNum = num;
        let times = 1;
        while (help(nums, curNum+1)) {
            curNum++;
            times++;
        }
        longest = Math.max(longest, times)
    }
    return longest;
};

function help(nums, key) {
    for (let i = 0; i < nums.length; i++) {
        if (nums[i] === key) return true;
    }
    return false;
}
```