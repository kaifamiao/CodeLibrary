## 解法一 前缀和

### 思路

遍历所有**可能**的正方形区域，具体的算法流程是：1.考虑正方形的**边长**从 1 到 $Min(M,N)$（M 为矩阵长度，N 为矩阵宽度）2.考虑正方形**右下角的坐标**从 (0, 0) 到 (M, N) 3.判断正方形是否存在（可能会**超出边界**，通过**左上角坐标**判断），如果存在则验证该正方形区域的**元素总和**。

 下面引入**二维前缀和**的计算方法，通过**预处理**可以在 $O(1)$ 时间内计算出一块区域内元素的总和。

首先是预处理，在 $O(N^2)$ 时间内计算出二维前缀和 `dp[i][j]`：从 **(0, 0)** 到 **(i, j)** 内元素的总和。

已知 `dp[i][j]` 必定包含一个元素 `mat[i][j]`，假设我们已经计算出部分前缀和 `dp[x][y]`（x < i 且 y < j），那么 `dp[i][j] = mat[i][j] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]`。

下面通过一组动画来理解这个过程（图片较大，请点击**左下角播放**）：

我们需要计算**黑色虚线区域**即 `dp[i][j]`，先加上右下角元素`mat[i][j]`，接着加上`mat[i][j]`上方区域的前缀和`dp[i - 1][j]`以及左边区域的前缀和`dp[i][j - 1]`，但左上角一块区域被加了**两**次，因此还要再扣去这块区域`dp[i - 1][j - 1]`。

<![图片1.png](https://pic.leetcode-cn.com/8d4eb23c93e6103310018cda9baadddec024406d45a52e30dd94cb7d2d1d7efe-%E5%9B%BE%E7%89%871.png),![图片3.png](https://pic.leetcode-cn.com/dd2f500b47a99346928ef453fd823b74d79353357fbd90d5255c99002e594a25-%E5%9B%BE%E7%89%873.png),![图片4.png](https://pic.leetcode-cn.com/3be847f82162020187c1bb981c48f16b9dc9a610d77c00625992f57e60539c42-%E5%9B%BE%E7%89%874.png),![图片5.png](https://pic.leetcode-cn.com/35cb35fe6bf0fff46cebc8691013b0d26fc6843bc6cd74c0af7e6a3c26c448a9-%E5%9B%BE%E7%89%875.png)>


预处理完**二维前缀和**，我们可以**逆向**这个过程，计算出某一块特定区域内元素总和。例如计算下面的**红色区域**，其右下角坐标为 **(i, j)**，长度和宽度为 **k**，则可以将绿色区域 `dp[i][j]` 减去红色区域相邻的上方区域`dp[i - k][j]`以及相邻的左边区域`dp[i][j - k]`，最后补上被**多减一次**的左上方区域`dp[i - k][j - k]`。

图示（图片较大，请点击**左下角播放**）：

<![图片6.png](https://pic.leetcode-cn.com/ad44480c5fc0aa9ae6629669128f6f6b4f21513ef155a1147a74983a7f620e92-%E5%9B%BE%E7%89%876.png),![图片7.png](https://pic.leetcode-cn.com/75ac5047c213b4955d6e4785c536d069fc0733cc7900570846a6610ddb2e43d1-%E5%9B%BE%E7%89%877.png),![图片8.png](https://pic.leetcode-cn.com/7d6490ea1c262318cca8331628f7f4f629a3ed79cd0ad3e4eafe8d7d5f4f1985-%E5%9B%BE%E7%89%878.png),![图片9.png](https://pic.leetcode-cn.com/bb065df3c62b3d6b517213f7608acd80f7589e61d37121b20194a09a68e2faf4-%E5%9B%BE%E7%89%879.png),![图片10.png](https://pic.leetcode-cn.com/e6ab0d1698dc4d4e4b51a3a47cd4333473711edeed30a9a8ef386a3e7cb51be6-%E5%9B%BE%E7%89%8710.png)>








### 代码

```java
class Solution {
    public int maxSideLength(int[][] mat, int threshold) {
        int m = mat.length, n = mat[0].length;
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = mat[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1];
            }
        }
        int ans = 0;
        for (int k = 1; k <= Math.min(m, n); k++) {
            for (int i = 1; i <= m; i++) {
                for (int j = 1; j <= n; j++) {
                    if (i - k < 0 || j - k < 0) {
                        continue;
                    }
                    int tmp = dp[i][j] - dp[i - k][j] - dp[i][j - k] + dp[i - k][j - k];
                    if (tmp <= threshold) {
                        ans = Math.max(ans, k);
                    }
                }
            }
        }
        return ans;
    }
}
```

#### 复杂度分析

- 时间复杂度：$O(min(M, N) * M * N)$，其中 M 为矩阵长度，N 为矩阵宽度。

## 解法二 前缀和 + 二分

### 思路

查找的正方形的边长越长，其计算出来的元素总和越大。

我们可以二分正方形的边长，在满足**阈值条件**下尽可能地扩大正方形的边长，其等价于在升序数组中查找一个小于等于 k 的最大元素。

二分的具体思路：

- 控制 l 到 h 都是可能可能的值
- 如果 mid 满足**阈值条件**，则 l = mid，l 可能是答案，不能直接舍去。
- 如果 mid 不满足**阈值条件**，则 h = mid - 1。
- 当 l = h 或 l + 1 = h 时跳出循环（小提示：l = mid 可能造成**死循环**，通过 l + 1 == h 条件跳出），判断 l 和 h 两个是最优解。

### 代码

```java
class Solution {
    int m, n;
    int[][] dp;
    public int maxSideLength(int[][] mat, int threshold) {
        m = mat.length;
        n = mat[0].length;
        dp = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = mat[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1];
            }
        }
        int l = 0, h = Math.min(m, n);
        while (l <= h) {
            int mid = l + (h - l) / 2;
            if (l == h || l + 1 == h) {
                break;
            }
            if (help(mid, threshold)) {
                l = mid;
            } else {
                h = mid - 1;
            }
        }
        if (help(h, threshold)) {
            return h;
        } else {
            return l;
        }
    }
    public boolean help(int k, int threshold) {
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (i - k < 0 || j - k < 0) {
                    continue;
                }
                if (dp[i][j] - dp[i - k][j] - dp[i][j - k] + dp[i - k][j - k] <= threshold) {
                    return true;
                }
            }
        }
        return false;
    }
}
```

### 复杂度分析

- 时间复杂度：$O(log(min(M, N)) * M * N)$，其中 M 为矩阵长度，N 为矩阵宽度。

<br/>

---

如果该题解对你有帮助，点个赞再走呗~