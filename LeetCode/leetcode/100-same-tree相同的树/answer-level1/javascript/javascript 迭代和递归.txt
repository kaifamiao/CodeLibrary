[100.相同的树](https://leetcode-cn.com/problems/same-tree/solution/)   

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)  

## 先序递归


```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} p
 * @param {TreeNode} q
 * @return {boolean}
 */
var isSameTree = function(p, q) {
    if (p === null && q === null) return true;
    if (p === null || q === null) return false;
    return p.val === q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right)
};
```

## 迭代  

注意边界条件的判断。 

```javascript
var isSameTree = function(p, q) {
    // 只有初始值同时为空时才能结束判断
    if (p === null && q === null) return true;
    
    let pq = [p], qq = [q];
    while (pq.length > 0) {
        p = pq.shift();
        q = qq.shift();
        if (!help(p, q)) return false;
        // 需要判断两个节点的左子节点和右子节点是否相同再继续向下走
        // 防止出现[1,2]和[1,null,2]判断出错的情况
        if (!help(p.left, q.left)) return false;
        p.left && pq.push(p.left);
        q.left && qq.push(q.left);
        if (!help(p.right, q.right)) return false;
        p.right && pq.push(p.right);
        q.right && qq.push(q.right);
    }
    return true;
};

function help(p, q) {
    if (p === null && q === null) return true;
    if (p === null || q === null) return false;
    if (p.val !== q.val) return false;
    return true;
}
```