
## 整体思路

- 两个树相同，中根遍历肯定相同；中根遍历相同，两个树就一定相同？不一定，比如这种情况，中根遍历都是 [1,2]

  ```
  输入:      1          1
            /           \
           2             2
  ```

- 如果中根遍历，先根遍历，后根遍历均相同，那肯定是相同的树。但遍历 3 遍，时间复杂度太高。这道题是简单，显然不会这么复杂

- 中根遍历只记录非空「值」，如果将没有空节点也记录，可以通过判断遍历结果（[1,2,null], [1,null,2]）是否相同来判断两个树是否相同。这是解法一：通过遍历结果是否相同来判断。

- 通过两个数组是否完全相同来判断，其实也是依次判断每一个元素是否相同，如果都相同，则最终结果相同。依次判断每一个节点是否相同，相同为 true，不同为 false，存在 false，则最后结果为 false。这是解法二

## 解法一：通过判断遍历结果是否相同

- 标签：`递归`、`数组`
- 思路转代码：利用递归得到两个树的中根遍历数组，**为 null 也加入数组**
- 时间复杂度：O(N)，递归栈的深度为节点的数量（N）
- 空间复杂度：O(N)，需要一个额外长度为 N 的数组（不考虑叶子节点为 null 的情况）

### 代码

```Python []
# Python3
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        arrp,arrq = [],[]
        self.traversal(p,arrp)
        self.traversal(q,arrq)
        return arrp == arrq
        
    def traversal(self, root: TreeNode, arr: List[int]):
        if root == None:
            return
        arr.append(root.val)
        if root.left != None:
            self.traversal(root.left,arr)
        else:
            arr.append(None)
        if root.right != None:
            self.traversal(root.right,arr)
        else:
            arr.append(None)
```

## 解法二：依次判断每一个节点是否相同

- 标签：`递归`
- 思路转代码：
  1. 先判断是否均为 null，避免获取空节点 val 报错
  2. 再判断是否存在 null，存在 null，说明两者不一样，因为都不会 null
  3. 通过前面两个判断，肯定都不为空，此时判断值是否相等
- 时间复杂度：O(N)，递归栈的深度为节点的数量（N）
- 空间复杂度：O(1)，不需要额外的空间

### 代码

```Python []
# Python3
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        if p == None and q == None:
            return True
        if p == None or q == None:
            return False
        if p.val != q.val:
            return False
        return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)
```

