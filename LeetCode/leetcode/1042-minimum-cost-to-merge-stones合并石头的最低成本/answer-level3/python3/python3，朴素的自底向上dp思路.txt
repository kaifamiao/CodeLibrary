首先，该题有着较明显的区间关联（相邻的K堆合成一堆），可以初步判定为区间DP；
然后，因为所求成本显然是由【被合并的石堆本身的成本】 + 【该次合并操作带来的成本】得到，所以状态方程也一定依此而列

于是，我开始的思路是：
> 状态方程为：成本 = K个区间自身成本和 + sum（K个区间中的石子数量）

但这样的思路需要列出K-1个分割线去得到K个区间，代码并不好写，且如果这K个区间有不能合并成1堆石子的区间该怎么处理呢？
我们怎样绕过不能合并成1堆石子的区间？

答案是，我们不能绕过这样的区间，，即，不能在dp数组里面，将【不能合并成1堆石子的区间的值】简单的记录为-1，**因为我们没法只通过【能合并成1堆石子的区间的dp数组记录的值】来推导出答案**，如果有办法，那就一定需要那K-1个分割线。

所以我决定将dp[i][j]的意义设置为
> dp[i][j]是指区间[j, i]上合并到合并不了了时候的成本和

这样，记录下每个区间的成本和，即使这个区间，不能合并为1堆石子。
于是，状态转移方程就很好得出：
> len1为区间[j, i]最后一次合并时的第一个区间的长度，len2为其余区间的长度
> 
> **由于是区间[j, i]上的最后一次合并**，所以第一个区间合并完，剩下的石堆数，一定是1；第二个区间合并到不能合并时剩下的石堆数，最大可能为K-1
> 于是必有，【第一个区间合并完剩下的石堆数】 + 【其余区间合并完剩下的石堆数】 =< K
> 
> 如果【第一个区间合并完剩下的石堆数】 + 【其余区间合并完剩下的石堆数】 = K，也就是说，还可以继续合并
> 则dp值 = 第一个区间成本 + 其他区间成本 + 合并后区间上的所有石子数量和
> 即dp[i][j] = min(dp[i][j], dp[t][j] + dp[i][t+1] + sum(stones[j:i+1]))
>
> 如果不可以继续合并了，即【第一个区间合并完剩下的石堆数】 + 【其余区间合并完剩下的石堆数】 < K，
> 则dp值 = 第一个区间成本 + 其他区间成本
> 即dp[i][j] = min(dp[i][j], dp[t][j] + dp[i][t+1])

于是写出代码如下：
```
class Solution:
    def mergeStones(self, stones: list, K: int) -> int:
        N = len(stones)
        if N == 1:
            return 0
        #由于每次石堆合并操作，都会减少K-1堆石头，所以N除以K-1不余1的，一定需要返回-1
        if (N-1)%(K-1) != 0:
            return -1
        
        #dp[i][j]是指区间[j, i]上合并到合并不了了时候的成本和
        dp = [[float('inf')] * N for _ in range(N)]

        for i in range(N):
            dp[i][i] = 0
        for i in range(N):
            for j in range(i-1, -1, -1):
                if i == j+K-1:
                    dp[i][j] = sum(stones[j:i+1])
                    continue
                for t in range(j, i, K-1):
                    tmp = (i-t-1)%(K-1)+2
                    if tmp == K:
                        dp[i][j] = min(dp[i][j], dp[t][j] + dp[i][t+1] + sum(stones[j:i+1]))
                    elif tmp < K:
                        dp[i][j] = min(dp[i][j], dp[t][j] + dp[i][t+1])
        return dp[-1][0]
```

附：感谢@newhar指正的相关问题