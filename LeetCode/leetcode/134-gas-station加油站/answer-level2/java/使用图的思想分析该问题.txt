## 思想

该题可以使用图的思想来分析，时间复杂度 **O(N)**，空间复杂度 **O(1)**。

``` java
以该题为例：
gas  = [1,2,3,4,5]
cost = [3,4,5,1,2]
```

下图的`黑色折线图`即`总油量剩余值`，若要满足题目的要求：跑完全程再回到起点，`总油量剩余值`的任意部分都需要在X轴以上，且跑到终点时：`总剩余汽油量 >= 0`。

为了让`黑色折线图`任意部分都在X轴以上，我们需要向上移动`黑色折线图`，直到所有点都在X轴或X轴以上。此时，处在X轴的点即为出发点。即`黑色折线图`的最低值的位置：`index = 3`。

![无标题.png](https://pic.leetcode-cn.com/98ee6782654518e1a33852e99825f1537869a542ee26738cf02d5fb6f0f0a899-%E6%97%A0%E6%A0%87%E9%A2%98.png)

> **柱状图**
> 绿色：可添加的汽油 `gas[i]`
> 橙色：消耗的汽油 `cose[i]` 
> 
> **折线图：**
> 虚线（蓝色）：当前加油站的可用值
> 实线（黑色）：从`0`开始的`总剩余汽油量`

## Java实现

执行用时 :**0 ms**, 在所有 java 提交中击败了 **100.00%** 的用户
内存消耗 :**37.2 MB**, 在所有 java 提交中击败了 **72.07%** 的用户

```java
public int canCompleteCircuit(int[] gas, int[] cost) {
    int len = gas.length;
    int spare = 0;
    int minSpare = Integer.MAX_VALUE;
    int minIndex = 0;

    for (int i = 0; i < len; i++) {
        spare += gas[i] - cost[i];
        if (spare < minSpare) {
            minSpare = spare;
            minIndex = i;
        }
    }

    return spare < 0 ? -1 : (minIndex + 1) % len;
}
```

时间复杂度：**O(N)**
空间复杂度：**O(1)**