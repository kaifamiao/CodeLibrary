### 解题思路
其实这个题的关键是题目中的这一句描述：“如果有解，则一定是唯一答案”，这一句话的潜台词就是：**如果有解，解一定在亏损最严重点的右边第一个。**
什么是亏损最严重：亏损就是加的油还不够花，即 `gas[i]-cost[i] < 0`，那什么是亏损最严重呢，如果`i`点亏损，`i+1`点也亏损，`i+2`点也亏损，`i+3`点不亏损，那么`i+2`就是亏损最严重的点，以样例为例：
```
gas[] = {1,2,3,4,5}
cost[] = {3,4,5,1,2}
所对应的亏损就是 {-2,-2,-2,3,3} （负数表亏了，正数表示赚了）
累加起来就是 {-2,-4,-6,-3,0} 
```
那么由结论，答案就是值为-3，也就是下标为3的地方（-6就是亏损最严重的，右边第一个就是下标为3的地方）

（以下论证基于这样一个最重要的前提：只有一个答案）
这个结论是怎么推出来的呢？这就是贪心的结果，首先第一点，解一定在那些亏损的点的右边第一个，并且只在这些地方，不会再其他地方，换言之，对于任何gas[i]-cost[i]<0的第i点，i+1都是可能的解（当然gas[i+1]-cost[i+1]>=0时必须的），怎么证明呢？反证法，如果i+2是可行的点（当然gas[i+2]-cost[i+2]>=0是必须的），那么i+1一定可行，因为你从i+1到i+2还能多出来一些油，从i+1出发能多贪一点油，这不好事儿吗，反正你最终一定会加到所有的油，越早有剩的越多当然越好（这大概就是题目标签中为什么有贪心二字了吧），所以i+2如果可行，则i+1也可行，这与题目有唯一解是矛盾的，所以我们可以推出上述结论。
现在我们知道解一定在那些亏损的点的右边第一个，那具体是哪个呢，亏损的点那么多？当然是亏得最厉害的那个点的右边，怎么来的？也是贪心，反正你消耗的油是一定的，越晚消耗当然越好，因为这能让你尽量避免因为油不够而无法继续行动的尴尬。

怎么判断能否跑完全程？你要跑完全程就得加所有的油，耗所有的油，这个值`>=0` 就能跑完，反之，不能

**总而言之**，贪心的体现在：
1. 对于加油，我能多贪一点就多贪一点（推出结论1 解一定在那些亏损的点的右边第一个。注意这里不是指净加油，而是你相对耗得油所能剩的，剩的越多越好）
2. 对于耗油，我能多晚消耗就多晚消耗（推出结论2 解亏得最厉害的那个点的右边。注意这个耗油也不是净耗油，而是指相对加的油来说，亏了多少）

其实LeetCode刷多了，对于“如果有解，则一定是唯一答案”这样的描述会特别警觉，一般的题目怎么会强调这一点，都是直接让你输出所有可行的出发点了，其实也就是旁敲侧击的告诉你分析唯一答案的特征，你就知道怎么做了！

代码逻辑就很简单了，我们遍历一次数组，每次都记录下当前亏了多少，找到亏得最厉害的地方即可。
### 代码

```java
class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
    int curOil = 0;
    int minOil = Integer.MAX_VALUE;
    int pos = 0;
    int len = gas.length;
    for (int i = 0; i < len; i++) {
        curOil += gas[i] - cost[i];
        if (curOil < minOil) {
            minOil = curOil;
            pos = i;
        }
    }
    if ( curOil < 0 ) return -1;
    else return (pos + 1) % len;
}
}
```