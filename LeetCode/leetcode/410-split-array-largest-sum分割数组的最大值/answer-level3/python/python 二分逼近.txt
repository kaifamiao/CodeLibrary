### 暴力解法
暴力解法是找出所有的可能性，然后取最小值。

首先，分成n个数组，就是相当于找到m-1个分割线。

可以用数组下标表示，其实就转化成了一道排列组合题，即从[1, length-1]这些数中找m-1个数。

然后，因为每个组都要计算和，不同的划分方法，可能会有相同的组，如(7,2),(5),(10,8),(9,11)和(7,2,5),(10,8),(9),(11)都要计算
(10,8)这个组的和，为避免重复计算，可以用一个二维数组算出所有组的和d[i][j],i和j表示分割线，当然i<j。

最后就是遍历取最小值。
```python
import sys
class Solution(object):
    def splitArray(self, nums, m):
        length = len(nums)
        d = []
        for i in range(length):
            tmp = [0] * (length+1)
            for j in range(i+1, length+1):
                tmp[j] = sum(nums[i:j])
            d.append(tmp)

        def findGroup(l, c):
            if c == 0:
                return []
            if c == 1:
                return [[e] for e in l]
            r = []
            for i in range(len(l)):
                for e in findGroup(l[i+1:], c - 1):
                    r.append([l[i]] + e)
            return r

        lines = findGroup(range(1, length) , m-1)
        ans = sys.maxint #d[0][length]
        for line in lines:
            max_line = 0
            start = 0
            for i in line:
                s = d[start][i] # sum(nums[start:i])
                if s > max_line:
                    max_line = s
                start = i
            max_line = max(max_line, d[start][length]) #sum(nums[start:]))#
            if max_line < ans:
                ans = max_line
        return ans
```

### 二分法逼近
原来只知道二分查找，遇到这道题后才知道二分法还可以这样用。

思路就是，先假设找到了最大值的最小值x，反过来算划分的组数。如果组数小于m，说明x还可以再小；组数大于m，说明x要变大；如果组数等于m
，x可能再小。

考虑边界情况，把每个元素分成一组，那么x的最小值就是数组的最大值；把数组当做一个组，那么x就是数组元素之和。即
max(nums) <= x <= sum(nums)

反过来算划分组数，其实很好理解，因为每一组都是连续的，只要每一组累加的和大于了x，那么当前元素就要放到下一组，记录有多少组即可。

代码如下：
```python
class Solution(object):
    def splitArray(self, nums, m):
        """
        :type nums: List[int]
        :type m: int
        :rtype: int
        """
        length = len(nums)
        def countGroup(mid):
            s = 0
            count = 0
            max_s = 0
            for i in range(length):
                s += nums[i]
                if s > mid:                    
                    s = nums[i]
                    count += 1
                    if count > m:
                        return count
            return count + 1
        left = max(nums)
        right = sum(nums)
        while left < right:
            mid = (left + right) / 2
            c = countGroup(mid)
            if c > m:
                left = mid + 1
            else:
                right = mid
        return left
```

**做的时候有些困惑，这样二分下去，找到了值会不会不是某个组的和？**

有这样的顾虑，可能思路还没有从二分查找转化到二分逼近，或者说对二分法理解还不是够深入。二分法本质是缩小范围，二分逼近关键就
在于这个“逼近”，这道题是在连续的数值范围中逼近，换句话说，每个组的和一定在范围之内，因此正确答案是不会被跳过的；而二分查找的数组虽然有序，但数值可能不连续，因此可能会产生误导。

另外一个误区可能是，对于某个逼近的x，它的组数也是m，但这个x不一定是答案，它还可能更小，因此跳出逼近的条件是left>=right
（其实left应该只可能等于right，也就是说一定会逼近到最后一个值，这也许是二分逼近法的核心吧），而不是countGroup(mid)==m。

在代码中可以注意到的细节是，left会跳过不满足条件的mid，而right会保留满足条件的mid，直到找到更小的满足条件的mid。



