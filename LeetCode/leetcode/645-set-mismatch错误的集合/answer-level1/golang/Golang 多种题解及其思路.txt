**1. 排序后循环遍历判断**

```
func findErrorNums(nums []int) []int {
	sameNum := 0
	temp := 0
	sum := 0
	sort.Sort(sort.IntSlice(nums))
	for _,value := range nums {
		if temp == 0 {
			temp = value
		}else{
			if temp == value {
				sameNum = value
			}
			temp = value
		}
		sum += value

	}
	return []int{sameNum,((1+len(nums))*len(nums)/2)-(sum-sameNum)}
}
```
现将数组进行排序后，相同的两个数一定会在相邻的位置上，遍历一遍找到相同的数后再根据等差求和公式算出缺失的数字

**2.set判重**
```
func findErrorNums(nums []int) []int {
	type void struct{}
	var value void
	set := make(map[int]void)

	sameNum := 0
	length := len(nums)
	sum := 0

	for i:=0;i<length;i++ {
		if _,ok:=set[nums[i]];ok {
			sameNum = nums[i]
		}else{
			set[nums[i]]=value
		}
		sum+=nums[i]
	}

	return []int{sameNum,((1+length)*length/2)-(sum-sameNum)}

}
```
此方案为常规思路，遍历的过程中依次将元素放入set中，如果发现某元素在集合中已经存在，则为重复元素，然后根据公式算出丢失元素。

但是这里有个小技巧，golang中本身没有对set的支持，但是map的键是唯一的，同时使用map的话，可以使用_, ok := map[key]的语法，效率高，但是如果此时将map的值设为任意类型都会对内存造成浪费。

那怎么解决这个问题呢？

在这里我们设 value 为空结构体，在 Golang 中，空结构体不有内存。

```
type void struct{}
var value void
set := make(map[int]void)
```

这样既可以利用map的优势又不至于造成内存浪费

**3. 切片作为set判重**
```
func findErrorNums(nums []int) []int {
	length:=len(nums)
	templist:=make([]int,length+1)

	res1,res2:=0,0

	for i:=0;i<length;i++ {
		templist[nums[i]]++
	}

	for i:=1;i<length+1;i++ {
		if templist[i] == 2 {
			res1 = i
		}else if templist[i] == 0 {
			res2 = i
		}
	}

	return []int{res1,res2}
}
```
根据传入数组的长度指定切片长度，用切片来完成set的功能，内存和速度都可以达到更优




