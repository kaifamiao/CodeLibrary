dinner-plate-stacks
我们把无限数量 &infin; 的栈排成一行，按从左到右的次序从 0 开始编号。每个栈的的最大容量<code>capacity</code> 都相同。

实现一个叫「餐盘」的类<code>DinnerPlates</code>：

<ul>
	<code>DinnerPlates(int capacity)</code>- 给出栈的最大容量<code>capacity</code>。
	<code>void push(int val)</code>- 将给出的正整数<code>val</code>推入<strong>从左往右第一个</strong>没有满的栈。
	<code>int pop()</code>- 返回<strong>从右往左第一个</strong>非空栈顶部的值，并将其从栈中删除；如果所有的栈都是空的，请返回<code>-1</code>。
	<code>int popAtStack(int index)</code>- 返回编号<code>index</code>的栈顶部的值，并将其从栈中删除；如果编号<code>index</code>的栈是空的，请返回 <code>-1</code>。
</ul>



<strong>示例：</strong>

<pre><strong>输入： </strong>
[&quot;DinnerPlates&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;popAtStack&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]
[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]
<strong>输出：</strong>
[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]

<strong>解释：</strong>
DinnerPlates D = DinnerPlates(2);  // 初始化，栈最大容量 capacity = 2
D.push(1);
D.push(2);
D.push(3);
D.push(4);
D.push(5);         // 栈的现状为：    2 4
                                   1 3 5
                                    ﹈ ﹈ ﹈
D.popAtStack(0);   // 返回 2。栈的现状为：     4
                                         1 3 5
                                          ﹈ ﹈ ﹈
D.push(20);        // 栈的现状为：  20  4
                                  1 3 5
                                   ﹈ ﹈ ﹈
D.push(21);        // 栈的现状为：  20  4 21
                                  1 3 5
                                   ﹈ ﹈ ﹈
D.popAtStack(0);   // 返回 20。栈的现状为：       4 21
                                           1 3 5
                                            ﹈ ﹈ ﹈
D.popAtStack(2);   // 返回 21。栈的现状为：       4
                                           1 3 5
                                            ﹈ ﹈ ﹈ 
D.pop()            // 返回 5。栈的现状为：        4
                                           1 3 
                                            ﹈ ﹈  
D.pop()            // 返回 4。栈的现状为：    1  3 
                                           ﹈ ﹈   
D.pop()            // 返回 3。栈的现状为：    1 
                                           ﹈   
D.pop()            // 返回 1。现在没有栈。
D.pop()            // 返回 -1。仍然没有栈。
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= capacity&lt;= 20000</code>
	<code>1 &lt;= val&lt;= 20000</code>
	<code>0 &lt;= index&lt;= 100000</code>
	最多会对<code>push</code>，<code>pop</code>，和<code>popAtStack</code>进行 <code>200000</code> 次调用。
</ul>

餐盘栈
You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the samemaximum <code>capacity</code>.

Implement the <code>DinnerPlates</code> class:

<ul>
	<code>DinnerPlates(int capacity)</code> Initializes the object with the maximum <code>capacity</code> of the stacks.
	<code>void push(int val)</code>pushes the given positive integer <code>val</code> into the leftmost stack with size less than <code>capacity</code>.
	<code>int pop()</code>returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns <code>-1</code> if all stacks are empty.
	<code>int popAtStack(int index)</code>returns the value at the top of the stack with the given <code>index</code> and removes it from that stack, and returns -1 if the stack with thatgiven <code>index</code> is empty.
</ul>

<strong>Example:</strong>

<pre>
<b>Input: </b>
[&quot;DinnerPlates&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;popAtStack&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]
[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]
<b>Output: </b>
[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]

<b>Explanation: </b>
DinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2
D.push(1);
D.push(2);
D.push(3);
D.push(4);
D.push(5);         // The stacks are now:  2 4
                                          1 3 5
                                           ﹈ ﹈ ﹈
D.popAtStack(0);   // Returns 2.  The stacks are now:    4
                                                      1 3 5
                                                       ﹈ ﹈ ﹈
D.push(20);        // The stacks are now: 20  4
                                          1 3 5
                                           ﹈ ﹈ ﹈
D.push(21);        // The stacks are now: 20  4 21
                                          1 3 5
                                           ﹈ ﹈ ﹈
D.popAtStack(0);   // Returns 20.  The stacks are now:     4 21
                                                       1 3 5
                                                        ﹈ ﹈ ﹈
D.popAtStack(2);   // Returns 21.  The stacks are now:     4
                                                       1 3 5
                                                        ﹈ ﹈ ﹈ 
D.pop()            // Returns 5.  The stacks are now:      4
                                                       1 3 
                                                        ﹈ ﹈  
D.pop()            // Returns 4.  The stacks are now:   1 3 
                                                        ﹈ ﹈   
D.pop()            // Returns 3.  The stacks are now:   1 
                                                        ﹈   
D.pop()            // Returns 1.  There are no stacks.
D.pop()            // Returns -1.  There are still no stacks.
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= capacity&lt;= 20000</code>
	<code>1 &lt;= val&lt;= 20000</code>
	<code>0 &lt;= index&lt;= 100000</code>
	At most <code>200000</code>calls will be made to <code>push</code>, <code>pop</code>, and <code>popAtStack</code>.
</ul>
