
### set

遍历链表，保存节点引用到一个hash表：key-value是节点地址和位置，如果第二次访问到，返回位置

```javascript
var detectCycle = function (head) {
    let dataMap = new Set()
    while (head) {
        if (dataMap.has(head)) {
            return head
        }
        dataMap.add(head)
        head = head.next
    }
    return null
};
```

### 快慢指针

1. 定义非环部分长度a, 环的长度b
2. 快指针每次走2，慢指针每次走1
3. 如果快指针到达链表尾，没有后继节点，说明没有形成环，返回null
4. 当第一次相遇时，`快指针走过的长度 == 慢指针走过的长度 + n * 环的长度b`，相当于套圈，即快指针比慢指针多走了 n 圈，之所以是n圈，是因为在慢指针没有到达圈里，快指针可能已经转了几圈，只要慢指针进入圈里，快指针就可以在两圈内追上慢指针；假设此时快指针走了`2s`, 那么慢指针走了`s`, 并且2s - s = n * b，即慢指针走了`n * 环的长度b`, 此时，慢指针的位置在 `n * b - a`的地方，只要再走距离a，就会到达链表尾连接到链表中的位置
5. 这时候让快指针回到链表头，移动速度变为1，快慢指针同时移动，两个指针再次相遇位置就是链表尾连接到链表中的位置

```javascript
var detectCycle = function (head) {
    if (!head) return null
    let slow = head, fast = head
    slow = slow.next
    fast = fast.next
    if (!fast) return null
    fast = fast.next
    if (!fast) return null
    while (slow != fast){
        slow = slow.next
        fast = fast.next
        if (!fast) return null
        fast = fast.next
        if (!fast) return null
    }
    fast = head
    while (fast!= slow){
        fast = fast.next
        slow = slow.next
    }
    return fast
};
```
