#### 1. 题目分析
- 井字棋**总共只有$9$个格子，且赢面是固定的**
- 可以使用一个$9$**位二进制数**代表行走的结果，规定：
    - 井字棋坐标$[i,j]$对应于数字的第$3i+j$位
    - **每走一步棋等价于与对应的位进行(异)或运算**
- 判断游戏结果的方法：
    - **将一方的数字$num$与赢面对应的数字$k$进行与运算，若结果为$k$，此方获胜**
    - 若双方都未获胜：
        - 若总步数为$9$步，则平局($Draw$)
        - 否则，未完成($Pending$)
- (**附1**)赢面数字：
    - 井字棋的赢面**只有$8$种($3$种横+$3$种竖+$2$种对角)**
    - 计算举例：$\{[0,0],[0,1],[0,2]\}$为横的一种赢面，对应的$9$**位二进制数**为$000000111$，即十进制下的$7$
    - 事实上，由对应规则可以得知：
        - $3$种横的赢面数字是**公比为$8$的等比数列**
        - $3$种竖的赢面数字是**公比为$2$的等比数列**
        - 总共**只需要计算出$4$个数字($1$种横+$1$种竖+$2$种对角)**，其余按倍数推导即可
    - 所有赢面数字分别为$7, 56(即7\times 8), 448(即7\times 8^2), 73, 146(即73\times 2), 292(即73\times 2^2), 273, 84$
- (**附2**)我在评论区对使用位运算的思路进行了更细致的阐述，如果有不清楚的地方欢迎移步评论区~

#### 2. Coding
```java
public String tictactoe(int[][] moves) {
    // a, b record the moving results of A, B
    int a = 0, b = 0, len = moves.length;
    // ac records all cases of winning
    int[] ac = {7, 56, 448, 73, 146, 292, 273, 84};
    for(int i = 0; i < len; i ++){
        // if i is add
        if((i & 1) == 1){
            // record the step result
            b ^= 1 << (3 * moves[i][0] + moves[i][1]);
        }
        else {
            a ^= 1 << (3 * moves[i][0] + moves[i][1]);
        }
    }
    for(int i : ac){
        // if the moving result contains the winning case in record, then win
        if((a & i) == i){
            return "A";
        }
        if((b & i) == i){
            return "B";
        }
    }
    // or judge the result by the amount of steps
    return len == 9 ? "Draw" : "Pending";
}
```
时间复杂度$O(mn)$，空间复杂度$O(m)$**(事实上，此处$m=8,n=9$)**

#### 3. 执行结果
![image.png](https://pic.leetcode-cn.com/e5869e50ec4e5318114fc7c5cea75492769c59d514f0530475c3c692dde3310f-image.png)
