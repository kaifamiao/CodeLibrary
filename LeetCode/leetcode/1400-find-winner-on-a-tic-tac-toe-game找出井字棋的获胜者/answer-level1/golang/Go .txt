更新： 题意没理解透彻，感谢amanehayashi同学。

——————————————————————
因为我是用Golang写的位运算，看到题解里amanehayashi同学也是位运算就看了一眼，之后发现了个问题。
对于下面的测试样例：
[[1,0],[0,0],[1,1],[0,1],[1,2],[0,2]]
[[0,0],[1,0],[0,1],[1,1],[0,2],[1,2]]
[[1,0],[0,0],[1,1],[0,1],[1,2]]
[[0,0],[1,0],[0,1],[1,1],[0,2]]
讲道理答案应该是                AAAA
但是amanehayashi同学的结果是    BAAA
同时预期结果也是                BAAA

首先规则里有一条：只要有 3 个相同的（非空）棋子排成一条直线（行、列、对角线）时，游戏结束。
也就是说，对于第一二个样例，代码运行到
[[1,0],[0,0],[1,1],[0,1],[1,2]] 时，停止 A赢了
[[0,0],[1,0],[0,1],[1,1],[0,2]] 时，停止 A赢了

a同学在最后判断的时候是按照list中的顺序遍历的，但是对于第一个例子，A会先满足56，B后满足7，答案应该是A，后台怎么跑的样例我也看不到。
是这样吗？？？

```go
func tictactoe(moves [][]int) string {
    slc := []int{7,56,73,84,146,273,292,448}
    na,nb := 0,0
    for i:=range moves {
        cur := 1<<(moves[i][0]*3+moves[i][1])
        if i&1 == 0 {
            na ^= cur
            for _,v := range slc {
                if na&v == v {
                    return "A"
                }
            }
        } else {
            nb ^= cur
            for _,v := range slc {
                if nb&v == v {
                    return "B"
                }
            }
        }
    }
    if len(moves)==9 {
        return "Draw"
    }
    return "Pending"
}
```
