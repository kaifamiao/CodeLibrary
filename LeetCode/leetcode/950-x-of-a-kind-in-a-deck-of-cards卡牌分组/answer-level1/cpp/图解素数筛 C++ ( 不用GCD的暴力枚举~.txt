**面试官：** 题意就是这样，来说说你的想法。
**前额叶：** 先统计每个数出现的次数，记为数组 arr，记其中最小的值为 min，然后从 2 到 min 枚举，看能否有数字可以将 arr 中的所有元素整除。

**面试官：** 不错，有可以**优化**的地方吗？
**前额叶：** 有两个剪枝。第一个，如果 min 是 1 的话， 直接返回false。第二个，枚举过程中，在判断能否整除arr所有元素之前，先判断能否整除 decks.size()。

**面试官：** 不错，还有吗？
**前额叶：** 还可以优化枚举过程，现在的枚举 [2, min] 中的所有数字，其实可以只枚举里面的素数。我先证明一下，设 x 是一个素数， y = a*x，a 为大于1的整数。如果 x 不能整除 z，那么对于任意的 y 都不能整除 z。我们可以先用素数筛算法处理出需要的素数，然后再进行枚举。虽然素数筛有一定的时耗，但是当有多组输入时，可以均摊这个时耗。

**下面来介绍下素数筛：**
对于一个大于2的整数 x，如果x不是素数，那么必然存在一个素数 p 满足，p < x 且 x%p == 0。反过来讲，如果一个整数 x，存在一个素数 p 满足 x%p == 0，那么 x 必然不是素数。

基于这个前提，我们可以设计出一个筛选素数的算法，假设我们要筛选不超过 N 的素数，那么有如下操作：

```
//标记数组，如果mark[i] == false 且 i>=2，则认为 i 是素数。初始时假设都是素数
bool mark[N+1] = {0}; 
vector<int> prime; //用来存储素数的容器
for(int i = 2; i <= N; i++) {
    if(mark[i]) { //i 已经被标记为不是素数了，continue
        continue;
    }
    primes.push_back(i); //i是一个素数，放进容器。
    for(int j = i + i; j <= N; j += i) {//筛掉所有能被i整除的数字。
        mark[j] = true;
    }
}
```

代码不好理解，可以看图~
![素数筛.png](https://pic.leetcode-cn.com/d82be5560819fb0e65627df14e3c0f54afd79298e1a33e08a3f026bf03458381-%E7%B4%A0%E6%95%B0%E7%AD%9B.png)


```
bool initFlag = false;
vector<int> primes;
class Solution {
public:
    bool hasGroupsSizeX(vector<int>& deck) {
        if(initFlag == false) {
            initFlag = true;
            bool mark[10000] = {0};
            for(int i = 2; i < 10000; i++) {
                if(mark[i]) {
                    continue;
                }
                primes.push_back(i);
                for(int j = i + i; j < 10000; j += i) {
                    mark[j] = true;
                }
            }
        }

        unordered_map<int, int> cnt;
        for(auto v : deck) {
            cnt[v]++;
        }
        auto minIter = cnt.begin();
        for(auto it = cnt.begin(); it != cnt.end(); it++) {
            if(it->second < minIter->second) {
                minIter = it;
            }
        }
        if(minIter->second <= 1) {
            return false;
        }
        for(auto v : primes) {
            if(deck.size() % v) {
                continue;
            }
            if(v > minIter->second) {
                break;
            }
            bool flag = true;
            for(auto it = cnt.cbegin(); flag && it != cnt.cend(); ++it) {
                if(it->second % v) {
                    flag = false;
                }
            }
            if(flag) {
                return true;
            }
        }
        return false;
    }
};
```

昨晚与 [@Smile](/u/fwsmile/) 小姐姐把酒夜话，聊起了一些面试的小技巧。现在总结一下，分享给大家，希望有帮助~
在参加面试的时候，如果碰见了不太擅长的题目，**不要纠缠太久以免浪费时间**。因为很多大厂对面试官都会有题数的要求，并且会要求面试官必须考察求职者的**多个方面**(比如算法，数据库，网络，操作系统等等)。而且大多数面试不会超过**四十分钟**，所以时间很宝贵，要尽可能的引导面试官发现自己的优点。比如你面试的是数据库相关的职位，却卡在了一道算法题上，你应该尽快和面试官交换思路，然后可以告诉面试官自己更擅长数据库，引导面试官发现自己的长处，拿到更高的得分。


### 如果感觉这篇题解对你有帮助，可以关注下我的公众号哟 👏[HelloNebula](https://pic.leetcode-cn.com/f18e68ed2306a147b615407e0b0260900672940df4a2fd9a7f7dc9b91e23e55e.jpg)👏