思路：首先还是读题。

+ 读题知道「相同的数被分在一组」，每一组除了数值相同以外，我们还关心一个属性：这个组里元素的个数，很容易想到应该统计元素个数；
+ 那是不是统计元素然后判断都相等就好了呢，我们还需要认真看示例。

题目文字和示例 3 和告诉我们：**如果检测到某个组里元素只有 1 个，可以直接返回 `false`**。

示例 5 非常特殊，是一个很重要的示例，`[2, 2, 2, 2]` 硬是被拆成了 2 组，为的是与组 `[1, 1]` 的元素个数相等。这对应了题目「每组都有 `X` 张牌」 的要求。

分析到这里，相信就不难想到思路了。

1、遍历一次，统计每个数值的个数，如果某个数值只有 1 个，直接返回  `false`；
2、再看一下示例 5，想更一般化的情况，输入 `[2, 2, 2, 2, 3, 3, 3, 3, 3, 3]`，其实也是符合题意的分组，`2` 有 $4$ 个，`3` 有 $6$ 个，相同的 `2` 和 `3` 都需要拆成 2 个一组，因此这里的 `X = 2`，很显然 $2$ 是这两个组的元素个数的公约数。  

为此，我们需要对所有的数值的个数，求公约数。只要能找到任意的公约数（要严格大于 1）都可以。为此，可以从 2 开始，依次用素数去判定它是不是所有数的约数。但其实我们是有现成的算法求最大公约数的，这个最大公约数只要严格大于 $1$ 就行。

忘了或者不知道怎么求最大公约数和如何得到所有的素数，没有关系，查资料，做笔记，我也是今天早上查的（题解最后是笔记）。让人来求最大公约数其实是很繁琐的，交给计算机来做发现简单很多。

感兴趣的朋友可以顺便看一下如何通过作图的办法，理解求解最大公约数，并且了解一下裴蜀定理（贝祖定理）。这个知识点在周赛中有出现过（次数不多），并不难理解。

![image.png](https://pic.leetcode-cn.com/82ce68f32e0aedef84f266e3c360cfd53a6e89df1483fdf453128082c119f705-image.png)

（图来自《挑战程序设计竞赛(第2版) 》第 114 页，只是注明出处，但**绝对不是推荐这本书**哈，很多竞赛类的书籍其实里面提供的思路和对知识点的讲解很不错，适当拔高一下思维、开阔一下思路是有好处的。在学习资料有限的情况下，浏览竞赛类书籍我觉得是一种办法，我个人的做法是**只浏览，选自己需要的部分看**，例题能看懂尽量看，看不懂就算了。如果是针对面试学习算法，就不要去做里面的问题了，同理看待《算法导论》等经典书籍。）


**参考代码**：

```Java []
public class Solution {

    public boolean hasGroupsSizeX(int[] deck) {
        int len = deck.length;
        if (len < 2) {
            return false;
        }

        // 计数数组，10000 是根据题目给出的数值范围定的
        int[] cnt = new int[10000];
        for (int num : deck) {
            cnt[num]++;
        }

        // 先得到第 1 个数的个数，以避免在循环中赋值
        int x = cnt[deck[0]];

        for (int i = 0; i < 10000; i++) {
            if (cnt[i] == 1) {
                return false;
            }

            if (cnt[i] > 1) {
                x = gcd(x, cnt[i]);

                // 这里做判断可以提前终止运行，也可以等到最后再做，各有优劣，任选其一
                if (x == 1) {
                    return false;
                }
            }
        }
        return true;
    }

    private int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        // int[] deck = new int[]{1, 2, 3, 4, 4, 3, 2, 1};
        // int[] deck = new int[]{1, 1, 1, 2, 2, 2, 3, 3};
        // int[] deck = new int[]{1};
        // int[] deck = new int[]{1, 1};
        int[] deck = new int[]{0, 0, 1, 1, 1, 1, 2, 2, 3, 4};
        // boolean res = solution.hasGroupsSizeX(deck);
        // System.out.println(res);
        System.out.println(solution.gcd(2, 8));
    }
}
```

说明：

1、统计个数的时候，可以使用哈希表，也可以使用数组。一般情况下，看题目中的数据范围，如果题目中说，输入数据只包含小写字母（大写字符）这一类问题，使用数组统计是相对方便的。

事实上，哈希表底层也是数组。我们使用数组做计数任务其实是自己编写了哈希函数。

2、计算 `gcd(a, b)` 的时候，虽然我们在讨论的时候，总是假设 `a > b` ，但在 `a < b` 的时候，递归函数的第一层就把两个数的值交换了，这一点经过调试是看得很明显的；

3、cnt 是 count 的缩写，就像 res 表示 result ，ans 表示 answer 一样，只有少数几个词可以这么用，一般情况下，都用全称。


---

补充：

求两个整数的最大公约数的方法：「辗转相除法」。

我们做一个推导：不失一般性，假设 $a > b$ 且 $b != 0$ ，记整数 $a$ 和 $b$ 的**最大**公约数是函数 $gcd(a, b)$。假设它们之间存在关系

$$
a = b \times k + r
$$

这里 $k$ 是倍数，是一个整数（`k = a / b`），$r$ 是余数（`r = a % b`），也是一个整数。

用记号 $|$ 表示整除关系，例如 $2 | 6$。

+ 看等式右边，根据定义 $gcd(b,r)$ 既是 $b$ 的因数，也是 $r$ 的因数，所以一定是 $b$ 和 $r$ 的线性组合的因数，故 $gcd(b,r) | a$，根据定义 $gcd(b,r) | b$，即 $gcd(b,r)$ 是两个数 $a$、$b$的公因数，故 $gcd(b,r) | gcd(a,b)$。
+ 事实上，等式中 $a$ 和 $r$ 是地位相当的，做个等价变形 $r = a - b \times k$，根据上面同样的思路，看右边：$gcd(a,b)|r$，并且 $gcd(a,b)|b$，故 $gcd(a,b)|gcd(b,r)$。


两个整数互相可以整除，那么它们要么相等，要么互为相反数。事实上，由于正负数不是研究公约数问题的核心，很多资料都会强制规定公约数是正数。因此 $gcd(a,b)=gcd(b,r)$。

由于编程语言中提供了求余数运算，因此，这样的等式可以一直做下去：

```java
gcd(a, b) = gcd(b, a % b) = ... = gcd(非零整数, 0)) = 非零整数
```

由于除数和余数是交替出现在等式中的，这个方法就被称之为「辗转相除法」。求解的过程显然是一个递归结构，并且递归终止条件是除数 `b == 0`。