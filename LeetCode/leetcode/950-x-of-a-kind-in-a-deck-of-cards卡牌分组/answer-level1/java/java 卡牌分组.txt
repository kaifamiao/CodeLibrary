思路：
我们枚举所有可行的X，判断是否有满足条件的X即可。

算法：
我们从2开始，从小到大枚举X。
由于每一组都有X张牌，那么X必须是卡牌总数N的约数。
其次，对于写着数字i的牌，如果有counti张，由于题目要求[组内所有的牌上都写着相同的整数]，那么X也必须是counti的约数，即：
counti mod X==0
所以对于每一个枚举到的X，我们只要先判断X是否为N的约数，然后遍历所有牌中存在的数字i，看他们对应牌的数量counti是否满足上述要求。如果都满足等式，则X为符合条件的解，否则需要继续令X增大，枚举下一个数字。

复杂度分析：
时间复杂度：O(N2)，其中N是卡牌个数。最多枚举N个可能的X，对于每个X，要遍历的数字i最多有N个。
空间复杂度：O(N+C)或O(N)，其中C是数组deck中数的范围，在本题中C的值为10000.在C++和java代码中，我们先用频率数组count存储每个数字i出现的次数count[i],随后将所有超过零的次数转移到数组values中，方便进行遍历，因此需要使用长度为C的count数组及长度不超过N的values数组，空间复杂度为O(N+C)。在python代码中，我们直接使用哈希映射存储每个数字i以及出现的次数，因此空间复杂度为O(N)。