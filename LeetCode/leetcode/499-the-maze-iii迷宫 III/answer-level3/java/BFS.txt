使用BFS，用两个二维数组分别记录路径长度和移动方向
```
//构造路径记录和路径长度数组
        int n = maze.length;
        int m = maze[0].length;
        String[][] way = new String[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                way[i][j] = "";
            }
        }

        int[][] dp = new int[n][m];
        int[] dx = new int[]{-1,1,0,0};
        int[] dy = new int[]{0,0,-1,1};

        String[] dircectStr = new String[]{"u", "d", "l", "r"};
        //构造队列
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(ball);

        while (!queue.isEmpty()){
            int[] cur = queue.poll();
            for (int direction = 0; direction < 4; direction++) {
                int nx = cur[0], ny = cur[1];
                while (nx >= 0 && nx < n && ny >= 0 && ny < m && maze[nx][ny] == 0){
                    if (nx == hole[0] && ny == hole[1]){
                        nx += dx[direction];
                        ny += dy[direction];
                        break;
                    }
                    nx += dx[direction];
                    ny += dy[direction];
                }
                nx -= dx[direction];
                ny -= dy[direction];
                int steps = dp[cur[0]][cur[1]] + Math.abs(nx - cur[0]) + Math.abs(ny - cur[1]);
                //非当前位置，未初始化，路径长度小于当前位置的原来的值，路径长度相等，字典序更小
                if (!(nx == cur[0] && ny == cur[1]) && (dp[nx][ny] == 0 || (dp[nx][ny] > steps || (dp[nx][ny] == steps && (way[cur[0]][cur[1]] + dircectStr[direction]).compareTo(way[nx][ny]) < 0)))){
                    dp[nx][ny] = steps;
                    way[nx][ny] = way[cur[0]][cur[1]] + dircectStr[direction];
                    if (!(nx == hole[0] && ny == hole[1])){
                        queue.offer(new int[]{nx, ny});
                    }
                }
            }
        }

        return way[hole[0]][hole[1]].equals("") ? "impossible" : way[hole[0]][hole[1]];
```
