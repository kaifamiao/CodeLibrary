```javascript
    /**
     * 这个题剥去题意本身，考虑各种除法，可以认为是一个无向图的问题
     * 首先建立邻接表，对queries里面的数组定义为start和end
     * 对邻接表从起点开始进行dfs，同时注意：dfs时无法返回，只能在合适的条件收集结果
     */
    const calcEquation = (equations, values, queries)=>{
        // initialize adj
        let adj={},res0=1,ans=[],res;
        for(let i=0;i<equations.length;i++){
            if(!adj[equations[i][0]]){
                adj[equations[i][0]]=[[equations[i][1],values[i]]];
            }else{
                adj[equations[i][0]].push([equations[i][1],values[i]]);
            }
            if(!adj[equations[i][1]]){
                adj[equations[i][1]]=[[equations[i][0],Number((1/values[i]))]];
            }else{
                adj[equations[i][1]].push([equations[i][0],Number((1/values[i]))]);
            }
        }
        const dfsGetVal=(st,ed,adj,map)=>{
            if(st===ed){
                res=res0;
                return;
            }
            map.set(st,true);
            for(let i=0;i<adj[st].length;i++){
                if(!map.has(adj[st][i][0]))
                {
                    res0*=adj[st][i][1];
                    dfsGetVal(adj[st][i][0],ed,adj,map);
                    // 回溯
                    res0/=adj[st][i][1];
                }
            }
        };
        // 然后进行深度优先探索找到值
        for(let i=0;i<queries.length;i++){
            res0=1.0;
            if(!adj[queries[i][0]]||!adj[queries[i][1]]){
                res=-1.0;
            }else{
                dfsGetVal(queries[i][0],queries[i][1],adj,new Map());
            }
            // console.info(res);
            if(res===undefined){
                ans[i]=-1.0;
            }else{
                ans[i]=res;
            }
        }
        console.info(ans);
        return ans;
    };
```
