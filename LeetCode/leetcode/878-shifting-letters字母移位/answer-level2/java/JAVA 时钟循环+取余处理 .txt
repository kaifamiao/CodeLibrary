# 执行用时 :3 ms 内存消耗 :40.6 MB
首先对于题目而言，所有的转换都是对原有字母的偏置处理（或者叫**偏移处理**）。所有的偏置处理的**范围局限**在26个字母之中。
所以可以把这类问题等价地看作一个**时钟循环**的问题（钟表一圈是12个点数）。
分析题目我们可以得出：
1. 第一个的偏移的次数是最多的，最后一个的偏移次数是最少的
2. 偏移量在不断叠加
第一个问题好解决：直接逆序处理（或者反向处理）记录每次的偏移量
第二个问题：应对这种数量叠加，可能溢出的现象。回归到题目中，循环一圈的量为26个。也就是说每次跑26相当于回到原点。所以对于每次的偏移叠加量需要**取余处理**,降低偏移的爆炸叠加。
**Tip:通过asci码直接运算**
```
class Solution {
    public String shiftingLetters(String S, int[] shifts) {
       char []box = S.toCharArray();
        int upNum=0;
        //逆序处理，层层叠加
        for(int i=box.length-1;i>=0;i--){
            //总共就26个字母，所以循环的范围都在26内。超过26的需取余，减少加数的爆炸叠加
            upNum+=(shifts[i]%26);
            upNum%=26;
            //asci码直接运算
            box[i]= (char) ((box[i]+upNum-97)%26+97);
        }
        return String.valueOf(box);
    }
}
```
