### 第一种：层序遍历
第一种方式是利用二叉树的层序遍历：
- 将root入队
- 每次遍历二叉树的每一层节点
- 每一层节点遍历完成，高度加一

队列的基本操作：
- 初始化：`Queue<TYPE> queue = new LinkedList<>()`;
- 入队：`queue.offer(ITEM)`;
- 取队首（不出队）：`queue.peek()`;
- 出队：`queue.poll()`


### 代码

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //第一种方法，层序遍历
    public int maxDepth(TreeNode root) {

        if(root == null){
            return 0;
        }

        Queue<TreeNode> queue = new LinkedList<>();

        queue.offer(root);

        //高度、每一层的数据统计、循环次数
        int level = 1,count = 0,size = 1;

        while(queue.peek() != null){
            for(int i = 0;i < size; i++){
                TreeNode node = queue.poll();
                
                if(node.left != null){
                    queue.offer(node.left);
                    count++;
                }
                if(node.right != null){
                    queue.offer(node.right);
                    count++;
                }
            }

            if(count == 0){//没有数据，说明遍历完，退出
                break;
            }else{
                size = count;
                count = 0;
                level++;
            }
        }

        return level;
    }
}
```

### 第二种：递归

使用后续递归，可以简单的计算出其高度

### 代码

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //第二种方法，递归
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }

        int leftHeight = maxDepth(root.left);
        int rightHeight = maxDepth(root.right);

        return Math.max(leftHeight,rightHeight)+1;
    }
}
```