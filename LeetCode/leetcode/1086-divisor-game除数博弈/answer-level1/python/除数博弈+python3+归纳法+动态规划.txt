前人栽树，后人乘凉。
### 归纳法：
基本思路：

1. 最终结果应该是占到 2 的赢，占到 1 的输；

2. 若当前为奇数，奇数的约数只能是奇数或者 1，因此下一个一定是偶数；

3. 若当前为偶数， 偶数的约数可以是奇数可以是偶数也可以是 1，因此直接减 1，则下一个是奇数；

4. 因此，奇则输，偶则赢。直接:
```python [-Python]
class Solution:
    def divisorGame(self, N: int) -> bool:
        return N%2==0
```

### 动态规划：
基本思路：

1. 将所有的小于等于 N 的解都找出来，基于前面的，递推后面的。

2. 状态转移: 如果 i 的约数里面有存在为 `False` 的（即输掉的情况），则当前 i 应为 `True`；如果没有，则为 `False`。

代码如下：
```python [-Python]
class Solution:
    def divisorGame(self, N: int) -> bool:
        target = [0 for i in range(N+1)]
        target[1] = 0 #若爱丽丝抽到1，则爱丽丝输
        if N<=1:
            return False
        else:
        
            target[2] = 1 #若爱丽丝抽到2，则爱丽丝赢
            for i in range(3,N+1):
                for j in range(1,i//2):
                    # 若j是i的余数且target[i-j]为假（0）的话，则代表当前为真（1）
                    if i%j==0 and target[i-j]==0:
                        target[i] = 1
                        break
            return target[N]==1
```

