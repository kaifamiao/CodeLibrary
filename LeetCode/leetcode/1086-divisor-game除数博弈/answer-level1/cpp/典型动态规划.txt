class Solution {
public:
    bool divisorGame(int N) {
        //抛开各位神仙分析的偶数必赢的做法，这题标签是动态规划..前面一堆做法都是什么神仙..尊重一下打标签的人好不好...
        //维护一个数组，数组长度N+1,其中位置为k的元素的含义为：拿到了k,则其必胜（值为1）或者必输（值为0）
        //可以得到k=1时，必输，因为不能操作了，所以位置为1的元素的值为0
        //下面分析某个位置k，某人拿到了k，那么他应该如何操作呢，依据题意，他只能减去1到k-1中的某个数
        //即下一个数在位置1到k-1中的某个位置，若这个到这个位置是满足操作要求的，而且这个位置对应的值为0（即另一个人拿到了这个数，且值是0，必输），则位置k的值为1（必赢，因为有这么一个下一位置使得必赢，为何不赢，且题中也说了最佳状态..）
        //得到数组后，位置为N若为1，因为爱丽丝拿到了N，则她必赢，若为0，则她必输
        vector<int> temp(N+1,0);
        for(int k=1;k<=N;k++)
        {
            for(int m=1;m<k;m++)
            {
                if(k%(k-m)==0 && temp[m]==0)
                {
                    temp[k]=1;
                    break;
                }
            }
        }
        return temp[N];
        
    }
};