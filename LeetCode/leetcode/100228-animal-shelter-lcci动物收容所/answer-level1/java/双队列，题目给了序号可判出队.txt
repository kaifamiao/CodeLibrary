## 03.06.动物收容所

### Information

* TIME: 2020/03/08
* LINK: [Click Here](https://leetcode-cn.com/problems/animal-shelter-lcci/)
* TAG: `array`

### Description

> 动物收容所。有家动物收容所只收容狗与猫，且严格遵守“先进先出”的原则。在收养该收容所的动物时，收养人只能收养所有动物中“最老”（由其进入收容所的时间长短而定）的动物，或者可以挑选猫或狗（同时必须收养此类动物中“最老”的）。换言之，收养人不能自由挑选想收养的对象。请创建适用于这个系统的数据结构，实现各种操作方法，比如enqueue、dequeueAny、dequeueDog和dequeueCat。允许使用Java内置的LinkedList数据结构。
>
> enqueue方法有一个animal参数，animal[0]代表动物编号，animal[1]代表动物种类，其中 0 代表猫，1 代表狗。
>
> dequeue*方法返回一个列表[动物编号, 动物种类]，若没有可以收养的动物，则返回[-1,-1]。

### Example

```text
 输入：
["AnimalShelf", "enqueue", "enqueue", "dequeueCat", "dequeueDog", "dequeueAny"]
[[], [[0, 0]], [[1, 0]], [], [], []]
 输出：
[null,null,null,[0,0],[-1,-1],[1,0]]
```

### My Answer

> 按猫狗两个类，分成两个`LinkedList`
>
> 对于`dequeueAny`，按题意，序号是给定的，序号越小，进入收容所的时间越长，越应该出队
>
> * 如果出现两个队列都是空的情况，表现出`catId == dogId`(因为如果空返回int最大值)，这时返回`{-1, -1}`

```java
class AnimalShelf {
    private List<LinkedList<int[]>> data;
    private int[] initAnimal = {-1, -1};
    public AnimalShelf() {
        data = new ArrayList<>();
        data.add(new LinkedList<>());
        data.add(new LinkedList<>());
    }
    
    public void enqueue(int[] animal) {
        data.get(animal[1]).addLast(animal);
    }
    
    public int[] dequeueAny() {
        int catId = data.get(0).isEmpty()? Integer.MAX_VALUE : data.get(0).peekFirst()[0];
        int dogId = data.get(1).isEmpty()? Integer.MAX_VALUE : data.get(1).peekFirst()[0];
        if(catId < dogId){
            return data.get(0).pollFirst();
        }else if(dogId < catId){
            return data.get(1).pollFirst();
        }else{
            return initAnimal;
        }
    }
    
    public int[] dequeueDog() {
        if(data.get(1).isEmpty()) return initAnimal;
        return data.get(1).pollFirst();
    }
    
    public int[] dequeueCat() {
        if(data.get(0).isEmpty()) return initAnimal;
        return data.get(0).pollFirst();
    }
}

/**
 * Your AnimalShelf object will be instantiated and called as such:
 * AnimalShelf obj = new AnimalShelf();
 * obj.enqueue(animal);
 * int[] param_2 = obj.dequeueAny();
 * int[] param_3 = obj.dequeueDog();
 * int[] param_4 = obj.dequeueCat();
 */
```

### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/dfb84caf5405d5af658511170b1c16cd8dbaada1115dd396403e6fe00a6b1a06-file_1583659646361)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

