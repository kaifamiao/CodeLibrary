### 解题思路
因为之前做了道旋转数组的题是
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
示例 :
输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
这个题的思路是把最后一个元素放在第一个，然后把其他元素往后移。每一次移之前，先把最后一个元素保存起来，移动以后把最后一个元素赋给第一个。本来也想这么做，但是发现，有点不对。
后来从中获取到思路，我可以**把数组分成对等两半**，**第一个和最后一个进行交换**只需要交换**数组长度的一半次**就可以完成，也不必考虑数组越界问题。

### 代码

```java
class Solution {
    public void reverseString(char[] s) {
        int len = s.length;
     for(int i = 0 ; i < (len/2); i++){
       char temp = s[i];
       s[i] = s[len-1-i];
       s[len-1-i] = temp;
     }
    }
}
```