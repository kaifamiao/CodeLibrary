maximum-size-subarray-sum-equals-k
给定一个数组 <em>nums</em> 和一个目标值 <em>k</em>，找到和等于<em> k </em>的最长子数组长度。如果不存在任意一个符合要求的子数组，则返回 0。

<strong>注意:</strong><br>
<em>nums</em> 数组的总和是一定在 32 位有符号整数范围之内的。

<strong>示例 1:</strong>

<pre><strong>输入: </strong><em>nums</em> = <code>[1, -1, 5, -2, 3]</code>, <em>k</em> = <code>3</code>
<strong>输出: </strong>4 
<strong>解释: </strong>子数组 <code>[1, -1, 5, -2]</code> 和等于 3，且长度最长。
</pre>

<strong>示例 2:</strong>

<pre><strong>输入: </strong><em>nums</em> = <code>[-2, -1, 2, 1]</code>, <em>k</em> = <code>1</code>
<strong>输出: </strong>2 <strong>
解释: </strong>子数组<code> [-1, 2]</code> 和等于 1，且长度最长。</pre>

<strong>进阶:</strong><br>
你能使时间复杂度在 O(<em>n</em>) 内完成此题吗?

和等于 k 的最长子数组长度
Given an array <i>nums</i> and a target value <i>k</i>, find the maximum length of a subarray that sums to <i>k</i>. If there isn&#39;t one, return 0 instead.

<b>Note:</b><br />
The sum of the entire <i>nums</i> array is guaranteed to fit within the 32-bit signed integer range.

<b>Example 1:</b>

<pre>
<strong>Input: </strong><i>nums</i> = <code>[1, -1, 5, -2, 3]</code>, <i>k</i> = <code>3</code>
<strong>Output: </strong>4 
<strong>Explanation: </strong>The subarray <code>[1, -1, 5, -2]</code> sums to 3 and is the longest.
</pre>

<b>Example 2:</b>

<pre>
<strong>Input: </strong><i>nums</i> = <code>[-2, -1, 2, 1]</code>, <i>k</i> = <code>1</code>
<strong>Output: </strong>2 <strong>
Explanation: </strong>The subarray <code>[-1, 2]</code> sums to 1 and is the longest.</pre>

<b>Follow Up:</b><br />
Can you do it in O(<i>n</i>) time?
