## 同向（拷贝）覆盖
移除等于 2 的元素：

![image-20200101154101109](https://pic.leetcode-cn.com/318ad8dedf514bde4abf1a519ce8566a84b9b3e0fc83faa144b13d83daf82866.png)

### 思路

- 标签：`同向（拷贝）覆盖`、`同向（快慢）双指针`
- 因为题目告知不考虑新数组后面的数据，所有直接覆盖，没必要交换，交换只会更麻烦
- 后面的非目标值覆盖前面的目标值：快指针指向的非目标值覆盖慢指针指向的目标值
- 时间复杂度：O(n)
- 空间复杂度：O(1)

### 代码

```Python []
## Python3 
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        res = 0
        for num in nums:
            if (num != val):
                nums[res] = num
                res += 1
        return res
```
### 步骤

- 快慢指针均从第一个元素开始
- 快指针为循环遍历，遇目标值跳过，慢指针遇目标值停顿
- 快指针到终点前，慢指针（指向的值）都会被快指针（指向的值）（拷贝）覆盖

### 思考

- 因为慢指针指向的值都会（拷贝）覆盖一遍，覆盖需要耗 CPU，所以适用于目标值多的情况，目标值多时就可以不执行覆盖操作

## 相向（拷贝）覆盖
移除等于 2 的元素：

![image-20200101154037081](https://pic.leetcode-cn.com/630734320743e41a16f2c72ed367898c3003cffab823932fce249e1045327b0c.png)

### 思路

- 标签：`相向（拷贝）覆盖`、`相向（左右）双指针`
- 右边的所有值（包含目标值）覆盖左边的目标值
- 时间复杂度：O(n)，虽然前后两个指针，但每次只走一步
- 空间复杂度：O(1)

### 代码

```Python []
## Python3
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        left = 0
        right = len(nums) - 1
        while left <= right: # 此处需要等于
            if nums[left] == val:
                nums[left] = nums[right]
                right -= 1
            else:
                left += 1
        return right + 1 # 返回数组的长度，需要加 1
```
### 步骤

- 左指针指向第一个元素，右指针指向最后一个元素
- 只有左指针（指向的值）为目标值时，才用右指针（指向的值）覆盖当前值，右指针往左移动。不为目标值时，左指针往右移动
- 需要理解的是，**每次只移动一个指针**，即使覆盖左指针的右指针为目标值，也没事，因为此时左指针不移动，相当于右指针**跳过**一个目标值
- 当右指针遇到左指针时，**还需要比较一次**，如果相遇元素为目标值，此时右指针还需要左移一位

**为什么左右指针相遇后，还要比较一次，原因下图：**

![](https://pic.leetcode-cn.com/9b850a79a101d4ffc503668f3ec5cc315203935d4d2125a6055c389ea4e6f7a2.png)
### 思考

- 因为只在左指针（指向的值）为目标值，才执行（拷贝）覆盖操作，所以此种方式更适用于目标值较少的情况

## 前期错误思路：前后交换

> ### 思路

> - 标签：（左右/前后）双指针、前后交换
> - （左右/前后）双指针往中间移动
> - 右指针（指向的值）等于目标值，往左移动；不等于目标值，不动
> - 左指针（指向的值）等于目标值，不动；不等于目标值，往右移动
> - 左指针（指向的值）等于目标值，右指针（指向的值）不等于目标值，交换
> - （左右/前后）双指针相遇，则结束
> - **此种方法因为要交换，所有必须存在不一样的元素，覆盖不了所有情况，如：当数组所有值均为目标值时，此解法不通，遂放弃**。
> - 考虑这种情况，让其右指针覆盖左指针，且每次只移动一个指针。即前后覆盖。


