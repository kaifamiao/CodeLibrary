### 法

```java
public int removeElement(int[] nums, int val) {
        if(nums == null || nums.length == 0)
            return 0;
        int hi = nums.length - 1, lo = 0;
        while(lo <= hi){
            if(nums[lo] == val){
                nums[lo] = nums[hi];
                hi--;
            } else {
                lo++;
            }
        }
        return lo;
    }
```

思路分析：

* 要原地修改数组，并且返回的结果是删去了指定元素后子数组的长度，该子数组的索引为[0, length - 1]。并且不要求顺序按照原数组的顺序。所以只要将指定元素不断用原数组靠后的元素进行覆盖即可。
* 进行覆盖的操作很像快速排序中切分的过程。
    * 切分是从左往右找到一个比切分点大的元素，从右往左找到一个比切分点小的元素，然后交换。
    * 本题我们从左往右找一个值为`val`的元素，从右往左找任意一个元素，不需要进行交换，因为我们不需要保持原数组完整，只需要删除`val`并且将其余元素放到数组前部分，所以覆盖即可。
* 这里采用类似三向切分的区间划分方式。
    * 设定区间`[0, lo - 1]`为已经删除了`val`元素的子区间。显然一开始这个区间没有元素，所以初状态时`lo = 0`。
    * 设定区间`[hi + 1, nums.length - 1]`是已经被选择去覆盖过`val`的元素，显然一开始这个区间没有元素，所以初状态时`hi = nums.length - 1`。
    * 那么`[lo, hi]`就是还没有判断元素是否为`val`的区间，所以循环的条件就是`lo <= hi`（表示还有没有判断的元素）。
* 根据上述的分析，当`nums[lo] == val`，时我们需要选择一个元素来覆盖其，选择索引为`hi`的元素，那么根据区间定义，已经被覆盖过的区间，左边界左移一位`hi--`。另外，覆盖过来的元素没有判断是否为`val`，所以`lo`的值不变，下次循环就来判断这个元素。
* 当`nums[lo] != val`时，就意味着这个值没问题，就是结果子数组中的一员，这个值已经判断过了，所以根据区间的定义`lo++`。最终，`lo`会落到`hi + 1`，是我们要找的子数组最后一个元素的下一个元素的索引，刚好我们要找的子数组的长度就是`lo - 1 + 1 = lo`，返回`lo`。
* 时间负责度为$O(n)$，空间复杂度为$O(1)$。

运行结果：

* 执行用时 :0 ms, 在所有 Java 提交中击败了100.00%的用户
* 内存消耗 :38.6 MB, 在所有 Java 提交中击败了5.11%的用户

更多LeetCode题解请看我的[github](https://github.com/ustcyyw/yyw_algorithm)，地址https://github.com/ustcyyw/yyw_algorithm。还有别的小项目也很好玩~卑微求个小星星💖