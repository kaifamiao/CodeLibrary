### 解题思路
利用双指针i、j，两者初始均指向下标0的位置，检查指针j指向的元素，若等于删除元素，则后移；若不等于删除元素，令i指向的元素赋值为j指向的元素，然后i、j均后移一位。不断重复上述过程，直至指针j扫描完整个数组。
可以这样理解i、j两个指针：
i，**有效元素的个数**，即最新一个有效元素的下一个位置。（本题中有效元素指的是非删除元素，区别于26题，此处是有效元素的个数，故返回i；26题是有效元素的位置，故返回i+1）
j，下一个要检查的元素的位置。
时间复杂度：O(n)。线性级别因为需要遍历数组。
空间复杂度：O(1)。不需额外数组空间，原地操作，只需两个int型变量。
### 代码

```java
class Solution {
    public int removeElement(int[] nums, int val) {
        int i=0,j=0;
        while(j<nums.length)
        {
            if(nums[j]!=val)
                nums[i++]=nums[j];
            j++;
        }
        return i;
    }
}
```