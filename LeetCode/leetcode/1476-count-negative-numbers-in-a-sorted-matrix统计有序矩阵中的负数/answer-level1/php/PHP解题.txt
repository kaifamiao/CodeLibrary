__解体思路__

> 根据题意可得，矩阵行列都是非递增顺序排列，即同行下一列/同列下一行的元素小于或等于当前元素,
> 如果当前行或者当前列最小的元素都不满足条件，则当前行列所有的元素也都不满足条件，故可从左下角或右上角的位置开始，这样可以从当前行或列最小的元素开始判断，减少不必要的遍历。

__以右上角开始遍历代码为例__

1、从右上角开始逆向遍历，在遍历的过程中会有两种情况：

> 一、当前元素符合条件 **(\$grid\[\$y]\[\$x] < 0)** ：则根据题意可得出在从当前行开始当前列所有的元素都小于或等于当前元素，即都会符合条件，因此，将当前列开始搜索的位置前移一位，并将当前行到最后一行的总行数累加起来即是当前列所有符合条件的元素个数。
>
> 二、当前元素不符合条件：当从后往前开始遍历到的元素不符合条件，则前面的数也都不符合，则直接继续进行下一行的遍历。

2、根据步骤1每次遍历更新的x,y的索引，继续进行遍历，直到遍历完所有列或当前列所有元素都不符合条件时 **($x >= 0 && $y < $m)** ，结束遍历，即得到矩阵中所有非负元素的个数。

__PHP代码__


```php
class Solution {

    /**
     * @param Integer[][] $grid
     * @return Integer
     */
    function countNegatives($grid) {
        $m = count($grid);
        $sum = $y = 0;//$x, $y index从右上角开始
        $x = count($grid[0]) - 1;
        while ($x >= 0 && $y < $m) {
            if ($grid[$y][$x] < 0) {
                $x -= 1; //将反向遍历开始位置前移一位
                $sum += $m - $y; //加上当前行到最后一行总行数
            } else {
                $y++; //当从后开始遍历的数为非负数则将遍历行转为下一行。
            }
        }
        return $sum;
    }
}
```


__时间复杂度：__ O(m + n)

__空间复杂度：__ O(1)