search-in-rotated-sorted-array-ii
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组<code>[0,0,1,2,2,5,6]</code>可能变为<code>[2,5,6,0,0,1,2]</code>)。

编写一个函数来判断给定的目标值是否存在于数组中。若存在返回<code>true</code>，否则返回<code>false</code>。

<strong>示例1:</strong>

<pre><strong>输入:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 0
<strong>输出:</strong> true
</pre>

<strong>示例2:</strong>

<pre><strong>输入:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 3
<strong>输出:</strong> false</pre>

<strong>进阶:</strong>

<ul>
	这是 <a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/">搜索旋转排序数组</a>的延伸题目，本题中的<code>nums</code> 可能包含重复元素。
	这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？
</ul>

搜索旋转排序数组 II
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., <code>[0,0,1,2,2,5,6]</code> might become <code>[2,5,6,0,0,1,2]</code>).

You are given a target value to search. If found in the array return <code>true</code>, otherwise return <code>false</code>.

<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 0
<strong>Output:</strong> true
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 3
<strong>Output:</strong> false</pre>

<strong>Follow up:</strong>

<ul>
	This is a follow up problem to<a href="/problems/search-in-rotated-sorted-array/description/">Search in Rotated Sorted Array</a>, where <code>nums</code> may contain duplicates.
	Would this affect the run-time complexity? How and why?
</ul>
