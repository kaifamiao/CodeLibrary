首先声明，这个做法来自leetcode里lee215大神的解法，我只是搬运+解释得更细一点，一切荣耀归于原作者！
解法：[https://leetcode.com/problems/stamping-the-sequence/discuss/189254/Python-Greedy-and-DFS](解法链接)
Lee大神LC主页：[https://leetcode.com/lee215/](Lee大神主页)
Lee大神youtube主页：[https://www.youtube.com/channel/UCUBt1TDQTl1atYsscVoUzoQ](Lee大神Youtube)

先上代码，因为我想说得更详细，所以可能比较繁琐。能看得懂代码的可以自己看：
```
 def movesToStamp(self, s, t):
        if s[0] != t[0] or s[-1] != t[-1]: return []
        n, m = len(s), len(t)
        path = [0] * m
        pos = collections.defaultdict(set)
        for i, c in enumerate(s): pos[c].add(i)

        def dfs(i, index):
            path[i] = index
            if i == m - 1: return index == n - 1
            nxt_index = set()
            if index == n - 1:  # rule 2
                nxt_index |= pos[t[i + 1]]
            elif s[index + 1] == t[i + 1]:  # rule 0
                nxt_index.add(index + 1)
            if s[0] == t[i + 1]:  # rule 1
                nxt_index.add(0)
            return any(dfs(i + 1, j) for j in nxt_index)

        def path2res(path):
            down, up = [], []
            for i in range(len(path)):
                if path[i] == 0:
                    up.append(i)
                elif i and path[i] - 1 != path[i - 1]:
                    down.append(i - path[i])
            return down[::-1] + up

        if not dfs(0, 0): return []
        return path2res(path)
```

解释：

# 1. dfs建立路径(path)
假如可以印出序列，那么得到的`target`中每个字母必然是由`stamp`上的某个字母印出，我们令`path[i]`表示它，即`target[i]`是由`stamp[target[i]]`印出来的。我们先找到一个这样的`path`，后续将研究如何去实现它。简单而言，只需要找到对应字母在`stamp`中的index即可：

例1：
target = ababc, stamp = abc
path = [0, 1, 0, 1, 2]

现在我们遇到的问题是：
1.`stamp`中可能有重复字母，`path`可能不唯一；
2.不考虑唯一性，`path`的可行性是否有其他要求？

我们先回答第二个问题：

目标第一个字母`target[0]`必须由印章的第一个字母`stamp[0]`印出，因为要求印章在边界内。

`target[i]`对于大于0的i：   
可能1：`target[i]`与`target[i - 1]`是一次印出的，同属一个`stamp`。需满足`target[i] == stamp[path[i - 1] + 1]`。
可能2：`target[i]`与`target[i - 1]`不是一次印出的，先印`target[i - 1]`(这里的先后比较的是最后一次被印)。则`target[i]`一定是所属`stamp`的最左，因为其左边无法被遮盖。需满足`target[i] == stamp[0]`。
可能3：`target[i]`与`target[i - 1]`不是一次印出的，后印`target[i - 1]`。则`target[i - 1]`一定是所属`stamp`的最右，因为其右边无法被遮盖。需满足`target[i - 1] == stamp[-1]`。

假如我们无法得到满足上述规则和任一可能的`path`，则返回[]。

是否根据上述规则得到的`path`就可以实现呢？这也对应了问题1。假如答案是肯定的，那么无论我们选择哪种`path`都可以。下面我们通过构造的方式给出答案。

# 2. path2res实现路径
最终目标序列上的字母来自不同次的戳印，例如对stamp长度为5，对应path为[0, 1, 2, 3, 4, 2, 3, 0, 1, 2, 3, 4]，显然`targst[0:5]`来自于起始于0的戳印，`targst[5:7]`来自于起始于3的戳印，`targst[7:12]`来自于起始于7的戳印。

先说明：可以先按照某种顺序印完所有没有露出戳印最左(即`stamp[0]`)的戳印(记为A类，露出最左的记为B类)。
因为B类戳印被其它戳印掩盖的位置只可能在其右端，此位置最外层只可能也是露出B类。也就是说它不必被A类戳印遮挡，所以不妨先印完B类。

对于B类戳印m，如果它左侧离它最近的B类戳印n与它没有overlap，那么不妨先印m。否则，m一定是被一个露出了最右的戳印k遮盖了左部分，假如印的顺序是n早于m早于k的话，n会被m与k遮住，不可能出现在最终序列上，所以印m一定早于n。

对于A类戳印的讨论相似。

因此戳印的顺序是，先由右向左印B类戳印，再由左向右印A类戳印。

对于此印法即可满足`path`，只需要依次讨论对于所有种类戳印(是否露出左端；是否露出右端)他们需要露出的部分不会被遮挡即可。