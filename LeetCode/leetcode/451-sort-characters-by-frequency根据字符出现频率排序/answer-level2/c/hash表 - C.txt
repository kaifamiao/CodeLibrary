### 解题思路
1.初始化hash表格。
2.解析输入的字符串，再hash表中进行记录。
3.对hashhash表进行排序。
4.输出字符串。

### 代码

```c
int org_map[127][2] = {
    {0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},
    {0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},
    {' ', 0},{'!', 0},{'"', 0},{'#', 0},{'$', 0},{'%', 0},{'&', 0},{'\'', 0},{'(', 0},{')', 0},{'*', 0},{'+', 0},{',', 0},
	{'-', 0},{'.', 0},{'/', 0},{'0', 0},{'1', 0},{'2', 0},{'3', 0},{'4', 0},{'5', 0},{'6', 0},{'7', 0},{'8', 0},{'9', 0},
	{':', 0},{';', 0},{'<', 0},{'=', 0},{'>', 0},{'?', 0},{'@', 0},
    {'A', 0},{'B', 0},{'C', 0},{'D', 0},{'E', 0},{'F', 0},{'G', 0},{'H', 0},{'I', 0},{'J', 0},{'K', 0},{'L', 0},{'M', 0},
    {'N', 0},{'O', 0},{'P', 0},{'Q', 0},{'R', 0},{'S', 0},{'T', 0},{'U', 0},{'V', 0},{'W', 0},{'X', 0},{'Y', 0},{'Z', 0},
	{'[', 0},{'\\', 0},{']', 0},{'^', 0},{'_', 0},{'`', 0},
    {'a', 0},{'b', 0},{'c', 0},{'d', 0},{'e', 0},{'f', 0},{'g', 0},{'h', 0},{'i', 0},{'j', 0},{'k', 0},{'l', 0},{'m', 0},
    {'n', 0},{'o', 0},{'p', 0},{'q', 0},{'r', 0},{'s', 0},{'t', 0},{'u', 0},{'v', 0},{'w', 0},{'x', 0},{'y', 0},{'z', 0},
	{'{', 0},{'|', 0},{'}', 0},{'~', 0}
};
int map[127][2] = {
    {0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},
    {0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},{0, 0},
    {' ', 0},{'!', 0},{'"', 0},{'#', 0},{'$', 0},{'%', 0},{'&', 0},{'\'', 0},{'(', 0},{')', 0},{'*', 0},{'+', 0},{',', 0},
	{'-', 0},{'.', 0},{'/', 0},{'0', 0},{'1', 0},{'2', 0},{'3', 0},{'4', 0},{'5', 0},{'6', 0},{'7', 0},{'8', 0},{'9', 0},
	{':', 0},{';', 0},{'<', 0},{'=', 0},{'>', 0},{'?', 0},{'@', 0},
    {'A', 0},{'B', 0},{'C', 0},{'D', 0},{'E', 0},{'F', 0},{'G', 0},{'H', 0},{'I', 0},{'J', 0},{'K', 0},{'L', 0},{'M', 0},
    {'N', 0},{'O', 0},{'P', 0},{'Q', 0},{'R', 0},{'S', 0},{'T', 0},{'U', 0},{'V', 0},{'W', 0},{'X', 0},{'Y', 0},{'Z', 0},
	{'[', 0},{'\\', 0},{']', 0},{'^', 0},{'_', 0},{'`', 0},
    {'a', 0},{'b', 0},{'c', 0},{'d', 0},{'e', 0},{'f', 0},{'g', 0},{'h', 0},{'i', 0},{'j', 0},{'k', 0},{'l', 0},{'m', 0},
    {'n', 0},{'o', 0},{'p', 0},{'q', 0},{'r', 0},{'s', 0},{'t', 0},{'u', 0},{'v', 0},{'w', 0},{'x', 0},{'y', 0},{'z', 0},
	{'{', 0},{'|', 0},{'}', 0},{'~', 0}
};
void map_init(void) {
    int i;
    for (i = 0; i < 127; i++) {
        map[i][0] = org_map[i][0];
        map[i][1] = 0;
    }
}
char * frequencySort(char * s){
    int g_num;
    int i, j, k;
    int length;
    char *p;
    int middle;
    if (s == NULL) {
        return NULL;
    }
    g_num = 127;
    length = strlen(s);
    p = (char *)malloc(sizeof(char) * (length + 1));
    map_init();
    for (i = 0; i < length; i++) {
        map[s[i]][1] +=1;
    }
    //对map进行降序排序
    char middle_char;
    int middle_num;
    for (i = 0; i < g_num - 1; i++) {
        for (j = i + 1; j < g_num; j++) {
            if (map[i][1] < map[j][1]) {
                middle_char = map[i][0];
                map[i][0] = map[j][0];
                map[j][0] = middle_char;
                middle_num = map[i][1];
                map[i][1] = map[j][1];
                map[j][1] = middle_num;
            }
        }
    }
    k = 0;
    for (i = 0; i < g_num; i++) {
        if (0 == map[i][1]) {
            break;
        }
        for (j = 0; j < map[i][1]; j++) {
            p[k] = map[i][0];
            k++;
        }
    }
    p[k] = '\0';
    return p;
}
```