### 解题思路
&emsp;思路比较简单，利用队列进行模拟：重点是**保证每次我们入栈的数经处理后成为队列的首端**.因此我们的重点就是如何在压入时进行构造，而其他的几个函数可以直接利用$queue$内置函数进行解决。
&emsp;思路如下:
- ①：我们要保证每次入栈的数都位于队列手段，也就是保证每次入栈时都有一个**空队列**用来入栈。
- ②：因此我们初始化两个队列，在入栈时，**先将一个队列的所有数据全部出队至另一个暂存队列中**，然后等入队之后再把数据重新压入原始队列
- ③：这里定义了个clear函数，用来清理下队列 

```
* **************************************************************************
 * ********************                                  ********************
 * ********************              被迫打卡            ********************
 * ********************                                  ********************
 * **************************************************************************
 *                                                                          *
 *                                   _oo8oo_                                *
 *                                  o8888888o                               *
 *                                  88" . "88                               *
 *                                  (| -_- |)                               *
 *                                  0\  =  /0                               *
 *                                ___/'==='\___                             *
 *                              .' \\|     |// '.                           *
 *                             / \\|||  :  |||// \                          *
 *                            / _||||| -:- |||||_ \                         *
 *                           |   | \\\  -  /// |   |                        *
 *                           | \_|  ''\---/''  |_/ |                        *
 *                           \  .-\__  '-'  __/-.  /                        *
 *                         ___'. .'  /--.--\  '. .'___                      *
 *                      ."" '<  '.___\_<|>_/___.'  >' "".                   *
 *                     | | :  `- \`.:`\ _ /`:.`/ -`  : | |                  *
 *                     \  \ `-.   \_ __\ /__ _/   .-` /  /                  *
 *                 =====`-.____`.___ \_____/ ___.`____.-`=====              *
 *                                   `=---=`                                *
 * **************************************************************************
 * ********************                                  ********************
 * ********************      				 ********************
 * ********************         佛祖保佑 永远无BUG       ********************
 * ********************                                  ********************
 * **************************************************************************

```

### 代码

```cpp
class MyStack {
public:
    /** Initialize your data structure here. */
    MyStack() {
        clear(Q_r);
        clear(Q_t);
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        while (!Q_r.empty()){
            int t = Q_r.front();
            Q_r.pop();
            Q_t.push(t);
        }
        Q_r.push(x);
        while (!Q_t.empty()){
            int t = Q_t.front();
            Q_t.pop();
            Q_r.push(t);
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int front = Q_r.front();
        Q_r.pop();
        return front;
    }
    
    /** Get the top element. */
    int top() {
        return Q_r.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return Q_r.empty();
    }
private:
    queue<int> Q_r, Q_t;
    
    template<typename T>
    void clear(queue<T>& q) {
        queue<T> empty;
        std::swap(empty, q);
}
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
```