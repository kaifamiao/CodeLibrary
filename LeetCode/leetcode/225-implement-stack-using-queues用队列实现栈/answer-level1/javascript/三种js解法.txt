[225.用队列实现栈](https://leetcode-cn.com/problems/implement-stack-using-queues/)

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md) 

# 方法一

常规做法：利用两个队q1和q2，入栈时都从q1入栈，出栈时把q1中的元素保留最后一位，其余元素全部移入q2，在调换q1和q2。

**push时间复杂度**：`O(1)` 

**pop事件复杂度**：`O(n)`

```javascript
/**
 * Initialize your data structure here.
 */
var MyStack = function() {
  this.q1 = [];
  this.q2 = [];
  this.topEle = undefined;
};

/**
 * Push element x onto stack. 
 * @param {number} x
 * @return {void}
 */
MyStack.prototype.push = function(x) {
  this.topEle = x;
  return this.q1.push(x);
};

/**
 * Removes the element on top of the stack and returns that element.
 * @return {number}
 */
MyStack.prototype.pop = function() {
  while (this.q1.length > 1) {
    this.topEle = this.q1.shift();
    this.q2.push(this.topEle);
  }
  [this.q1, this.q2] = [this.q2, this.q1];
  return this.q2.shift();
};

/**
 * Get the top element.
 * @return {number}
 */
MyStack.prototype.top = function() {
  return this.empty() ? new Error("the stack is empty") : this.topEle;
};

/**
 * Returns whether the stack is empty.
 * @return {boolean}
 */
MyStack.prototype.empty = function() {
  return this.q1.length === 0 && this.q2.length === 0;
};

/**
 * Your MyStack object will be instantiated and called as such:
 * var obj = new MyStack()
 * obj.push(x)
 * var param_2 = obj.pop()
 * var param_3 = obj.top()
 * var param_4 = obj.empty()
 */
```

# 方法二

push进q2，然后把所有q1元素移入q2，在把所有元素移入q1，来调换顺序。

**push时间复杂度**：`O(n)` 

**pop事件复杂度**：`O(1)`

```javascript
/**
 * Initialize your data structure here.
 */
var MyStack = function() {
  this._q1 = [];
  this._q2 = [];
  this._topEle = undefined;
};

/**
 * Push element x onto stack. 
 * @param {number} x
 * @return {void}
 */
MyStack.prototype.push = function(x) {
  let len = this._q1.length; // 注意此处需要记录一下原始长度
  this._topEle = x;
  this._q2.push(x);
  for (let i = 0; i < len; i++) {
    this._q2.push(this._q1.shift());
  }
  [this._q1, this._q2] = [this._q2, this._q1];
};

/**
 * Removes the element on top of the stack and returns that element.
 * @return {number}
 */
MyStack.prototype.pop = function() {
  if (this.empty()) return;
  let tmp = this._q1.shift();
  this._topEle = this.empty() ? undefined : this._q1[0];
  return tmp;
};

/**
 * Get the top element.
 * @return {number}
 */
MyStack.prototype.top = function() {
  return this._topEle;
};

/**
 * Returns whether the stack is empty.
 * @return {boolean}
 */
MyStack.prototype.empty = function() {
  return this._q1.length === 0;
};

/**
 * Your MyStack object will be instantiated and called as such:
 * var obj = new MyStack()
 * obj.push(x)
 * var param_2 = obj.pop()
 * var param_3 = obj.top()
 * var param_4 = obj.empty()
 */
```

# 方法三

**push时间复杂度**：`O(n)` 

**pop事件复杂度**：`O(1)`

直接看代码，简单易懂。

```javascript
/**
 * Initialize your data structure here.
 */
var MyStack = function() {
  this._q = [];
};

/**
 * Push element x onto stack. 
 * @param {number} x
 * @return {void}
 */
MyStack.prototype.push = function(x) {
  let len = this._q.length;
  this._q.push(x);
  for (let i = 0; i < len; i++) {
    this._q.push(this._q.shift());
  }
};

/**
 * Removes the element on top of the stack and returns that element.
 * @return {number}
 */
MyStack.prototype.pop = function() {
  return this._q.shift();
};

/**
 * Get the top element.
 * @return {number}
 */
MyStack.prototype.top = function() {
  return this._q[0];
};

/**
 * Returns whether the stack is empty.
 * @return {boolean}
 */
MyStack.prototype.empty = function() {
  return this._q.length === 0;
};

/**
 * Your MyStack object will be instantiated and called as such:
 * var obj = new MyStack()
 * obj.push(x)
 * var param_2 = obj.pop()
 * var param_3 = obj.top()
 * var param_4 = obj.empty()
 */
```