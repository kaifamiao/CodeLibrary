### 解题思路
1、层次遍历
2、缓存每一层遍历的结果level_list
3、输出每层最后一个元素

### 代码

```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return
        level_list = []
        stacks =[(root,1)]
        while len(stacks)>0:
            node,level = stacks.pop()
            if len(level_list)<level:
                level_list.append([])
            level_list[level-1].append(node.val)
            if node.right:
                stacks.append((node.right,level+1))
            if node.left:
                stacks.append((node.left,level+1))
            
        ans = []
        for i in range(len(level_list)):
            ans.append(level_list[i][-1])
        return ans
            
```