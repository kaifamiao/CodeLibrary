[417.太平洋大西洋水流问题](https://leetcode-cn.com/problems/pacific-atlantic-water-flow/submissions/)

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md) 

## BFS

```javascript
/**
 * @param {number[][]} matrix
 * @return {number[][]}
 */
var pacificAtlantic = function(matrix) {
  let result = [];
  if (matrix.length <= 0 || matrix[0].length <= 0) {
    return result;
  }

  let rows = matrix.length;
  let cols = matrix[0].length;

  let markedPacific = new Array(rows);
  let markedAtlantic = new Array(rows);

  for (let row = 0; row < rows; row++) {
    markedPacific[row] = new Array(cols).fill(false);
    markedAtlantic[row] = new Array(cols).fill(false);
  }

  for (let row = 0; row < rows; row++) {
    markedPacific[row][0] = true;
    bfs(matrix, markedPacific, row, 0);
    markedAtlantic[row][cols - 1] = true;
    bfs(matrix, markedAtlantic, row, cols - 1);
  }
  for (let col = 0; col < cols; col++) {
    markedPacific[0][col] = true;
    bfs(matrix, markedPacific, 0, col);
    markedAtlantic[rows - 1][col] = true;
    bfs(matrix, markedAtlantic, rows - 1, col);
  }
  for (let row = 0; row < rows; row++) {
    for (let col = 0; col < cols; col++) {
      if (markedPacific[row][col] && markedAtlantic[row][col]) {
        result.push([row, col]);
      }
    }
  }
  return result;
};

function bfs(matrix, marked, row, col) {
  // 注意此处的判定关系是大于等于，因为是从初始化为true的位置开始的
  if (
    row > 0 &&
    !marked[row - 1][col] &&
    matrix[row - 1][col] >= matrix[row][col]
  ) {
    marked[row - 1][col] = true;
    bfs(matrix, marked, row - 1, col);
  }
  if (
    col < matrix[0].length - 1 &&
    !marked[row][col + 1] &&
    matrix[row][col + 1] >= matrix[row][col]
  ) {
    marked[row][col + 1] = true;
    bfs(matrix, marked, row, col + 1);
  }
  if (
    row < matrix.length - 1 &&
    !marked[row + 1][col] &&
    matrix[row + 1][col] >= matrix[row][col]
  ) {
    marked[row + 1][col] = true;
    bfs(matrix, marked, row + 1, col);
  }
  if (
    col > 0 &&
    !marked[row][col - 1] &&
    matrix[row][col - 1] >= matrix[row][col]
  ) {
    marked[row][col - 1] = true;
    bfs(matrix, marked, row, col - 1);
  }
}
```