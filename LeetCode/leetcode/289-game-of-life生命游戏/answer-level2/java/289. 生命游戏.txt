1. 可以复制整个数组，进行统计分析后生成新数组再复制到原数组中，空间消耗大。
2. 可以不需要复制整个数组，问题关键在于，在原数组上更新时，更新后的数组会影响下一次的判断，即如题目所说“你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子”。
为解决这一问题，可以使用0作为判断活死细胞的边界，即>0为活细胞，<=0为死细胞。不需要复制整个数组，在原数组上进行操作即可。

涉及到变换的情况有：
    1. 活细胞变死细胞，则当前位置为1，将其值设置为2，满足2>0，则再次统计到该位置时，依旧算作活细胞，最后将该位置的2改为0即可；
    2. 死细胞变活细胞，则当前位置为0，将其值设置为-1，满足-1<=0，则再次统计到该位置时，依旧算作死细胞，最后将该位置的-1改为1即可。

```
class Solution {
    public void gameOfLife(int[][] board) {
        if(board == null || board.length==0 || board[0].length==0)  return;

        //dx dy用作下标变换，将当前坐标变为其上下左右和对角位置的坐标
        int[] dx = {-1, 1, 0, 0, -1, -1, 1, 1};
        int[] dy = {0, 0, -1, 1, -1, 1, -1, 1};

        int m = board.length;
        int n = board[0].length;

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){ //遍历每个点
                int cnt = 0;
                for(int k=0; k<8; k++){ //变换坐标，遍历其上下左右和对角的点
                    int nx = i + dx[k];
                    int ny = j + dy[k];
                    if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;   //如果周围某个点越界则不作处理
                    if(board[nx][ny] > 0)   cnt++;  //如果周围某个点是活细胞，计数加1
                }
                if (board[i][j] > 0) { // 当前点是活细胞    
					if (cnt < 2 || cnt > 3) //根据规则下个状态是死细胞
						board[i][j] = 2;    //在原坐标上设置为2，下一次讨论改点时，board[nx][ny]=2>0,仍然统计为活细胞
				} else { // 当前点是死细胞
					if (cnt == 3)   //根据规则下个状态是活细胞
						board[i][j] = -1;   //在原坐标上设置为-1，下一次讨论改点时，board[nx][ny]=-1<0,仍然统计为死细胞
				}
            }
        }

        for (int i = 0; i < m; i++)
			for (int j = 0; j < n; j++)
				if (board[i][j] == -1)  //-1表示上个状态是死细胞，当前状态转为活细胞
					board[i][j] = 1;
				else if (board[i][j] == 2)  //2表示上个状态是活细胞，当前状态转为死细胞
					board[i][j] = 0;
    }
}
```
