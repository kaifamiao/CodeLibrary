[TOC]
# 前端与算法 leetcode 7. 整数反转
---

## 题目描述
给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。

示例 1:
```
输入: 123
输出: 321
```
 示例 2:
```
输入: -123
输出: -321
```
示例 3:
```
输入: 120
输出: 21
注意:
```
假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。

[7. 整数反转](https://leetcode-cn.com/problems/reverse-integer)

## 概要

## 提示
这里需要注意溢出条件是`2**31到-(2**31)`
## 解析
递归,循环,注意溢出条件
### 解法
如果不考虑溢出问题的话是非常简单的(才怪),用js解这道题有两个坑,第一个是变量提升,整数进行乘除取余等操作时,会转成浮点数,获得的结果存在`0!=0`的情况,我们需要给这些结果用`Math.floor`或者`~~`进行舍去取余操作才可以

## 算法

```js
/**
 * @param {number} x
 * @return {number}
 */
var reverse = function (x) {
  let ans = 0;
  while (x !== 0) {
    ans = ans * 10 + ~~(x % 10);
    x = ~~(x / 10);
  }
  return (ans >= (2 ** 31) || ans <= -(2 ** 31)) ? 0 : ans;
};
```

## 传入测试用例的运行结果

```sh
input:123
output:321
```

## 执行结果

```
执行用时 :80 ms, 在所有 javascript 提交中击败了94.48%的用户
内存消耗 :35.8 MB, 在所有 javascript 提交中击败了36.81%的用户
```

### GitHub仓库

[7. 整数反转](https://github.com/moshuying/AlgorithmAndBlog)