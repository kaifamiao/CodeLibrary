### 1. 题目分析
- 第一步：普遍规律
    由于要求**交换次数尽量少**，故：
    - 本来相同位置就有相同的字符，不需要交换。
    - 本来相同位置字符不同，需要交换。交换为**两组字符交换**，本质上只有两种情形：<br>
        (a)  2组相同(2组`xy`或2组`yx`，等价于示例1)：
            此时，`s1[0]`与`s2[1]`交换即可，需要进行$1$次交换
        (b)  2组不同(1组`xy`，1组`yx`，等价于示例2)：
            此时，将`s1[0]`与`s2[0]`交换后与a)相同，需要进行$2$次交换
        <br>综上所述，我们可以得出如下结论：
        -  `xy`与`yx`的组数之和必须为偶数，否则返回`-1`(**两两交换**)
        -  优先进行(a)类交换，剩余的进行(b)类交换(**贪心算法**)
- 第二步：得出结论
    由于匹配是两两进行，因此，在确定有$M$对`xy`，$N$对`yx`，且$M+N$为偶数后：
    - 若$M$为偶数，则$N$也为偶数，则**全部为(a)类交换**。总匹配数为：
        $$\frac{M + N}{2}$$
    - 若$M$为奇数，则$N$也为奇数，则**各拿一组进行(b)类交换，其余(a)类交换**。总匹配数为：
        $$\frac{M - 1}{2} + \frac{N - 1}{2} + 2 = \frac{M + N}{2} + 1$$
	- 两者均可写作：
		$$\frac{M + 1}{2} + \frac{N + 1}{2}$$

### 2. Coding
```java
public int minimumSwap(String s1, String s2) {
    int len = s1.length(), xy = 0, yx = 0;
    for(int i = 0; i < len; i ++) {
        if(s1.charAt(i) == s2.charAt(i)) {
            continue;
        }
        else if(s1.charAt(i) == 120) {
            xy ++;
        }
        else {
            yx ++;
        }
    }
    return ((xy + yx) & 1) == 1 ? -1 : (xy + 1) / 2 + (yx + 1) / 2;
}
```
时间复杂度：$O(n)$，空间复杂度：$O(1)$
<br>注1：代码中判断是否为奇数的方法经常会用到，也可以将其抽取为一个方法进行调用：
```
private boolean isOdd(int t) {
    return (t & 1) == 1;
}
```
注2：上面的代码执行的结果为1ms，使用`toCharArray()`方法代替`charAt()`方法，可以实现0ms
```java
public int minimumSwap(String s1, String s2) {
    int len = s1.length(), xy = 0, yx = 0;
    char[] cs1 = s1.toCharArray();
    char[] cs2 = s2.toCharArray();
    for(int i = 0; i < len; i ++) {
        if(cs1[i] == cs2[i]) {
            continue;
        }
        else if(cs1[i] == 120) {
            xy ++;
        }
        else {
            yx ++;
        }
    }
    return ((xy + yx) & 1) == 1 ? -1 : (xy + 1) / 2 + (yx + 1) / 2;
}
```
此时，时间复杂度：$O(n)$，空间复杂度：$O(n)$
### 3. 执行结果
- 方法一
![image.png](https://pic.leetcode-cn.com/83c106ce65a79fa4c6543ddba912e8979d09b13ea7c5bc25f3602a21193365b8-image.png)
- 方法二
![image.png](https://pic.leetcode-cn.com/c9be1fd2f1318c28eccaef30ccc01ee70bd0dcb70ca90687d74abcbda4861871-image.png)
