![QQ图片20191215133647.png](https://pic.leetcode-cn.com/934a2d0159f6558ebfc8be4a952b95ddb3165a858075cb2a6d163bb3e70e48d5-QQ%E5%9B%BE%E7%89%8720191215133647.png)
1. 思路分析
    首先，题目要求我们尽可能少的交换字符，使得字符串一样。因此按照贪心的策略，当我们找到一组不同（如s1[i] = 'x'，s2[i] = 'y'），我们就需要找到另外一组同样形式的不同(如s1[j] = 'x'，s2[j] = 'y')，此时swap(s1[i], s2[j])，就可以使得这两组一样，完成了1次交换。因此，按照这种思路，我们发现一组不同，就立刻去寻找下一组同样的不同，完成交换。
    然而，当某一组不同找不到配对的另一组时(如s1[i] = 'x'，s2[i] = 'y'却只能找到s1[j] = 'y'，s2[j] = 'x'时)，我们必须通过2次交换，使得他们一样。所以代码中需要设置一个标志位记录他们的个数。当连这一种匹配都找不到的时候，就说明这两个字符串不可能一样，返回-1.
2. 举个栗子
    s1 = 'xxyyxyxyxx'，s2 = 'xyyxyxxxyx'，循环遍历
    1)第一次发现s1[1] != s2[1]('xy'型不同)，则从2开始遍历，寻找是否存在配对，发现s1[4] != s2[4]('xy'型不同)，找到不同，将他们交换。字符串变为：s1 = 'xyyyxyxyxx'，s2 = 'xyyxxxxxyx'。
    2)继续遍历，发现s1[3] != s2[3]('yx'型不同)，则从4开始遍历，寻找是否存在配对，发现s1[5] != s2[5]('yx'型不同)，找到不同，将他们交换，字符串变为：s1 = 'xyyxxyxyxx'，s2 = 'xyyxxyxxyx'。
    3)接着往下遍历，发现s1[7] != s2[7]('yx'型不同)，则从8开始遍历，寻找是否存在配对，发现找不到同类型配对，因此标志位+1。
    4)再往后遍历，发现s1[8] != s2[8]('xy'型不同)，则从9开始遍历，寻找是否存在配对，发现找不到同类型配对，因此标志位+1。
    5)遍历结束，标志位值为2，说明存在一组需要2次交换的配对（事实上只能存在1组），则交换次数+2，结束。
3. 代码如下
```
class Solution {
public:
	int minimumSwap(string s1, string s2) {
		int f = 0;  //标志位
		int ans = 0;    //结果
		for (int i = 0; i < s1.length(); i++)   //开始遍历
		{
			if (s1[i] != s2[i]) //找到一组不同
			{
				int j = 0;
				for (j = i + 1; j < s1.length(); j++)   //从i之后寻找下一组同类型的不同
				{
					if (s1[i] == s1[j] && s2[i] == s2[j])   //若发现了存在同类型的不同
					{
						ans++;          //1次交换即可解决
						char t = s1[i];
						s1[i] = s2[j];
						s2[j] = t;
						break;          //退出，继续遍历
					}
				}
				if (j == s1.length())   //若没有找到同类型不同
				{
					f++;    //标志位+1
				}
			}
		}
		if (f % 2 != 0)     //只有'xy'或'yx'型，无法通过交换使字符串变成一样
			return -1;
		else if (f != 0)    //由于f初始化为0, 0模2会等于0，不能算，因此要f不为0，且为偶数，2次交换就可以变为一样
			ans += 2;
		return ans;
	}
};
```
    以上是我的全部思路，如有改良建议，请写在评论里吧！

