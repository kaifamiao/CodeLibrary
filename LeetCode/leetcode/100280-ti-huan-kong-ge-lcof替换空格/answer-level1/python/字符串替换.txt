### 解题思路
Python中字符串的特点：不可改变的类型

思路一：
调用库函数：replace(old_str, new_str)


思路二：
由于字符串是不可改变类型，因此需要：
1. 新建一个空数组来存储新的字符串
2. 从头遍历字符串：如果不是空格，则值复制到新数组；否则，新数组添加值为'%20'
3. 通过str.join()连接，转换成字符串

时间复杂度：O(N)
空间复杂度：O(N)


思路三：
和思路二相似，只不过直接在本身的数组上改。思路二的字符串没有改变，思路三的字符串转换成了数组，空格独占一位。

时间复杂度：O(N)
空间复杂度：O(N)


思路四：
双指针法：从尾部插入元素
1. 第一次从头遍历字符串找出空格的个数，算出新字符串的长度，并新建一个同等长度的数组存储新的字符
2. 第二次从尾部遍历：如果不是空格，则值复制到新数组从尾部，两指针均减一；否则，新数组从后向前赋值为'0 2 %'，p1指针减一，p2指针减三
3. 若p1 = p2，说明空格已全部找到: 原字符串从开始到p1的字符全部复制到新数组的对应位置，跳出循环
4. 通过str.join()连接，转换成字符串

时间复杂度：O(N+N)
空间复杂度：O(N+M)


### 代码

```python3
class Solution:
    def replaceSpace(self, s: str) -> str:
        # return s.replace(' ', '%20')
        space_amount = 0

        for i in s:
            if i == ' ':
                space_amount += 1
                
        N = len(s) + 2 * space_amount

        p1 = len(s) - 1
        p2 = N - 1 


        new_s = [''] * N

        for j in range(len(s)):
            if s[-j-1] != ' ':
                new_s[p2] = s[p1]
                p1 -= 1
                p2 -= 1
            else:
                new_s[p2] = '0'
                new_s[p2-1] = '2'
                new_s[p2-2] = '%'
                p1 -= 1
                p2 -= 3

            if p1 == p2:
                new_s[:p2+1] = s[:p1+1]
                break
        return ''.join(new_s)

```