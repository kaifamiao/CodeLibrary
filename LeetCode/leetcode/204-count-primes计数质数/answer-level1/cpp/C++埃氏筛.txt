```cpp
/*埃氏筛，应用场景是对一定范围内的本质就是剔除掉质数的整数倍，有两处小的优化*/
int countPrimes(int n) {
    if(n <= 1) return 0;//第一步，永远是特判
		//其实这里也提示了第一步需要特判，但凡这种涉及到数组容量是变量的，都需要保证容量是正整数
	    bool *p = new bool[n];
	    for(int i = 1; i < n; ++i) p[i] = 1;
	    p[1] = 0;
	    //第一处小优化，外层循环的作用是将已经确定是质数的数的倍数设置为不为质数，以n=100，i=11为例，11*2、11*3...11*9都会在前面的循环中被筛掉，所以不需要再扫描11以上的质数了
		for(int i = 2; i * i < n; ++i) {
			if(p[i]) {
				//第二处小优化，和第一处优化类似，都是更小的在前面已经被筛掉了
				for(int j = i * i; j < n; j += i) {
					p[j] = 0;
				}
			}
		}
		int c = 0;
		for(int i = 1; i < n; ++i) if(p[i]) ++c;
		return c;
}
```
