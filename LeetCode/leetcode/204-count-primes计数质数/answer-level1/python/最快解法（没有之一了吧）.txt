
**刚看了下提交记录里20ms的代码，这尼玛直接套的测试用例，我就无语了。。。**

**效率提升的关键在于[埃拉托斯特尼筛法](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)，简称埃式筛，也叫厄拉多塞筛法：**

`要得到自然数n以内的全部质数，必须把不大于根号n的所有质数的倍数剔除，剩下的就是质数。`

肯定有同学想问了，为什么埃式筛只需要剔除根号n以内的质数倍数？为什么不是每个数的倍数都进行剔除？我们知道偶数的倍数肯定是偶数，可以剔除，那为什么不是剔除根号n以内的所有奇数的倍数呢？

**这个时候我们需要了解一个定理，叫[算术基本定理](https://baike.baidu.com/item/%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86)：**

`任何一个合数(非质数)，都可以以唯一的形式被写成有限个质数的乘积，即分解质因数。`

这个定理使用反证法很好证明，在理解了算数基本定理后，我们就知道所有超过根号n的合数都可以进行因式分解，其中最小的因子必然为根号n以内的一个质数，这样我们只要剔除掉根号n以内的质数倍数，就可以排除掉n以内的所有合数了，之后剩下来的数就都是质数啦。

> #### 知道了最快算法的原理后就是代码实现了，如果有安装 `numba` 模块，可以使用 `numba.njit` 装饰该函数，实测n在1000万以内时速度比纯python代码慢，超过1000万后越来越快， n等于10亿时，py代码用时61.4秒，内存峰值占用13.6 GB，jit代码用时24.05秒，内存峰值占用11.2 GB，更进一步，配合上 `numpy` 模块，将数组数据类型限制为 `np.bool_` ，**10亿内计算用时 6.26秒， 内存占用 1G (稳定)，真的吊，效率接近C了，这个时候我们才能说是最优解法，没有之一！**
>   

### 动图演示
![100以内的质数筛选-埃式筛法.gif](https://pic.leetcode-cn.com/7d1d460357a7d0bca1ea99aec455377243013c65b16f64efefe3639f86af555f-100%E4%BB%A5%E5%86%85%E7%9A%84%E8%B4%A8%E6%95%B0%E7%AD%9B%E9%80%89-%E5%9F%83%E5%BC%8F%E7%AD%9B%E6%B3%95.gif)

### 视频演示
![动画演示.mp4](1bbcfdd7-6dc8-423f-8d09-6db51cec798d)


### 纯Python实现

```
def count_primes_py(n):
    """
    求n以内的所有质数个数（纯python代码）
    """
    # 最小的质数是 2
    if n < 2:
        return 0

    isPrime = [1] * n
    isPrime[0] = isPrime[1] = 0   # 0和1不是质数，先排除掉

    # 埃式筛，把不大于根号n的所有质数的倍数剔除
    for i in range(2, int(n ** 0.5) + 1):
        if isPrime[i]:
            isPrime[i * i:n:i] = [0] * ((n - 1 - i * i) // i + 1)

    return sum(isPrime)
```

**代码说明：**

`isPrime = [1] * n` 这一句初始化一个存放n个元素的列表 `isPrime`，元素初始值为1，表示该元素所在的位置索引值是一个质数，这样一来我们不用单独开辟内存用于存放数字，下标索引天生就可以用来表示自然数。

`if isPrime[i]:` 判断第 i 个数是否已经被赋值为 0 ，即对之前已经排除掉的不是质数的数，不用再对它的倍数进行二次排除。**注意：埃式筛要排除的是所有小于等于根号n的`质数`的倍数，而不是所有小于等于根号n的`数`的倍数！**

`isPrime[i * i:n:i] = [0] * ((n - 1 - i * i) // i + 1)` 指定步长参数，进行列表切片赋值，之所以从 i 的平方开始，是因为小于 i 的平方的倍数部分，在它之前就已经被排除掉了。

**举个例子：当i等于 5 时，5 的 2 倍为 10 ，所以 10 不是质数，需要排除，但是因为 2 是 10 的最小因数，之前在 i 等于 2 的时候就已经把 10 这个数排除掉了，我们不用再进行二次赋值排除，这样可以增加程序运行的效率。**

`return sum(isPrime)` 到这里列表中每个质数位的值均为 1 ，其余合数位的值均为 0 ，`sum(isPrime)`的结果就是 n 以内质数的个数


还是要看清楚埃氏筛这一句：`要得到自然数n以内的全部质数，必须把不大于根号n的所有质数的倍数剔除，剩下的就是质数。`

**提交用时：**
![image.png](https://pic.leetcode-cn.com/5cecd794f47e341b086a055a3d96ca98f480a5df417cbd48d1081307e48d5249-image.png)

### numba + numpy 最优化实现
```
from numba import njit
import numpy as np


@njit
def count_primes_numpy_jit(n):
    """
    求n以内的所有质数个数，numba + numpy 最优版本
    """
    assert n > 1

    isPrime = np.ones(n, dtype=np.bool_)
    isPrime[0] = isPrime[1] = 0

    for i in np.arange(2, int(n ** 0.5) + 1):
        if isPrime[i]:
            isPrime[i * i:n:i] = 0

    return int(np.sum(isPrime))
```
