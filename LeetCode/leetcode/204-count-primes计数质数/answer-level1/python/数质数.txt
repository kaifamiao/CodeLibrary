### 解题思路
埃式筛：要得到自然数n以内的全部质数，必须把不大于根号n的所有质数的倍数剔除，剩下的就是质数。
为什么埃式筛只需要剔除根号n以内的质数倍数？为什么不是每个数的倍数都进行剔除？我们知道偶数的倍数肯定是偶数，可以剔除，那为什么不是剔除根号n以内的所有奇数的倍数呢？

这个时候我们需要了解一个定理，叫算术基本定理：

任何一个合数(非质数)，都可以以唯一的形式被写成有限个质数的乘积，即分解质因数。

这个定理使用反证法很好证明，在理解了算数基本定理后，我们就知道所有超过根号n的合数都可以进行因式分解，其中最小的因子必然为根号n以内的一个质数，这样我们只要剔除掉根号n以内的质数倍数，就可以排除掉n以内的所有合数了，之后剩下来的数就都是质数啦。
### 代码

```python
class Solution(object):
    def countPrimes(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n < 2:
            return 0

        isPrime = [1] * n
        isPrime[0] = isPrime[1] = 0   # 0和1不是质数，先排除掉

        # 埃式筛，把不大于根号n的所有质数的倍数剔除
        for i in range(2, int(n ** 0.5) + 1):
            if isPrime[i]:
                isPrime[i * i:n:i] = [0] * ((n - 1 - i * i) // i + 1)

        return sum(isPrime)
```