### 解题思路
    /*
     * 异或运算
     *
     * 异或运算的一个性质是：任何一个数字异或本身等于0，异或0等于它本身。
     * 如果一个数组中除了一个数出现一次，其他都出现两次，那么将数组中的数从头到尾依次异或，
     * 最终的结果必然是那个只出现过一次的数。
     *
     * 而题目的数组中有两个只出现一次的数，其他都出现两次。
     * 要实现上述的操作，就需要将这两个只出现一次的数分成两组再分别进行异或操作。
     *
     * 如何分成两组？对题目数组中的数从头到尾进行异或，因为有两个不相等的数，则最终结果肯定不为0。
     * 最终结果的二进制中必然有某些位是1，而对应在该位，不同的两个数必然一个为1一个为0。
     *
     * 以此方法进行分界，取最终结果右数第一个1，对数组中的数进行划分，再分别对两数组中的数进行异或，
     * 则两数组最后的异或结果就是题目所求的数组。
     * */
### 代码

```cpp
std::vector<int> singleNumbers(std::vector<int> &nums) {
    if (nums.empty()) {
        return {};
    }

    // 结果数组
    std::vector<int> ans(2, 0);

    // 对数组中的数从头到尾进行异或
    // 计算最终异或结果
    int xorResult = 0;
    for (int num : nums) {
        xorResult ^= num;
    }

    // 计算最终结果从右数的第一个为1的位
    int index = 0;
    while (((xorResult & 1) == 0) && (index < 8 * sizeof(int))) {
        xorResult >>= 1;
        index++;
    }

    // 按照计算的1的位，将数组中的数分为两组
    for (int num : nums) {
        // 右移到index位，与1
        // 判断该位是否为1
        if ((num >> index) & 1) {
            // 将该组数从头到尾进行异或
            ans[0] ^= num;
        } else {
            // 将该组数从头到尾进行异或
            ans[1] ^= num;
        }
    }

    return ans;
}

```