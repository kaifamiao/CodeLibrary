### 解题思路
![image.png](https://pic.leetcode-cn.com/c76f6400bfdcfa39c553d53a93b87426eb26ef797ab8b9f1fe4feb2da3645ea1-image.png)

- 采用剑指offer的官方题解,使用位运算
- 当拿到这个题目的时候我们可能想到使用排序等等方法,但是题目有复杂度的要求,下面就介绍如何使用位运算来求解
-------------------------------------------------------------------------------------------------------------------
- 首先我们想一下这个问题:在这个数组中如果只有一个数字出现了一次,其他数字出现了两次,如何找出这个数字呢????
- 这两个题都在强调一个或者两个数字只出现一次,其他数字只出现一次,这有什么意义呢?我们想到了异或运算的性质,**任何一个数字异或它自己都等于0**,也就是说我们从头到尾异或数组中每个数字,那么他最终的结果就是刚好出现的那个数字,因为那些成对的数字在异或中抵消了
- ok,想清楚上面的问题,那么我们的这个问题可以将它分成两个数组,使得每个数组中包含一个只出现一次的数字,那么怎么划分这样的数组,也是通过异或啦
1. 划分数组: 从头到尾异或数组中的数字,得到最后结果`temp`,在`temp`中至少有一位是`1`,因为存在两个不相同的数字,找到`temp`中从又往左的第一个为1的位置的数字`num`,例如`temp = 10`,二进制为`1010`,`temp`从又往左的第一个为1的位置的数字为`num = 10`(二进制),我们在通过`num`和数组中的各个数字分别取异或,这样就将其分成了两个数组,接下来只要分别对两个子数组求异或,就能得到最后的结果了

- 为了清晰,上个例子:`[2,4,3,6,3,2,5,5]`,当我们遍历异或完成后得到二进制的数字`0010`,我们根据倒数第二位是不是`1`将数组分成两个数组,分别为`[2,3,6,3,2]`和`[4,5,5]`,其中前面数组中数字的第二位都是`1`,后面数组中数字的第二位都是`0`,两个数组分别取异或,第一个数组得到`6`,第二个数组得到`4`,完成!

### 代码

```python
class Solution(object):
    def singleNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        temp = 0
        for i in nums:#得到用于区分的数字
            temp ^= i
        num = 1
        while not (num & temp):#找到用于区分的数字中从右到左的第一位为1的值
            num = num << 1
        result1 = 0
        result2 = 0
        for i in nums:
            if num & i:# 划分两个数组
                result1 ^= i#两个数组分别取异或
            else:
                result2 ^= i
        return[result1,result2] 




```