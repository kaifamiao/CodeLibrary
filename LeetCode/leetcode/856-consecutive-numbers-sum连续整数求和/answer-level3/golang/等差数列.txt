由观察可得,分解的结果成1的等差数列。
i为分解后的数的数量-1（不计算最小值）初始值为1,sum来累计当i个数时候,它们和最小值的差值。(sum=(a2-a1)+(a3-a1)+...+(an-a1))

当N大于差值，把N分成i+1份,可以划分说明形成数列。
当N不足以补齐差值时候说明到达极限，返回结果。

例如：输入5，当执行到i=1的时候，表示当前划分为2个数,差和为1<5,分配量为i+1=2,因为(5-1)%2=0【(总量-差和)%数量==0】,所以可以分配。
            当i=2,表示划分为3个数,差和1+2=3<5,但是(5-3)%3=2,不能分配
            当i=3,表示划分为4个数,差和1+2+3=6>5,已经到了分配极限了无法分配退出循环。

```
func consecutiveNumbersSum(N int) int {
	result := 1
	sum := 0
	for i := 1; ; i++ {
		sum += i
		if N-sum > 0 {
			if (N-sum)%(i+1) == 0 {
				result++
			}
		} else {
			break
		}

	}
	return result
}
```

