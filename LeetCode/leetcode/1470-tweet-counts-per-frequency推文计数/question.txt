tweet-counts-per-frequency
请你实现一个能够支持以下两种方法的推文计数类<code>TweetCounts</code>：

1.<code> recordTweet(string tweetName, int time)</code>

<ul>
	记录推文发布情况：用户<code>tweetName</code>在<code>time</code>（以 <strong>秒</strong>为单位）时刻发布了一条推文。
</ul>

2.<code> getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime)</code>

<ul>
	返回从开始时间<code>startTime</code>（以 <strong>秒</strong> 为单位）到结束时间<code>endTime</code>（以 <strong>秒</strong> 为单位）内，每 <strong>分</strong><em><strong>minute</strong>，</em><strong>时<em>hour </em></strong>或者 <strong>日<em>day</em></strong>（取决于<code>freq</code>）内指定用户<code>tweetName</code>发布的推文总数。
	<code>freq</code>的值始终为 <strong>分</strong><em><strong>minute</strong>，</em><strong>时</strong><em><strong> hour</strong></em>或者<em></em><strong>日</strong><em><strong> day</strong></em>之一，表示获取指定用户<code>tweetName</code>发布推文次数的时间间隔。
	第一个时间间隔始终从 <code>startTime</code> 开始，因此时间间隔为<code>[startTime, startTime + delta*1&gt;, [startTime + delta*1, startTime + delta*2&gt;, [startTime + delta*2, startTime + delta*3&gt;, ... , [startTime + delta*i,<strong>min</strong>(startTime + delta*(i+1), endTime + 1)&gt;</code>，其中 <code>i</code> 和 <code>delta</code>（取决于 <code>freq</code>）都是非负整数。
</ul>



<strong>示例：</strong>

<pre><strong>输入：</strong>
[&quot;TweetCounts&quot;,&quot;recordTweet&quot;,&quot;recordTweet&quot;,&quot;recordTweet&quot;,&quot;getTweetCountsPerFrequency&quot;,&quot;getTweetCountsPerFrequency&quot;,&quot;recordTweet&quot;,&quot;getTweetCountsPerFrequency&quot;]
[[],[&quot;tweet3&quot;,0],[&quot;tweet3&quot;,60],[&quot;tweet3&quot;,10],[&quot;minute&quot;,&quot;tweet3&quot;,0,59],[&quot;minute&quot;,&quot;tweet3&quot;,0,60],[&quot;tweet3&quot;,120],[&quot;hour&quot;,&quot;tweet3&quot;,0,210]]

<strong>输出：</strong>
[null,null,null,null,[2],[2,1],null,[4]]

<strong>解释：</strong>
TweetCounts tweetCounts = new TweetCounts();
tweetCounts.recordTweet(&quot;tweet3&quot;, 0);
tweetCounts.recordTweet(&quot;tweet3&quot;, 60);
tweetCounts.recordTweet(&quot;tweet3&quot;, 10);                             //&quot;tweet3&quot;发布推文的时间分别是0,10和60 。
tweetCounts.getTweetCountsPerFrequency(&quot;minute&quot;, &quot;tweet3&quot;, 0, 59); //返回[2]。统计频率是每分钟（60 秒），因此只有一个有效时间间隔 [0,60&gt;-&gt;2条推文。
tweetCounts.getTweetCountsPerFrequency(&quot;minute&quot;, &quot;tweet3&quot;, 0, 60); //返回[2,1]。统计频率是每分钟（60 秒），因此有两个有效时间间隔<strong>1)</strong>[0,60&gt;-&gt;2条推文，和<strong>2)</strong>[60,61&gt;-&gt;1条推文。 
tweetCounts.recordTweet(&quot;tweet3&quot;, 120);                            // &quot;tweet3&quot;发布推文的时间分别是 0, 10, 60 和 120 。
tweetCounts.getTweetCountsPerFrequency(&quot;hour&quot;, &quot;tweet3&quot;, 0, 210);  //返回[4]。统计频率是每小时（3600 秒），因此只有一个有效时间间隔 [0,211&gt;-&gt;4条推文。
</pre>



<strong>提示：</strong>

<ul>
	同时考虑<code>recordTweet</code>和<code>getTweetCountsPerFrequency</code>，最多有 <code>10000</code> 次操作。
	<code>0 &lt;= time, startTime, endTime &lt;=10^9</code>
	<code>0 &lt;= endTime - startTime &lt;= 10^4</code>
</ul>

推文计数
Implement the class <code>TweetCounts</code> that supports two methods:

1.<code> recordTweet(string tweetName, int time)</code>

<ul>
	Stores the <code>tweetName</code> at the recorded <code>time</code> (in <strong>seconds</strong>).
</ul>

2.<code> getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime)</code>

<ul>
	Returns the total number of occurrences for the given <code>tweetName</code> per <strong>minute</strong>, <strong>hour</strong>, or <strong>day</strong> (depending on <code>freq</code>) starting from the <code>startTime</code> (in <strong>seconds</strong>) and ending at the <code>endTime</code> (in <strong>seconds</strong>).
	<code>freq</code> is always <strong>minute</strong><em>, </em><strong>hour</strong><em>or <strong>day</strong></em>, representing the time interval to get the total number of occurrences for the given<code>tweetName</code>.
	The first time interval always starts from the <code>startTime</code>, so the time intervals are <code>[startTime, startTime + delta*1&gt;, [startTime + delta*1, startTime + delta*2&gt;, [startTime + delta*2, startTime + delta*3&gt;, ... , [startTime + delta*i, <strong>min</strong>(startTime + delta*(i+1), endTime + 1)&gt;</code> for some non-negative number <code>i</code> and <code>delta</code> (which depends on <code>freq</code>).
</ul>


<strong>Example:</strong>

<pre>
<strong>Input</strong>
[&quot;TweetCounts&quot;,&quot;recordTweet&quot;,&quot;recordTweet&quot;,&quot;recordTweet&quot;,&quot;getTweetCountsPerFrequency&quot;,&quot;getTweetCountsPerFrequency&quot;,&quot;recordTweet&quot;,&quot;getTweetCountsPerFrequency&quot;]
[[],[&quot;tweet3&quot;,0],[&quot;tweet3&quot;,60],[&quot;tweet3&quot;,10],[&quot;minute&quot;,&quot;tweet3&quot;,0,59],[&quot;minute&quot;,&quot;tweet3&quot;,0,60],[&quot;tweet3&quot;,120],[&quot;hour&quot;,&quot;tweet3&quot;,0,210]]

<strong>Output</strong>
[null,null,null,null,[2],[2,1],null,[4]]

<strong>Explanation</strong>
TweetCounts tweetCounts = new TweetCounts();
tweetCounts.recordTweet(&quot;tweet3&quot;, 0);
tweetCounts.recordTweet(&quot;tweet3&quot;, 60);
tweetCounts.recordTweet(&quot;tweet3&quot;, 10);                             // All tweets correspond to &quot;tweet3&quot; with recorded times at 0, 10 and 60.
tweetCounts.getTweetCountsPerFrequency(&quot;minute&quot;, &quot;tweet3&quot;, 0, 59); // return [2]. The frequency is per minute (60 seconds), so there is one interval of time: 1) [0, 60&gt; - &gt; 2 tweets.
tweetCounts.getTweetCountsPerFrequency(&quot;minute&quot;, &quot;tweet3&quot;, 0, 60); // return [2, 1]. The frequency is per minute (60 seconds), so there are two intervals of time: 1) [0, 60&gt; - &gt; 2 tweets, and 2) [60,61&gt; - &gt; 1 tweet.
tweetCounts.recordTweet(&quot;tweet3&quot;, 120);                            // All tweets correspond to &quot;tweet3&quot; with recorded times at 0, 10, 60 and 120.
tweetCounts.getTweetCountsPerFrequency(&quot;hour&quot;, &quot;tweet3&quot;, 0, 210);  // return [4]. The frequency is per hour (3600 seconds), so there is one interval of time: 1) [0, 211&gt; - &gt; 4 tweets.
</pre>


<strong>Constraints:</strong>

<ul>
	There will be at most <code>10000</code>operations considering both <code>recordTweet</code> and <code>getTweetCountsPerFrequency</code>.
	<code>0 &lt;= time, startTime, endTime &lt;=10^9</code>
	<code>0 &lt;= endTime - startTime &lt;= 10^4</code>
</ul>
