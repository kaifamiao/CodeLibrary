battleships-in-a-board
给定一个二维的甲板， 请计算其中有多少艘战舰。战舰用<code>&#39;X&#39;</code>表示，空位用<code>&#39;.&#39;</code>表示。你需要遵守以下规则：

<ul>
	给你一个有效的甲板，仅由战舰或者空位组成。
	战舰只能水平或者垂直放置。换句话说,战舰只能由<code>1xN</code> (1 行, N 列)组成，或者<code>Nx1</code> (N 行, 1 列)组成，其中N可以是任意大小。
	两艘战舰之间至少有一个水平或垂直的空位分隔- 即没有相邻的战舰。
</ul>

<strong>示例 :</strong>

<pre>
X..X
...X
...X
</pre>

在上面的甲板中有2艘战舰。

<strong>无效样例 :</strong>

<pre>
...X
XXXX
...X
</pre>

你不会收到这样的无效甲板- 因为战舰之间至少会有一个空位将它们分开。

<strong>进阶:</strong>

你可以用<strong>一次扫描算法</strong>，只使用<strong>O(1)额外空间，</strong>并且<strong>不修改</strong>甲板的值来解决这个问题吗？

甲板上的战舰
Given an 2D board, count how many battleships are in it. The battleships are represented with <code>'X'</code>s, empty slots are represented with <code>'.'</code>s. You may assume the following rules:

<ul>
You receive a valid board, made of only battleships or empty slots.
Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape <code>1xN</code> (1 row, N columns) or <code>Nx1</code> (N rows, 1 column), where N can be of any size.
At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.
</ul>

<b>Example:</b><br />
<pre>X..X
...X
...X
</pre>
In the above board there are 2 battleships.

<b>Invalid Example:</b><br />
<pre>...X
XXXX
...X
</pre>
This is an invalid board that you will not receive - as battleships will always have a cell separating between them.

<b>Follow up:</b><br>Could you do it in <b>one-pass</b>, using only <b>O(1) extra memory</b> and <b>without modifying</b> the value of the board?