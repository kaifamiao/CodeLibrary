### 思路剖析
#### 🏹 关键词：
- **按位或** $\rightarrow$ 非常简单的想到位运算,以及按位或的性质
- **连续的子数组** $\rightarrow$ 前缀和，后缀和，或者我喜欢称为**复用**(即在数组上记录一段信息，比如A[i]记录从0到i的信息，这时候假如需要某信息就可以在常数时间内进行获取),实际上**连续就代表着一种积累，这和前缀和后缀和的思想不谋而合。**
- 返回可能**结果的数量** $\rightarrow$ 集合或者映射的使用($Set$ or $Map$)
#### 🔑 解题思路:
- ①：初始化,声明$\mathcal{Set}$,用于存储可能结果
- ②：按某种顺序,利用**复用**的思想处理数组
- ③：对产生的结果进行添加
- ④：返回存储的结果数

#### ✍ $\mathcal{Pseudocode}$(first draft)
```
int subarrayBitwiseORs(vector<int>& A) {
    initial Set;
    initial N = len of A; // 简单的初始化

    for i to N: // 对数组进行处理，复用
        for j to N: 
            复用;
            add result to Set; // 添加结果

    return size of Set; // 返回结果
}
```
&emsp; 然后，你按照这种思路去写会发现，**超时了！！**。 实际上你在思考到两重循环以及50000的数据量的时候就应该想到**剪枝!**
#### ✍ $\mathcal{Pseudocode}$(second draft)
```
int subarrayBitwiseORs(vector<int>& A) {
    initial Set;
    initial N = len of A; // 简单的初始化

    for i to N: // 对数组进行处理，复用
        for j to N: 
            if 成立某条件: 剪枝
            复用;
            add result to Set; // 添加结果

    return size of Set; // 返回结果
}
```
#### 🏆实现相关细节:
&emsp;这里只提醒一部分：
- $\mathcal{Q1}$：从头到尾复用，还是从尾到头复用?
- $\mathcal{Q2}$：按位或的性质? 有什么可以帮助你确定复用的顺序？
- $\mathcal{Q3}$：剪枝的条件？ 什么时候确定可以剪枝?

&emsp;先回答$\mathcal{Q2}$,按位或的性质是，**积累下去值是永远不会减小的**
&emsp;再回答$\mathcal{Q3}$,剪枝是当我们确定计算的单调性或规律性之后，当处于一种临界条件 $\rightarrow$ 这条件代表着**之后的结果依据规律是肯定无效的时候则剪枝**(结合按位或，这就是为啥后面代码中，当我们发现到了某位置我们的值仍然没有变化时，我们会选择剪枝)
&emsp;最后回答$\mathcal{Q1}$:
$$
\boxed{
\begin{aligned}
从前到后: &a &\qquad a | b &\qquad a | b | c \qquad {\small 你会发现，一次遍历后原有的信息都丢了}\\
从后到前: &a &\qquad & \\
         &a|b &\qquad b &\\
         &a|b|c &\qquad b|c &\qquad c \qquad {\small 这样所有的信息都保存下来了}\\ 
\end{aligned}}
$$
![image.png](https://pic.leetcode-cn.com/a2f3ad656773e05a9c7801e36b64081a9c1b368050008b98f0d3451bcfb45bbd-image.png)


&emsp;最后这张图，绿色代表了剪枝的情况红色部分代表了判断(**假如两者相同，思考下你可以知道后面也肯定相同**)。
&emsp; 最后附上代码(之所以如此啰嗦，是为了还原思考过程！！，**会思考而不是简单的记忆才能更会做题**！！)
```
class Solution {
public:
    int subarrayBitwiseORs(vector<int>& A) {
        int N = A.size();
        std::unordered_set<int> S;
        if (N < 2) return N;

        for (int i = 0; i < N; ++ i){
            S.insert(A[i]);
            for (int j = i - 1; j >= 0; -- j){
                if ((A[j] | A[i]) == A[j]) break; \\ 剪枝
                A[j] |= A[i];
                S.insert(A[j]);
            }
        }

        return S.size();
    }
};
```
#### 🏹 关键词复盘：
- **按位或** $\rightarrow$位运算及按位或的性质(不断按位或值永远是单增的(非严格)))
- **连续** $\rightarrow$ 前缀和，后缀和，复用的思想(思考从前往后或者从后往前)
- **结果的数量** $\rightarrow$ 简单，Set or Map

淦，每次都忍不住写题解😱