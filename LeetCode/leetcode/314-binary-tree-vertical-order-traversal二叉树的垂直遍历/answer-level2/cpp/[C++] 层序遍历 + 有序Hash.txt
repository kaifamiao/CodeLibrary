该题和我们一般练习的层序、深搜、广搜不太相同。
第一次写题解，字也丑，望轻拍~

# 分析：
如何用我们熟悉的方式解决不熟悉的问题？首先阅读题意，想一下相同点和不同点。
**不同点**：要求按照“竖直”的顺序遍历，并给出每“竖直层”结果。
**相同点**：都要求遍历全部节点。

# 尝试解答
针对“垂直顺序”，尝试用加下标的方式表示这棵树。
![无标题的笔记本 (1)-2.jpg](https://pic.leetcode-cn.com/ad0cc9ffd06388382a63b7daa6de9be249c3324573a5ffd1f43c5eb92c9b8960-%E6%97%A0%E6%A0%87%E9%A2%98%E7%9A%84%E7%AC%94%E8%AE%B0%E6%9C%AC%20\(1\)-2.jpg)
检查符合题目给出的例子。
需要注意的是，应该使用**层序遍历**，保证**深度较小的节点最先被遍历**。

![无标题的笔记本 (1)-3.jpg](https://pic.leetcode-cn.com/76a635259bd210252f02d4e5ba040f6b0269a1fe4f7d9d6d4b2415be92820fd8-%E6%97%A0%E6%A0%87%E9%A2%98%E7%9A%84%E7%AC%94%E8%AE%B0%E6%9C%AC%20\(1\)-3.jpg)

如何保证按照“垂直顺序”组织答案？可以使用带顺序的hash表，表达总答案里的顺序。
![无标题的笔记本 (1)-4.jpg](https://pic.leetcode-cn.com/d28ada0e20cb440bdf42d7ccfd1c2fc6e9b3588b4f7c8b28b55b2098108ba5a0-%E6%97%A0%E6%A0%87%E9%A2%98%E7%9A%84%E7%AC%94%E8%AE%B0%E6%9C%AC%20\(1\)-4.jpg)

注意应该使用map容器，unordered_map虽然查询是O(1)时间复杂度，但是不具备顺序属性。

# 题解

```
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {

private:
    map<int,int> hasht;
    vector<vector<int>> ans;


public:
    vector<vector<int>> verticalOrder(TreeNode* root) {
        if(root == NULL) return ans;

        queue<TreeNode*> q;
        queue<int> state;
        q.push(root);
        state.push(0);

        while(q.size()!=0){
            auto temp = q.front();
            auto temp_state = state.front();
            q.pop();
            state.pop();

            if(hasht.find(temp_state) == hasht.end()){
                vector<int> ans_layer;
                ans_layer.push_back(temp->val);
                ans.push_back(ans_layer);
                hasht[temp_state] = ans.size()-1;
            }
            else{
                ans[hasht[temp_state]].push_back(temp->val);
            }
            if(temp->left != NULL){
                q.push(temp->left);
                state.push(temp_state - 1);
            }
            if(temp->right != NULL){
                q.push(temp->right);
                state.push(temp_state + 1);
            }           

        }

        vector<vector<int>> ordered_ans;
        for(auto &it:hasht){
            ordered_ans.push_back(ans[(it).second]);
        }
        return ordered_ans;
    }
};
```

