先解释下官方的解题步骤的思路，结合底部的代码注释阅读更佳。
*tip：如果没有阅读过官方题解，可跳过步骤说明，直接阅读代码内容，代码注释已经很详尽了。*

步骤说明:
1. 如果想要将数组的划分成三个和相等的子数组，那么这个数组的和必定可以被3整除，换句话说，余数是0。
2. 当数组的和（被除数），子数组个数（除数）都已知时，每个子数组的和（商）就一定可知。
3. **关键点**：当`事先假设这个数组可以划分成三个和相等的子数组时`，则我们**只需求出前两个子数组就行**，因为假设的存在，必然会有第三个数组。这也是官方题解中只有**两个**`while循环`存在的原因。
4. **关键点**：在两个`while循环`的执行顺序之间，还有存在一个`if语句`，这个if判断十分重要。第一个`while循环`的结束原因是因为`第一个子数组的和等于被均分的值`，试想，如果没有符合的子数组，则遍历后的累加值其实就是数组的和。举例，数组`[1, 4, 4]`的和为9，可以划分成3个子数组（余数为0），但是却**无法分割成三个值相等的数组**（`[1], [4], [4]`），不符合题目要求，直接返回`false`。
5. **关键点**：第二个`while循环`的遍历次数最多只进行到小于数组长度减一时，则意味着，数组的末尾，其实是不加入到子数组2和的累加流程当中，因为`事先假设了这个数组可以划分成三个和相等的子数组`,这被排除循环末尾元素，**其实就是第三个子数组的保底元素**，它保证了第三个子数组的存在，使得少判断了一次。
6. 如果不满足第二个`while循环`，则证明程序逻辑执行到现在（自上而下执行），只满足了第一个`while循环`，即只找到一个子数组，不符合题目要求，直接返回`false`即可。

具体代码：
```
var canThreePartsEqualSum = function(A) {
    // 计算出数组A的和
    const SumA = A.reduce((per, next) => per + next, 0);
    
    if (SumA % 3 !== 0) {
        // 如果余数不等于0，说明没法分成3等份
        return false;
    }

    // 目标值，即每一等份需要凑成的值
    const Target = SumA / 3;
    // 当前累加的和
    let currentSum = 0;
    // 第一个和为Target的数组的索引终止位置
    let i = 0;

    // 递归查找最小的终止索引i
    while(i < A.length) {
        // 累计计算截至到当前索引i的数组和
        currentSum += A[i];

        // 当当前数组和等于目标值时
        if(currentSum === Target) {
            // 退出循环
            break;
        }
        // 否则则继续进行累加
        i++;
    }

    /*
    关键点1
    这一步的判断，其实本质上是比较 数组A的和 与 其值的三分之一
    因为在关键点1中，
    如果是通过break语句退出循环的，则二者必然相等，不可能执行本处if代码块里的内容。
    反之，如果不是通过break语句退出的，
    则意味着整个数组A的项值都被累加进入变量currentSum中
    */
    if (currentSum !== Target)  {
        /*
        返回false的涵义：
        请牢记，currentSum是数组A的总和（在if代码块内时），
        Target是数组A总和的三分之一
        举例：
        数组A的和为9，9可以被分成三等份，但是不意味着，数组A就可以被等分成3个值为3的子数组，
        例如： 当数组A为[1,4,4]时，总和为9，能被3整除，可分成3份后每份值都不等（[1], [4], [4]）
        */
        return false;
    }
    /*
    第二个数值的终止索引，
    由于从索引0到索引i的值以满足Target，
    则第二个数组的起始值该为i+1
    */
    let j = i + 1;

    /*
    关键点2
    while循环最多只到j + 1 < A.length为止
    因为至少需要留一个项数为1的数组来满足等份三份的需求
    */
    while(j + 1 < A.length) {
        currentSum += A[j];
        if (currentSum === Target * 2) {
            /*
            关键点3
            如果进入了这个if代码块内，
            则证明已经有2个数组的和等同于Target了
            又因为预先保证了至少预留一位的数组（while( j + 1 < A.length)）
            所以一共有3个数组的满足了Target了，
            所以可以直接返回true
            */
            return true;
        }
        j++;
    }

    /*
    这里的返回false是因为满足了第一个while循环，没有满足第二个while循环
    即只有一个数组的和等于Target
    */
    return false;
};
```

