recover-a-tree-from-preorder-traversal
我们从二叉树的根节点 <code>root</code>开始进行深度优先搜索。

在遍历中的每个节点处，我们输出<code>D</code>条短划线（其中<code>D</code>是该节点的深度），然后输出该节点的值。（<em>如果节点的深度为 <code>D</code>，则其直接子节点的深度为 <code>D + 1</code>。根节点的深度为 <code>0</code>）。</em>

如果节点只有一个子节点，那么保证该子节点为左子节点。

给出遍历输出<code>S</code>，还原树并返回其根节点<code>root</code>。



<strong>示例 1：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/12/recover-a-tree-from-preorder-traversal.png" style="height: 200px; width: 320px;"></strong>

<pre><strong>输入：</strong>&quot;1-2--3--4-5--6--7&quot;
<strong>输出：</strong>[1,2,5,3,4,6,7]
</pre>

<strong>示例 2：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/12/screen-shot-2019-04-10-at-114101-pm.png" style="height: 250px; width: 256px;"></strong>

<pre><strong>输入：</strong>&quot;1-2--3---4-5--6---7&quot;
<strong>输出：</strong>[1,2,5,3,null,6,null,4,null,7]
</pre>

<strong>示例 3：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/12/screen-shot-2019-04-10-at-114955-pm.png" style="height: 250px; width: 276px;">

<pre><strong>输入：</strong>&quot;1-401--349---90--88&quot;
<strong>输出：</strong>[1,401,null,349,88,90]
</pre>



<strong>提示：</strong>

<ul>
	原始树中的节点数介于 <code>1</code> 和 <code>1000</code> 之间。
	每个节点的值介于 <code>1</code> 和 <code>10 ^ 9</code> 之间。
</ul>

从先序遍历还原二叉树
We run apreorderdepth first search on the <code>root</code> of a binary tree.

At each node in this traversal, we output <code>D</code> dashes (where <code>D</code> is the <em>depth</em> of this node), then we output the value of this node.<em>(If the depth of a node is <code>D</code>, the depth of its immediate child is <code>D+1</code>. The depth of the root node is <code>0</code>.)</em>

If a node has only one child, that child is guaranteed to be the left child.

Given the output <code>S</code> of this traversal, recover the tree and return its <code>root</code>.



<strong>Example 1:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2019/04/08/recover-a-tree-from-preorder-traversal.png" style="width: 320px; height: 200px;" /></strong>

<pre>
<strong>Input: </strong><span id="example-input-1-1">&quot;1-2--3--4-5--6--7&quot;</span>
<strong>Output: </strong><span id="example-output-1">[1,2,5,3,4,6,7]</span>
</pre>

<div>
<strong>Example 2:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2019/04/11/screen-shot-2019-04-10-at-114101-pm.png" style="width: 256px; height: 250px;" /></strong>

<pre>
<strong>Input: </strong><span id="example-input-2-1">&quot;1-2--3---4-5--6---7&quot;</span>
<strong>Output: </strong><span id="example-output-2">[1,2,5,3,null,6,null,4,null,7]</span></pre>
</div>

<div>


<div>
<strong>Example 3:</strong>

<span><img alt="" src="https://assets.leetcode.com/uploads/2019/04/11/screen-shot-2019-04-10-at-114955-pm.png" style="width: 276px; height: 250px;" /></span>

<pre>
<strong>Input: </strong><span id="example-input-3-1">&quot;1-401--349---90--88&quot;</span>
<strong>Output: </strong><span id="example-output-3">[1,401,null,349,88,90]</span>
</pre>
</div>



<strong>Note:</strong>

<ul>
	The number of nodes in the original tree is between <code>1</code> and <code>1000</code>.
	Each node will have a value between <code>1</code> and <code>10^9</code>.
</ul>
</div>
