题目要求最长回文串的长度，按照回文的定义，除了奇数回文最中间的那个字符出现次数为奇数，其他字符的出现次数均为偶数。比如'bab'，中间的'a'只出现一次，'b'出现两次。具体思路如下
1. 将字符串转换为集合，剔除重复项，减少循环次数；
2. 遍历集合中的元素，计算该元素在字符串中出现的次数，如果为偶数，回文长度加上出现的次数；如果为奇数，回文长度加上出现的次数-1
3. 同时考虑奇数的回文的情况，如果有字符出现奇数次，说明可以构成奇数回文，回文长度+1
```Python
class Solution:
    def longestPalindrome(self, s: str) -> int:
        res = 0
        flag = 0 # 记录是否出现奇数次数
        for i in set(s):
            #次数为偶数
            if s.count(i) % 2 == 0: 
                res += s.count(i)
            #次数为奇数
            else:
                res += s.count(i) - 1
                flag = 1
        if flag == 1: # 出现了奇数次数
            res += 1
        return res
```
