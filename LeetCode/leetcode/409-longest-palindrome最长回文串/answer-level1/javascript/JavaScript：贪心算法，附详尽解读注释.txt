首先，读题。

给定一个包含大写字母和小写字母的字符串，找到通过这些字母**构造**成的最长的回文串。

请注意！！！

题目的意思是：利用这个字符串中的所有字母来**构造**最长回文串，是**构造**！是**可以改变字母出现的位置顺序**的！字母位置可以任意移动。而不是在顺序不变的情况下找出最长的回文串。

作者一开始粗心大意没理解题意，直接上手做题吃大亏（捂脸。

现在来解释下，什么是回文？

回文串是一个正着读和反着读都一样的字符串。

来看两个不同的回文例子：
- `AB|BA`。仅看字母，我们发现，`AB`和`BA`根据中心竖线`|`对称，这个回文串长度为4，每个字母出现的次数都是偶数。
- `ABCBA`。我们发现，`AB`和`BA`根据字母`C`对称，这个回文串长度为5，除了对称中心的字母`C`仅出现过一次外，中心两边的字母出现次数都是偶数。

所以我们可以总结出，如果想要**构造**出一个回文串，**除了回文串中心的字母只能出现一次外（如果有中心字母的话），中心两边的字母还需对称出现，即出现偶数次**。

解决了构造回文串这一关键点，题目中还有一个特别之处：**仅出现大写字母和小写字母**。

如果对英文字母的Unicode编码熟悉的话，可以知道，字母`A`的Unicode编码是65（十进制），字母`Z`的Unicode编码是90（十进制），字母`a`的Unicode编码是97（十进制）,字母`z`的Unicode编码是122（十进制）。

可以发现它们是Unicode编码是连续（中间的91到96并不重要），即有序的，所以可以使用**数组**来存放它们，每个数组项的值就是每个字母出现的次数。

这种情况下，使用数组来存储，会比使用哈希表（`Map`）来存储来得更高性能，哪怕Unicode编码的91到97我们无需使用。

且，在JavaScript世界中，可以使用`String.prototype.charCodeAt()`这一API来获取Unicode编码单元。

所以，我们可以这样来统计每个字母出现的次数：

```
/*
A-Z,a-z字母出现次数的存放数组，默认每个字母出现0次
122-65=57，还需加1来存放最后的小写字母z，故数组长度为58
*/
let charTimeAry = new Array(58).fill(0);
  
// 遍历字符串
for(let char of s) {
    /*
    统计每个字母出现的次数
    65是大写字母A的Unicode编码，这样可以从索引0开始计数，减少数组长度
    */
    charTimeAry[char.charCodeAt() - 65] += 1;
}
```
下面是完整的代码：
```
/**
 * @param {string} s
 * @return {number}
 */
 var longestPalindrome = function(s) {
     /*
     A-Z,a-z字母出现次数的存放数组，默认每个字母出现0次
     122-65=57，还需加1来存放最后的小写字母z，故数组长度为58
     */
     let charTimeAry = new Array(58).fill(0);
     
     // 遍历字符串
     for(let char of s) {
         /*
         统计每个字母出现的次数
         65是大写字母A的Unicode编码，这样可以从索引0开始计数，减少数组长度
         */
         charTimeAry[char.charCodeAt() - 65] += 1;
     }

     // 最大长度
     let maxSize = 0;

     // 遍历次数数组
     for(let time of charTimeAry) {
         /*
         关键点，计算长度
         如果字符出现次数是偶数，则说明可以组成回文（对称），故该偶数的次数需计入到最大长度中
         例如，字母A出现3次，则其中的偶数次可以构造回文的一部份，即可以用 3/2 来获取有几个偶数部分。
         得出偶数部分的个数后，再乘以2，获取字母可构成回文的次数，即 (3 / 2) * 2
         又因在JavaScript中，Number类型是64位双精度浮点型，故需利用ParseInt()这一API来取整
         */
         maxSize += parseInt((time / 2), 10) * 2; 
     }

     // 如果计算出的长度小于字符串长度，则说明必然是奇数长度的回文，故长度需再加一
     return maxSize < s.length ? maxSize + 1 : maxSize;
};
```
