**有任何不懂的请留言，我会尽力解答**

[@Tristan](/u/tristan/) 参考了该老哥的解答，重新记录一下

# 题目:
给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。

在构造过程中，请注意区分大小写。比如 "Aa" 不能当做一个回文字符串。

注意:
假设字符串的长度不会超过 1010。

输入:
"abccccdd"

输出:
7

解释:
我们可以构造的最长的回文串是"dccaccd", 它的长度是 7。

# 思路：
组回文字符串的过程，其实我们可以看作是从一个中心往旁边对称放字符的过程。有2种回文串，如：dccaccd，ddccccdd，可以观察到，奇数的回文串最中间就1个字符，两侧都是偶数；偶数的回文串全部都是偶数组成。

那么，我们就可以先统计字符串每个字符出现的数量：
1.所有出现偶数次的字符就可以全部放在两侧
2.出现奇数次的字符，比如3个a，1个a可以放在中间，2个a分别放在两侧，即奇数次的字符数量减1，剩余的偶数次都可以加到结果里
3.如果所有字符的数量都是偶数，那么把这些偶数加起来就是回文串的长度了；如果其中一个字符的数量是奇数，那么这个奇数要减去1，然后加到结果里

```
class Solution:
    def longestPalindrome(self,s):
        count = collections.Counter(s)
        # 统计每个字符出现的数量

        center = 0 # 中间的字符数量默认是0
        res = 0 # 结果默认是0
        for char in count:
            if count[char] % 2 == 0:
                # 判断是否是奇数，如果是就进行下一步

                center = 1 
                # 因为是奇数，所以随便取1个字符放在中间，也就是center=1

                res = res + count[char] - 1
                # 结果累加，加上奇数-1
                 
            else:
                res = res + count[char]
        return res + center
```