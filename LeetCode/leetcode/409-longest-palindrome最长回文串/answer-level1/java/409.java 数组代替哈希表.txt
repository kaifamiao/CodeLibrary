### 解法

```java
public int longestPalindrome(String s) {
        int[] count = new int[58]; // 大小写字母中间还有6个其它字符
        for (char c : s.toCharArray())
            count[c - 65] += 1;
        int countOdd = 0;
        for (int i : count) {
            if (i % 2 != 0)
                countOdd++;
        }
        if(countOdd == 0)
            return s.length();
        return s.length() - countOdd + 1;
    }
```

思路分析：

* 本题是可以将所给字符串的所有字母拆开来按我们设置的顺序来构成回文字符串。由回文字符串的定义可以知道，回文字符串具有关于中轴线轴对称的性质。所以回文字符串除了中间字符以外的所有字符都需要成对出现。
* 也就是说，`s`中的某个字符，如果出现了奇数次`t`，那么该字符可以用`t - 1`个去构造回文串（`t - 1`为偶数，成对了）；如果出现了偶数次，都可以用于构造回文串。
* 所以，回文串的长度只需要用`s.length()`减去出现了奇数次的字符串的数目再+1。加一是因为回文中心不需要成对出现，可以运行一个字符出现奇数次。不过有一种情况：所有字符都出现了偶数次，那么所有字符都可以用于构造回文串，回文串长度即为`s.length()`
* 由此可以发现，我们需要去判断每一个字母出现了奇数次还是偶数次，这就需要对每个出现字母进行计数。
    * 经典方法：对于有限字母，可以用`int[]`代替`HashMap`，（本题只会出现大小写字母）以字符减去`a`为键，出现次数为值。
    * `int[]`的长度设定为58是因为，大小写字母之间还有6个其余字符。
* 统计完每个字母的出现次数，就判断有多少个字母出现了奇数次。按前文逻辑`countOdd == 0`，所有字符都出现了偶数次，回文串长度即为`s.length()`。否则回文串的长度为`s.length() - countOdd + 1`
* 时间复杂度为$O(n)$，空间复杂度为$O(1)$。

运行结果：

* 执行用时 :1 ms, 在所有 Java 提交中击败了100.00%的用户
* 内存消耗 :41.3 MB, 在所有 Java 提交中击败了5.22%的用户

更多LeetCode题解请看我的[github](https://github.com/ustcyyw/yyw_algorithm)，地址https://github.com/ustcyyw/yyw_algorithm。还有别的小项目也很好玩~卑微求个小星星💖