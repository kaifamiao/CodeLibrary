### 解题思路
1. 给出字符串并非需要你去把字符串排列出来，不要被引入错误的方向

2. 事实上我们只需要去对字符串里的字母的数量进行判断即可

3. 注意一点：对于奇数个个数的字母可以只取其偶数个数！为保证最长，取个数-1即可

4. 判断过程：
    1. 对于偶数个数的字母，个数直接加到结果里；
    2. 对于奇数个数的字母，假设有n个（n为奇数），则算n-1到结果里，同时最后结果里算上置为1的flag（根据中心对称的思路）。
### 代码

```java
class Solution {
    public int longestPalindrome(String s) {
        int max = 0, flag=0;        //max存储最长结果，flag标志是否有奇数个个数的字母
        int[] a = new int[58];      //长度至少为58（122-65），保证大小写字母均能写入
        for(int i=0; i<s.length(); ++i) {
            ++a[s.charAt(i)-'A'];
        }
        for(int i=0; i<a.length; ++i) {
            if(a[i] % 2 == 0) {     //偶数个数直接加入到max
                max += a[i];
            } else {                //奇数个数，进行简单的判断
                flag = 1;           //首先置flag=1，至少有一个在回文字符串的正中间
                if(a[i] != 1) {
                    max += a[i]-1;  //奇数个个数算成偶数个，加入到max
                }
            }
        }
        return max+flag;
    }
}
```