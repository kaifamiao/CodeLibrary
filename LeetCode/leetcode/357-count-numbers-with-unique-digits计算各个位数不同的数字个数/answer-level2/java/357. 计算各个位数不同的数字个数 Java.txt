当 n = 0 时, [0,10^0) 范围内不同数字只有 1 种, f(0) = 1; 
当 n = 1 时, [0,10^1) 范围内不同数字有 10 种, f(1) = 10; f(1) = f(0) + 9 ;
当 n = 2 时, [0,10^2) 范围内不同数字有 91 种, f(2) = 91; f(2) = f(1) + 9 * (10 - 1);
当 n = 3 时, [0,10^3) 范围内不同数字有 739 种, f(3) = 739; f(3) = f(2) + 9 * (10 - 1) * (10 - 2);
......
当 n > 10 时, [0,10^n) 范围内只有[0,10^10) 范围内有不同数字，[10^10,10^n)范围内必有重复数字。 则f(n) = f(10);


以n = 3 对于上述公式加以解释, 可以将 [0,10^n) 分成两部分: 
1) 小于三位数的部分 [0,10^(3 - 1)), 这部分即是 f(2);
2) 等于三位数的部分 [10^(3 - 1),10^3), 对于一个三位数 第一位有 9 种选择(不能为 0 )), 
第二位有 9 种选择(不能为第一位的数)), 第三位有 8 种选择(不能为第一、二位的数)), 这部分即是 9 * (10 - 1) * (10 - 2);


```
class Solution {
    public int countNumbersWithUniqueDigits(int n) {
        if(n > 10) return countNumbersWithUniqueDigits(10);

        int ans = 1,temp = 9;
        for(int i=0; i<n; i++){

            if(i > 0)temp *= (10 - i);

            ans += temp;
        }
        return ans;
    }
}
```
