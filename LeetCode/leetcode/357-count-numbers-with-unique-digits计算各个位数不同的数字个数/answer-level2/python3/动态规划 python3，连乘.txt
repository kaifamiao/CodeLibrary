### 解题思路
和阶乘很像，对于一个n位数来说（n>=2），第一位（即最高位）可以取9种不同的数字，
第二位（即次高位）可以取最高位取过的数字以外的数字，故有9种选择（10-1=9），
次次高位以此类推有8种不同的选择...

以上就解决了对于相同位数的数字中每一位均不同的数字个数的问题

题目给出的n代表数字位数可以取的最大值，要求的是从一位数开始，
所以我们把所有不同位数的数字中 每位相异的数字个数 求和
即为所求结果

对应的动态转移方程：
dp[i] = dp[i-1] + [10^(i-1),10^i) 
dp[i] 表示,在区间[0,10^i)内不存在相同数字位的 数字的个数

### 代码

```python
class Solution:
    # 如果对每个数都判断是否每一位都不相同，效率会很低
    # dp[i] = dp[i-1] + [10^(i-1),10^i) 
    # dp[i]表示,在区间[0,10^i)内不存在相同数字位的数字的个数
    # 怎样计算区间 [10^(i-1),10^i) 内的值，感觉有点排列组合的意思
    def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0:
            return 1
        # 阶乘问题
        # 如果超过10位必定不存在各位数字都不相同的数
        min_val = min(n,10)
        dp = [0]*(min_val+1)
        dp[1] = 10
        mul = 9
        for i in range(2,min_val+1):
            mul *= 11-i
            dp[i] = dp[i-1] + mul
        print(dp)
        return dp[-1]
```