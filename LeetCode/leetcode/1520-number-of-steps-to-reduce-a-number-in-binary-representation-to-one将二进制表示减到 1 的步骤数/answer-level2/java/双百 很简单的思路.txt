
首先搞清楚运算规则，并通过规则来简化代码。
因为是对二级制字符串进行处理，并且涉及到除以2，我们可以很自然的联想到二进制移位，所以先将String转为字符数组
**
规则1：如果当前数字为偶数，则将其除以 2 。**
--> 从尾部开始遍历，最开始 r=chars.length-1,如果当前为chars[r]=='0'，则r--,步数+1，代表规则1.
**
规则2：如果当前数字为奇数，则将其加上 1 。**
-->如果当前为chars[r]=='1'，则需要加1，我们可以想一想二进制加一规则，1101+1-->1110  111-->1000,将最右的一个零变为1，0后面所有的1变为0，所有我们在计算时不需要真正意义上的加1，只需要从右到左遍历与当前1连着的1，并将遇到的第一个0置为1，如11011-->111|00，这一共需要三步，移位2步，置1一步，但是我们并不能确定一定会遇到0，因为会出现111的情况，所有我们还需要对r进行判断，当r<0,则返回。因为当前值已经为1了，例111-->1|000(因为此时数组只剩三位了，111是三位，所以只剩三位)，所以其实最开头的1并不会存在，当r<0时，我们已经平移了三位，再加上置0的一步，一共四步。7-->8-->4-->2-->1一共四步。

```
class Solution {
    public int numSteps(String s) {
        char[] chars=s.toCharArray();
        int r=chars.length-1;
        int step=0;
        while(r>=1){
            if(chars[r]=='0'){
                step+=1;
                if(--r==0) return step;
            }else {
                step++;
                while (r>=0&&chars[r]=='1'){
                    step++;
                    r--;
                }
                if(r<0) return step;
                chars[r]='1';
            }
        }
        return step;
    }
}
```
