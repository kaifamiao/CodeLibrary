思路：
从后往前遍历，判断当前位的字符以及是否有进位。
（1）有进位
如果当前位是'0'，那么这时该位变成'1'，消除该位需要两步（先加1，后除以2），传给高位的进位c=1；
如果当前位是'1'，那么进位后变成'0'，消除该位需要一步（除以2），传给高位的进位c=1.
（2）没有进位
如果该位是'1'，那么消除需要两步（先加1，后除以2），传给高位的进位是c=1；
如果该位是'0'，消除只需要一步（除以2），传给高位的进位是c=0.
最后考虑第一位，因为如果没有进位的话这位直接就是1，不需要任何操作；如果有进位还需要再多一步操作（除以2）。

代码如下：
```
class Solution {
public:
    int numSteps(string s) {
        int res = 0;
        bool c = 0;
        for(int i = s.size() - 1; i > 0; --i) {
            if(c) {
                if(s[i] == '0') res += 2, c = 1;
                else ++res, c = 1;
            }
            else {
                if(s[i] == '0') ++res, c = 0;
                else res += 2, c = 1;
            }
        }
        if(c) ++res;
        
        return res;
    }
};
```
