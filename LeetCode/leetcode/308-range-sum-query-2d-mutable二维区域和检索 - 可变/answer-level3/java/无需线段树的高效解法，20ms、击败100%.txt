# 思路
1. 新建一个数组$rowSumArr$来存放各个位置$(i, j)$ 的前$j+1$项的和，即从$(i, 0)$ 到 $(i, j)$各个元素的和。
2. 若更新（执行$update$方法）的时候，只需要更新要被更新位置$(i, j)$所在行的后面的元素的$rowSumArr$的值即可。
3. 若要计算二维区域和（执行$sumRegion$方法）的时候，只要求得二维区域每一行的元素之和，之后累加即可。这里刚好可以利用到前面保存的$rowSumArr$上的值，每一行的和只要$O(1)$的时间复杂度即可，整体只要$O(n)$时间复杂度。具体见如下代码：

```java
class NumMatrix {

        private int[][] matrix;
        private int[][] rowSumArr;  // 保存每个元素(i, j)在第i行的前j+1项的和。
        private int rowCount;
        private int colCount;

        public NumMatrix(int[][] matrix) {
            this.matrix = matrix;
            if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
                return;
            }

            rowCount = matrix.length;
            colCount = matrix[0].length;
            rowSumArr = new int[rowCount][colCount];
            for (int i = 0; i < rowCount; i++) {
                rowSumArr[i][0] = matrix[i][0];
                for (int j = 1; j < colCount; j++) {
                    rowSumArr[i][j] = rowSumArr[i][j-1] + matrix[i][j];
                }
            }
        }

        public void update(int row, int col, int val) {
            matrix[row][col] = val;
            int fromCol = col;
            if (col == 0) {
                rowSumArr[row][col] = matrix[row][col];
                fromCol = col + 1;
            }
            for (int j = fromCol; j < colCount; j++) {
                rowSumArr[row][j] = rowSumArr[row][j-1] + matrix[row][j];
            }
        }

        public int sumRegion(int row1, int col1, int row2, int col2) {
            int sum = 0;
            for (int i = row1; i <= row2; i++) {
                sum += col1 == 0 ? rowSumArr[i][col2] : rowSumArr[i][col2] - rowSumArr[i][col1-1];
            }
            return sum;
        }
    }
```

# 复杂度
**时间复杂度**：$update$和$sumRegion$方法单次的时间复杂度都是$O(n)$
**空间复杂度**：$O(n*n)$