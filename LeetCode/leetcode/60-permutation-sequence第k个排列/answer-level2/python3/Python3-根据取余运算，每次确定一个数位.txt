### 解题思路

对第一个位置, 以 `1` 开头的排列数有 `(n-1)!` 个, 以 `2` 开头的排列数也有 `(n-1)!` 个...

根据此规律, 可以首先通过计算 `k / (n-1)!` 来得到第一个数位应该是哪个数字, 然后将其插入到第一位,剩下的数字按原顺序排列. 之后令 `k = k % (n-1)!`

对于第二个位置, 同理, 可以计算 `k / (n-2)!` 得到在剩下的数字中, 此位置应该是哪个数字, 之后再次将其放置在开头. 令 `k = k % (n-2)!`

对于边界条件, 由于传入的参数 `k` 是以 `1` 开头的, 而计算过程中使用的数组下标都是从 `0` 开始的, 因此一开始时将 `k` 减 `1`

若 `n = 4`, 在循环开始之前:

- 变量 `s` 初始为: `['1', '2', '3', '4']`
- 变量 `l` 初始为: `[ 6 ,  2 ,  1 ,  1 ]`

### 代码

```python3
class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        s = [str(i) for i in range(1, n+1)]
        l = [1]
        for i in range(1, n):
            l.append(i*l[i-1])
        l.reverse()
        k -= 1
        for i in range(n-1):
            r = k // l[i]
            s.insert(i, s.pop(i+r))
            k = k % l[i]
        return "".join(s)
```