题目求的是获得某一个序号的排列。一种方法是把所有的排列列举出来，再从里面寻找。

但是通过观察排列的规律，可以看出如果每次从待取序列中获得一个数，接下来继续循环即可获得完成的题目需要的排列，那么第一个数该怎么获取，这是解决的关键。
我们可以将所有的排列分为首位为1，首位为2，首位为3....首位为n的n中组合，其中每组的数量是(n-1)!,那么答案序列的第一个数很明显就是待选取序列中的第k/[(n-1)!]个，因为如果k=(n-1)!*4+1,我们可以直接跳过首位为1,2,3,4的这四组排列。将5添加到答案的首位，并将带选取的序列中的5删除，更新k的值为k=k%(n-1)!,并且此时的n应该为n=n-1，因为已经取出了一个数作为首位了，接下来就是按照上述循环，直至n=0，就可以得到答案。


因为题目答案序列是从1开始排列，代码中用string保存带选取序列，序列是从下标0开始，因此要将k减去1。
```
代码块
string getPermutation(int n, int k)
{
	string source = "";
	for(int i = 1;i<=n;i++)
	{
		source += '0'+i;
	}
	string result = "";
	k = k-1;
	while(n>0)
	{
		int sum = 1;
		for(int j = 1;j<=n-1;j++)
		{
			sum *= j; 
		}
		result += source[k/sum];
		source = source.substr(0,k/sum) + source.substr(k/sum+1,source.length()-k/sum-1);
		k = k%sum;
		n--;
	}
	return result;
}
```
