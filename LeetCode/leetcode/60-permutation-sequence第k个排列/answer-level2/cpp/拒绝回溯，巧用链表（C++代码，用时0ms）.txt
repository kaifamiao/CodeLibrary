加标签的时候找了很久链表，不得不说，确实是第一次在leetcode的与链表无关的题目中使用链表。
先声明一下，本人新手小白，第一次写题解，求各位看官轻喷，欢迎大神指点交流~

**思路分析：**

虽然题目中给的标签是回溯算法，题解中也大多是使用回溯算法，但是细想一下发现，与其得到给定集合的**全排列**，倒不如通过第$k$个排列的**生成方式**，**直接获得**第$k$个排列。好像说的有点抽象，我们接下来来看一个栗子。

**举个栗子：**

假设现在$n=3$，$k=3$，那么我们如何**直接**获得第$k$个排列呢？我们的方法是，**一位一位地**获取第$k$个排列中的所有元素。

比如说，在现在的假设下，我们怎么知道当$n=3$时，第$3$个排列的第一个元素是什么呢？很简单，由于**集合中的元素没有重复，每一个元素开头的排列的数量均相同，且均为**$(n-1)!$。由此，我们可以得知，$1$开头的排列总数为$2!=2$，同理$2,3$开头的排列总数也都为$2$。因此，第$3$个排列的第一位应当是$2$。

当确定了第一位为$2$之后，我们首先需要做的就是**从集合中去掉**$2$，集合中剩下的元素个数就变为了$n-1$。同时，还要从$k$中减去$(n-1)!$，即只关注第一位为$2$的排列。

接下来，我们就**重复上面的步骤**，直到最后一位。由于举的栗子的数较小，这里面有$2$点需要注意的：
```
1. 在确定一位之后，如果这一位的数字排在当前集合的第m个，则需要从k中减去m*(n-1)!；
```
```
2. 确定这一位的数字，是寻找当前集合中的第k个数字，而不是k。
```

**代码实现：**

话不多说上代码：
```
// 计算阶乘
int factorial (int n) {
    int res = 1;
    for (int i = 2; i <= n; i++) {
        res *= i;
    }
    return res;
}

class Solution {
private:
    list<char> ls;
    int this_k;
    int get_k (int n) {  // 获取需要第几个元素开头的排列，假设还剩n个数
        int tot = factorial(n-1);
        int res = 0;
        while(this_k > tot) {
            res++;
            this_k -= tot;
        }
        return (res + 1);
    }
    
    char get_list_k (int k) {  // 获取链表中第k个元素
        auto it = ls.begin();
        for (int i = 0; i < k - 1; i++) {
            it++;
        }
        char res = *it;
        ls.erase(it);
        return res;
    }

public:
    string getPermutation(int n, int k) {
        this_k = k;
        string res = "";
        for (int i = 1; i <= n; i++) {
            ls.push_back(48 + i);
        }
        for (int i = n; i >= 1; i--) {
            res += get_list_k(get_k(i));  // 在字符串末尾添加新位
        }
        return res;
    }
};
```

**复杂度分析：**

粗略来看，该算法的时间复杂度和空间复杂度均为$O(n)$。但是，细想之下，每次获取链表中第$k$个元素也需要时间。

**补充说明：**

看了一些题解之后，还想做一些补充说明：
1. 题解中有提到对$1,2,3,……,n$的阶乘建立Hash表，在运算中直接取用。我之所以没有用这种方法，是因为这也需要额外$O(n)$的空间。
2. 其实本身自己也想到，其实不需要用到链表，直接用vector也可以实现，且可以将查找第k个元素的时间降为$O(1)$。但是，由于不熟悉vector的erase接口如何实现及其复杂度如何，因此没有选择用vector实现。

**上图：**

上图提交结果，说实话还挺激动的~
![1.png](https://pic.leetcode-cn.com/1faf20b5b57fbdcbe321cf7e9c63e8479c4136405898bc6b1ebf6258cc53fac7-1.png)

欢迎大家指正，谢谢！