首先，如果单看例子中给的例子是很难明白格雷码的构造规律的，我尝试着递归了几下，都失败了。
因此，我查了下格雷码的百度百科[1](https://baike.baidu.com/item/%E6%A0%BC%E9%9B%B7%E7%A0%81/6510858?fr=aladdin)
里面是这么解释的：
```
递归生成码表
这种方法基于格雷码是反射码的事实，利用递归的如下规则来构造：
1位格雷码有两个码字
(n+1)位格雷码中的前2n个码字等于n位格雷码的码字，按顺序书写，加前缀0
(n+1)位格雷码中的后2n个码字等于n位格雷码的码字，按逆序书写，加前缀1
n+1位格雷码的集合 = n位格雷码集合(顺序)加前缀0 + n位格雷码集合(逆序)加前缀1
```
于是我直接构造数组，然后用刷表法，从上一阶(n-1)的格雷码，递推第n阶的格雷码，类似于动态规划。
下面是代码：由于格雷码的个数是按指数增长的，我估计不会太大，随手写了个12，如果小了把12修改下就行
```
vector<int> grayCode(int n) {
        if(n==0)
            return {0};
        vector<vector<int>> vec(12);
        for(int i=0;i<vec.size();i++)
        {
            vec[i].resize(pow(2,i));
        }
        vec[1][0]=0,vec[1][1]=1;
        for(int i=2;i<=n;i++)
        {
            for(int j=0;j<pow(2,i-1);j++)
            {
                vec[i][j]=vec[i-1][j];
            }
            for(int j=pow(2,i-1);j<pow(2,i);j++)
            {
                int num=vec[i][pow(2,i)-1-j];
                num=num|(1<<(i-1));
                vec[i][j]=num;
            }
        }
        return vec[n];
    }
```

