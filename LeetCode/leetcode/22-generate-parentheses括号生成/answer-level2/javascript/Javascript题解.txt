[力扣JS题解](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)   

[力扣22.括号生成。](https://leetcode-cn.com/problems/generate-parentheses/submissions/)

这一题也是利用回溯的思路，但与普通回溯不同的是，在回溯过程中需要保证括号的有效性，因此在判断是否添加右括号时，需要判断当前存在的右括号的数目是否小于左括号的数目。


```javascript
/**
 * @param {number} n
 * @return {string[]}
 */
var generateParenthesis = function(n) {
    let res = [];
    help(res, "", 0, 0, n);
    return res;
};

function help(res, cur, open, close, n) {
    if (cur.length === 2 * n) {
        res.push(cur);
        return;
    }
    
    if (open < n) {
        help(res, cur + "(", open+1, close, n)
    }
    if (close < open) {
        // 为保证括号有效，闭合括号的出现次数必须比开始括号的次数少
        help(res, cur + ")", open, close+1, n);
    }
}
```