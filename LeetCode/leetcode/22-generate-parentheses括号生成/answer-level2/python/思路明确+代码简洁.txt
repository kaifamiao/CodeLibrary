# 解题思路
    
   我们可以一个个的括号（包括正括号和反括号两种）试着加上去，如果已经不符合组合括号的规则了，则回到上一次放括号之前（就是所谓的回溯），继续遍历括号（正和反两种），如果当前步数的两种情况都已经遍历完了也应该回溯到上一步。直到生成的括号长度为2n，则可以写入到结果之中。

   *那么现在就有一些细节的问题：*
   1.如何判别当前进行到哪一步了？我们可以用当前括号组合的长度来作为依据
   2.上面说到的组合括号的规则有哪些？我们可以从题目例子中发现规律：进行到任何一步时，①正括号或者反括号的数量都不能大于n个②反括号的数量都不能超过正括号的数量
# 算法流程
   dfs回溯：
   - 判断是否满足组合括号的规则，不满足则返回
   - 判断生成的括号长度（步数）是否已经达到2n，达到了则写入结果并返回
   - 试着加正括号
   - 试着加反括号
   
   初始化
   调用dfs

# 代码

```python3
class Solution:
    def generateParenthesis(self, n):
        def dfs(Pcomb, x, y): #Pcomb为当前括号组合，x为正括号的数量，y为反括号的数量
            if x > n or y > n or y > x:
                return
            if len(Pcomb) >= 2*n:
                res.append(Pcomb[:])
                return
            dfs(Pcomb+"(", x+1, y)
            dfs(Pcomb+")", x, y+1)
        res = []
        dfs("", 0, 0)
        return res
```