### 解题思路
这道题可以理解为，需要确定 一个长度为 n 的字符串，字符串由"(" 和 ")" 组成。
要求我们收集所有的有效字符串。

因为字符串的每一位都可能是 "(" 或 ")"，写出有效的括号组合也就是需要不断向其中添加左括号或者右括号。
所以，使用DFS是一个比较好的思路。
DFS的一般套路是利用递归，不断层层递进。这里我们以一个空字符串开始，不断向其中写入括号，最终得到结果。 

不是所有的组合都是有效的，我们可以发现，如果 ")" 比 "(" 多，则组合是不会成立的。

### 代码

```python3
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        ret = []
        def dfs(cur, l, r):
        '''
        cur : 我们最终要得到的括号组合
        l: 左括号的剩余
        r：右括号的剩余
        '''            

            # 迭代终止的条件：括号都用光了
            if l == r == 0:
                ret.append(cur)
            
            # 向cur中添加括号，这里有两个分支：添加左括号，添加右括号
            if l > 0:
                # 只要有左括号，就可以放进去
                dfs(cur+"(", l-1, r)
            if r > 0 and r > l:
                # 右括号需要讲究一些，因为如果cur中的右括号比左括号多，则组合不会生效。所以剩余的右括号要多于左括号的时候才可以添加
                dfs(cur+")", l, r-1)
        
        dfs("", n, n)
        return ret
```