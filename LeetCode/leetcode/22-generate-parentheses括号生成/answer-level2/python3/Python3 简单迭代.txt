### 解题思路
了解题意后，整理3个要点：
1. n对括号即**n个左括号和n个右括号的组合**，并输出**有效组合**
2. 有效组合即**每个右括号前面都有对应的左括号**
3. 结合上述两个要点，使用迭代算法，逐个插入有效字符，每个有效组合的字符总数都是**2\*n**

根据上述三个要点，整理代码思路：
1. 进行2\*n次迭代，每次迭代都记录当前每个字符串中**左括号的个数**
2. 针对当前字符串和左括号的个数，添加有效字符，更新**左括号的个数**。即添加左括号时，个数+1，添加右括号时，个数-1
3. 添加有效左括号的逻辑：当前字符串的左括号个数小于剩余要添加的字符数量时，即可以添加左括号
4. 添加有效右括号的逻辑：当前字符串的左括号个数大于零时，即可以添加右括号

### 代码

```python3 []
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        ans = [("",0)]
        for _ in range(n*2, 0, -1):
            tmp = []
            for s,p in ans:
                if p < _:
                    tmp.append((s+"(", p+1))
                if p > 0:
                    tmp.append((s+")", p-1))
            ans = tmp
        
        return [_[0] for _ in ans]
```
稳定精巧，简洁高效，即吾追求