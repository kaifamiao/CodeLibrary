minimize-rounding-error-to-meet-target
给定一系列价格<code>[p<sub>1</sub>,p<sub>2</sub>...,p<sub>n</sub>]</code>和一个目标<code>target</code>，将每个价格<code>p<sub>i</sub></code>舍入为<code>Round<sub>i</sub>(p<sub>i</sub>)</code>以使得舍入数组<code>[Round<sub>1</sub>(p<sub>1</sub>),Round<sub>2</sub>(p<sub>2</sub>)...,Round<sub>n</sub>(p<sub>n</sub>)]</code>之和达到给定的目标值<code>target</code>。每次舍入操作<code>Round<sub>i</sub>(p<sub>i</sub>)</code>可以是向下舍<code>Floor(p<sub>i</sub>)</code>也可以是向上入<code>Ceil(p<sub>i</sub>)</code>。

如果舍入数组之和无论如何都无法达到目标值<code>target</code>，就返回 <code>-1</code>。否则，以保留到小数点后三位的字符串格式返回最小的舍入误差，其定义为 &Sigma; |Round<sub>i</sub>(p<sub>i</sub>) - (p<sub>i</sub>)|（i 从 1 到 n ）。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>prices = [&quot;0.700&quot;,&quot;2.800&quot;,&quot;4.900&quot;], target = 8
<strong>输出：</strong>&quot;1.000&quot;
<strong>解释： </strong>
使用 Floor，Ceil 和 Ceil 操作得到 (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 。
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>prices = [&quot;1.500&quot;,&quot;2.500&quot;,&quot;3.500&quot;], target = 10
<strong>输出：</strong>&quot;-1&quot;
<strong>解释：</strong>
达到目标是不可能的。</pre>



<strong>提示：</strong>

<ol>
	<code>1 &lt;= prices.length &lt;= 500</code>
	表示价格的每个字符串<code>prices[i]</code>都代表一个介于 0 和 1000之间的实数，并且正好有 3 个小数位。
	<code>target</code>介于0 和 1000000之间。
</ol>

最小化舍入误差以满足目标
Given an array of prices <code>[p<sub>1</sub>,p<sub>2</sub>...,p<sub>n</sub>]</code> and a <code>target</code>, round each price <code>p<sub>i</sub></code> to <code>Round<sub>i</sub>(p<sub>i</sub>)</code> so that the rounded array <code>[Round<sub>1</sub>(p<sub>1</sub>),Round<sub>2</sub>(p<sub>2</sub>)...,Round<sub>n</sub>(p<sub>n</sub>)]</code> sums to the given <code>target</code>. Each operation <code>Round<sub>i</sub>(p<sub>i</sub>)</code> could be either <code>Floor(p<sub>i</sub>)</code> or <code>Ceil(p<sub>i</sub>)</code>.

Return the string <code>&quot;-1&quot;</code> if the rounded array is impossible to sum to <code>target</code>. Otherwise, return the smallest rounding error, which is defined as &Sigma; |Round<sub>i</sub>(p<sub>i</sub>) - (p<sub>i</sub>)| for <italic>i</italic> from 1 to <italic>n</italic>, as a string with three places after the decimal.



<strong>Example 1:</strong>

<pre>
<strong>Input: </strong>prices = <span id="example-input-1-1">[&quot;0.700&quot;,&quot;2.800&quot;,&quot;4.900&quot;]</span>, target = <span id="example-input-1-2">8</span>
<strong>Output: </strong><span id="example-output-1">&quot;1.000&quot;</span>
<strong>Explanation: </strong>
Use Floor, Ceil and Ceil operations to get (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 .
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input: </strong>prices = <span id="example-input-2-1">[&quot;1.500&quot;,&quot;2.500&quot;,&quot;3.500&quot;]</span>, target = <span id="example-input-2-2">10</span>
<strong>Output: </strong><span id="example-output-2">&quot;-1&quot;</span>
<strong>Explanation: </strong>
It is impossible to meet the target.
</pre>



<strong>Note:</strong>

<ol>
	<code>1 &lt;= prices.length &lt;= 500</code>.
	Each string of prices <code>prices[i]</code> represents a real number which is between 0 and 1000 and has exactly 3 decimal places.
	<code>target</code> is between 0 and 1000000.
</ol>