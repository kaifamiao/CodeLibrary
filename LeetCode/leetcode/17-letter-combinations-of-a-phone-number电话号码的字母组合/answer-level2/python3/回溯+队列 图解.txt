### 方法一：回溯
当题目中出现“所有组合”等类似字眼时，我们第一感觉就要想到用回溯。

定义函数 `backtrack(combination, nextdigit)`，当`nextdigit` 非空时，对于 `nextdigit[0]` 中的每一个字母 `letter`，执行回溯 `backtrack(combination + letter,nextdigit[1:]`，直至 `nextdigit` 为空。最后将 `combination` 加入到结果中。


<![幻灯片1.JPG](https://pic.leetcode-cn.com/bc9a609acaeb67274452c2d2c6857df57af22950b1a4bd1fa0ccbd4a7fc38d5c-%E5%B9%BB%E7%81%AF%E7%89%871.JPG),![幻灯片2.JPG](https://pic.leetcode-cn.com/821ec1d39da2b033419ce8cf74db5da55b900c2965454d0f8bfea500f653abb1-%E5%B9%BB%E7%81%AF%E7%89%872.JPG),![幻灯片3.JPG](https://pic.leetcode-cn.com/6e957fe39ab94a2b2b46af5db19cf6267937e74437a18f06d1dbc68f60377d61-%E5%B9%BB%E7%81%AF%E7%89%873.JPG),![幻灯片4.JPG](https://pic.leetcode-cn.com/0e0e518db140e94788de892afd14aaa2c3eec4f84e1d2463fc1e4a2856ee017a-%E5%B9%BB%E7%81%AF%E7%89%874.JPG),![幻灯片5.JPG](https://pic.leetcode-cn.com/db8ee668f62db41e1bcfe889b610808da6bd5e105a87d14124188e2e174ce7e5-%E5%B9%BB%E7%81%AF%E7%89%875.JPG),![幻灯片6.JPG](https://pic.leetcode-cn.com/797350906812c4ffd27a7bc81fed8613b2faba8a8da1e6f4df17cf32ee114970-%E5%B9%BB%E7%81%AF%E7%89%876.JPG),![幻灯片7.JPG](https://pic.leetcode-cn.com/bb91fa08d40225b7ecedde7548ef0c02378d5cd6d6e779df02ad79051036e773-%E5%B9%BB%E7%81%AF%E7%89%877.JPG),![幻灯片8.JPG](https://pic.leetcode-cn.com/a399b4bd386b913607cdd64e4d22529776f42be77242817368ae79021b979857-%E5%B9%BB%E7%81%AF%E7%89%878.JPG),![幻灯片9.JPG](https://pic.leetcode-cn.com/0469a4099a9297c71f0aa83739d24dcc09c4000d9e842c46a37348c3597c1e26-%E5%B9%BB%E7%81%AF%E7%89%879.JPG),![幻灯片10.JPG](https://pic.leetcode-cn.com/034b58977fae6bc7b00df9a35343c954d041b8b10102b8157c446c34298d3c5c-%E5%B9%BB%E7%81%AF%E7%89%8710.JPG),![幻灯片11.JPG](https://pic.leetcode-cn.com/08732bf8f4700308fee39af6d9b6a6171561def4555bd66135251e855d1061aa-%E5%B9%BB%E7%81%AF%E7%89%8711.JPG),![幻灯片12.JPG](https://pic.leetcode-cn.com/7a12df0ed37e57b20178708b2287727ca46d5699a179297541e8909357810d75-%E5%B9%BB%E7%81%AF%E7%89%8712.JPG),![幻灯片13.JPG](https://pic.leetcode-cn.com/bba7294a6333f43f4b30eab2d663e84e453287a067ebf1c11f3cbf9601acdc4d-%E5%B9%BB%E7%81%AF%E7%89%8713.JPG),![幻灯片14.JPG](https://pic.leetcode-cn.com/b388a5d8405b4bc405e23a075c7f1ab13ac00c4093de9e75e6647f9353dc70a7-%E5%B9%BB%E7%81%AF%E7%89%8714.JPG),![幻灯片15.JPG](https://pic.leetcode-cn.com/ed8425697fb89c5da543706644f92633a3faba277ef83f9d4695228d52751455-%E5%B9%BB%E7%81%AF%E7%89%8715.JPG),![幻灯片16.JPG](https://pic.leetcode-cn.com/23a973ac3b25d8c3d523c17ed4347b0798f34c59a76f7b201dbd896a921f364b-%E5%B9%BB%E7%81%AF%E7%89%8716.JPG),![幻灯片17.JPG](https://pic.leetcode-cn.com/d3c044d7a6807a8c94b4963b61d014e6d13fdf83d07129fd222a0e79a837957d-%E5%B9%BB%E7%81%AF%E7%89%8717.JPG),![幻灯片18.JPG](https://pic.leetcode-cn.com/68aa3f46a09cc52d71fe8db89e8944dabeea767482611feedf694b036c82fb60-%E5%B9%BB%E7%81%AF%E7%89%8718.JPG),![幻灯片19.JPG](https://pic.leetcode-cn.com/e9a7c7e040883f7813805547e383b0b50ed06dcee246cbffa6e2473a3727e16f-%E5%B9%BB%E7%81%AF%E7%89%8719.JPG),![幻灯片20.JPG](https://pic.leetcode-cn.com/729936fe789a8e12f3ae63bd27eb03f6931261da40ee5172b7718ef38e11a83d-%E5%B9%BB%E7%81%AF%E7%89%8720.JPG),![幻灯片21.JPG](https://pic.leetcode-cn.com/51afa272048d43c310302a11dcf71198e9b4157f38e16bd65827d28328f4a80b-%E5%B9%BB%E7%81%AF%E7%89%8721.JPG),![幻灯片22.JPG](https://pic.leetcode-cn.com/fe24305c3d279e469aeaf17ca25b7c82753a0413f032f437a76d14855e26403a-%E5%B9%BB%E7%81%AF%E7%89%8722.JPG),![幻灯片23.JPG](https://pic.leetcode-cn.com/13e0cdf4dc24258e187643320439747e16d17dc9903e75112952c7ef36a2d88a-%E5%B9%BB%E7%81%AF%E7%89%8723.JPG)>


### 代码

```python
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits: return []

        phone = {'2':['a','b','c'],
                 '3':['d','e','f'],
                 '4':['g','h','i'],
                 '5':['j','k','l'],
                 '6':['m','n','o'],
                 '7':['p','q','r','s'],
                 '8':['t','u','v'],
                 '9':['w','x','y','z']}
                
        def backtrack(conbination,nextdigit):
            if len(nextdigit) == 0:
                res.append(conbination)
            else:
                for letter in phone[nextdigit[0]]:
                    backtrack(conbination + letter,nextdigit[1:])

        res = []
        backtrack('',digits)
        return res
```

### 复杂度分析
- 时间复杂度：$O(3^M×4^N)$。$M$ 是对应三个字母的数字个数，$N$ 是对应四个字母的数字个数。
- 空间复杂度：$O(3^M×4^N)$。一共要生成 $3^M×4^N$ 个结果。

（我们看到，一般使用回溯求所有结果的复杂度还是相当大的~）

### 方法二：队列

我们也可以使用队列，先将输入的 `digits` 中第一个数字对应的每一个字母入队，然后将出队的元素与第二个数字对应的每一个字母组合后入队...直到遍历到 `digits` 的结尾。最后队列中的元素就是所求结果。

<![幻灯片1.JPG](https://pic.leetcode-cn.com/80975672a13288ffd5cea15a5651bd091a92099bb6a9f67febeaae68cbd4e71c-%E5%B9%BB%E7%81%AF%E7%89%871.JPG),![幻灯片2.JPG](https://pic.leetcode-cn.com/1eb23bf5fda96a1e761c8533edfd6d0b2e76612294cbe13e2f0a04871ab6d900-%E5%B9%BB%E7%81%AF%E7%89%872.JPG),![幻灯片3.JPG](https://pic.leetcode-cn.com/e722205f05fa82af312450e753565d86255a23c9e6f8786cff642136d8b7ca57-%E5%B9%BB%E7%81%AF%E7%89%873.JPG),![幻灯片4.JPG](https://pic.leetcode-cn.com/c0170e717e300ead6ce8c6e10c6439a4353efd343f6ec809765f6143bb3723cd-%E5%B9%BB%E7%81%AF%E7%89%874.JPG),![幻灯片5.JPG](https://pic.leetcode-cn.com/a875d2f70917726af6077ae7c8e3e230d298f281ea16015f9e4251ebc44be25b-%E5%B9%BB%E7%81%AF%E7%89%875.JPG),![幻灯片6.JPG](https://pic.leetcode-cn.com/1123432c4be9ee7c750f4e5c889fc4154601e9cafd50af41ab5248a056f3ee08-%E5%B9%BB%E7%81%AF%E7%89%876.JPG),![幻灯片7.JPG](https://pic.leetcode-cn.com/bf7486a4e4931c8e25f38d8d2315854b638e1c55bde8140f6816c542c70fcaab-%E5%B9%BB%E7%81%AF%E7%89%877.JPG),![幻灯片8.JPG](https://pic.leetcode-cn.com/37972cdcbed1f93ce9c7e0f286220c4215fc6cc2fc7543e841b8908abb75ca05-%E5%B9%BB%E7%81%AF%E7%89%878.JPG),![幻灯片9.JPG](https://pic.leetcode-cn.com/b0401a208e725036175d2e5cb6e9a916cd5049817f204e227f736463c724d52f-%E5%B9%BB%E7%81%AF%E7%89%879.JPG),![幻灯片10.JPG](https://pic.leetcode-cn.com/eae8a1a093a2cee58405e4bf67c09241cb56a4f9f0f7fcce9a1c9702a2484912-%E5%B9%BB%E7%81%AF%E7%89%8710.JPG),![幻灯片11.JPG](https://pic.leetcode-cn.com/9ef49b9884ec42449789d92008ff66158a6245d10351ab9e1f23a9492a6d88fa-%E5%B9%BB%E7%81%AF%E7%89%8711.JPG),![幻灯片12.JPG](https://pic.leetcode-cn.com/c0ab12bab714e6a08340295dadceb18e2110ca1382a0022e8091d424d7c02443-%E5%B9%BB%E7%81%AF%E7%89%8712.JPG),![幻灯片13.JPG](https://pic.leetcode-cn.com/1792744589cf58bc6e58dd7307d1fc3085de51aafd849870e3a0af78bacedb5b-%E5%B9%BB%E7%81%AF%E7%89%8713.JPG),![幻灯片14.JPG](https://pic.leetcode-cn.com/2da9c53c489be2e119a8f2c960a3e3ae10e786fcb2f95df21ce4b84214413a77-%E5%B9%BB%E7%81%AF%E7%89%8714.JPG)>


### 代码
```python
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits: return []
        phone = ['abc','def','ghi','jkl','mno','pqrs','tuv','wxyz']
        queue = ['']  # 初始化队列
        for digit in digits:
            for _ in range(len(queue)):
                tmp = queue.pop(0)
                for letter in phone[ord(digit)-50]:# 这里我们不使用 int() 转换字符串，使用ASCII码
                    queue.append(tmp + letter)
        return queue

```

### 复杂度分析
- 时间复杂度：$O(3^M×4^N)$。$M$ 是对应三个字母的数字个数，$N$ 是对应四个字母的数字个数。
- 空间复杂度：$O(3^M×4^N)$。一共要生成 $3^M×4^N$ 个结果。

欢迎补充其他代码~如有问题，欢迎讨论~