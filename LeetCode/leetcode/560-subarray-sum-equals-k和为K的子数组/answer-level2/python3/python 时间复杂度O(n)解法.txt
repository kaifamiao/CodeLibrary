以下为O(n)解法，主要通过几个技巧，来减小时间复杂度：

(1) 简化求和，将其复杂度减小为O(1)：  
若使用暴力解法，i为连续子数组开始的序号，j为结束的序号。每次计算都要把nums中序号从i到j的数字加起来。
我们设置dp[i]记录序号从0到i的数字之和。
之后计算从i到j的数字之和时，可通过dp[j]-dp[i]直接得出。

应考虑没有任何数字相加时的情况，dp[i]=0，即dp=[0]+dp

(2) 使用字典搜索结果，将搜索的复杂度减小为O(n)：  
经过（1）步骤，我们可知dp[j]-dp[i]==k，代表i到j的数字之和为k。  
因此dp[j]-k==dp[i]同样代表i到j的数字之和为k。

我们将所有出现过的dp[j]记录入字典。
从字典中搜索dp[i],若存在，则从i到j的数字之和为k。(搜索dp[i]即搜索dp[j]-k)
注意：将dp[j]记录入字典要在搜索之后。防止dp[j]被使用两次。

(3) 考虑dp[i]重复的情况：      
{
为什么需要考虑重复的：
若两个点dp[i1]，dp[i2]相等（从序号0到这两个数的和相等），dp[i1]到dp[j]的和为K，则dp[i2]到dp[j]的和也为K。
}
由于dp[i1]==dp[i2]，两者存在字典中同一个键值，但根据上述说明，需要考虑重复的情况，因此字典中键值dp[i]记录其出现的次数。
如果搜索到dp[j]-k，需要加的不是1，而是等效的位置个数。

        _dict={}
        count=0 
        
        # (1)使用dp[i]记录序号从0到i的数字之和
        dp=[_ for _ in nums ]
        for t in range(1,len(nums)):
            dp[t]=dp[t-1]+nums[t]     
        dp=[0]+dp

        for i in range(len(dp)):

            # (2)通过搜索dp[i],确定是否存在i，从i到j对应的数字和为k。
            if _dict.get(dp[i]-k): 
                count+=_dict[dp[i]-k]

            # (3)dict[dp[i]]统计dp[i]出现的次数
            if _dict.get(dp[i]):
                _dict[dp[i]]+=1
            else:
                _dict[dp[i]]=1

        return count

