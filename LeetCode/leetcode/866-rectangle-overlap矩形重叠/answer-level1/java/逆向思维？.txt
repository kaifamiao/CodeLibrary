### 解题思路
给定两个矩形的左下角和右上角的坐标，实际上4个角的坐标都知道了，
要求写一个程序，判断两矩形是否重叠，有相交面积返回true，没有返回false

如果考虑相交的条件，情况就会比较复杂，
可以重叠一个角，可以重叠一半面积，可以大的里面套小的，
可以从上面交，可以从左边交，可以从右下方交。。这样讨论就没完没了了

尝试反过来思考：**什么情况下不相交？**（什么时候返回false）
如果把这两个矩阵想象成现实物理世界中两个实体方块，那它们就是不相交的，是位置上不重叠的，
两方块相互靠近最终会发生碰撞，而不是像游戏BUG里一样“穿墙”

由现实物理世界的经验可知：
- 如果A块在B块左边，则A的右边一定小于等于B的左边（等号取在他俩贴在一起的时候）
- 如果A块在B块右边，则A的左边一定大于等于B的右边
- 如果A块在B块上方，则A的下边一定大于等于B的上边
- 如果A块在B块下方，则A的上边一定小于等于B的下边

否则，就会发生“穿墙”现象，也就是两矩形相交，就要返回true

两矩阵的上下左右题目中都给出了，至于谁是A谁是B，由于位置上是等价的，谁做A谁做B并不影响结果
PS：为了便于理解，代码⬇️整理了一下变量的名字，不需要的同学也可以采用更短更简练的写法

### 代码

```java
class Solution {
    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {
        int l1 = rec1[0];
        int d1 = rec1[1];
        int r1 = rec1[2];
        int u1 = rec1[3];
        
        int l2 = rec2[0];
        int d2 = rec2[1];
        int r2 = rec2[2];
        int u2 = rec2[3];

        if(r2 <= l1 || r1 <= l2 || u1 <= d2 || u2 <= d1) {
            return false;
        }
        return true;
    }
}
```