### 思路
二叉搜索树的前序遍历有以下特点：
- 如果出现递减序列，则是左子树，否则是右子树；
- 右子树一定是递增的

综上，我们可以通俗理解为“总体递增，局部递减”。为了达到“总体递增的效果”，我们要保证递减序列的第一个元素小于递减结束后即将递增的那个元素。因此，我们我们使用`new_min`和栈，如果递减结束后，下一个元素小于递减序列的第一个元素，违背了“总体递增”，立即返回`False`。


<![幻灯片1.JPG](https://pic.leetcode-cn.com/2ca488681db9098b50d8bba56ab6a465e2cce250f014d79b9af9a3f3d08202b0-%E5%B9%BB%E7%81%AF%E7%89%871.JPG),![幻灯片2.JPG](https://pic.leetcode-cn.com/afa79b573472f6702e813c30fe284266af89a548d7e18d80fafede1793e40953-%E5%B9%BB%E7%81%AF%E7%89%872.JPG),![幻灯片3.JPG](https://pic.leetcode-cn.com/c3e6a9618d45864329206a96b2bf8dcd905c940c4092dabcc8e8fb35f4f7eddd-%E5%B9%BB%E7%81%AF%E7%89%873.JPG),![幻灯片4.JPG](https://pic.leetcode-cn.com/9c51e7faaa319664094d52cdeebd9f92a8d4e8631be6601261231bc77aaeaf47-%E5%B9%BB%E7%81%AF%E7%89%874.JPG),![幻灯片5.JPG](https://pic.leetcode-cn.com/c602a7868a1135725936a94b9376eaa1fce846d76b6d66f8041376be913dfb04-%E5%B9%BB%E7%81%AF%E7%89%875.JPG),![幻灯片6.JPG](https://pic.leetcode-cn.com/8033a562b3027337ec63254bd2693f6f878af8cdec6620eb05354e7cc131338c-%E5%B9%BB%E7%81%AF%E7%89%876.JPG),![幻灯片7.JPG](https://pic.leetcode-cn.com/8c2528b6b5f4c92f33f14e16816113440a5299168295215dc5480502ed8fcd4d-%E5%B9%BB%E7%81%AF%E7%89%877.JPG),![幻灯片8.JPG](https://pic.leetcode-cn.com/7864d15e0d9118a5114ac15fc5194c9f97994ebd40abaf0e97ea0c09c184480f-%E5%B9%BB%E7%81%AF%E7%89%878.JPG),![幻灯片9.JPG](https://pic.leetcode-cn.com/6f5f562a22a3cc46d5c216c036d2961d53c43f39d9ede22a5e3df2cb60e2ab39-%E5%B9%BB%E7%81%AF%E7%89%879.JPG),![幻灯片10.JPG](https://pic.leetcode-cn.com/068f3fa5f0cb2bd4f78f2e256e283488cd4cd7b25dd4bb18f157fd30e6c8302b-%E5%B9%BB%E7%81%AF%E7%89%8710.JPG),![幻灯片11.JPG](https://pic.leetcode-cn.com/fcffe8845d248e829296fe1cbdbe43ea45394d4e8fbcc824b5cada6908228f0f-%E5%B9%BB%E7%81%AF%E7%89%8711.JPG),![幻灯片12.JPG](https://pic.leetcode-cn.com/93349f0136a7e9104d407e15a5d3ada84251df0e87ac10833d50efd47e29f159-%E5%B9%BB%E7%81%AF%E7%89%8712.JPG),![幻灯片13.JPG](https://pic.leetcode-cn.com/37c1750b125532c91ded4cf4e73ec1c137bd47c9148949faf5ee417f826ffc7f-%E5%B9%BB%E7%81%AF%E7%89%8713.JPG),![幻灯片14.JPG](https://pic.leetcode-cn.com/b391811fd692b6d96427438d61f956ed36857cd1ed6f6e7247476533eba2dd53-%E5%B9%BB%E7%81%AF%E7%89%8714.JPG),![幻灯片15.JPG](https://pic.leetcode-cn.com/6ec0b4fe55a5e3789368d9d97e50a4ed353944a9264b17856a4352ca0b3cac23-%E5%B9%BB%E7%81%AF%E7%89%8715.JPG),![幻灯片16.JPG](https://pic.leetcode-cn.com/393ddfd920152dd7c6e6c207bd124e326517f467aea96dfa15c7580ef4865317-%E5%B9%BB%E7%81%AF%E7%89%8716.JPG),![幻灯片17.JPG](https://pic.leetcode-cn.com/1aa4856af717ed302a5df5cc7dba306123d2287f88b57c1b1af00ab956fa1f7b-%E5%B9%BB%E7%81%AF%E7%89%8717.JPG),![幻灯片18.JPG](https://pic.leetcode-cn.com/711c0670427c0cf5cfa7362917459c8e3727b210974d34f6161accce322ceedf-%E5%B9%BB%E7%81%AF%E7%89%8718.JPG),![幻灯片19.JPG](https://pic.leetcode-cn.com/f60469f159b6aec3d109566ea3313321c5bc589fc7a180194c5c6fe72a5af618-%E5%B9%BB%E7%81%AF%E7%89%8719.JPG)>



### 代码
```
class Solution:
    def verifyPreorder(self, preorder: List[int]) -> bool:
        stack = []
        new_min = float('-inf')  # 初始化下限值
        for i in range(len(preorder)):
            if preorder[i] < new_min: return False
            while stack and preorder[i] > stack[-1]:
                new_min = stack.pop()
            stack.append(preorder[i])
        return True
```
### 复杂度分析
- 时间复杂度：$O(N)$。遍历了一遍数组
- 空间复杂度：$O(N)$。最坏条件下为$O(N)$

如果不正确的地方，还请大家多多指教~
