[516.最长回文子序列](https://leetcode-cn.com/problems/longest-palindromic-subsequence/submissions/)

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md) 

## 动态规划 

```javascript
/**
 * @param {string} s
 * @return {number}
 */
var longestPalindromeSubseq = function(s) {
    let length = s.length;
    
    // dp[i][j]表示的是从s[i]至s[j]之间的最长回文子序列的长度
    let dp = new Array(length);
    for (let i = 0; i < length; i++) {
        dp[i] = new Array(length).fill(0);
    }
    
    for (let i = length - 1; i >= 0; i--) {
        // 每一个字符都是一个回文字符串，因此对于dp[i][i]设置为1
        dp[i][i] = 1;
        for (let j = i+1; j < length; j++) {
            // 状态转移方程为:
            // 当s[i]等于s[j]时，dp[i][j] = dp[i-1][j+1] + 2;
            // 当s[i]不等于s[j]时，dp[i][j] = max(dp[i-1][j], dp[i][j+1])
            if (s[i] === s[j]) {
                dp[i][j] = dp[i+1][j-1] + 2;
            } else {
                dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1])
            }
        }
    }
    return dp[0][length-1];
};
```

## 动态规划降维
![image.png](https://pic.leetcode-cn.com/5dbaa940ad2c9bf35ff174a62c2ea24b499b0d3c1c4e9d352720773a68671c5f-image.png)


这类问题一般都可以进行降维处理

```javascript
/**
 * @param {string} s
 * @return {number}
 */
var longestPalindromeSubseq = function(s) {
    let length = s.length;
    
    let dp = new Array(length).fill(1);
    
    for (let i = length-1; i >= 0; i--) {
        let prev = 0;
        for (let j = i+1; j < length; j++) {
            let tmp = dp[j];
            if (s[i] === s[j]) {
                dp[j] = prev + 2
            } else {
                dp[j] = Math.max(dp[j], dp[j-1])
            }
            prev = tmp;
        }
    }
    return dp[length-1];
};
```