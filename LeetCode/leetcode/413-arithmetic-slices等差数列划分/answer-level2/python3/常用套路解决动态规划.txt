### 解题思路
动态规划类型题目的好处在于套路非常明显，按照固定的思路往下写就完事儿。动态规划本质上是带着脑子的遍历：把**之前遍历过的结果记下来**然后找到**当前状态和前一步状态的关系**进行递推，把之前结果记下来就保证我们再进行遍历的时候不用从头开始，直接从上一步开始，大大降低复杂度，针对本题目大概的步骤如下：
（1）构建dp表，一般是跟输入相同维度的表格一张就行，这里是一个一维列表，由于需要判断前后差值是否相等我们还需要额外的一张dif表记录前后差值。
（2）开始遍历元素：求前后两个的差值，如果A[i]-A[i-1]和A[i-1]-A[i-2]相等那就找到了一个结果，dp[i] = dp[i-1]+1，然后完成整趟遍历
由于我们要求的是所有等差数列，是数组A的所有满足条件的等差数组的总数，我们的dp表每个位置的值对应的是以这个位置为结尾的等差数组的数目，因此要返回sum(dp)，dp[-1]只是到结尾元素的等差数列和。
多说一句：动态规划包含**重叠子问题**和**最优子结构**两个部分，重叠子问题就是子问题会多次出现，因此需要dp表把之前的结果记录下来；最优子结构就是现在的状态和之前状态存在递推关系，也就是dp[i]=dp[i-1]+1这样的转移方程，实际应用当中往往是**状态难定义**、**状态转移方程难找**，所以还是要多加练习(っ•̀ω•́)っ✎⁾⁾ 

### 代码

```python3
class Solution:
    def numberOfArithmeticSlices(self, A: List[int]) -> int:
        if len(A) < 3: return 0
        dif = [0]*(len(A)-1)
        dif[0] = A[1] - A[0]
        dp = [0]*len(A)
        for i in range(2, len(A)):
            dif[i-1] = A[i] - A[i-1]
            if dif[i-1] == dif[i-2]:
                dp[i] = dp[i-1] + 1
        return sum(dp)
```