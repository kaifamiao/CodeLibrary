首先遍历原数组 `nums`，用数组 `diffs` 存储相邻两个元素之间的差值。

然后遍历 `diffs`，用数组 `cons` 存储其中连续相同的差值的数目，比如有 $3$ 个 $3$ 连在一起，意味着原数组中这个位置存在一个最大长度为 $4$ 的等差数列。

然后遍历 `cons`，对于长度为 `n` 的等差数列，其所有的长度大于等于 $3$ 的子数列都是等差数列，则一共有 `(n-2)(n-1)/2` 个等差数列。
全部相加得到结果。

比如：
```
nums = [1,2,3,4,5,6,12,14,16]
diffs = [1,1,1,1,1,6,2,2]
cons = [5,1,2]
# 将 1 舍去，nums 中有长度为 5+1 和 2+1 的等差数列
result = (6-2)(6-1)/2 + (3-2)(3-1)/2
```
代码如下：
```python [-Python 3]
class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        
        # 第一次遍历
        diffs = []
        for i in range(len(nums) - 1):
            diffs.append(nums[i + 1] - nums[i])
            
        # 第二次遍历
        cons = []
        a = 1
        for i in range(1, len(diffs)):
            if diffs[i] == diffs[i - 1]:
                a += 1
            else:
                cons.append(a)
                a = 1
        cons.append(a)
        
        # 第三次遍历
        res = 0
        for num in cons:
            res += int(self.calc(num))
        return res
        
    # 用于计算cons内每个数代表的等差数列个数
    def calc(self, n):
        if n == 1:
            return 0
        n += 1
        return (n-2)*(n-1)/2

```