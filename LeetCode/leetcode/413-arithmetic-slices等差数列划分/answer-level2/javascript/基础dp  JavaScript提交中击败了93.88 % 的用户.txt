注意一下  体目中的子数组 是连续的，最开始以为子数组是可以自己选出几个元素来组成的。

是连续的等差就比较好办了。

外层循环首先计算出以该元素作为末尾元素的等差数列差值

内层循环检测该等差数列能向前延申多远，然后每次count++

若不成立，跳出内循环 重新计算差值

```
/**
 * @param {number[]} A
 * @return {number}
 */
// 执行用时: 84 ms, 在Arithmetic Slices的JavaScript提交中击败了93.88 % 的用户
// 内存消耗: 34.1 MB, 在Arithmetic Slices的JavaScript提交中击败了42.31 % 的用户
//该题的等差数列是指的连续的子数组，因此直接从尾部开始判断，以当前元素作为尾部元素的等差数列数量
var numberOfArithmeticSlices = function (A) {
  let l = A.length, count = 0;
  if (l <= 2) { return 0 }
  for (let i = l - 1; i >= 2; i--) {
    // 每次重新计算等差值
    let temp = A[i] - A[i - 1];
    // j-1下标  因此>0
    for (let j = i - 1; j > 0; j--) {
      if (temp == A[j] - A[j - 1]) {
        count++
      }
      else {
        break;
      }
    }
  }
  return count
};
```