### 解题思路
这题有参考别人的想法，换做我确实很难想到，但还是用我自己的话总结下思路吧。
思路大致如下：如果一个非空字符串s可以由它的一个子串重复多次构成，可以理解为s中存在m个子串，那么当两个字符串结合起来变成ss时，字符串s在新字符串ss的第二次位置不等于s的长度（相当于前一个字符串s中有n个子串，在后一个字符串中有m-n个子串，所以此时的位置不等于s的长度）；反之，一个非空字符串s不可以由它的一个子串重复多次构成，那么当两个字符串结合起来变成ss时，字符串s在新字符串ss的第二次位置就在后一个字符串首字符的位置，其位置刚好等于s的长度。根据这一特征来判断。

### find函数
```
string str1, str2;
str1.find(str2);    //从串str1中查找时str2，返回str2中首个字符在str1中的地址
str1.find(str2,5); //从str1的第5个字符开始查找str2
```
除此之外，对于字符串来说，字符串与字符串拼接可以通过“+”来实现。

### 代码

```cpp
class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        return (s+s).find(s,1)!=s.size();
    }
};
```

### 执行结果
![微信图片_20200406183134.png](https://pic.leetcode-cn.com/8d7214ed81021da64d9e91762dbe7f996b1f15c88d6b4522788d203a7ba52232-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200406183134.png)
