## 03.03. 堆盘子

### Information

* TIME: 2020/03/07
* LINK: [Click Here](https://leetcode-cn.com/problems/stack-of-plates-lcci/)
* TAG: `stack`

### Description

> 堆盘子。设想有一堆盘子，堆太高可能会倒下来。因此，在现实生活中，盘子堆到一定高度时，我们就会另外堆一堆盘子。请实现数据结构SetOfStacks，模拟这种行为。SetOfStacks应该由多个栈组成，并且在前一个栈填满时新建一个栈。此外，SetOfStacks.push()和SetOfStacks.pop()应该与普通栈的操作方法相同（也就是说，pop()返回的值，应该跟只有一个栈时的情况一样）。 进阶：实现一个popAt(int index)方法，根据指定的子栈，执行pop操作。
>
> 当某个栈为空时，应当删除该栈。当栈中没有元素或不存在该栈时，pop，popAt 应返回 -1.

### Example

```text
 输入：
["StackOfPlates", "push", "push", "popAt", "pop", "pop"]
[[1], [1], [2], [1], [], []]
 输出：
[null, null, null, 2, 1, -1]
```

### My Answer

> 维护栈列表
>
> * push：**踩坑：如果cap是0直接返回就可以了，push不了数据**，其他情况就检查顶栈是不是已经满了，满了就再加一个栈
> * pop：如果列表空，直接返回，否则最顶端的栈pop，检查最顶端栈是否空，空就从列表中删除
> * popAt：先检查`index`是否合法，然后出栈，要检查index当前栈是否空，空就删除

```java
class StackOfPlates {
    private LinkedList<Stack<Integer>> stackSet;
    private int cap;
    public StackOfPlates(int cap) {
        stackSet = new LinkedList<>();
        this.cap = cap;
    }
    
    public void push(int val) {
        if(cap == 0) return;
        if(stackSet.size() == 0 || stackSet.peekLast().size() == cap){
            Stack<Integer> subStack = new Stack<>();
            stackSet.addLast(subStack);
        }
        stackSet.peekLast().push(val);
    }
    
    public int pop() {
        if(stackSet.size() == 0) return -1;
        int front = stackSet.peekLast().pop();
        if(stackSet.peekLast().size() == 0){
            stackSet.removeLast();
        }
        return front;
    }
    
    public int popAt(int index) {
        if(index >= stackSet.size() || index < 0) return -1;
        int front = stackSet.get(index).pop();
        if(stackSet.get(index).size() == 0){
            stackSet.remove(index);
        }
        return front;
    }
}

/**
 * Your StackOfPlates object will be instantiated and called as such:
 * StackOfPlates obj = new StackOfPlates(cap);
 * obj.push(val);
 * int param_2 = obj.pop();
 * int param_3 = obj.popAt(index);
 */
```

### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/d92c772029556797a627d9c9264fcd21f4b0abbe91e7ba41b64bdd3b10fc7a74-file_1583552361502)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

