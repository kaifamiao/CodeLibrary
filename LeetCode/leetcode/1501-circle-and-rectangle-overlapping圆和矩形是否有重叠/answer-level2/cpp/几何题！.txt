一个容易想到的圆和矩形有重叠的情形是：矩形的某条边（是个**线段**）与圆相交。除此之外，还有哪些情况圆和矩形会重叠呢？只可能是一者完全包含于另一者中！由此，本题就转换为判断下列三种情况是否成立：
1. 矩形的某条边与圆相交
2. 矩形完全位于圆中
3. 圆完全位于矩形中

重叠当且仅当上述任何一种成立！

先看第1种，也是本题实现起来最费劲的部分。几何知识告诉我们，一条直线与圆如果相交，只可能有1个或者2个交点。虽然这里我们要判断的是线段是否与圆相交，但是我们可以先把那条线段延长为一条直线，求它与圆的交点。如果这一步就已经没有交点了，那么肯定就不相交。否则，我们在进一步判断交点是否在线段上。注意这里的线段都是平行于坐标轴的，不妨以平行于 Y 轴的线段 $x = x_1 (y_1 \le y \le y_2)$ 为例：它与圆 $(x-x_0)^2 + (y-y_0)^2 = r^2$ 的交点就是二次方程 $(x_1-x_0)^2 + (y-y_0)^2 = r^2$ 的解：

+ 若无解（当 $r^2 - (y-y_0)^2 < 0$ 时），那么不相交；
+ 若有唯一解（当 $r^2 - (y-y_0)^2 = 0$ 时），那么解出 $y=a$ 后，相交当且仅当 $y_1 \le a \le y_2$；
+ 若有两个解（当 $r^2 - (y-y_0)^2 > 0$ 时），那么解出 $y=a$ 和 $y=b$ 后，相交当且仅当 $y_1 \le a \le y_2 \lor y_1 \le b \le y_2$。

第2种：直接判定矩形的左下和右上顶点是否都位于圆内。方法依然是代入方程：$(x', y')$ 在圆 $(x-x_0)^2 + (y-y_0)^2 = r^2$ 内当且仅当 $(x'-x_0)^2 + (y'-y_0)^2 < r^2$。特别地，这种情形可弱化为只判断矩形的任一顶点（如左下）是否位于圆内。

第3种：过圆心做平行于坐标轴的两条直线，它们各自与圆交于两点。判断这四个点是否都在圆内。特别地，这种情形可弱化为只判断圆心是否在矩形中。具体方法是：设圆心坐标 $(x_0, y_0)$，矩形左下顶点坐标 $(x_1, y_1)$，矩形右上顶点坐标 $(x_2, y_2)$。圆心在矩形中当且仅当 $x_1 < x_0 < x_2 \land y_1 < y_0 < y_2$。

总结一下：后两种情形的弱化场景对应的条件非常简单，一行就可以写完。第一种稍微复杂一点，但是可以封装成一个函数，从而减少代码量。总的来说，我们只用考虑4+1+1=6种情况！

p.s. 虽然是几何题，但是上述方法完全都是代数！

贴一下很乱的代码：

```c++
class Solution {
    bool solve(int a, int b, int c, int lo, int hi) {
        int t = b - c * c;
        if (t < 0) return false;
        if (t == 0) {
            return lo <= a && a <= hi;
        }
        
        double x1 = sqrt(t) + a;
        if (lo <= x1 && x1 <= hi) return true;
        double x2 = -sqrt(t) + a;
        return lo <= x2 && x2 <= hi;
    }
public:
    bool checkOverlap(int r, int xc, int yc, int x1, int y1, int x2, int y2) {
        if (x1 <= xc && xc <= x2 && y1 <= yc && yc <= y2) return true;
        
        const int r2 = r * r;
        if ((x1 - xc) * (x1 - xc) + (y1 - yc) * (y1 - yc) <= r2) return true;
        
        if (solve(xc, r2, y1 - yc, x1, x2)) return true;
        if (solve(xc, r2, y2 - yc, x1, x2)) return true;
        if (solve(yc, r2, x1 - xc, y1, y2)) return true;
        if (solve(yc, r2, x2 - xc, y1, y2)) return true;
        
        return false;
    }
};
```