design-a-leaderboard
新一轮的「力扣杯」编程大赛即将启动，为了动态显示参赛者的得分数据，需要设计一个排行榜 Leaderboard。

请你帮忙来设计这个<code>Leaderboard</code> 类，使得它有如下3 个函数：

<ol>
	<code>addScore(playerId, score)</code>：

	<ul>
		假如参赛者已经在排行榜上，就给他的当前得分增加<code>score</code>点分值并更新排行。
		假如该参赛者不在排行榜上，就把他添加到榜单上，并且将分数设置为<code>score</code>。
	</ul>
	
	<code>top(K)</code>：返回前<code>K</code>名参赛者的<strong>得分总和</strong>。
	<code>reset(playerId)</code>：将指定参赛者的成绩清零。题目保证在调用此函数前，该参赛者已有成绩，并且在榜单上。
</ol>

请注意，在初始状态下，排行榜是空的。



<strong>示例 1：</strong>

<pre><strong>输入： </strong>
[&quot;Leaderboard&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;top&quot;,&quot;reset&quot;,&quot;reset&quot;,&quot;addScore&quot;,&quot;top&quot;]
[[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]]
<strong>输出：</strong>
[null,null,null,null,null,null,73,null,null,null,141]

<strong>解释： </strong>
Leaderboard leaderboard = new Leaderboard ();
leaderboard.addScore(1,73);   // leaderboard = [[1,73]];
leaderboard.addScore(2,56);   // leaderboard = [[1,73],[2,56]];
leaderboard.addScore(3,39);   // leaderboard = [[1,73],[2,56],[3,39]];
leaderboard.addScore(4,51);   // leaderboard = [[1,73],[2,56],[3,39],[4,51]];
leaderboard.addScore(5,4);    // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]];
leaderboard.top(1);           // returns 73;
leaderboard.reset(1);         // leaderboard = [[2,56],[3,39],[4,51],[5,4]];
leaderboard.reset(2);         // leaderboard = [[3,39],[4,51],[5,4]];
leaderboard.addScore(2,51);   // leaderboard = [[2,51],[3,39],[4,51],[5,4]];
leaderboard.top(3);           // returns 141 = 51 + 51 + 39;
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= playerId, K &lt;= 10000</code>
	题目保证<code>K</code>小于或等于当前参赛者的数量
	<code>1 &lt;= score&lt;= 100</code>
	最多进行<code>1000</code>次函数调用
</ul>

力扣排行榜
Design a Leaderboard class, which has 3 functions:

<ol>
	<code>addScore(playerId, score)</code>: Update the leaderboard by adding <code>score</code> to the given player&#39;s score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given <code>score</code>.
	<code>top(K)</code>: Return the score sum of the top <code>K</code> players.
	<code>reset(playerId)</code>: Reset the score of the player with the given idto 0. It is guaranteed that the player was added to the leaderboard before calling this function.
</ol>

Initially, the leaderboard is empty.


<strong>Example 1:</strong>

<pre>
<b>Input: </b>
[&quot;Leaderboard&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;addScore&quot;,&quot;top&quot;,&quot;reset&quot;,&quot;reset&quot;,&quot;addScore&quot;,&quot;top&quot;]
[[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]]
<b>Output: </b>
[null,null,null,null,null,null,73,null,null,null,141]

<b>Explanation: </b>
Leaderboard leaderboard = new Leaderboard ();
leaderboard.addScore(1,73);   // leaderboard = [[1,73]];
leaderboard.addScore(2,56);   // leaderboard = [[1,73],[2,56]];
leaderboard.addScore(3,39);   // leaderboard = [[1,73],[2,56],[3,39]];
leaderboard.addScore(4,51);   // leaderboard = [[1,73],[2,56],[3,39],[4,51]];
leaderboard.addScore(5,4);    // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]];
leaderboard.top(1);           // returns 73;
leaderboard.reset(1);         // leaderboard = [[2,56],[3,39],[4,51],[5,4]];
leaderboard.reset(2);         // leaderboard = [[3,39],[4,51],[5,4]];
leaderboard.addScore(2,51);   // leaderboard = [[2,51],[3,39],[4,51],[5,4]];
leaderboard.top(3);           // returns 141 = 51 + 51 + 39;
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= playerId, K &lt;= 10000</code>
	It&#39;s guaranteed that <code>K</code> is less than or equal to the current number of players.
	<code>1 &lt;= score&lt;= 100</code>
	There will be at most <code>1000</code>function calls.
</ul>
