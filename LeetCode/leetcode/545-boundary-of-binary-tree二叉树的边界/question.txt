boundary-of-binary-tree
给定一棵二叉树，以<strong>逆时针</strong>顺序从根开始返回其边界。边界按顺序包括左边界、叶子结点和右边界而不包括重复的<strong>结点</strong>。(结点的值可能重复)

<strong>左边界</strong>的定义是从根到<strong>最左侧</strong>结点的路径。<strong>右边界</strong>的定义是从根到<strong>最右侧</strong>结点的路径。若根没有左子树或右子树，则根自身就是左边界或右边界。注意该定义只对输入的二叉树有效，而对子树无效。

<strong>最左侧</strong>结点的定义是：在左子树存在时总是优先访问，如果不存在左子树则访问右子树。重复以上操作，首先抵达的结点就是最左侧结点。

<strong>最右侧</strong>结点的定义方式相同，只是将左替换成右。

<strong>示例 1</strong>

<pre><strong>输入:</strong>
  1
   \
    2
   / \
  3   4

<strong>输出:</strong>
[1, 3, 4, 2]

<strong>解析:</strong>
根不存在左子树，故根自身即为左边界。
叶子结点是3和4。
右边界是1，2，4。注意逆时针顺序输出需要你输出时调整右边界顺序。
以逆时针顺序无重复地排列边界，得到答案[1,3,4,2]。
</pre>



<strong>示例 2</strong>

<pre><strong>输入:</strong>
    ____1_____
   /          \
  2            3
 / \          / 
4   5        6   
   / \      / \
  7   8    9  10  
       
<strong>输出:</strong>
[1,2,4,7,8,9,10,6,3]

<strong>解析:</strong>
左边界是结点1,2,4。(根据定义，4是最左侧结点)
叶子结点是结点4,7,8,9,10。
右边界是结点1,3,6,10。(10是最右侧结点)
以逆时针顺序无重复地排列边界，得到答案 [1,2,4,7,8,9,10,6,3]。
</pre>



二叉树的边界
Given a binary tree, return the values of its boundary in <b>anti-clockwise</b> direction starting from root. Boundary includes left boundary, leaves, and right boundary in order without duplicate <strong>nodes</strong>. (The values of the nodes may still be duplicates.)

<b>Left boundary</b> is defined as the path from root to the <b>left-most</b> node. <b>Right boundary</b> is defined as the path from root to the <b>right-most</b> node. If the root doesn&#39;t have left subtree or right subtree, then the root itself is left boundary or right boundary. Note this definition only applies to the input binary tree, and not applies to any subtrees.

The <b>left-most</b> node is defined as a <b>leaf</b> node you could reach when you always firstly travel to the left subtree if exists. If not, travel to the right subtree. Repeat until you reach a leaf node.

The <b>right-most</b> node is also defined by the same way with left and right exchanged.

<b>Example 1</b>

<pre>
<b>Input:</b>
  1
   \
    2
   / \
  3   4

<b>Ouput:</b>
[1, 3, 4, 2]

<b>Explanation:</b>
The root doesn&#39;t have left subtree, so the root itself is left boundary.
The leaves are node 3 and 4.
The right boundary are node 1,2,4. Note the anti-clockwise direction means you should output reversed right boundary.
So order them in anti-clockwise without duplicates and we have [1,3,4,2].
</pre>



<b>Example 2</b>

<pre>
<b>Input:</b>
    ____1_____
   /          \
  2            3
 / \          / 
4   5        6   
   / \      / \
  7   8    9  10  
       
<b>Ouput:</b>
[1,2,4,7,8,9,10,6,3]

<b>Explanation:</b>
The left boundary are node 1,2,4. (4 is the left-most node according to definition)
The leaves are node 4,7,8,9,10.
The right boundary are node 1,3,6,10. (10 is the right-most node).
So order them in anti-clockwise without duplicate nodes we have [1,2,4,7,8,9,10,6,3].
</pre>


