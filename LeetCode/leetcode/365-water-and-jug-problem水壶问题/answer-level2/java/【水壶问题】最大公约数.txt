### 题目描述
有两个容量分别为 `x`升 和 `y`升的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 `z`升的水？

如果可以，最后请用以上水壶中的一或两个来盛放取得的 `z`升 水。

你允许：

- 装满任意一个水壶
- 清空任意一个水壶
- 从一个水壶向另外一个水壶倒水，直到装满或者倒空

### 示例:
```
输入: x = 3, y = 5, z = 4
输出: True
```
### 解题思路
由给定的三个操作我们知道在倒水的过程中，`x`,`y`两个壶至少有一个**装满**或者**倒空**，设两个水壶不断做这三个操作所带来的水的增量为`s`，那么`s`一定是通过分别操作这两个壶整数次得到的，即 $s = m * x + n * y$，其中$m$，$n$为装水和倒水的次数，正数表示往里装水，负数表示往外倒水。比如题目中的例子可以写成: 
$(-2) * 3 + 2 * 5 = 4$，即`3`升的水壶往外倒了`2`次水，`5`升水壶往里装满了`2`次。

那么题目就变成了$z = m * x + n * y$这个等式有整数解，由[裴蜀定理](https://baike.baidu.com/item/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/5186593?fr=aladdin)可知$m * x + n * y = gcd(x, y)$一定有整数解，故`z`只需满足 `z % gcd(x, y) == 0`即可。

### 代码

```java
class Solution {
    
    public boolean canMeasureWater(int x, int y, int z) {
        if (x + y < z) return false;
        if (x == z || y == z || x + y == z) return true;
        return z % gcd(x, y) == 0;
    }
    
    private int gcd(int a,int b) {
        while (b > 0) {
            a = a % b;         
            b = b ^ a;         
            a = a ^ b;        
            b = b ^ a;       
        }
        return  a;
    }
}
```