##  思路解析
以`A=[2,3,1,4,0]`为例:  

`A[0]=2`移动到`2`号索引位置`[4,0,2,3,1]`其对应的`K`为`3=(0-A[0]+5)%5`  
根据公式`K=(i-A[i]+N)%N`可以计算出，`A[i]`移动到其索引`i=A[i]`时对应的`K`的数组为：  
```[3,3,1,4,4]```   

为了更好的理解上面数组的由来，不妨写出`K`为上述数字中对应值时数组`A`的情况  
* `3`：`K`为3时对应的数组为：`[4,0,2,3,1]`，此时`2`、`3`位置的值与索引相同  
* `1`：`K`为1时对应的数组为：`[3,1,4,0,2]`，此时`1`、位置的值与索引相同  
* `4`：`K`为4时对应的数组为：`[0,2,3,1,4]`，此时`0`、`4`位置的值与索引相同   

此时若将`K`再加`1`，本来索引与值正好相等，然而索引却变小了`1`，因此可以知道`K+1`时对应的这些位置的分值便会减少，不妨记录下、当某个位置的分值由原本的有效到无效时的`K`的值：
`[4,4,2,5,5]`等价`[4,4,2,0,0]`，因此可以知道每一个K值对应的分值的减少的数据:  
* `K`变`0`时，分值将减小`2`分   
* `K`变`2`时，分值将减小`1`分  
* `K`变`4`时，分值将减小`2`分  

总结为：  
`K(score减小值)=[-2,0,-1,0,-2]`  
此时我们得到了每一个`K`值对应减少的分数  
又每一个`0`位置变为`N-1`位置时必定会增加一个分值（`A[i]<=A.length`，等于A.length的可以不用计算，但是因为减小的分数时计算了这个值，因此这里也需要将其等+1处理）  
因此题目可以分为3个步骤来进行
1. 求出每个`K`值变化时其分数减少的数目
2. 设当`K`为`0`时的分数基准为0分
3. 每个K值变化时，`score = preScore + addScore - minusScore`
4. 找到`score`最大值时所对应的`K`值

对应代码
```js
var bestRotation = function(A) {
    let len = A.length;
    let max=-Infinity;
    //求出对应K值得分数减少的数值
    let change = new Array(len).fill(0);
    for(let i=0;i<len;i++){
        change[(i-A[i]+1+len)%len]-=1
    }
    //找到最大的分值对应的索引
    let maxIndex = 0;
    //默认设0号位置的分值为0、这个值可以随意设置，因为我们不需要知道其具体分值，只需要找到其最大值
    let score = 0;
    let maxScore = score;
    for (let i = 1; i < len; i++) {
        let nextScore = score+change[i]+1;
        if(nextScore>maxScore){
            maxScore = nextScore
            maxIndex=i;
        }
        score = nextScore;
    }
    return maxIndex;
};
```