看似简单的字符串遍历，实际蕴含很多坑
坑点1.找子串遍历时，是+1，不是+strlen(sub_str)     

```
            //p = strstr(p + strlen(dict[i]), dict[i]);
            p = strstr(p + 1, dict[i]);
```
坑点2.直观的想法第一次遍历插入所有标记，第二次遍历时去掉重复插入。这是我最开始选用的算法。陷入了复杂的条件判断。

下面介绍我最终通过的做法：
1.搞一个map,把所以是子串的都标记成1, 这里注意，由于我的b_map是char类型，所以可以直接用memset，如果被定义成int，还是for循环赋值吧

```
    for (int i = 0; i < dictSize; i++) {
        char *p = strstr(s, dict[i]);
        while (p != NULL) {
            int offset_start = p - s;
            memset(b_map + offset_start, 1, strlen(dict[i]));
            p = strstr(p + 1, dict[i]);
        }
    }
```

2.第二步就是根据b_map转字符串了，如果被标记为1，那么就是要被加粗的，在第一个1前加<b>,最后一个1后加</b>,这里注意边界，b_map[0]和b_map[end]可能是1

```
    for (int i = 0; i < strlen(s) + 1; i++) {
        switch (b_map[i]) {
            case 0:
            {
                if ((i > 0) && (b_map[i - 1] == 1)) {
                    memcpy(p_out, "</b>", strlen("</b>"));
                    p_out += strlen("</b>"); 
                }
                memcpy(p_out, p_org, 1);
                p_org++;
                p_out++;        
            }
                break;
            case 1:
            {
                if ((i == 0) ||
                    ((i > 0) && (b_map[i - 1] == 0))) {
                    memcpy(p_out, "<b>", strlen("<b>"));
                    p_out += strlen("<b>");
                }
                memcpy(p_out, p_org, 1);
                p_org++;
                p_out++;
                if (i == strlen(s)) {
                    memcpy(p_out, "</b>", strlen("</b>"));
                    p_out += strlen("</b>"); 
                }
            }
                break;
        }
    }
```

测试用例：
#if 0
/* test case 0*/
int dictSize = 3;
char s[] = "aaabbcc";
char dict[3][4] = {
    "aaa",
    "aab",
    "bc"
};
#endif

#if 0
/* test case 1*/
#define DICSIZE 26
int dictSize = DICSIZE;
char s[] = 
"aqbqzvwialgmmolvsnavdrwpvneljdfyuvrnjelgpbrpmsgbixvhljhowlhkbomwexaqvhhaztcsvmusfhropjpwzedccymifkmrlcfhocolkssbljmakfuezfxitpkkmuifzusfzcfvfwdvtbbqubnegbnomaquxjfmsnwzccqzthpmhkrvezweaukbuxohfagifhuyuswvdydkwrqmdjecqxblzwdjwcqxczssntyuehjbxbehsdqmqihfwaeleqpjttlgifsxwwqaeezsnslnzdnfojswswlvkfcbznzhtcjupepvrvroetsxtvyjeqwlhdmakrnbptsvppzstevhbdekluulfmwwtgdbgypq";

char dict[DICSIZE][4] = {
"aq","bq","zv","wi","al","gm","mo","lv","sn","av","dr","wp","vn","el","jd","fy","uv","rn","je","lg","pb","rp","ms","gb","ix","vh"
};
#endif

#if 0
/* test case 2*/
#define DICSIZE 3
int dictSize = DICSIZE;
char s[] = 
"aaabbcc";

char dict[DICSIZE][4] = {
"a","b","c"
};
#endif
#if 0
/* test case 3*/
#define DICSIZE 4
int dictSize = DICSIZE;
char s[] = "abcdef";

char dict[DICSIZE][4] = {"a","e","c","g"
};
#endif
#if 0
/* test case 4*/
#define DICSIZE 2
int dictSize = DICSIZE;
char s[] = "abcxyz123";

char dict[DICSIZE][4] = {"abc","123"};
#endif

#if 1
/* test case 4*/
#define DICSIZE 14
int dictSize = DICSIZE;
char s[] = "qrzjsorbkmyzzzvoqxefvxkcwtpkhzbakuufbpgdkykmojwuennrjeciqvvacpzrrczfhxnsmginzwinzihpomxtmweyyzzmgcoiupjnidphvzlnxtcogufozlenjfvokztghwckzyvmktduqkizixzxpanjwrdeudjyftxksjgdklwxrhmudhrtemuvelykqaafzlqmennttkighcdxfozdcoqkyshhajipnsdrljrnlwmyjuwxsebpqm";

char dict[DICSIZE][4] = {"qr","zj","so","rb","km","yz","zz","vo","qx","ef","vx","kc","wt","pk"};
#endif
