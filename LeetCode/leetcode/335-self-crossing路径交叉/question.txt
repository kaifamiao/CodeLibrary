self-crossing
给定一个含有<code>n</code>个正数的数组<em>x</em>。从点<code>(0,0)</code>开始，先向北移动<code>x[0]</code>米，然后向西移动<code>x[1]</code>米，向南移动<code>x[2]</code>米，向东移动<code>x[3]</code>米，持续移动。也就是说，每次移动后你的方位会发生逆时针变化。

编写一个<code>O(1)</code>空间复杂度的一趟扫描算法，判断你所经过的路径是否相交。



<strong>示例1:</strong>

<pre><strong>┌───┐
│  │
└───┼──&gt;
  │

输入: </strong><code>[2,1,1,2]</code>
<strong>输出:</strong> true 
</pre>

<strong>示例2:</strong>

<pre><strong>┌──────┐
│   │
│
│
└────────────&gt;

输入: </strong><code>[1,2,3,4]</code>
<strong>输出: </strong>false 
</pre>

<strong>示例 3:</strong>

<pre><strong>┌───┐
│  │
└───┼&gt;

输入:</strong> <code>[1,1,1,1]</code>
<strong>输出:</strong> true 
</pre>

路径交叉
You are given an array <i>x</i> of <code>n</code> positive numbers. You start at point <code>(0,0)</code> and moves <code>x[0]</code> metres to the north, then <code>x[1]</code> metres to the west, <code>x[2]</code> metres to the south, <code>x[3]</code> metres to the east and so on. In other words, after each move your direction changes counter-clockwise.

Write a one-pass algorithm with <code>O(1)</code> extra space to determine, if your path crosses itself, or not.



<b>Example 1:</b>

<pre>
<strong>┌───┐
│  │
└───┼──&gt;
  │

Input: </strong><code>[2,1,1,2]</code>
<strong>Output: </strong>true
</pre>

<b>Example 2:</b>

<pre>
<strong>┌──────┐
│   │
│
│
└────────────&gt;

Input:</strong> <code>[1,2,3,4]</code>
<strong>Output: </strong>false 
</pre>

<b>Example 3:</b>

<pre>
<strong>┌───┐
│  │
└───┼&gt;

Input:</strong> <code>[1,1,1,1]</code>
<strong>Output:</strong> true 
</pre>
