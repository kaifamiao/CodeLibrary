### 思路:
1. 考虑题意: 必然存在一条分界线把 `A` 拆分成两半，存在两大类情况：
2. 长度为 `L` 的连续子数组在左边, 长度为 `M` 的连续子数组在右边
3. 或者反过来长度为 `M` 的连续子数组在左边, 长度为 `L` 的连续子数组在右边

引入

1. `dp[i][0]`: 从 `A[0]-A[i]` 连续 `L` 长度子数组最大的元素和
2. `dp[i][1]`: 从 `A[0]-A[i]` 连续 `M` 长度子数组最大的元素和
3. `dp[i][2]`: 从 `A[i]-A[A.size()-1]` 连续 `L` 长度子数组最大的元素和
4. `dp[i][3]`: 从 `A[i]-A[A.size()-1]` 连续 `M` 长度子数组最大的元素和
5. 某些超出范围的下标, 值设置为 `0 `(默认值)

代码中首先用滑动窗口计算了 `dp`, 然后将 `dp` 分成两组, 计算两大类情况下的结果，取最大值返回即可

### 代码：
```cpp [-C++]
class Solution {
public:
	int maxSumTwoNoOverlap(vector<int>& A, int L, int M) {
		//计算dp, 4个滑动窗口, 4种情况
		vector<vector<int>> dp(A.size(), vector<int>(4, 0));
		int presum = 0;
		int maxsum;
		for (int i = 0; i < L; ++i)
		{
			presum += A[i];
		}
		maxsum = presum;
		dp[L - 1][0] = maxsum;
		for (int i = L; i < A.size(); ++i)
		{
			presum -= A[i - L];
			presum += A[i];
			maxsum = max(maxsum, presum);
			dp[i][0] = maxsum;
		}

		presum = 0;
		for (int i = 0; i < M; ++i)
		{
			presum += A[i];
		}
		maxsum = presum;
		dp[M - 1][1] = maxsum;
		for (int i = M; i < A.size(); ++i)
		{
			presum -= A[i - M];
			presum += A[i];
			maxsum = max(maxsum, presum);
			dp[i][1] = maxsum;
		}

		presum = 0;
		for (int i = A.size() - 1; i >= A.size() - L; --i)
		{
			presum += A[i];
		}
		maxsum = presum;
		dp[A.size() - L][2] = maxsum;
		for (int i = A.size() - L - 1; i >= 0; --i)
		{
			presum -= A[i + L];
			presum += A[i];
			maxsum = max(maxsum, presum);
			dp[i][2] = maxsum;
		}

		presum = 0;
		for (int i = A.size() - 1; i >= A.size() - M; --i)
		{
			presum += A[i];
		}
		maxsum = presum;
		dp[A.size() - M][3] = maxsum;
		for (int i = A.size() - M - 1; i >= 0; --i)
		{
			presum -= A[i + M];
			presum += A[i];
			maxsum = max(maxsum, presum);
			dp[i][3] = maxsum;
		}

		//计算答案
		int res = 0;
		//L在M左边
		for (int i = L; i <= A.size() - M; ++i)
			res = max(res, dp[i - 1][0] + dp[i][3]);
		//M在L左边
		for (int i = M; i <= A.size() - L; ++i)
			res = max(res, dp[i - 1][1] + dp[i][2]);

		return res;
	}
};
```
