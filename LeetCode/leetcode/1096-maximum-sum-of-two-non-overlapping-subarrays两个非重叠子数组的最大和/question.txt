maximum-sum-of-two-non-overlapping-subarrays
给出非负整数数组 <code>A</code> ，返回两个非重叠（连续）子数组中元素的最大和，子数组的长度分别为 <code>L</code> 和 <code>M</code>。（这里需要澄清的是，长为 L 的子数组可以出现在长为 M 的子数组之前或之后。）

从形式上看，返回最大的 <code>V</code>，而 <code>V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1])</code> 并满足下列条件之一：



<ul>
	<code>0 &lt;= i &lt; i + L - 1 &lt; j &lt; j + M - 1 &lt; A.length</code>, <strong>或</strong>
	<code>0 &lt;= j &lt; j + M - 1 &lt; i &lt; i + L - 1 &lt; A.length</code>.
</ul>



<strong>示例 1：</strong>

<pre><strong>输入：</strong>A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2
<strong>输出：</strong>20
<strong>解释：</strong>子数组的一种选择中，[9] 长度为 1，[6,5] 长度为 2。
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2
<strong>输出：</strong>29
<strong>解释：</strong>子数组的一种选择中，[3,8,1] 长度为 3，[8,9] 长度为 2。
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3
<strong>输出：</strong>31
<strong>解释：</strong>子数组的一种选择中，[5,6,0,9] 长度为 4，[0,3,8] 长度为 3。</pre>



<strong>提示：</strong>

<ol>
	<code>L &gt;= 1</code>
	<code>M &gt;= 1</code>
	<code>L + M &lt;= A.length &lt;= 1000</code>
	<code>0 &lt;= A[i] &lt;= 1000</code>
</ol>

两个非重叠子数组的最大和
Given an array <code>A</code> of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths<code>L</code> and <code>M</code>. (For clarification, the <code>L</code>-length subarray could occur before or after the <code>M</code>-length subarray.)

Formally,return the largest <code>V</code> for which<code>V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1])</code> and either:

<ul>
	<code>0 &lt;= i &lt; i + L - 1 &lt; j &lt; j + M - 1 &lt; A.length</code>, <strong>or</strong>
	<code>0 &lt;= j &lt; j + M - 1 &lt; i &lt; i + L - 1 &lt; A.length</code>.
</ul>



<ol>
</ol>

<div>
<strong>Example 1:</strong>

<pre>
<strong>Input: </strong>A = <span id="example-input-1-1">[0,6,5,2,2,5,1,9,4]</span>, L = <span id="example-input-1-2">1</span>, M = <span id="example-input-1-3">2</span>
<strong>Output: </strong><span id="example-output-1">20
<strong>Explanation:</strong> One choice of subarrays is [9] with length 1, and [6,5] with length 2.</span>
</pre>

<div>
<strong>Example 2:</strong>

<pre>
<strong>Input: </strong>A = <span id="example-input-2-1">[3,8,1,3,2,1,8,9,0]</span>, L = <span id="example-input-2-2">3</span>, M = <span id="example-input-2-3">2</span>
<strong>Output: </strong><span id="example-output-2">29
</span><span id="example-output-1"><strong>Explanation:</strong> One choice of subarrays is</span><span> [3,8,1] with length 3, and [8,9] with length 2.</span>
</pre>

<div>
<strong>Example 3:</strong>

<pre>
<strong>Input: </strong>A = <span id="example-input-3-1">[2,1,5,6,0,9,5,0,3,8]</span>, L = <span id="example-input-3-2">4</span>, M = <span id="example-input-3-3">3</span>
<strong>Output: </strong><span id="example-output-3">31
</span><span id="example-output-1"><strong>Explanation:</strong> One choice of subarrays is</span><span> [5,6,0,9] with length 4, and [3,8] with length 3.</span>
</pre>



<strong>Note:</strong>

<ol>
	<code>L &gt;= 1</code>
	<code>M &gt;= 1</code>
	<code>L + M &lt;= A.length &lt;= 1000</code>
	<code>0 &lt;= A[i] &lt;= 1000</code>
</ol>
</div>
</div>
</div>
