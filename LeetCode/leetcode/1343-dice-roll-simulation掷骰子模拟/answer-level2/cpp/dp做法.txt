```cpp
class Solution {
public:
    int dieSimulator(int n, vector<int>& rollMax) {
        const int mod=1000000000+7;
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(6,vector<int>(16,0)));//dp[i][j][k]表示第i次最后一次掷j连续了k次的方案数
        for(int j=0;j<6;j++)dp[0][j][1]=1;//第0次点数为j只能连续一次
        for(int i=1;i<n;i++){//第i次投掷
            for(int j=0;j<6;j++){//此次掷j
                for(int t=0;t<6;t++){//上一次掷t
                    if(j==t){//如果上一次和这一次点数相同
                        for(int k=2;k<=rollMax[t];k++)dp[i][j][k]=(dp[i][j][k] + dp[i-1][t][k-1]) % mod;
                    }
                    else {
                        for(int k=1;k<=rollMax[t];k++)dp[i][j][1]=(dp[i][j][1] + dp[i-1][t][k]) % mod;
                    }
                }
            }
        }
        int res=0;
        for(int i=0;i<6;i++){
            for(int k=1;k<=rollMax[i];k++){
                res = (res + dp[n-1][i][k]) % mod;
            }
        }
        return res;
    }
};
```