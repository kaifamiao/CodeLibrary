### 梗概
这道题第一印象以为是道数学题，正准备跳过的时候看到评论区有人提到可以用动态规划解，于是又回过头去看，发现这是一道高维度的动态规划题，理清思路花了不少时间，但下手写起代码就很快了。
评论区和题解区很少有人能讲明白思路，所以打算写下我写这道题的思路，方便大家参考。

### 解题思路
首先创建一个三维数组`int dp[n][7][16]`,（所有元素初始化为0），由高到低三个索引分别代表掷骰子次数、骰子点数（1~6）、本次投掷后该点数已经连续出现的次数（第一次出现则次数为1）。很明显第一次投骰子的可能性有6个，每个点数各占一个，所以数组应该这样初始化：
```
for (int i = 1; i < 7; ++i) {
    dp[0][i][1] = 1;
}
```
`dp[0][1][1] = 1`代表的意义是**第一次**投骰子，**点数为1**且**该点数已连续出现的次数为1**的可能情况有一种。
在继续计算之前我们需要清楚以下问题：
1. 最终要的结果是什么？（应该是某些值的累加）
2. 这次投骰子后哪些值会发生变化？与上一次投的点数有何关联？

第一个问题，最终的结果应该是最后一次投骰子之后，1~6所有可能出现的连续次数对应的情况个数，也就是
```
int sum = 0;
for (int i = 1; i < 7; ++i) {
    for (int t = 1; t <= rollMax[i-1]; ++t) {
        sum = (sum + dp[n - 1][i][t]) % divider;
    }
}
return sum;
```
第二个问题，这次投骰子之后，**出现某个点数及其已经连续出现某次数**对应的情况的个数会发生改变，比如第五次投骰子，`dp[4][1][2]`的值会发生变化，也即第五次投的点数为1且1已经连续出现2次对应的情况的个数会发生改变。

那么该如何根据上一次点数来判断这次投骰子后各值的变化呢？
1、 如果上一次出现的点数与这一次相同，那么该点数在这次投掷后已连续出现`t + 1`次的情况的个数，等于该点数在上一次投掷后已连续出现`t`次的情况，即`dp[i][j][t + 1] = dp[i - 1][j][t]`,当然前提是`t`必须在`1 ~ rollMax[j - 1]`范围内，如果某个点数最多只能连续出现2次，计算其连续出现3次的情况是没有意义的，该情况个数必定为0。
2、 如果上一次出现的点数与这一次不同，那么这次的点数出现的连续次数必然是1，那么`dp[i][j][1]`就等于上一次出现的点数及该点数所有可能的已连续出现次数对应的情况的个数的总和。

这样，在每次投掷后，第二点里更新`dp[i][j][1]`，第一点里更新除了1以外其他所有`j`可能已连续出现的次数对应的情况的个数。`1 <= j <= 6`，每次投掷遍历`j`即可得到所有的情况。

讲到这里整个程序的基本框架就出来了，以下是代码：


### 代码

```cpp
class Solution {
public:
    int dieSimulator(int n, vector<int>& rollMax) {
        const int divider = 1e9 + 7;
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(7,vector<int>(16,0)));//与用三维数组同理
        for (int i = 1; i < 7; ++i) {
            dp[0][i][1] = 1;
        }
        for (int i = 1; i < n; ++i) {//第i + 1次投掷
            for (int j = 1; j < 7; ++j) {//出现的点数为j
                for (int k = 1; k < 7; ++k) {//上一次出现的点数为k
                    if (j != k) {
                        for (int t = 1; t <= rollMax[k-1]; ++t) {
                            dp[i][j][1] += dp[i - 1][k][t];
                            dp[i][j][1] %= divider;
                        }
                    }
                    else {
                        for (int t = 1; t < rollMax[k-1]; ++t) {
                            dp[i][j][t + 1] += dp[i - 1][k][t];
                            dp[i][j][t + 1] %= divider;
                        }
                    }
                }
            }
        }
        int sum = 0;
        for (int i = 1; i < 7; ++i) {
            for (int t = 1; t <= rollMax[i-1]; ++t) {
                sum = (sum + dp[n - 1][i][t]) % divider;
            }
        }
        return sum;

    }
};
```

### 优化
我们发现每次计算dp都只需要加上上次的结果，所以不必要用三维数组，实际上写代码时只需要二维，只是需要三维的思想。代码改进如下：
```
class Solution {
public:
    int dieSimulator(int n, vector<int>& rollMax) {
        const int divider = 1e9 + 7;
        vector<vector<int>> dp(7,vector<int>(16,0));
        for (int i = 1; i < 7; ++i) {
            dp[i][1] = 1;
        }
        vector<vector<int>> temp ;//暂时存储上一次投掷后的结果
        for (int i = 1; i < n; ++i) {
            temp = dp; 
            for (int j = 1; j < 7; ++j) {
                dp[j][1] = 0;
                for (int k = 1; k < 7; ++k) {
                    if (j != k) {
                        for (int t = 1; t <= rollMax[k-1]; ++t) {
                            dp[j][1] += temp[k][t];
                            dp[j][1] %= divider;
                        }
                    }
                    else {
                        for (int t = 1; t < rollMax[k-1]; ++t) {
                            dp[j][t + 1] = temp[k][t];
                        }
                    }
                }
            }
        }
        int sum = 0;
        for (int i = 1; i < 7; ++i) {
            for (int t = 1; t <= rollMax[i-1]; ++t) {
                sum = (sum + dp[i][t]) % divider;
            }
        }
        return sum;

    }
};
```
