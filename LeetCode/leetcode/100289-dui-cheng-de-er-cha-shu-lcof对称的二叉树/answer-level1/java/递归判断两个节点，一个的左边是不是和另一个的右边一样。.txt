### 解题思路
执行用时 : 0 ms , 在所有 Java 提交中击败了 100.00% 的用户 
内存消耗 : 38.3 MB , 在所有 Java 提交中击败了 100.00% 的用户


其实先想到的是层序遍历，然后每次取到一层后，检查这一层是不是对称的，但是超时了。

### 代码

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null){
            return true;
        }
        return isSymmetric(root,root);
    }

    public boolean isSymmetric(TreeNode node1,TreeNode node2){

        if(node1==null && node2==null){
            return true;
        }
        if(node1==null || node2==null){
            return false;
        }
        if(node1.val!=node2.val){
            return false;
        }
        return isSymmetric(node1.left,node2.right) && isSymmetric(node1.right,node2.left);
    }
}
```