**有任何不懂的请留言，我会尽力解答**

# 题目
在一个由小写字母构成的字符串 S 中，包含由一些连续的相同字符所构成的分组。

例如，在字符串 S = "abbxxxxzyy" 中，就含有 "a", "bb", "xxxx", "z" 和 "yy" 这样的一些分组。

我们称所有包含大于或等于三个连续字符的分组为较大分组。找到每一个较大分组的起始和终止位置。

输入: "abbxxxxzzy"
输出: [[3,6]]
解释: "xxxx" 是一个起始于 3 且终止于 6 的较大分组，3和6分别是他们所在的下标。

# 看了题解，作为小白并不知道双指针是什么，所以了解了下什么是指针？
指针就是一个存放了内存地址的变量（可变），只是这个变量比较特殊，只存地址。如果这个指针指向了变量B，那么该指针里存放了变量B的内存地址。

举例：有100个凳子摆成一排。第15个凳子上坐着张三，第2个座位上摆着一个纸条，上面写着“第15个座位上的人”。  那么，第15个凳子上的张三就是一个值，第二个座位上的纸条就是一个指针。你可以直接找到张三，也可以循着第二个座位上的纸条找到张三。也类似一个门牌号。

# 作为菜鸡的我是怎样的思路
字符串abbxxxxzyy，有1个左指针指向了a，有1个右指针指向了b，判断左指针是否等于右指针。
1.如果相等的话，那么我们把右指针往右移动1下，继续判断是否等于左指针所在的字符。直到右指针-左指针>=3，我们就可以返回结果了。
2.如果不想等的话，左指针替代右指针的位置，右指针也往右移动1下，后面的字符串继续上面的判断。


```
class Solution:
    def largeGroupPositions(self,S):
        if len(S) < 2:
            return []
        
        left = 0 # 可以理解为该指针指向了下标为0的字符
        right = 1
        ans = []
        while right < len(S):
            while right < len(S) and S[left] == S[right]: 
                right = right + 1 # 当右指针小于字符串长度并且右指针等于左指针，那么右指针往右移动，再进行上面当判断
            if right - left >= 3:
                ans.append([left,right-1]) # 上面当while循环把右指针往右移动了1位，这里需要减掉1位，才是符号条件当结果
            left = right # 如果上述条件不满足，那么,左指针替代右指针的位置，继续判断后面的
            right = right + 1
        return ans
```

