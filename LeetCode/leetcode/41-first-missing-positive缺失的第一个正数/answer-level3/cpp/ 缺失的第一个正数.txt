### 解题思路
本来想通过自己的努力，不借助高级数据结构来完成。看样子还是不行啊。自己之前的代码有很大的问题。虽然可以算出来，但是面对刁钻的输入会造成巨大的浪费，一但里面有一个max和min差值过大，就会面临巨大的空间浪费。其实早就该用set而不是通过在通过每一个数字对应数组一个位置来完成的。因为可能数和数之前的差值很大。多出来的空间完全浪费。还不如用set的特性。
首先将nums中的每一个元素存入set中。由于set不能存入相同的数据，因此解决了相同数字输入的问题。
其二就是放入之后元素就有序了。set通过二叉树能很快的将插入元素放入正确位置。
然后就是从1开始找，缺少那个数字。

### 代码

```cpp
//int firstMissingPositive(vector<int>& nums) {
//	int max = 0;
//	int min = INT_MAX;
//	int size = nums.size();
//	bool existMinus = false;
//	for (int i = 0; i < size; i++) {
//		if (nums[i] > max)
//			max = nums[i];
//		if (nums[i] >= 0) {
//			if (nums[i] < min)
//				min = nums[i];
//		}
//		else
//			existMinus = true;
//	}
//	if (min > 1)
//		return 1;
//	int tempSize = max - min + 2;
//	int* temp = new int[tempSize];
//	for (int i = 0; i < tempSize; i++)
//		temp[i] = 0;
//	for (int i = 0; i < size; i++)
//		if (nums[i] - min >= 0)
//			temp[nums[i] - min] = 1;
//	for (int i = 0; i < tempSize; i++)
//		if (temp[i] == 0)
//			return i + min;
//	return tempSize;
//}
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        set<int> result;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > 0)
                result.insert(nums[i]);
        }
        int maxNum = 1;
        for (auto ptr = result.begin(); ptr != result.end(); ptr++, maxNum++) {
            if (*ptr != maxNum)
                return maxNum;
	}
	return result.size() + 1;
}
};
```