计数排序，适合整数排序，速度上越超比较排序的，算法在时间复杂度上，不管好坏平均都是O(n) = (n+k)；
但是需要一个额外的数组的下坐标来作为储存他们的值。
举例子： [3,1,2] ;在计数排序的思想下，我们先要用这个数组的长度来生成一个同等长度的临时数组 => [ , , ],
在循环[3,1,2]，根据他们的值对应到临时数组的下坐标，同时在这个临时数组所在下坐标设置一个标志符，我习惯设置成1，也就是这样了[1,1,1]，因为起始位置为1。
为什么循环临时数组长度+1的起始位置不为0？（有人可能会有疑问）
因为0不是正数，最小的正数是1，如果1也不算正数了，那么起始位置为2...
以下是我的算法答案，现在只是排在第二位
```
function findThat(nums) {
	var temMax = new Array(nums.length);
	for (var m = 0;  m < nums.length; m++) {
		temMax[nums[m]] = 1
	}
	for (var f = 1; f <= temMax.length; f++) {
		if (temMax[f] !== 1 ) {
			return f
		}
	}
	return 1
}
```