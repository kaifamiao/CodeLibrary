#### 暴力法
- 非常自然的思路：令 `pairNum` 表示匹配数目，我们自前向后双重循环，每遇到匹配的牌，`pairNum` 就加 $1$。最后返回 `pairNum`。
- 不分好差情况，时间复杂度都是 $O(n2)$；空间复杂度是 $O(1)$。
- 但答案没通过，会超时。

<![IMG_0220.PNG](https://pic.leetcode-cn.com/7280293bd5c51f59b1ee68ccbb7f93f8976b7273034183cb778573333e74fbf1-IMG_0220.PNG),![IMG_0221.PNG](https://pic.leetcode-cn.com/7d894f5784f8fd0b941f91825a795c7c23223eaae39fb28e41555159e7009d81-IMG_0221.PNG),![IMG_0222.PNG](https://pic.leetcode-cn.com/e33032bec152f0bd42956ae97233dc9f2651fbb9ce02c9e38c70476570b64717-IMG_0222.PNG),![IMG_0223.PNG](https://pic.leetcode-cn.com/f39e4a956eeb412839275b2d4ba59acfbeea8de252e085935e48a1b3e172e438-IMG_0223.PNG),![IMG_0225.PNG](https://pic.leetcode-cn.com/d1325219b8340814dc91f7b413c4255266c014f9cc033b2b2945f7f88ff03bcd-IMG_0225.PNG),![IMG_0227.PNG](https://pic.leetcode-cn.com/93e6a61ee8045da66d90522c0b8e195b1c5d62e8996f81e6ec77a2a9889937a6-IMG_0227.PNG)>

```Python []
class Solution:
    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        
        if len(dominoes) == 0 or len(dominoes[0]) == 0:
            return 0
        
        pairNum = 0
        
        for i in range(len(dominoes)-1):
            for j in range(i+1, len(dominoes)):
                if dominoes[i][0] == dominoes[j][0] and dominoes[i][1] == dominoes[j][1]:
                    pairNum += 1
                elif dominoes[i][0] == dominoes[j][1] and dominoes[i][1] == dominoes[j][0]:
                    pairNum += 1
        return pairNum
```
#### 删除法
- 我们想想会发现，等价具有传递性，即如果 `a=b`，`a=c`，那么 `b=c`。
- 暴力法耗时长是因为，在它知道 `a=b`，`a=c`之后，还去比较 `b` 和 `c` 是否等价。而如果我们把 `a，b` 和 `c` 看成一组，就可以省去不必要的比较；$3$ 张牌互为等价，对 `pairNum` 的贡献是 `3*（3-1）/2=3` 张。
- 所以在暴力法的基础上我做了小改进。对于每张牌，令 `cnt` 为 $0$，自后向前找它的匹配牌，每找到一个就再列表里删除一个，并让 `cnt+1`。然后令 `pairNum += cnt*（cnt-1）/2`。再开始找下一张牌的匹配牌。
- 这里删除操作是为了减小后面的遍历操作次数；而选择自后向前，是为了使得在删除操作之后索引值不混乱。

<![IMG_0228.PNG](https://pic.leetcode-cn.com/2b3c8f57363f64cdc472a68942d0511196deb6bec5cf6f497189614cafe57aa4-IMG_0228.PNG),![IMG_0231.PNG](https://pic.leetcode-cn.com/690854a5fe2bc520722c0096effdbbaac06cc5dce4e5ff5ad669be2c42f3a6ef-IMG_0231.PNG),![IMG_0232.PNG](https://pic.leetcode-cn.com/e113a4713e40a36dc291fbcc87e059219ec4dd726ce5fc7d0cacb27748dde708-IMG_0232.PNG),![IMG_0233.PNG](https://pic.leetcode-cn.com/2190380106743a8379090614dfe8deb15976e30c5fb9f407ca8ce93e63b5d84c-IMG_0233.PNG),![IMG_0234.PNG](https://pic.leetcode-cn.com/aa30ec1da6e691d1a51cd65ae2ceb176366207b862f8f20e6d848da3b9f5701e-IMG_0234.PNG),![IMG_0235.PNG](https://pic.leetcode-cn.com/58434859acf6fe26d6312d0cd4a6c8aa8436e63a624d6bbda69827052cd90037-IMG_0235.PNG),![IMG_0236.PNG](https://pic.leetcode-cn.com/01a97c988713cf105d061619535d3bf561b98ad628f92b2b112666a965afc084-IMG_0236.PNG)>

```Python []
class Solution:
    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        
        if len(dominoes) == 0 or len(dominoes[0]) == 0:
            return 0
        
        pairNum = 0
        
        for i in range(len(dominoes)-1):
            cnt = 0
            if i >= len(dominoes):# 因为我们有删除操作，所以dominoes的长度小了，i会超出索引值
                break
            for j in range(len(dominoes)-1, i, -1):# 从最后一张牌向前遍历，直到i+1
                if dominoes[i][0] == dominoes[j][0] and dominoes[i][1] == dominoes[j][1]:
                    cnt += 1
                    del dominoes[j]
                elif dominoes[i][0] == dominoes[j][1] and dominoes[i][1] == dominoes[j][0]:
                    cnt += 1
                    del dominoes[j]
            pairNum += int(cnt*(cnt+1)/2)
        return pairNum
    
```


#### hashmap
 - 设计一种 `list->int` 映射方式，较小的数字作十位，较大的数字作个位。比如，`(1, 2)` 和 `(2, 1)` 都会映射为数字 $12$。这样一来，等价的骨牌都会有相同的映射。
 - 通过一次遍历，用字典来记录{映射结果：出现次数}。
- 最后，遍历字典计算次数。代码给出了两种方法，一种是跟上面的一样，求 `k*(k-1)/2`；另一种是实时计算:当你遇到`(1, 2)`时，如果 $12$ 之前出现了 $m$ 次，那么新加入的 $12$ 就能再多贡献 $m$ 个匹配对数。
- 时间复杂度：$O(n)$
- 空间复杂度：$O(n)$

**这道题的核心就是要想到：将等价牌映射到同一数值**

<![IMG_0241.PNG](https://pic.leetcode-cn.com/26ba053c41fe089494b824cf2429c70d36c0f7ab9148464260390c5f15141f8a-IMG_0241.PNG),![IMG_0242.PNG](https://pic.leetcode-cn.com/71bd57c9f890a0e9c976aa3792d6f6d06f1a827ec25b0a9a101a4f85ec45caa4-IMG_0242.PNG),![IMG_0243.PNG](https://pic.leetcode-cn.com/d60457c2b3558436b4ad099df96e17f4ed14f9b42769c851b7f114b64bdc1f31-IMG_0243.PNG),![IMG_0244.PNG](https://pic.leetcode-cn.com/3a809c790010fc06ae85f1d11dfd8530644da13452ac235f54004c67a35d2d85-IMG_0244.PNG),![IMG_0245.PNG](https://pic.leetcode-cn.com/1d7ae13907b2f87e78244238173f53065d4faa61c941cd249d2f57eb40ff3245-IMG_0245.PNG),![IMG_0246.PNG](https://pic.leetcode-cn.com/7ccf35397d2a1844a296f94e01bdb6dc0a083ab29597e7762a9191711d06eb28-IMG_0246.PNG)>

```Python []
class Solution:
    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        ans = 0
        d = collections.defaultdict(int)   
        # step1     
        for i,j in dominoes:
            num = 10 * i + j if i < j else 10 * j+ i
            d[num] += 1
        # step2
        for k in d.values():
            ans += int(k*(k-1)/2)
        return ans
```


```Python []
class Solution:
    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        ans = 0
        d = collections.defaultdict(int)        
        for i,j in dominoes:
            num = 10 * i + j if i < j else 10 * j + i
            ans += d[num] # 原来num出现了几次，那么新加入1个num就能新组成几个匹配对
            d[num] += 1
        return ans
```
