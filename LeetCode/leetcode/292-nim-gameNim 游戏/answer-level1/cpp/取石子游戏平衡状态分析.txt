这是一类问题，首先有一个概念叫做**平衡状态**，在这个状态下，先手一方必输，所以游戏的目的就在于尽可能地取石子使得剩下的状态为平衡状态，举个例子来说，比如每次取走石子的数量规定为最小为1，最大为m，那么平衡状态就可以表示为`(m+1)*k`，也就是`(m+1)`的倍数，这种情况下，无论先手方如何选择，后手方总有办法将非平衡状态恢复成平衡状态直到最后成为`(m+1)`，这时候很明显先手方会输。
所以，如果起始状态表示为`(m+1)*k+l`的话，先手方先取`l`个石子，保证剩下的处于平衡状态，就能保证自己赢，所以对于这个题目来说，`m=3`，如果一开始是平衡状态，那么先手方就必输(也就是`l=0`的时候)，容易计算这个平衡状态时`(m+1)*k=4*k`，其他情况下(`4*k+1, 4*k+2, 4*k+3`)都可以取走对应的余数使之成为平衡状态。因此，直接去掉所有的4的倍数即可：
```
class Solution {
public:
    bool canWinNim(int n) {
        return n%4!=0;
    }
};
```
