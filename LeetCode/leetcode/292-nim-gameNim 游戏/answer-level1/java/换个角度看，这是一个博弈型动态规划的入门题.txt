换一个角度看，不把它当成数学题的话，这个题是博弈型动态规划的很好的入门题。
 首先从第一步开始分析，对于当前先手来说：

1. 如果剩余的石头为0，则当前先手必败。
2. 如果剩余石头为1-3，则当前先手必胜。

但现在有n个石头，如何判断先手是必胜还是必败？其实画个图很容易分析：

1. 当前先手对应n个石头，后手就对应n-1、n-2、n-3三种集合的石头

2. 每个集合一定都会对应必胜或者必败

3. 因此可以得到这样一个递推关系：

   只有当n-1、n-2、n-3三种集合都必胜时，n对应的集合才必败。因为不管n走哪条路，都一定对应着后手必胜，也就是对应着先手必败。

   而但凡后手对应的n-1、n-2、n-3三种集合有一种对应的是必败，先手都一定是必胜。因为玩家是绝对聪明的，一定会走让后手必败的路线。

因此可以得到状态转移方程：

```java
f(n) = !(f(n-1) && f(n-2) && f(n-3))
f(0) = false
```
当然最后一顿操作猛如虎，结果超时了。。。
```java
class Solution {
    public boolean canWinNim(int n) {
        boolean[] dp = new boolean[4];
        for(int i = 1; i <= n; i++) {
            boolean ret = true;
            ret &= dp[(i - 1) % 4];
            if(i >= 2) {
                ret &= dp[(i - 2) % 4];
            }
            if(i >= 3) {
                ret &= dp[(i - 3) % 4];
            }
            dp[i % 4] = !ret;
        }
        return dp[n % 4];
    }
}
```