shortest-path-with-alternating-colors
在一个有向图中，节点分别标记为<code>0, 1, ..., n-1</code>。这个图中的每条边不是红色就是蓝色，且存在自环或平行边。

<code>red_edges</code>中的每一个<code>[i, j]</code>对表示从节点 <code>i</code> 到节点 <code>j</code> 的红色有向边。类似地，<code>blue_edges</code>中的每一个<code>[i, j]</code>对表示从节点 <code>i</code> 到节点 <code>j</code> 的蓝色有向边。

返回长度为 <code>n</code> 的数组<code>answer</code>，其中<code>answer[X]</code>是从节点<code>0</code>到节点<code>X</code>的最短路径的长度，且路径上红色边和蓝色边交替出现。如果不存在这样的路径，那么 <code>answer[x] = -1</code>。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
<strong>输出：</strong>[0,1,-1]
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
<strong>输出：</strong>[0,1,-1]
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]
<strong>输出：</strong>[0,-1,-1]
</pre>

<strong>示例 4：</strong>

<pre><strong>输入：</strong>n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]
<strong>输出：</strong>[0,1,2]
</pre>

<strong>示例 5：</strong>

<pre><strong>输入：</strong>n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]
<strong>输出：</strong>[0,1,1]
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= n &lt;= 100</code>
	<code>red_edges.length &lt;= 400</code>
	<code>blue_edges.length &lt;= 400</code>
	<code>red_edges[i].length == blue_edges[i].length == 2</code>
	<code>0 &lt;= red_edges[i][j], blue_edges[i][j] &lt; n</code>
</ul>

颜色交替的最短路径
Consider a directed graph, with nodes labelled <code>0, 1, ..., n-1</code>. In this graph, each edge is either red or blue, and there couldbe self-edges or parallel edges.

Each <code>[i, j]</code> in <code>red_edges</code> denotes a red directed edge from node <code>i</code> to node <code>j</code>. Similarly, each <code>[i, j]</code> in <code>blue_edges</code> denotes a blue directed edge from node <code>i</code> to node <code>j</code>.

Return an array <code>answer</code>of length <code>n</code>,where each<code>answer[X]</code>isthe length of the shortest path from node <code>0</code>to node <code>X</code>such that the edge colors alternate along the path (or <code>-1</code> if such a path doesn&#39;t exist).


<strong>Example 1:</strong>
<pre><strong>Input:</strong> n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
<strong>Output:</strong> [0,1,-1]
</pre><strong>Example 2:</strong>
<pre><strong>Input:</strong> n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
<strong>Output:</strong> [0,1,-1]
</pre><strong>Example 3:</strong>
<pre><strong>Input:</strong> n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]
<strong>Output:</strong> [0,-1,-1]
</pre><strong>Example 4:</strong>
<pre><strong>Input:</strong> n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]
<strong>Output:</strong> [0,1,2]
</pre><strong>Example 5:</strong>
<pre><strong>Input:</strong> n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]
<strong>Output:</strong> [0,1,1]
</pre>

<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= n &lt;= 100</code>
	<code>red_edges.length &lt;= 400</code>
	<code>blue_edges.length &lt;= 400</code>
	<code>red_edges[i].length == blue_edges[i].length == 2</code>
	<code>0 &lt;= red_edges[i][j], blue_edges[i][j] &lt; n</code>
</ul>