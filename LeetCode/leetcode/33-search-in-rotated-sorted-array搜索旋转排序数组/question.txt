search-in-rotated-sorted-array
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组<code>[0,1,2,4,5,6,7]</code>可能变为<code>[4,5,6,7,0,1,2]</code>)。

搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回<code>-1</code>。

你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是<em>O</em>(log<em>n</em>) 级别。

<strong>示例 1:</strong>

<pre><strong>输入:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 0
<strong>输出:</strong> 4
</pre>

<strong>示例2:</strong>

<pre><strong>输入:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 3
<strong>输出:</strong> -1</pre>

搜索旋转排序数组
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).

You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.

You may assume no duplicate exists in the array.

Your algorithm&#39;s runtime complexity must be in the order of<em>O</em>(log<em>n</em>).

<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 0
<strong>Output:</strong> 4
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 3
<strong>Output:</strong> -1</pre>
