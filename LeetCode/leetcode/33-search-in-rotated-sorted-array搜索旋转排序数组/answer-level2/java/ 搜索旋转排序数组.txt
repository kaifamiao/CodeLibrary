思路：
按照二分的思路，每次二分一定有一段是有序的一段是混合的（代码注释中写的无序），所以当目标值在有序段时直接进行普通的二分查找过程即可；相反，如果目标值在混合段中则继续递归去划分区间，直到找到目标值所在的有序段然后普通二分返回结果或者目标不存在返回-1。

```java []
class Solution {
    public int search(int[] nums, int target) {
        return improveSearch(nums, 0, nums.length-1, target);
    }
    
        public int improveSearch(int[] nums, int left, int right, int key) {

        if (left <= right) {

            int mid = (left + right) / 2;

            if (nums[mid] == key) return mid;
            if (nums[left] == key) return left;
            if (nums[right] == key) return right;

            // 如果该段有序且目标值可能在其中则直接二分
            if (nums[left] < nums[mid] && key > nums[left] && key < nums[mid]) return binarySearch(nums, left, mid-1, key);

            // 如果该段有序且目标值不在其中则继续递归寻找目标值所在的有序段
            else if (nums[left] < nums[mid]) return improveSearch(nums, mid+1, right, key);

            // 该段无序则后段有序且目标值在后段中则直接二分
            else if (nums[left] > nums[mid] && key > nums[mid] && key < nums[right]) return binarySearch(nums, mid+1, right, key);

            // 该段无序则后段有序且目标不在其中则继续递归寻找目标值所在的有序段
            else if (nums[left] > nums[mid]) return improveSearch(nums, left, mid-1, key);
        }

        return -1;
    }

    public int binarySearch(int[] nums, int left, int right, int key) {

        if (left <= right) {
            int mid = nums[(left+right)/2];
            if (mid == key) return (left+right)/2;
            else if (mid < key) return binarySearch(nums, (left+right)/2+1, right, key);
            else if (mid > key) return binarySearch(nums, left, (left+right)/2-1, key);
        }

        return -1;
    }
}
```