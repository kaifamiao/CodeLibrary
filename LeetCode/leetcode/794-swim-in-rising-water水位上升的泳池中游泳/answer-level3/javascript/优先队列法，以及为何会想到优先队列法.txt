### 解题思路：
想解释给大家的不仅仅是这道题解题结果是什么，而是将解题的过程尽量详细化，为什么会有这种思路？  
依题意，首先想到的是：  
* 策略一：  
由起始点开始，每次都走**当前所在的点周围水位最低的点**。
但是这会有一个问题：  
当某个点的周围最小的点对应的路径可能反而是比较大的，比如：   

    ```
    0 1 4
    2 8 7
    3 6 5
    ```
    * 第一条路径：`start->1->4->7->end` 
    * 第二条路径：`start->2->3->6->end`  
    第一条路径对应的结果是 `7`，第二条路径对应的结果是 `6`，但是很明显第二条路径并非 `start` 周围的水位最低的点，因此会想到，**尽量在所有能走的点中选取水位最低的点**。 

优化下我们的行进策略：   
* 策略二：  
**所有的能走的点中我们永远只走水位最低的点**，每到一个点，我们再记录所有的周围能走的点，并再次选择所有能走的点中水位最低的点。   

    ```
    0 1 4
    2 8 7
    3 6 5
    ```
    * 此时我们第一步有两个选择 `[1,2]`，优先选择 `1` 点，`1` 点之后有 `[4,8]` 两点能走，现在所有能走的点为：`[2,4,8]` （`1` 点已经走过了）
    * 明显 `2` 点是水位最低的点，之后又多了 `3` 点能走（`8` 点已经记录了）此时所有能走的点为：`[3,4,8]` （`2` 点已经走过了）
    * 再走`3`点，多了`6`点可以走，此时所有能走的点为`[6,7,8]`选择第`6`号点，`6`号点能达到终点，达成目标
    * 观察我们刚才走过的路线，对应水位最高的点为 `6` 点，因此答案就是 `6` 了

总体思路：  
首先找到第一种策略，加以分析，找出其中的缺陷，然后对其优化。
### 对应代码： 
```js [-JavScript]
var swimInWater = function(grid) {
    let ARR = [[0,1],[0,-1],[1,0],[-1,0]];
    //记录所有已经访问过的点
    let dp = new Array(grid.length).fill(0).map(i=>new Array(grid[0].length).fill(0));
    let result = 0;
    let stack=[[0,0]];

    while(stack.length>0){
        let [row,col] = stack.shift();
        //用以记录当前已经保存的所有能走的点
        result = Math.max(result,grid[row][col]);

        if(row===grid.length-1 && col===grid[0].length-1){
            //达到终点结束遍历
            break;
        }
        for(let [dr,dc] of ARR){
            let [nr,nc] = [dr+row,dc+col];
            if(nr<grid.length && nr>=0 && nc<grid[0].length && nc>=0 && !dp[nr][nc]){
                dp[nr][nc]=1
                //此处若使用二分查找插入还能对时间进行优化
                stack.push([nr,nc,grid[nr][nc]])
            }
        }
        //排序还能使用二分插入法进行优化
        stack.sort((a,b)=>a[2]-b[2])
    }
    return result;
};
```