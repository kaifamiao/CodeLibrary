pour-water
给出一个地形高度图， <code>heights[i]</code> 表示该索引处的高度。每个索引的宽度为 1。在 <code>V</code> 个单位的水落在索引 <code>K</code> 处以后，每个索引位置有多少水？

水最先会在索引 <code>K</code> 处下降并且落在该索引位置的最高地形或水面之上。然后按如下方式流动：

<ul>
	如果液滴最终可以通过向左流动而下降，则向左流动。
	否则，如果液滴最终可以通过向右流动而下降，则向右流动。
	否则，在当前的位置上升。
	这里，&ldquo;最终下降&rdquo; 的意思是液滴如果按此方向移动的话，最终可以下降到一个较低的水平。而且，&ldquo;水平&rdquo;的意思是当前列的地形的高度加上水的高度。
	

	我们可以假定在数组两侧的边界外有无限高的地形。而且，不能有部分水在多于 1 个的网格块上均匀分布 - 每个单位的水必须要位于一个块中。
	
</ul>



<strong>示例 1：</strong>

<pre><strong>输入：</strong>heights = [2,1,1,2,1,2,2], V = 4, K = 3
<strong>输出：</strong>[2,2,2,3,2,2,2]
<strong>解释：</strong>
#       #
#       #
##  # ###
#########
 0123456    &lt;- 索引

第一个水滴降落在索引 K = 3 上：

#       #
#   w   #
##  # ###
#########
 0123456    

当向左或向右移动时，水可以移动到相同或更低的高度。When moving left or right, the water can only move to the same level or a lower level.
（从水平上看，意思是该列的地形高度加上水的高度）
由于向左移动可以最终下落，因此向左移动。
（一个水滴 &ldquo;下落&rdquo; 的意思是可以相比之前可以进入更低的高度）

#       #
#       #
## w# ###
#########
 0123456    

由于向左移动不会使其降落，所以停在该位置上。下一个水滴下落：

#       #
#   w   #
## w# ###
#########
 0123456  


由于新水滴向左移动可以最终下落，因此向左移动。
注意水滴仍然是优先选择向左移动，
尽管可以向右移动（而且向右移动可以下落更快）


#       #
#  w    #
## w# ###
#########
 0123456  

#       #
#       #
##ww# ###
#########
 0123456  

经过刚才的阶段后，第三个水滴下落。
由于向左移动不会最终下落，因此尝试向右移动。
由于向右移动可以最终下落，因此向右移动。


#       #
#   w   #
##ww# ###
#########
 0123456  

#       #
#       #
##ww#w###
#########
 0123456  

最终，第四个水滴下落。
由于向左移动不会最终下落，因此尝试向右移动。
由于向右移动不会最终下落，因此停在当前位置：

#       #
#   w   #
##ww#w###
#########
 0123456  

最终的答案为 [2,2,2,3,2,2,2]:

    #    
 ####### 
 ####### 
 0123456 
</pre>



<strong>示例 2：</strong>

<pre><strong>输入：</strong>heights = [1,2,3,4], V = 2, K = 2
<strong>输出：</strong>[2,3,3,4]
<strong>解释：</strong>
最后的水滴落在索引 1 位置，因为继续向左移动不会使其下降到更低的高度。
</pre>



<strong>示例 3：</strong>

<pre><strong>输入：</strong>heights = [3,1,3], V = 5, K = 1
<strong>输出：</strong>[4,4,4]
</pre>



<strong>注：</strong>



<ol>
	<code>heights</code> 的长度为<code>[1, 100]</code>，并且每个数的范围为<code>[0, 99]</code>。
	<code>V</code> 的范围<code>[0, 2000]</code>。
	<code>K</code>的范围<code>[0, heights.length - 1]</code>。
</ol>

倒水

We are given an elevation map, <code>heights[i]</code> representing the height of the terrain at that index.  The width at each index is 1.  After <code>V</code> units of water fall at index <code>K</code>, how much water is at each index?

Water first drops at index <code>K</code> and rests on top of the highest terrain or water at that index.  Then, it flows according to the following rules:
If the droplet would eventually fall by moving left, then move left.
Otherwise, if the droplet would eventually fall by moving right, then move right.
Otherwise, rise at it's current position.
Here, "eventually fall" means that the droplet will eventually be at a lower level if it moves in that direction.
Also, "level" means the height of the terrain plus any water in that column.

We can assume there's infinitely high terrain on the two sides out of bounds of the array.  Also, there could not be partial water being spread out evenly on more than 1 grid block - each unit of water has to be in exactly one block.


<b>Example 1:</b><br />
<pre>
<b>Input:</b> heights = [2,1,1,2,1,2,2], V = 4, K = 3
<b>Output:</b> [2,2,2,3,2,2,2]
<b>Explanation:</b>
#       #
#       #
##  # ###
#########
 0123456    <- index

The first drop of water lands at index K = 3:

#       #
#   w   #
##  # ###
#########
 0123456    

When moving left or right, the water can only move to the same level or a lower level.
(By level, we mean the total height of the terrain plus any water in that column.)
Since moving left will eventually make it fall, it moves left.
(A droplet "made to fall" means go to a lower height than it was at previously.)

#       #
#       #
## w# ###
#########
 0123456    

Since moving left will not make it fall, it stays in place.  The next droplet falls:

#       #
#   w   #
## w# ###
#########
 0123456  

Since the new droplet moving left will eventually make it fall, it moves left.
Notice that the droplet still preferred to move left,
even though it could move right (and moving right makes it fall quicker.)

#       #
#  w    #
## w# ###
#########
 0123456  

#       #
#       #
##ww# ###
#########
 0123456  

After those steps, the third droplet falls.
Since moving left would not eventually make it fall, it tries to move right.
Since moving right would eventually make it fall, it moves right.

#       #
#   w   #
##ww# ###
#########
 0123456  

#       #
#       #
##ww#w###
#########
 0123456  

Finally, the fourth droplet falls.
Since moving left would not eventually make it fall, it tries to move right.
Since moving right would not eventually make it fall, it stays in place:

#       #
#   w   #
##ww#w###
#########
 0123456  

The final answer is [2,2,2,3,2,2,2]:

    #    
 ####### 
 ####### 
 0123456 
</pre>


<b>Example 2:</b><br />
<pre>
<b>Input:</b> heights = [1,2,3,4], V = 2, K = 2
<b>Output:</b> [2,3,3,4]
<b>Explanation:</b>
The last droplet settles at index 1, since moving further left would not cause it to eventually fall to a lower height.
</pre>


<b>Example 3:</b><br />
<pre>
<b>Input:</b> heights = [3,1,3], V = 5, K = 1
<b>Output:</b> [4,4,4]
</pre>


<b>Note:</b><br><ol>
<code>heights</code> will have length in <code>[1, 100]</code> and contain integers in <code>[0, 99]</code>.
<code>V</code> will be in range <code>[0, 2000]</code>.
<code>K</code> will be in range <code>[0, heights.length - 1]</code>.
</ol>