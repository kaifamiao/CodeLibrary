执行用时 :1 ms, 在所有 Java 提交中击败了99.67%的用户
内存消耗 :38.4 MB, 在所有 Java 提交中击败了84.11%的用户

发现如果相交换的两个数相等，那没有意义可以不必交换，直接0变1，1变0.
发现如果相交换的两个数不相等，那么不必交换，因为第二次的交换和第一次的交换会让值回到初始状态。
但是当列的总数为奇数列的时候，最终间那一列需要单独处理，遍历不到，因此一开始就单独处理。
```
class Solution {
    public int[][] flipAndInvertImage(int[][] A) {

        for (int i = 0; i < A.length; i++){
            //如果列总数是奇数，对最中间那一列单独处理
            if (A[i].length%2==1){
                    A[i][A[i].length/2] = A[i][A[i].length/2]==0?1:0;
                }
            for (int j = 0; j < A[i].length/2;j++){
                //如果要交换的两个数相等，那就别交换了，将这两个位置直接0变1，1变0
                if(A[i][j] == A[i][A[i].length - j -1]){
                    A[i][j] = A[i][A[i].length - j - 1] = A[i][j] == 1?0:1;
                }
                //如果不相等那就别交换了，换两次又会换回来的

            }
        }
        return A;
    }
}
```

