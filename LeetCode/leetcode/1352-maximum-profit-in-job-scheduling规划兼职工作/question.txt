maximum-profit-in-job-scheduling
你打算利用空闲时间来做兼职工作赚些零花钱。

这里有<code>n</code>份兼职工作，每份工作预计从<code>startTime[i]</code>开始到<code>endTime[i]</code>结束，报酬为<code>profit[i]</code>。

给你一份兼职工作表，包含开始时间<code>startTime</code>，结束时间<code>endTime</code>和预计报酬<code>profit</code>三个数组，请你计算并返回可以获得的最大报酬。

注意，时间上出现重叠的 2 份工作不能同时进行。

如果你选择的工作在时间<code>X</code>结束，那么你可以立刻进行在时间<code>X</code>开始的下一份工作。



<strong>示例 1：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/19/sample1_1584.png" style="width: 300px;"></strong>

<pre><strong>输入：</strong>startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
<strong>输出：</strong>120
<strong>解释：
</strong>我们选出第 1 份和第 4 份工作， 
时间范围是 [1-3]+[3-6]，共获得报酬 120 = 50 + 70。
</pre>

<strong>示例 2：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/19/sample22_1584.png" style="height: 112px; width: 600px;"> </strong>

<pre><strong>输入：</strong>startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
<strong>输出：</strong>150
<strong>解释：
</strong>我们选择第 1，4，5 份工作。 
共获得报酬 150 = 20 + 70 + 60。
</pre>

<strong>示例 3：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/19/sample3_1584.png" style="height: 112px; width: 400px;"></strong>

<pre><strong>输入：</strong>startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
<strong>输出：</strong>6
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= startTime.length == endTime.length ==profit.length&lt;= 5 * 10^4</code>
	<code>1 &lt;=startTime[i] &lt;endTime[i] &lt;= 10^9</code>
	<code>1 &lt;=profit[i] &lt;= 10^4</code>
</ul>

规划兼职工作
We have <code>n</code> jobs, where every jobis scheduled to be done from <code>startTime[i]</code> to <code>endTime[i]</code>, obtaining a profitof <code>profit[i]</code>.

You&#39;re given the<code>startTime</code>,<code>endTime</code>and <code>profit</code>arrays,you need to output the maximum profit you can take such that there are no 2 jobs in the subsetwith overlapping time range.

If you choose a job that ends at time <code>X</code>youwill be able to start another job that starts at time <code>X</code>.


<strong>Example 1:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2019/10/10/sample1_1584.png" style="width: 380px; height: 154px;" /></strong>

<pre>
<strong>Input:</strong> startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
<strong>Output:</strong> 120
<strong>Explanation:</strong> The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.
</pre>

<strong>Example 2:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2019/10/10/sample22_1584.png" style="width: 600px; height: 112px;" /> </strong>

<pre>
<strong>
Input:</strong> startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
<strong>Output:</strong> 150
<strong>Explanation:</strong> The subset chosen is the first, fourth and fifth job. 
Profit obtained 150 = 20 + 70 + 60.
</pre>

<strong>Example 3:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2019/10/10/sample3_1584.png" style="width: 400px; height: 112px;" /></strong>

<pre>
<strong>Input:</strong> startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
<strong>Output:</strong> 6
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= startTime.length == endTime.length ==profit.length&lt;= 5 * 10^4</code>
	<code>1 &lt;=startTime[i] &lt;endTime[i] &lt;= 10^9</code>
	<code>1 &lt;=profit[i] &lt;= 10^4</code>
</ul>
