[117.填充每个节点的下一个右侧节点指针二](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/submissions/)

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md) 

## 方法一 大神解法


解题方法脑回路逆天，解题思路参考[大神题解-方法三](https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-28/)。


```javascript
/**
 * // Definition for a Node.
 * function Node(val,left,right,next) {
 *    this.val = val;
 *    this.left = left;
 *    this.right = right;
 *    this.next = next;
 * };
 */
/**
 * @param {Node} root
 * @return {Node}
 */
var connect = function(root) {
    let cur = root;
    while (cur !== null) {
        let pre = new Node();
        let node = pre;
        while (cur !== null) {
            if (cur.left !== null) {
            node.next = cur.left;
            node = node.next;
            }
            if (cur.right !== null) {
                node.next = cur.right;
                node = node.next;
            }
            cur = cur.next;
        }
        cur = pre.next
    }
    return root;
};
```

## 方法二 

题目说递归使用的栈空间不算额外的空间复杂度，因此可以利用递归

```javascript
/**
 * // Definition for a Node.
 * function Node(val,left,right,next) {
 *    this.val = val;
 *    this.left = left;
 *    this.right = right;
 *    this.next = next;
 * };
 */
/**
 * @param {Node} root
 * @return {Node}
 */
var connect = function(root) {
    if (root === null) return null;
    
    if (root.left !== null) {
        if (root.right !== null) {
            root.left.next = root.right;
        } else {
            root.left.next = help(root);
        }
    }
    
    if (root.right !== null) {
        root.right.next = help(root);
    }
    
    // 递归顺序，必须先右后左
    // 确保每一层从左向右扫描时能够扫描到
    connect(root.right)
    connect(root.left);
    
    return root;
};


// 寻找可以root下可以连接的下一个节点
function help(root) {
    // root下已经没有可以连接的子节点，将root设置为root.next
    root = root.next;
    while (root) {
        if (root.left !== null) return root.left;
        if (root.right !== null) return root.right;
        root = root.next;
    }
    return null;
}
```