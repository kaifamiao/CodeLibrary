shortest-path-in-a-grid-with-obstacles-elimination
给你一个<code>m * n</code>的网格，其中每个单元格不是<code>0</code>（空）就是<code>1</code>（障碍物）。每一步，您都可以在空白单元格中上、下、左、右移动。

如果您 <strong>最多</strong> 可以消除 <code>k</code> 个障碍物，请找出从左上角 <code>(0, 0)</code> 到右下角 <code>(m-1, n-1)</code> 的最短路径，并返回通过该路径所需的步数。如果找不到这样的路径，则返回 -1。



<strong>示例 1：</strong>

<pre><strong>输入：</strong> 
grid = 
[[0,0,0],
[1,1,0],
 [0,0,0],
[0,1,1],
 [0,0,0]], 
k = 1
<strong>输出：</strong>6
<strong>解释：
</strong>不消除任何障碍的最短路径是 10。
消除位置 (3,2) 处的障碍后，最短路径是 6 。该路径是 <code>(0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; <strong>(3,2)</strong> -&gt; (4,2)</code>.
</pre>



<strong>示例 2：</strong>

<pre><strong>输入：</strong>
grid = 
[[0,1,1],
[1,1,1],
[1,0,0]], 
k = 1
<strong>输出：</strong>-1
<strong>解释：
</strong>我们至少需要消除两个障碍才能找到这样的路径。
</pre>



<strong>提示：</strong>

<ul>
	<code>grid.length== m</code>
	<code>grid[0].length== n</code>
	<code>1 &lt;= m, n &lt;= 40</code>
	<code>1 &lt;= k &lt;= m*n</code>
	<code>grid[i][j] == 0 <strong>or</strong> 1</code>
	<code>grid[0][0] == grid[m-1][n-1] == 0</code>
</ul>

网格中的最短路径
Given a <code>m * n</code> grid, where each cell is either <code>0</code> (empty)or <code>1</code> (obstacle).In one step, you can move up, down, left or right from and to an empty cell.

Return the minimum number of steps to walk from the upper left corner<code>(0, 0)</code>to the lower right corner<code>(m-1, n-1)</code> given that you can eliminate<strong>at most</strong> <code>k</code> obstacles. If it is not possible to find suchwalk return -1.


<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> 
grid = 
[[0,0,0],
[1,1,0],
 [0,0,0],
[0,1,1],
 [0,0,0]], 
k = 1
<strong>Output:</strong> 6
<strong>Explanation: 
</strong>The shortest path without eliminating any obstacle is 10.
The shortest path with one obstacle elimination at position (3,2) is 6. Such path is <code>(0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; <strong>(3,2)</strong> -&gt; (4,2)</code>.
</pre>



<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> 
grid = 
[[0,1,1],
[1,1,1],
[1,0,0]], 
k = 1
<strong>Output:</strong> -1
<strong>Explanation: 
</strong>We need to eliminate at least two obstacles to find such a walk.
</pre>


<strong>Constraints:</strong>

<ul>
	<code>grid.length== m</code>
	<code>grid[0].length== n</code>
	<code>1 &lt;= m, n &lt;= 40</code>
	<code>1 &lt;= k &lt;= m*n</code>
	<code>grid[i][j] == 0 <strong>or</strong> 1</code>
	<code>grid[0][0] == grid[m-1][n-1] == 0</code>
</ul>