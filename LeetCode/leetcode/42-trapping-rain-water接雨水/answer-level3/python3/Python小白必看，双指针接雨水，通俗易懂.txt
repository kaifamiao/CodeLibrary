**有任何不懂的请留言，我会尽力解答**


# 题目：
给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。

![rainwatertrap.png](https://pic.leetcode-cn.com/0999df36b6bbc4207bfc482285e26b0f1b2ea52b66322fa7c8aa854b883e4e83-rainwatertrap.png)
上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。

示例:

输入: [0,1,0,2,1,0,1,3,2,1,2,1]
输出: 6

# 思路：
很多小白和我一样，看到这样的题目，都是懵的状态，主要是因为没有仔细去分析规则或规律。在我们日常生活中，一个木桶最多能接多少水，取决于最短的木块，上述题目也是差不多的意思。

从上图我们可以发现，下标1和下标3之间可以接雨水，最多可以接1方块大小的雨水，是取决于最短的柱子，即下标1的柱子。想要接雨水，左边右边都是必须要有柱子。

我们就可以用双指针分别代表左柱子和右柱子，分别从最左和最右往中间移动，直到合并，在移动的过程中，我们分别要获取到左边最长的柱子和右边最长的柱子，我们才能知道最多可以接多少雨水。左右指针分别往中间移动时，都会代表着不同长度的柱子，能接多少雨水？刚才上面已经说了，就取决于哪一边的柱子比较短。

如果你还有疑问，我们看下代码，或许你能理解的更清楚。

```
class Solution:
    def trap(self,height):
        if not height:return 0
        n = len(height)
        left,right = 0,n-1 # 定义左指针，右指针，分别是从最左和最右开始
        maxleft,maxright = height[0],height[n-1] 
        ans = 0
 
        while left <= right: # 当左边指针<=右指针时
            maxleft = max(height[left],maxleft) # 左边最长柱子
            maxright = max(height[right],maxright) # 右边最长柱子
            if maxleft < maxright: # 当左边最长柱子 < 右边最长柱子
                ans = ans + maxleft - height[left] # 左边最长柱子减去当前指针所在的柱子的高度就是能接到多少雨水，不理解的看图比较
                left += 1 # 因为右边柱子比较长，所以我们把左指针往右移动
            else: # 如果左边最大柱子>=右边最大柱子
                ans = ans + maxright - height[right] # 右边最长柱子减去当前柱子的高度就是能接到多少雨水
                right -= 1 # 右指针往左移动
        return ans
```

有些人可能对这个比较疑惑：if maxleft < maxright: # 当左边最长柱子 < 右边最长柱子，为什么会有这样的判断？之前上面说过了，两根柱子肯定是有根长或者是一样长，当其中一根柱子比较长时，我们其实是要看的是短的那一根，计算到底能接多少雨水。