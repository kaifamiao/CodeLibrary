```
int getHigh(TreeNode* root){        if(root == nullptr)            return 0;        int left = getHigh(root->left);        int right = getHigh(root->right);        return left > right? 1 + left: 1 + right;    }    int diameterOfBinaryTree(TreeNode* root) {        if(root == nullptr)            return 0;        int max = 0;        int leftHigh = getHigh(root->left);        int rightHigh = getHigh(root->right);        max = leftHigh + rightHigh;        int ll = diameterOfBinaryTree(root->left);        int rr = diameterOfBinaryTree(root->right);        if(max < ll) max = ll;        if(max < rr) max = rr;        return max;int getHigh(TreeNode* root){        if(root == nullptr)            return 0;        int left = getHigh(root->left);        int right = getHigh(root->right);        return left > right? 1 + left: 1 + right;    }    int diameterOfBinaryTree(TreeNode* root) {        if(root == nullptr)            return 0;        int max = 0;        int leftHigh = getHigh(root->left);        int rightHigh = getHigh(root->right);        max = leftHigh + rightHigh;        int ll = diameterOfBinaryTree(root->left);        int rr = diameterOfBinaryTree(root->right);        if(max < ll) max = ll;        if(max < rr) max = rr;        return max;>)>)}>)>)}
```
