partition-array-into-disjoint-intervals
给定一个数组<code>A</code>，将其划分为两个不相交（没有公共元素）的连续子数组<code>left</code>和<code>right</code>，使得：

<ul>
	<code>left</code>中的每个元素都小于或等于<code>right</code>中的每个元素。
	<code>left</code> 和<code>right</code>都是非空的。
	<code>left</code>要尽可能小。
</ul>

在完成这样的分组后返回<code>left</code>的<strong>长度</strong>。可以保证存在这样的划分方法。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>[5,0,3,8,6]
<strong>输出：</strong>3
<strong>解释：</strong>left = [5,0,3]，right = [8,6]
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>[1,1,1,0,6,12]
<strong>输出：</strong>4
<strong>解释：</strong>left = [1,1,1,0]，right = [6,12]
</pre>



<strong>提示：</strong>

<ol>
	<code>2 &lt;= A.length&lt;= 30000</code>
	<code>0 &lt;= A[i] &lt;= 10^6</code>
	可以保证至少有一种方法能够按题目所描述的那样对 <code>A</code> 进行划分。
</ol>



分割数组
Given an array <code>A</code>, partition itinto two (contiguous) subarrays<code>left</code>and <code>right</code>so that:

<ul>
	Every element in <code>left</code>is less than or equal to every element in <code>right</code>.
	<code>left</code> and <code>right</code> are non-empty.
	<code>left</code>has the smallest possible size.
</ul>

Return the <strong>length</strong> of <code>left</code> after such a partitioning. It is guaranteed that such a partitioning exists.



<strong>Example 1:</strong>

<pre>
<strong>Input: </strong><span id="example-input-1-1">[5,0,3,8,6]</span>
<strong>Output: </strong><span id="example-output-1">3</span>
<strong>Explanation: </strong>left = [5,0,3], right = [8,6]
</pre>

<div>
<strong>Example 2:</strong>

<pre>
<strong>Input: </strong><span id="example-input-2-1">[1,1,1,0,6,12]</span>
<strong>Output: </strong><span id="example-output-2">4</span>
<strong>Explanation: </strong>left = [1,1,1,0], right = [6,12]
</pre>


</div>

<strong>Note:</strong>

<ol>
	<code>2 &lt;= A.length&lt;= 30000</code>
	<code>0 &lt;= A[i] &lt;= 10^6</code>
	It is guaranteed there is at least one way to partition <code>A</code> as described.
</ol>

<div>
<div></div>
</div>
