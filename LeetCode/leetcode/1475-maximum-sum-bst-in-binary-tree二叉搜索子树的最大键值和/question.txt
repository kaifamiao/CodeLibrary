maximum-sum-bst-in-binary-tree
给你一棵以<code>root</code>为根的<strong>二叉树</strong>，请你返回 <strong>任意</strong>二叉搜索子树的最大键值和。

二叉搜索树的定义如下：

<ul>
	任意节点的左子树中的键值都<strong>小于</strong>此节点的键值。
	任意节点的右子树中的键值都 <strong>大于</strong>此节点的键值。
	任意节点的左子树和右子树都是二叉搜索树。
</ul>



<strong>示例 1：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/07/sample_1_1709.png" style="height: 250px; width: 320px;">

<pre><strong>输入：</strong>root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
<strong>输出：</strong>20
<strong>解释：</strong>键值为 3 的子树是和最大的二叉搜索树。
</pre>

<strong>示例 2：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/07/sample_2_1709.png" style="height: 180px; width: 134px;">

<pre><strong>输入：</strong>root = [4,3,null,1,2]
<strong>输出：</strong>2
<strong>解释：</strong>键值为 2 的单节点子树是和最大的二叉搜索树。
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>root = [-4,-2,-5]
<strong>输出：</strong>0
<strong>解释：</strong>所有节点键值都为负数，和最大的二叉搜索树为空。
</pre>

<strong>示例 4：</strong>

<pre><strong>输入：</strong>root = [2,1,3]
<strong>输出：</strong>6
</pre>

<strong>示例 5：</strong>

<pre><strong>输入：</strong>root = [5,4,8,3,null,6,3]
<strong>输出：</strong>7
</pre>



<strong>提示：</strong>

<ul>
	每棵树最多有<code>40000</code>个节点。
	每个节点的键值在<code>[-4 * 10^4, 4 * 10^4]</code> 之间。
</ul>

二叉搜索子树的最大键值和
Given a <strong>binary tree</strong> <code>root</code>, the task is to return the maximum sum of all keys of <strong>any</strong>sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:

<ul>
	The left subtree of a node contains only nodes with keys<strong>less than</strong>the node&#39;s key.
	The right subtree of a node contains only nodes with keys<strong>greater than</strong>the node&#39;s key.
	Both the left and right subtrees must also be binary search trees.
</ul>


<strong>Example 1:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2020/01/30/sample_1_1709.png" style="width: 320px; height: 250px;" />

<pre>
<strong>Input:</strong> root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
<strong>Output:</strong> 20
<strong>Explanation:</strong> Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.
</pre>

<strong>Example 2:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2020/01/30/sample_2_1709.png" style="width: 134px; height: 180px;" />

<pre>
<strong>Input:</strong> root = [4,3,null,1,2]
<strong>Output:</strong> 2
<strong>Explanation:</strong> Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input:</strong> root = [-4,-2,-5]
<strong>Output:</strong> 0
<strong>Explanation:</strong> All values are negatives. Return an empty BST.
</pre>

<strong>Example 4:</strong>

<pre>
<strong>Input:</strong> root = [2,1,3]
<strong>Output:</strong> 6
</pre>

<strong>Example 5:</strong>

<pre>
<strong>Input:</strong> root = [5,4,8,3,null,6,3]
<strong>Output:</strong> 7
</pre>


<strong>Constraints:</strong>

<ul>
	Each tree has at most <code>40000</code> nodes..
	Each node&#39;s value is between <code>[-4 * 10^4, 4 * 10^4]</code>.
</ul>