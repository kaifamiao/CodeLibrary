[695.岛屿的最大面积](https://leetcode-cn.com/problems/max-area-of-island/submissions/)

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md) 

## DFS

岛屿类的问题一般可以直接套用公式，这道题就是岛屿类问题DFS的一道常规解法。用一个`flagArr`来表示当前位置是否被访问过，然后四个方向分别遍历。


相同的题目可以参考[200.岛屿数量](https://leetcode-cn.com/problems/number-of-islands/submissions/)。

```javascript
/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxAreaOfIsland = function(grid) {
    let rows = grid.length,
        cols = grid[0].length;
    
    let flagArr = new Array(rows);
    for (let i = 0; i < rows; i++) {
        flagArr[i] = new Array(cols).fill(false);
    }
    let maxArea = 0;
    let directionArr = [[0,-1], [1,0], [0,1], [-1,0]];
    for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
            if (grid[i][j] === 1 && !flagArr[i][j]) {
                let area = 1;
                flagArr[i][j] = true;
                area += DFS(grid, flagArr, directionArr, i, j, rows, cols, area);
                maxArea = Math.max(maxArea, area);
            }
        }
    }
    return maxArea;
};

function DFS(grid, flagArr, directionArr, row, col, rows, cols) {
    let area = 0;
    for (let k = 0; k < 4; k++) {
        let newRow = row + directionArr[k][0],
            newCol = col + directionArr[k][1];
        if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && grid[newRow][newCol] === 1 && !flagArr[newRow][newCol]) {
            flagArr[newRow][newCol] = true; // 表示访问过
            area++;
            area = area + DFS(grid, flagArr, directionArr, newRow, newCol, rows, cols);
        }
    }
    return area;
}
```

## 取巧的做法

直接修改原数组。

```
/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxAreaOfIsland = function(grid) {
    let area = 0;
    let rows = grid.length,
        cols = grid[0].length;
    
    for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
            if (grid[i][j] === 1) {
                area = Math.max(area, DFS(i, j))
            }
        }
    }

    return area;

    function DFS(row, col) {
        if ( row < 0 || row >= rows || col < 0 || col >= cols || grid[row][col] === 0) return 0;
        grid[row][col] = 0;
        return 1 + DFS(row - 1, col) 
                + DFS(row, col + 1) 
                + DFS(row + 1, col) 
                + DFS(row, col - 1);
    }
};
```