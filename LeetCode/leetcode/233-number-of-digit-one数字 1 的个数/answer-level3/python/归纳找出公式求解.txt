设i为计算1所在数字的位数，i=1表示计算个位数的1的数目，i=10表示计算十位数的1的个数等。

一个数按位数进行分割，可以分为两部分，高位 n/(i\*10)，低位 n%(i\*10)。比如321按十位分割，高位为 321/(10\*10)=3，低位为 321%(10\*10)=21。

当求数字第 i 位1的个数时，

- 高位部分每个数包含 i 个 1，例如十位上的1，10~19，有十个
- 低位部分判断是否在[i, i*2-1]范围内，最多i个1，最少0个1。例如十位上的1出现的范围在[10, 19]，最多有10个，最少有 0 个。取决于 低位部分 - i + 1的值。
- 可以直接判断 (低位部分-i+1) 和 i , 取最小值，同时 (低位部分-i+1) 要保证大于0

所以得到公式：i位上1的个数 = 高位 1 的个数 + 低位 1 的个数

i 位上 1 的个数 = n // (i \* 10) \* i + min(max(n % (i * 10) - i + 1, 0), i)

```python
class Solution:
    def countDigitOne(self, n):
        cnt, i = 0, 1
        while i <= n: # i 依次个十百位的算，直到大于 n 为止。
            cnt += n // (i * 10) * i + min(max(n % (i * 10) - i + 1, 0), i)
            i *= 10
        return cnt
```

