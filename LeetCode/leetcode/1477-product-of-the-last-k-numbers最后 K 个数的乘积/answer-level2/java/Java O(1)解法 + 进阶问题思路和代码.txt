# 思路

这道题比较直观就是要维护前缀积列表`products`，如果没有0的话，那很简单，直接`products.get(products.size() - 1) / products.get(products.size() - 1- k)`就可以了，那么该如何处理0的情况？

我们知道只要某个数为`0`，那么它前面的那些数就都没有用了，我们直接清理掉就好了。题目中说了`K`是小于数据长度的，如果维护的前缀积列表长度小于`K`，那么说明在后`K`个中出现过的`0`，因此长度不够`K`，这种情况下直接返回`0`就行；否则按照上面的逻辑就可以了，由于要维护乘积，所以列表的第一个元素添加一个`1`作为辅助元素。

# 总结
其实这个题很简单，只要好好想想怎么处理`0`就行了。

# 时间复杂度
O(1)

# 代码
```
class ProductOfNumbers {


  private List<Integer> products;

  public ProductOfNumbers() {
    products = new ArrayList<>();
    products.add(1);
  }

  public void add(int num) {
    if(num == 0){
      products = new ArrayList<>();
      products.add(1);
    } else {
      products.add(products.get(products.size() - 1) * num);
    }
  }

  public int getProduct(int k) {
    if(products.size() <= k ){
      return 0;
    }
    return products.get(products.size() - 1) / products.get(products.size() - 1- k);
  }
}
```

# 进阶
看评论区有小伙伴问如果是求任意区间怎么办？这个是很好的进阶问题，讲下思路:

需要改的地方有两处：
1. 增加一个维护所有0位置的列表
2. 遇到0时前面的数据不清除，直接在后面接着放就行了，出现0的位置放一个1以便后面使用。也就是上面题解中`add()`函数里的第二行去掉，对于上面题解不去掉是一种优化。

那么在`add()`时加入以上逻辑，时间复杂度`O(1)`，`getProduct()`方法就用二分搜索0是否出现在查询的区间中，其他相同，时间复杂度`O(lgn)`

## 进一步优化
上面是通过记录所有0的位置然后二分去判断是否有0，经过评论区的小伙伴提醒：还可以通过记录一个0的前缀和数组来实现`O(1)`时间复杂度来判断区间中是否包含0。

## 代码
应下面小伙伴的需求，贴一下进阶问题的代码
```
class ProductOfNumbers {

  private List<Integer> list;
  private List<Integer> cnt0; //前缀和记录0的个数

  public ProductOfNumbers() {
    list = new ArrayList<>();
    cnt0 = new ArrayList<>();
    list.add(1);
    cnt0.add(0);
  }

  public void add(int num) {
    if (num == 0) {
      list.add(1);
      cnt0.add(cnt0.get(cnt0.size() - 1) + 1);
    } else {
      list.add(list.get(list.size() - 1) * num);
      cnt0.add(cnt0.get(cnt0.size() - 1));
    }
  }

  public int getProduct(int k) {
    return getProduct(list.size() - k, list.size() - 1);
  }

  // 表示的是第s个元素到第e个元素间的乘积
  public int getProduct(int s, int e) {
    if (e < 1 || e >= list.size() || s < 1 || s >= list.size() || s > e) {
      throw new RuntimeException("Invalid input");
    }
    if (!cnt0.get(s - 1).equals(cnt0.get(e))) {
      return 0;
    }
    return list.get(e) / list.get(s - 1);
  }
}

```