product-of-the-last-k-numbers
请你实现一个「数字乘积类」<code>ProductOfNumbers</code>，要求支持下述两种方法：

1.<code>add(int num)</code>

<ul>
	将数字<code>num</code>添加到当前数字列表的最后面。
</ul>

2.<code> getProduct(int k)</code>

<ul>
	返回当前数字列表中，最后<code>k</code>个数字的乘积。
	你可以假设当前列表中始终 <strong>至少</strong> 包含 <code>k</code> 个数字。
</ul>

题目数据保证：任何时候，任一连续数字序列的乘积都在 32-bit 整数范围内，不会溢出。



<strong>示例：</strong>

<pre><strong>输入：</strong>
[&quot;ProductOfNumbers&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;add&quot;,&quot;getProduct&quot;]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]

<strong>输出：</strong>
[null,null,null,null,null,null,20,40,0,null,32]

<strong>解释：</strong>
ProductOfNumbers productOfNumbers = new ProductOfNumbers();
productOfNumbers.add(3);        // [3]
productOfNumbers.add(0);        // [3,0]
productOfNumbers.add(2);        // [3,0,2]
productOfNumbers.add(5);        // [3,0,2,5]
productOfNumbers.add(4);        // [3,0,2,5,4]
productOfNumbers.getProduct(2); // 返回 20 。最后 2 个数字的乘积是 5 * 4 = 20
productOfNumbers.getProduct(3); // 返回 40 。最后 3 个数字的乘积是 2 * 5 * 4 = 40
productOfNumbers.getProduct(4); // 返回  0 。最后 4 个数字的乘积是 0 * 2 * 5 * 4 = 0
productOfNumbers.add(8);        // [3,0,2,5,4,8]
productOfNumbers.getProduct(2); // 返回 32 。最后 2 个数字的乘积是 4 * 8 = 32 
</pre>



<strong>提示：</strong>

<ul>
	<code>add</code> 和 <code>getProduct</code>两种操作加起来总共不会超过<code>40000</code>次。
	<code>0 &lt;= num&lt;=100</code>
	<code>1 &lt;= k &lt;= 40000</code>
</ul>

最后 K 个数的乘积
Implement the class <code>ProductOfNumbers</code>that supports two methods:

1.<code>add(int num)</code>

<ul>
	Adds the number <code>num</code> to the back of the current list of numbers.
</ul>

2.<code> getProduct(int k)</code>

<ul>
	Returns the product of the last <code>k</code> numbers in the current list.
	You can assume that always the current list has <strong>at least</strong> <code>k</code> numbers.
</ul>

At any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.


<strong>Example:</strong>

<pre>
<strong>Input</strong>
[&quot;ProductOfNumbers&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;add&quot;,&quot;getProduct&quot;]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]

<strong>Output</strong>
[null,null,null,null,null,null,20,40,0,null,32]

<strong>Explanation</strong>
ProductOfNumbers productOfNumbers = new ProductOfNumbers();
productOfNumbers.add(3);        // [3]
productOfNumbers.add(0);        // [3,0]
productOfNumbers.add(2);        // [3,0,2]
productOfNumbers.add(5);        // [3,0,2,5]
productOfNumbers.add(4);        // [3,0,2,5,4]
productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20
productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40
productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
productOfNumbers.add(8);        // [3,0,2,5,4,8]
productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 
</pre>


<strong>Constraints:</strong>

<ul>
	There will be at most <code>40000</code>operations considering both <code>add</code> and <code>getProduct</code>.
	<code>0 &lt;= num&lt;=100</code>
	<code>1 &lt;= k &lt;= 40000</code>
</ul>
