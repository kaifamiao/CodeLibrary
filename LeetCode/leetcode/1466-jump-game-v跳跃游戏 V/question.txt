jump-game-v
给你一个整数数组<code>arr</code> 和一个整数<code>d</code> 。每一步你可以从下标<code>i</code>跳到：

<ul>
	<code>i + x</code>，其中<code>i + x &lt; arr.length</code>且<code>0 &lt; x &lt;= d</code>。
	<code>i - x</code>，其中<code>i - x &gt;= 0</code>且<code>0 &lt; x &lt;= d</code>。
</ul>

除此以外，你从下标<code>i</code> 跳到下标 <code>j</code>需要满足：<code>arr[i] &gt; arr[j]</code>且 <code>arr[i] &gt; arr[k]</code>，其中下标<code>k</code>是所有 <code>i</code>到 <code>j</code>之间的数字（更正式的，<code>min(i, j) &lt; k &lt; max(i, j)</code>）。

你可以选择数组的任意下标开始跳跃。请你返回你 <strong>最多</strong>可以访问多少个下标。

请注意，任何时刻你都不能跳到数组的外面。



<strong>示例 1：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/02/meta-chart.jpeg" style="height: 419px; width: 633px;">

<pre><strong>输入：</strong>arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2
<strong>输出：</strong>4
<strong>解释：</strong>你可以从下标 10 出发，然后如上图依次经过 10 --&gt; 8 --&gt; 6 --&gt; 7 。
注意，如果你从下标 6 开始，你只能跳到下标 7 处。你不能跳到下标 5 处因为 13 &gt; 9 。你也不能跳到下标 4 处，因为下标 5 在下标 4 和 6 之间且 13 &gt; 9 。
类似的，你不能从下标 3 处跳到下标 2 或者下标 1 处。
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>arr = [3,3,3,3,3], d = 3
<strong>输出：</strong>1
<strong>解释：</strong>你可以从任意下标处开始且你永远无法跳到任何其他坐标。
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>arr = [7,6,5,4,3,2,1], d = 1
<strong>输出：</strong>7
<strong>解释：</strong>从下标 0 处开始，你可以按照数值从大到小，访问所有的下标。
</pre>

<strong>示例 4：</strong>

<pre><strong>输入：</strong>arr = [7,1,7,1,7,1], d = 2
<strong>输出：</strong>2
</pre>

<strong>示例 5：</strong>

<pre><strong>输入：</strong>arr = [66], d = 1
<strong>输出：</strong>1
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= arr.length &lt;= 1000</code>
	<code>1 &lt;= arr[i] &lt;= 10^5</code>
	<code>1 &lt;= d &lt;= arr.length</code>
</ul>

跳跃游戏 V
Given an array ofintegers <code>arr</code> and an integer <code>d</code>. In one step you can jump from index <code>i</code> to index:

<ul>
	<code>i + x</code> where:<code>i + x &lt; arr.length</code> and <code> 0 &lt;x &lt;= d</code>.
	<code>i - x</code> where:<code>i - x &gt;= 0</code> and <code> 0 &lt;x &lt;= d</code>.
</ul>

In addition, you can only jump from index <code>i</code> to index <code>j</code>if <code>arr[i] &gt; arr[j]</code> and <code>arr[i] &gt; arr[k]</code> for all indices <code>k</code> between <code>i</code> and <code>j</code> (More formally <code>min(i,j) &lt; k &lt; max(i, j)</code>).

You can choose any index of the array and start jumping. Return <em>the maximum number of indices</em>you can visit.

Notice that you can not jump outside of the array at any time.


<strong>Example 1:</strong>
<img alt="" src="https://assets.leetcode.com/uploads/2020/01/23/meta-chart.jpeg" style="width: 633px; height: 419px;" />
<pre>
<strong>Input:</strong> arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2
<strong>Output:</strong> 4
<strong>Explanation:</strong> You can start at index 10. You can jump 10 --&gt; 8 --&gt; 6 --&gt; 7 as shown.
Note that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 &gt; 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 &gt; 9.
Similarly You cannot jump from index 3 to index 2 or index 1.
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> arr = [3,3,3,3,3], d = 3
<strong>Output:</strong> 1
<strong>Explanation:</strong> You can start at any index. You always cannot jump to any index.
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input:</strong> arr = [7,6,5,4,3,2,1], d = 1
<strong>Output:</strong> 7
<strong>Explanation:</strong> Start at index 0. You can visit all the indicies. 
</pre>

<strong>Example 4:</strong>

<pre>
<strong>Input:</strong> arr = [7,1,7,1,7,1], d = 2
<strong>Output:</strong> 2
</pre>

<strong>Example 5:</strong>

<pre>
<strong>Input:</strong> arr = [66], d = 1
<strong>Output:</strong> 1
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= arr.length &lt;= 1000</code>
	<code>1 &lt;= arr[i] &lt;= 10^5</code>
	<code>1 &lt;= d &lt;= arr.length</code>
</ul>