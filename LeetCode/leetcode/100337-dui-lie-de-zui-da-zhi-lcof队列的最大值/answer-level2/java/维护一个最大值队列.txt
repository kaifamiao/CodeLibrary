## 59-II.队列的最大值

### Information

* TIME: 2020/02/24
* LINK: [Click Here](https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/)
* TAG: `Queue`

### Description

> 请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的时间复杂度都是O(1)。
>
> 若队列为空，pop_front 和 max_value 需要返回 -1

### Example

```text
输入: 
["MaxQueue","push_back","push_back","max_value","pop_front","max_value"]
[[],[1],[2],[],[],[]]
输出: [null,null,null,2,1,2]
```

### My Answer

> 维护一个最大值队列：加入一个数`num`
>
> * 从队尾开始，依次比较队列中的数，将小于`num`的数全部清除
> * 清除后，`num`加入队尾
>
> 可行性分析：
>
> * 队尾的元素都是之前加入队列的
> * 清除工作将小于当前`num`的值全部清空，被清空的值其实视为**无效值**，即在`data`中出队这些元素，**并不会影响队列的最大值，因为它们比新加入的`num`都小**
> * 维护会出现两种情况
>   * 全部被清空，队列只有`num`，说明前面入队的元素，都是小于`num`的
>   * 有剩余元素，剩余元素都大于或等于`num`，在`data`中如果出队了当前最大值，需要刷新最大值，由下一个元素接力。

```java
class MaxQueue {
    private LinkedList<Integer> data;
    private LinkedList<Integer> maxQue;
    public MaxQueue() {
        data = new LinkedList<>();
        maxQue = new LinkedList<>();
        maxQue.addLast(Integer.MIN_VALUE);
    }
    
    public int max_value() {
        if(data.isEmpty()){
            return -1;
        }
        return maxQue.peekFirst();
    }
    
    public void push_back(int value) {
        data.addLast(value);
        while(!maxQue.isEmpty() && maxQue.peekLast() < value){
            maxQue.removeLast();
        }
        maxQue.addLast(value);
    }
    
    public int pop_front() {
        if(data.isEmpty()) return -1;
        int front = data.removeFirst();
        if(maxQue.peekFirst() == front){
            maxQue.removeFirst();
        }
        return front;
    }
}

/**
 * Your MaxQueue object will be instantiated and called as such:
 * MaxQueue obj = new MaxQueue();
 * int param_1 = obj.max_value();
 * obj.push_back(value);
 * int param_3 = obj.pop_front();
 */
```

### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
