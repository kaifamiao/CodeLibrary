贪心准则:`在每次能跳跃的范围内，选择 跳跃之后的下一步能到达的最远的位置 的一步进行跳跃`
首先需要计算在每个位置能够跳跃到的最远的位置,计算的方法是:`nums[i]+i`。

比如下面的例子：
`[3,4,3,2,5,4,3]`
`[3,5,5,5,9,9,9]`

我们从0的位置跳跃,然后可以跳到1(5),2(5),3(5)这三个位置上，然后由于这三个位置上下一步最远只能到达5(9)的位置，因此选择哪一步跳都行。
比如跳到1(5)这个位置。然后再次进行选择，很明显备选的有:2(5),3(5),4(9),5(9)。这一步根据贪心原则可以选择跳到4(9)这个位置。然后从4(9)开始跳，由于9的下标已经超过了数组的最长下标。一定能够跳到结尾。所以次数再加一。共三次。

代码如下：

```
int jump(vector<int>& nums) {
        int len=nums.size();
        if(len==1)
            return 0;
        int i=0,step=0;
        vector<int> v(len);
        for(int i=0;i<len;i++)
        {
            v[i]=nums[i]+i; //每个位置能跳的最远的位置
        }
        while(i<len-1)
        {
            int num=nums[i]+i,index=i+1,j=i+1;
            if(num>=len-1)
            {
                step++;
                break;
            }
            for(;j<=num;j++)
            {
                if(v[j]>v[index])
                    index=j;
            }
            i=index;
            step++;
        }
        return step;
    }
```
