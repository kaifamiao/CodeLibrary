[139.单词拆分](https://leetcode-cn.com/problems/word-break/solution/dan-ci-chai-fen-by-leetcode/)    

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)   

详细解析可参考[优质题解](https://leetcode-cn.com/problems/word-break/solution/dong-tai-gui-hua-python-dai-ma-by-liweiwei1419-2/)。

## 方法一 动态规划

dp[i]表示0-i之间的字符串是否可以被拆分并满足题设条件存在于wordDict中。

假设拆分点为j，那么状态转移方程为：   

`dp[i] = dp[j] && s.substring(j+1, i+1)存在于wordDict`

```javascript
/**
 * @param {string} s
 * @param {string[]} wordDict
 * @return {boolean}
 */
var wordBreak = function(s, wordDict) {
    // dp[i]表示0-i之间的字符串是否可以被拆分并满足题设条件存在于wordDict中
    let dp = new Array(s.length).fill(false);
    let set = new Set(wordDict);
    for (let i = 0; i < s.length; i++) {
        // 检查0-i之间的字符串是否直接存在于wordDict中
        if (set.has(s.substring(0, i+1))) {
            dp[i] = true;
            continue;
        }
        // 这一步是为了检查。假如s.substring(0,i)不直接存在于wordDict中
        // 那么判断拆分之后是否存在于wordDict中
        for (let j = 0; j < i; j++) {
            if (dp[j] && set.has(s.substring(j+1, i+1))) {
                dp[i] = true;
                break;
            }
        }
    }
    return dp[s.length-1]
};
```


## 方法二 动态规划   

与上面方法类似，但是此处dp[i]表示从下标0开始长度为i的的字符串是否满足题意要求，可以被拆分并存在与wordDict中。

```javascript
/**
 * @param {string} s
 * @param {string[]} wordDict
 * @return {boolean}
 */
var wordBreak = function(s, wordDict) {
    // 与方法一类似，但是此处dp[i]表示从下标0开始长度为i的的字符串是否满足题意要求，可以被拆分并存在与wordDict中
    let dp = new Array(s.length+1).fill(false);
    let set = new Set(wordDict);
    
    // 因为dp[i]的i表示长度，因此dp[0]=true
    dp[0] = true;
    // for中的i表示从下标0开始字符串的长度，因此从1开始
    for (let i = 1; i < s.length+1; i++) {
        // 判断s[j-i]是否满足题目要求
        // 注意此处是j<i不是j<=i
        for (let j = 0; j < i; j++) {
            if (dp[j] && set.has(s.substring(j, i))) {
                dp[i] = true;
                break;
            }
        }
    }
    return dp[s.length];
};
```