# 题解
## 动态规划
![在这里插入图片描述](https://pic.leetcode-cn.com/2a834dafa7bf590df1413fc742b07099854b6c6b842a5f7677564ccd044b5d69.png)
 1. 初始化$dp=[False,\cdots,False]$，长度为$n+1$。$n$为字符串长度。$dp[i]$表示$s$的前$i$位是否可以用$wordDict$中的单词表示。
 2. 初始化$dp[0]=True$，空字符可以被表示。
 3. 遍历字符串的所有子串，遍历开始索引$i$，遍历区间$[0,n)$：
 	+ 遍历结束索引$j$，遍历区间$[i+1,n+1)$：
 		+ 若$dp[i]=True$且$s[i,\cdots,j)$在$wordlist$中：$dp[j]=True$。解释：$dp[i]=True$说明$s$的前$i$位可以用$wordDict$表示，则$s[i,\cdots,j)$出现在$wordDict$中，说明$s$的前$j$位可以表示。
 
 4. 返回$dp[n]$

	
### 复杂度分析
 - 时间复杂度：$O(n^{2})$
 - 空间复杂度：$O(n)$

### Python
```python
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:       
        n=len(s)
        dp=[False]*(n+1)
        dp[0]=True
        for i in range(n):
            for j in range(i+1,n+1):
                if(dp[i] and (s[i:j] in wordDict)):
                    dp[j]=True
        return dp[-1]



```
![在这里插入图片描述](https://pic.leetcode-cn.com/172b46e21d07d699566fdc557421ccf905d651fb7e2cb9bed75d1d5476f520b7.png)

## 记忆化回溯


 1. 使用记忆化函数，保存出现过的$backtrack(s)$，避免重复计算。
 2. 定义回溯函数$backtrack(s)$
 	+ 若$s$长度为$0$，则返回$True$，表示已经使用$wordDict$中的单词分割完。
 	+ 初试化当前字符串是否可以被分割$res=False$
 	+ 遍历结束索引$i$，遍历区间$[1,n+1)$：
 		+ 若$s[0,\cdots,i-1]$在$wordDict$中：$res=backtrack(s[i,\cdots,n-1])\ or\ res$。解释：保存遍历结束索引中，可以使字符串切割完成的情况。
	+ 返回$res$
 3. 返回$backtrack(s)$
 

	

### 复杂度分析
略

### Python
```python
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        import functools
        @functools.lru_cache(None)
        def back_track(s):
            if(not s):
                return True
            res=False
            for i in range(1,len(s)+1):
                if(s[:i] in wordDict):
                    res=back_track(s[i:]) or res
            return res
        return back_track(s)

```
![在这里插入图片描述](https://pic.leetcode-cn.com/4b8f5a6f58f4f5d1c8a46c4e5154ff0f547876f021a0a8b1a1ed3b9f06b13d3c.png)
