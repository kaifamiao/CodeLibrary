### 思路

通过**广度优先搜索**方式来模拟拆盒子的过程。使用**队列**装入可以被拆开的盒子（状态**打开** or 拥有对应**钥匙**），每次从队列取出一个盒子，并遍历这个盒子里面的**内含盒子**以及**钥匙**，遍历的情况包括：

- **内含盒子**没有被拆开过，并且有对应钥匙或状态打开，则把它加入队列
- **钥匙**所对应的的盒子存在（我们拥有这个盒子），并且盒子没有被拆开，则把它加入队列

**Talk is cheap。Show you the code。**

### 代码

```java
class Solution {
    public int maxCandies(int[] status, int[] candies, int[][] keys, int[][] containedBoxes, int[] initialBoxes) {
        int len = status.length;
        // 记录盒子是否被拆开
        boolean[] visited = new boolean[len];
        // 记录我们拥有的所有盒子
        Set<Integer> have_box = new HashSet<>();
        // 记录我们拥有的所有钥匙
        Set<Integer> have_key = new HashSet<>();
        Queue<Integer> q = new LinkedList<>();
        // 初始化
        for (int i = 0; i < initialBoxes.length; i++) {
            int idx = initialBoxes[i];
            have_box.add(idx);
            // 如果盒子可以打开则加入队列
            if (status[idx] == 1) {
                q.offer(idx);
                visited[idx] = true;
            }
        }
        int ans = 0;
        while (!q.isEmpty()) {
            Integer cur = q.poll();
            ans += candies[cur];
            int[] cur_keys = keys[cur];
            int[] cur_boxs = containedBoxes[cur];
            // 遍历钥匙
            for (int key : cur_keys) {
                // 加入我们拥有的钥匙列表
                have_key.add(key);
                // 盒子没被拆开过 且 我们有对应的钥匙
                if (!visited[key] && have_box.contains(key)) {
                    q.offer(key);
                    visited[key] = true;
                }
            }
            // 遍历内含盒子
            for (int box : cur_boxs) {
                // 加入我们拥有的盒子列表
                have_box.add(box);
                 // 盒子没被拆开过 且 (我们有对应的钥匙 或者 盒子是打开状态)
                if (!visited[box] && (have_key.contains(box) || status[box] == 1)) {
                    q.offer(box);
                    visited[box] = true;
                }
            }
        }
        return ans;
    }
}
```

&nbsp;

---

如果该题解对你有帮助，点个赞再走呗~