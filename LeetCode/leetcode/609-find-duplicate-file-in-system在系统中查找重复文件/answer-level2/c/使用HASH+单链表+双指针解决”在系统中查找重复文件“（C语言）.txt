### 解题思路
使用C语言解决这道问题比较挑战，难度超过中等。

1.将字符串取出，首先得到文件路径

2.然后逐文件解析，使用双指针，右指针找空格

3.每得到一个文件，进行一次hash查重，并保存

4.最后便来hash表，构造结果，注意三重指针，应该构造两级指针数组

另外C处理有个小技巧，为了方便双指针循环，在处理一个文件路径的时候，先将结尾的‘\0'转为‘ ’，处理结束再恢复

![image.png](https://pic.leetcode-cn.com/ec08ceb303a0a75871a48fc2502c541d933525c46cf87d3757b8bdceb5d46919-image.png)


### 代码

```c
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
#define NAME_SIZE   500
#define HPOOL_SIZE  20000
#define IPOOL_SIZE  20000

#define RES_SIZE    10000

typedef struct _info_st
{
    char name[NAME_SIZE];
    struct _info_st *nxt;
}info_st;

typedef struct _hash_st
{
    char key[51];
    info_st *info;
    int cnt;
    UT_hash_handle hh;
}hash_st;

char dir[NAME_SIZE];

char **res[RES_SIZE];

int rsize;
int rcol_size[RES_SIZE];

// 【算法思路】hash+单链表 + 双指针。构建hash结构，内容作为key，val使用单链表将结果串联
// 难点在于字符串的处理
char *** findDuplicate(char ** paths, int pathsSize, int* returnSize, int** returnColumnSizes){
    info_st * ipool = (info_st *)calloc(IPOOL_SIZE, sizeof(info_st));
    int ipsize = 0;
    hash_st * hpool = (hash_st *)calloc(HPOOL_SIZE, sizeof(hash_st));
    int hpsize = 0;

    hash_st *head = NULL;

    for(int i = 0; i < pathsSize; i++)
    {
        int wlen = strlen(paths[i]);

        // 双指针，处理路径，文件名，内容
        int ll = 0, rr = 0;

        // 先处理目录
        for(int j = 0; j < wlen; j++)
        {
            if(paths[i][rr] == ' ')
            {
                break;
            }

            dir[rr++] = paths[i][j];
        }

        dir[rr] = '/';
        dir[rr + 1] = '\0';

        //printf("--------------------\n", dir);
        //printf("paths = %s\n", paths[i]);
        //printf("dir = %s\n", dir);

        int dir_len = rr + 1;

        ll = rr + 1;
        rr = ll;

        // 临时将最后一个‘\0’改为‘ ’，用于迭代
        paths[i][wlen] = ' ';

        while(rr <= wlen)
        {
            // 获得一个文件+内容
            if(paths[i][rr] != ' ')
            {
                rr++;
                continue;
            }

            info_st *icur = &ipool[ipsize++];

            strcpy(icur->name, dir);
            
            int nid = dir_len;

            // 获取文件名
            for(int j = ll; j < rr; j++)
            {
                if(paths[i][j] == '(')
                {
                    ll = j + 1;
                    break;
                }

                icur->name[nid++] = paths[i][j];
            }

            //printf("file = %s\n", icur->name);

            // 获取内容作为key，hpsize在使用后再更新
            hash_st *hcur = &hpool[hpsize];
            hcur->cnt = 1;

            int kid = 0;

            for(int j = ll; j < rr; j++)
            {
                if(paths[i][j] == ')')
                {
                    break;
                }

                hcur->key[kid++] = paths[i][j];
            }
            hcur->key[kid] = '\0';

            //printf("key = %s\n", hcur->key);

            //printf("ll = %d, rr = %d\n", ll, rr);

            hash_st *tmph;

            HASH_FIND_STR(head, hcur->key, tmph);
            if(tmph == NULL)
            {
                hcur->info = icur;

                HASH_ADD_STR(head, key, hcur);
                hpsize++;

                rr++;
                ll = rr;
                continue;
            }

            icur->nxt = tmph->info;
            tmph->info = icur;
            tmph->cnt++;

            rr++;
            ll = rr;
        }

        paths[i][wlen] = '\0';
    }

    rsize = 0;

    // 生成结果
    hash_st *cur, *tmph;
    HASH_ITER(hh, head, cur, tmph)
    {
        if(cur->cnt < 2)
        {
            continue;
        }
        
        char **res_ = (char **)calloc(cur->cnt, sizeof(char*));

        res[rsize] = res_;
        
        info_st *icur = cur->info;
        
        // res指向对应位置

        // col计数初始化
        rcol_size[rsize] = 0;

        while (icur != NULL)
        {
            res[rsize][ rcol_size[rsize] ] = icur->name;
            icur = icur->nxt;

            rcol_size[rsize]++;
        }
        rsize++;
    }

    *returnSize = rsize;
    *returnColumnSizes = rcol_size;
    return res;
}
```