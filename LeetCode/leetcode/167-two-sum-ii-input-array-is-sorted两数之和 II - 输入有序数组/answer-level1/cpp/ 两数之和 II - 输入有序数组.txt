### 算法分析
1. 公式：
        while left < right do
            if numbers[left] + numbers[right] > target then --right
            elseif numbers[left] + numbers[right] < target then ++left
            else numbers[left] + numbers[right] == target then return [left,right]
        end
2. 假设left = 0, right = numbers.size()-1, 遍历numbers
### 复杂度分析
+ 时间复杂度：O(n)，n为nums长度
+ 空间复杂度：O(1)
### 源码
```C++ []
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> ret;
        int left = 0;
        int right = numbers.size() - 1;
        while (left < right)
        {
            int sum = numbers[left] + numbers[right];
            if (sum > target)
            {
                --right;
            }
            else if (sum < target)
            {
                ++left;
            }
            else
            {
                ret.push_back(left + 1);
                ret.push_back(right + 1);
                break;
            }
        }
        return ret;
    }
};