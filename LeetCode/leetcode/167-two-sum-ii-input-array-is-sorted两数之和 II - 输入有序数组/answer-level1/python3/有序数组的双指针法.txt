### 解题思路
此处撰写解题思路
因为是有序数组，所以使用一些特别的方法比较高效，比如说二分查找，类似于快排的双指针，二分查找通常不如hash快，因此想到双指针，开始时i指向最小数，j指向最大数，如果ij相加大于目标，就将j向左移动，否则就将i向右移动，直至它俩相加等于目标值或者i等于j。那么这种方式能否保证一定可以取到正确的值呢？首先可以肯定的是，这种方式并不会计算所有的数对儿之和与目标值比较，不然就不会有这么快的速度了。因为不会计算所有的数对儿，那么我们心里总是不踏实的，会不会有某个数对儿之和等于目标值而被漏掉了呢？我们来证明一下：假如有一个升序数组An[A1,A2,A3,...,Ax,...,Ay,...,An],其中Ax,Ay之和等于目标值t，根据算法，i，j两者合起来一定可以把所有的数都遍历到而无遗漏，在i，j向着对方靠近的过程中，只有两种情况，要么j先到达Ay而i在Ax左边，此时，由于两者之和小于目标值，i会向着Ax靠近；要么i先到达Ax而j在Ay右边，此时两者之和大于目标值，j会向着Ay靠近，直至最后两者都达到对应位置。

### 代码

```python3
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        lenth = len(numbers)
        i = 0
        j = lenth - 1
        while i < j:
            if numbers[i] + numbers[j] == target:
                return i+1, j+1
            elif numbers[i] + numbers[j] < target:
                i += 1
            else:
                j -= 1


```