linked-list-in-binary-tree
给你一棵以<code>root</code>为根的二叉树和一个<code>head</code>为第一个节点的链表。

如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应以<code>head</code>为首的链表中每个节点的值，那么请你返回 <code>True</code> ，否则返回 <code>False</code> 。

一直向下的路径的意思是：从树中某个节点开始，一直连续向下的路径。



<strong>示例 1：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/sample_1_1720.png" style="height: 280px; width: 220px;"></strong>

<pre><strong>输入：</strong>head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
<strong>输出：</strong>true
<strong>解释：</strong>树中蓝色的节点构成了与链表对应的子路径。
</pre>

<strong>示例 2：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/sample_2_1720.png" style="height: 280px; width: 220px;"></strong>

<pre><strong>输入：</strong>head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
<strong>输出：</strong>true
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
<strong>输出：</strong>false
<strong>解释：</strong>二叉树中不存在一一对应链表的路径。
</pre>



<strong>提示：</strong>

<ul>
	二叉树和链表中的每个节点的值都满足<code>1 &lt;= node.val&lt;= 100</code>。
	链表包含的节点数目在<code>1</code>到<code>100</code>之间。
	二叉树包含的节点数目在<code>1</code>到<code>2500</code>之间。
</ul>

二叉树中的列表
Given a binary tree <code>root</code> and alinked list with<code>head</code>as the first node.

Return True if all the elements in the linked list starting from the <code>head</code> correspond to some <em>downward path</em> connected in the binary treeotherwise return False.

In this context downward path means a path that starts at some node and goes downwards.


<strong>Example 1:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2020/02/12/sample_1_1720.png" style="width: 220px; height: 280px;" /></strong>

<pre>
<strong>Input:</strong> head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
<strong>Output:</strong> true
<strong>Explanation:</strong> Nodes in blue form a subpath in the binary Tree.  
</pre>

<strong>Example 2:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2020/02/12/sample_2_1720.png" style="width: 220px; height: 280px;" /></strong>

<pre>
<strong>Input:</strong> head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
<strong>Output:</strong> true
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input:</strong> head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
<strong>Output:</strong> false
<strong>Explanation:</strong> There is no path in the binary tree that contains all the elements of the linked list from <code>head</code>.
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= node.val&lt;= 100</code>for each node in the linked list and binary tree.
	The given linked list will contain between<code>1</code>and <code>100</code>nodes.
	The given binary tree will contain between<code>1</code>and<code>2500</code>nodes.
</ul>