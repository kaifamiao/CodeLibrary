design-a-stack-with-increment-operation
请你设计一个支持下述操作的栈。

实现自定义栈类 <code>CustomStack</code> ：

<ul>
	<code>CustomStack(int maxSize)</code>：用 <code>maxSize</code> 初始化对象，<code>maxSize</code> 是栈中最多能容纳的元素数量，栈在增长到 <code>maxSize</code> 之后则不支持 <code>push</code> 操作。
	<code>void push(int x)</code>：如果栈还未增长到 <code>maxSize</code> ，就将 <code>x</code> 添加到栈顶。
	<code>int pop()</code>：弹出栈顶元素，并返回栈顶的值，或栈为空时返回 <strong>-1</strong> 。
	<code>void inc(int k, int val)</code>：栈底的 <code>k</code> 个元素的值都增加 <code>val</code> 。如果栈中元素总数小于 <code>k</code> ，则栈中的所有元素都增加 <code>val</code> 。
</ul>



<strong>示例：</strong>

<pre><strong>输入：</strong>
[&quot;CustomStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;increment&quot;,&quot;increment&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]
[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]
<strong>输出：</strong>
[null,null,null,2,null,null,null,null,null,103,202,201,-1]
<strong>解释：</strong>
CustomStack customStack = new CustomStack(3); // 栈是空的 []
customStack.push(1);                          // 栈变为 [1]
customStack.push(2);                          // 栈变为 [1, 2]
customStack.pop();                            // 返回 2 --&gt; 返回栈顶值 2，栈变为 [1]
customStack.push(2);                          // 栈变为 [1, 2]
customStack.push(3);                          // 栈变为 [1, 2, 3]
customStack.push(4);                          // 栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4
customStack.increment(5, 100);                // 栈变为 [101, 102, 103]
customStack.increment(2, 100);                // 栈变为 [201, 202, 103]
customStack.pop();                            // 返回 103 --&gt; 返回栈顶值 103，栈变为 [201, 202]
customStack.pop();                            // 返回 202 --&gt; 返回栈顶值 202，栈变为 [201]
customStack.pop();                            // 返回 201 --&gt; 返回栈顶值 201，栈变为 []
customStack.pop();                            // 返回 -1 --&gt; 栈为空，返回 -1
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= maxSize &lt;= 1000</code>
	<code>1 &lt;= x &lt;= 1000</code>
	<code>1 &lt;= k &lt;= 1000</code>
	<code>0 &lt;= val &lt;= 100</code>
	每种方法 <code>increment</code>，<code>push</code> 以及 <code>pop</code> 分别最多调用 <code>1000</code> 次
</ul>

设计一个支持增量操作的栈
Design a stack which supports the following operations.

Implement the <code>CustomStack</code> class:

<ul>
	<code>CustomStack(int maxSize)</code> Initializes the object with <code>maxSize</code> which is the maximum number of elements in the stack or do nothing if the stack reached the <code>maxSize</code>.
	<code>void push(int x)</code>Adds <code>x</code> to the top of the stack if the stack hasn&#39;t reached the <code>maxSize</code>.
	<code>int pop()</code>Pops and returns the top of stack or <strong>-1</strong> if the stack is empty.
	<code>void inc(int k, int val)</code> Increments the bottom <code>k</code> elements of the stack by <code>val</code>. If there are less than <code>k</code> elements in the stack, just increment all the elements in the stack.
</ul>


<strong>Example 1:</strong>

<pre>
<strong>Input</strong>
[&quot;CustomStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;increment&quot;,&quot;increment&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]
[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]
<strong>Output</strong>
[null,null,null,2,null,null,null,null,null,103,202,201,-1]
<strong>Explanation</strong>
CustomStack customStack = new CustomStack(3); // Stack is Empty []
customStack.push(1);                          // stack becomes [1]
customStack.push(2);                          // stack becomes [1, 2]
customStack.pop();                            // return 2 --&gt; Return top of the stack 2, stack becomes [1]
customStack.push(2);                          // stack becomes [1, 2]
customStack.push(3);                          // stack becomes [1, 2, 3]
customStack.push(4);                          // stack still [1, 2, 3], Don&#39;t add another elements as size is 4
customStack.increment(5, 100);                // stack becomes [101, 102, 103]
customStack.increment(2, 100);                // stack becomes [201, 202, 103]
customStack.pop();                            // return 103 --&gt; Return top of the stack 103, stack becomes [201, 202]
customStack.pop();                            // return 202 --&gt; Return top of the stack 102, stack becomes [201]
customStack.pop();                            // return 201 --&gt; Return top of the stack 101, stack becomes []
customStack.pop();                            // return -1 --&gt; Stack is empty return -1.
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= maxSize &lt;= 1000</code>
	<code>1 &lt;= x &lt;= 1000</code>
	<code>1 &lt;= k &lt;= 1000</code>
	<code>0 &lt;= val &lt;= 100</code>
	At most<code>1000</code>calls will be made to each method of <code>increment</code>, <code>push</code> and <code>pop</code> each separately.
</ul>