
二叉搜索树性质 + 递归
```
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL) return NULL;
        
        if(root->val > p->val && root->val < q->val) return root;
        else if(p->val < root->val && q->val < root->val) return lowestCommonAncestor(root->left, p, q);
        else if(p->val > root->val && q->val > root->val) return lowestCommonAncestor(root->right, p, q);
        return root;
    }
};
```



二叉搜索树性质 + 非递归
```
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL) return NULL;
        
        TreeNode* pRoot = root;
        int m = p->val, n = q->val;
        while(!(m < pRoot->val && pRoot->val < n)){
            if(m < pRoot->val && n < pRoot->val) pRoot=pRoot->left;
            else if(m > pRoot->val && n > pRoot->val) pRoot=pRoot->right;
            else break;
        }
        return pRoot;
    }
};
```
