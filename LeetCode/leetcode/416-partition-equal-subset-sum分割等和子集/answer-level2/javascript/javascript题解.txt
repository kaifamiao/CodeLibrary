[416.分割等和子集](https://leetcode-cn.com/problems/partition-equal-subset-sum/submissions/)

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)  

题目本质上就是求数组中是否存在子集的和等于数组总和的一半。

题解参考[大神题解](https://leetcode-cn.com/problems/partition-equal-subset-sum/solution/0-1-bei-bao-wen-ti-xiang-jie-zhen-dui-ben-ti-de-yo/)。

## 方法一 动态规划

```javascript
/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canPartition = function(nums) {
    if (nums === null || nums.length <= 0) return false;
    let length = nums.length;
    let sum = nums.reduce(function (pre, cur) {
        return pre + cur;   
    })
    if (sum & 1) {
        return false
    }
    let target = sum / 2;
    // dp[i][j]表示下标0~i之间是否存在和为j的子集
    let dp = new Array(length);
    for (let i = 0; i < length; i++) {
        dp[i] = new Array(target+1).fill(false);
    }
    // 对i=0进行初始化
    for (let i = 0; i < target + 1; i++) {
        if (nums[0] === i) {
            dp[0][i] = true;
        }
    }
    // i从1开始
    for (let i = 1; i < length; i++) {
        for (let j = 0; j <= target; j++) {
            // 状态转移方程
            if (j >= nums[i]) {
                dp[i][j] = dp[i-1][j] || dp[i-1][j - nums[i]];
            } else {
                dp[i][j] = dp[i-1][j]
            }
        }
    }
    return dp[length -1][target];
};
```

## DP优化

```javascript
/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canPartition = function(nums) {
    if (nums === null || nums.length <= 0) return false;
    let sum = nums.reduce(function (pre, cur) {
        return pre + cur;
    })
    if (sum & 1) {
        return false;
    }
    let target = sum / 2;
    let dp = new Array(target + 1).fill(false);
    // 初始化dp
    for (let i = 0; i < target + 1; i++) {
        if (nums[0] === i) {
            dp[i] = true;
            break;
        }
    }
    
    for (let i = 1; i < nums.length; i++) {
        // 如果j < nums[i]那么j-nums[i]为负值，没必要继续进行判断
        for (let j = target; j >= 0 && j >= nums[i]; j--) {
            dp[j] = dp[j] || dp[j - nums[i]];
        }
    }
    return dp[target];
};
```