inorder-successor-in-bst-ii
给定一棵二叉搜索树和其中的一个节点 <code>node</code> ，找到该节点在树中的中序后继。

如果节点没有中序后继，请返回 <code>null</code> 。

一个结点 <code>node</code> 的中序后继是键值比 <code>node.val</code>大所有的结点中键值最小的那个。

你可以直接访问结点，但无法直接访问树。每个节点都会有其父节点的引用。节点定义如下：

<pre>class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}</pre>



<strong>进阶：</strong>

你能否在不访问任何结点的值的情况下解决问题?



<strong>示例 1:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/01/23/285_example_1.PNG" style="height: 117px; width: 122px;">

<pre><strong>输入: </strong>tree = [2,1,3], node = 1
<strong>输出: </strong>2
<strong>解析: </strong>1 的中序后继结点是 2 。注意节点和返回值都是 Node 类型的。
</pre>

<strong>示例 2:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/01/23/285_example_2.PNG" style="height: 229px; width: 246px;">

<pre><strong>输入: </strong>tree = [5,3,6,2,4,null,null,1], node = 6
<strong>输出: </strong>null
<strong>解析: </strong>该结点没有中序后继，因此返回<code> null 。</code>
</pre>

<strong>示例3:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/02/02/285_example_34.PNG" style="height: 335px; width: 438px;">

<pre><strong>输入: </strong>tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15
<strong>输出: </strong>17
</pre>

<strong>示例4:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2019/02/02/285_example_34.PNG" style="height: 335px; width: 438px;">

<pre><strong>输入: </strong>tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13
<strong>输出: </strong>15
</pre>



<strong>提示：</strong>

<ol>
	<code>-10^5 &lt;= Node.val &lt;= 10^5</code>
	<code>1 &lt;= Number of Nodes &lt;=10^4</code>
	树中各结点的值均保证唯一。
</ol>

二叉搜索树中的中序后继 II
Given a <code>node</code> in a binary search tree, findthe in-order successor of that node in the BST.

If that node has no in-order successor, return<code>null</code>.

The successor of a <code>node</code>is the node with the smallest key greater than <code>node.val</code>.

You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node.Below is the definition for <code>Node</code>:

<pre>
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}
</pre>



<strong>Follow up:</strong>

Could you solveit withoutlooking up any of thenode&#39;s values?


<strong>Example 1:</strong>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/23/285_example_1.PNG" style="width: 122px; height: 117px;" />
<pre>
<strong>Input:</strong> tree = [2,1,3], node = 1
<strong>Output:</strong> 2
<strong>Explanation: </strong>1&#39;s in-order successor node is 2. Note that both the node and the return value is of Node type.
</pre>

<strong>Example 2:</strong>
<img alt="" src="https://assets.leetcode.com/uploads/2019/01/23/285_example_2.PNG" style="width: 246px; height: 229px;" />
<pre>
<strong>Input:</strong> tree = [5,3,6,2,4,null,null,1], node = 6
<strong>Output:</strong> null
<strong>Explanation: </strong>There is no in-order successor of the current node, so the answer is null.
</pre>

<strong>Example 3:</strong>
<img alt="" src="https://assets.leetcode.com/uploads/2019/02/02/285_example_34.PNG" style="width: 438px; height: 335px;" />
<pre>
<strong>Input:</strong> tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15
<strong>Output:</strong> 17
</pre>

<strong>Example 4:</strong>
<img alt="" src="https://assets.leetcode.com/uploads/2019/02/02/285_example_34.PNG" style="width: 438px; height: 335px;" />
<pre>
<strong>Input:</strong> tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13
<strong>Output:</strong> 15
</pre>

<strong>Example 5:</strong>

<pre>
<strong>Input:</strong> tree = [0], node = 0
<strong>Output:</strong> null
</pre>


<strong>Constraints:</strong>

<ul>
	<code>-10^5 &lt;= Node.val &lt;= 10^5</code>
	<code>1 &lt;= Number of Nodes &lt;=10^4</code>
	All Nodes will have unique values.
</ul>
