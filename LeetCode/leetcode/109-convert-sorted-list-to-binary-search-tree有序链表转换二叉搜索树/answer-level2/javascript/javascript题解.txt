[109.有序链表转换二叉搜索树](https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/submissions/)   

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)  

## 方法一 

把问题转换成数组转换二叉搜索树，就好做了。   

用二分法去做。

```javascript
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {TreeNode}
 */
var sortedListToBST = function(head) {
    if (head === null) return null;
    let node = head;
    let valArr = [];
    while (node !== null) {
        valArr.push(node.val);
        node = node.next;
    }
    let left = 0, right = valArr.length-1;
    return help(valArr, left, right);
};

function help(valArr, left, right) {
    if (left > right) return null;
    let mid = Math.floor((left + right) / 2);
    let node = new TreeNode(valArr[mid]);
    node.left = help(valArr, left, mid-1);
    node.right = help(valArr, mid+1, right);
    return node;
}
```

## 方法二 中序遍历

```javascript
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {TreeNode}
 */
var sortedListToBST = function(head) {
    if (head === null) return null;
    return help([head], 0, countSize(head)-1);
};

function countSize(head) {
    let count = 0;
    while (head !== null) {
        count++;
        head = head.next;
    }
    return count;
}

function help(arr, left, right) {
    if (left > right) return null;
    let mid = Math.floor((left + right) / 2);
    let leftNode = help(arr, left, mid-1);
    let node = new TreeNode(arr[0].val);
    arr[0] = arr[0].next;
    let rightNode = help(arr, mid+1, right);
    node.left = leftNode;
    node.right = rightNode;
    return node;
}
```