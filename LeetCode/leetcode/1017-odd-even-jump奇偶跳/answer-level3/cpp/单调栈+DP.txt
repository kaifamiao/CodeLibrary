### 题目分析

针对奇数和偶数的情形，我们分别需要找到当前位置后，大于等于它的数中值最小且索引最小的位置，以及小于等于它的数中值最大且索引最小的位置。考虑到$n$的规模，使用朴素的遍历搜索显然会导致超时。

因为存在大小比较，我们考虑进行排序。由于值和索引都需要比较，我们不能直接对原数组进行排序，而是利用`sort`函数的可选参数，传递一个自定义比较函数，来排序一个原始值为$0...n-1$的`order`数组。对于奇数（找比当前数大的数）的情形
，我们按值和索引升序排序`order`数组。对于偶数情形，我们按值降序，索引升序排序`order`数组。不难发现，在排序之后，我们只要在`order`数组中找到第一个比当前索引大的索引，它就代表了当前索引的后继。

找第一个比当前数大的数，这一目标明确了之后，方法也自然浮出了水面：**单调栈**。这里，我们维护一个从栈底到栈顶为降序的单调栈，在新元素加入时，如果它大于当前的栈顶元素，就将其作为栈顶元素的后继，并将栈顶元素出栈。如此循环，直到栈空，或栈顶元素大于新元素为止。

在分别确定了奇数和偶数情况下的后继之后，我们使用两个数组`canodd`和`caneven`，分别记录从当前元素开始，以“奇-偶-奇”和“偶-奇-偶”的方式是否能够跳跃到终点$n-1$。边界条件是，`canodd[n-1]=true`，`caneven[n-1]=true`。我们从$n-2$一直递减到$0$，不断更新对应的`canodd[i]`和`caneven[i]`。

最后，统计`canodd`数组中为`true`的个数，即为我们需要的答案。

### 参考代码

```c++
class Solution {
    vector<int> mono(vector<int> &order) {
        int n = order.size();
        vector<int> nxt(n, -1);
        stack<int> st;
        st.push(order[0]);
        for (int i = 1; i < n; ++i) {
            while (!st.empty() && st.top() < order[i]) {
                nxt[st.top()] = order[i];
                st.pop();
            }
            st.push(order[i]);
        }
        return nxt;
    }
public:
    int oddEvenJumps(vector<int>& A) {
        int n = A.size();
        vector<int> order(n);
        for (int i = 0; i < n; ++i)
            order[i] = i;
        sort(order.begin(), order.end(), [&](int i ,int j) {
           return A[i] < A[j] || (A[i] == A[j] && i < j); 
        });
        vector<int> nxtlarger = mono(order);
        
        sort(order.begin(), order.end(), [&](int i ,int j) {
           return A[i] > A[j] || (A[i] == A[j] && i < j); 
        });
        vector<int> nxtsmaller = mono(order);
        vector<bool> canodd(n), caneven(n);
        caneven[n - 1] = true;
        canodd[n - 1] = true;
        for (int i = n - 2; i >= 0; --i) {
            int nl = nxtlarger[i], ns = nxtsmaller[i];
            if (nl != -1 && caneven[nl])
                canodd[i] = true;
            
            if (ns != -1 && canodd[ns])
                caneven[i] = true;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i)
            ans += canodd[i];
        return ans;
    }
};
```