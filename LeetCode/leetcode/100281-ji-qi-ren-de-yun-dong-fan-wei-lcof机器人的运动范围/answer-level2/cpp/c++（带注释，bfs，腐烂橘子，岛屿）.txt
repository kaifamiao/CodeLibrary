- 思路：
  - bfs遍历，用访问数组防止重复访问
- 时间复杂度：
  - o(m*n)
- 空间复杂度：
  - o(m*n)
- 结果:
  - 用时：81%（4ms）
  - 内存：100%
```
class Solution {
    //四个方向
    int x[4]={-1,1,0,0};
    int y[4]={0,0,-1,1}; 
    //是否能够进入某格子
    bool can_access(int i, int j, int k){
        while(i!=0) {k-=i%10; i/=10;}
        while(j!=0) {k-=j%10; j/=10;}
        return k>=0;
    }
    //bfs探索
    int bfs(int m, int n, int k){
        //bfs队列，记录能够到达的格子坐标
        vector<pair<int,int>> res;
        //初始化访问数组
        vector<vector<int>> visited=vector<vector<int>>(m, vector<int>(n,0));
        //将根节点放入队列，并访问
        res.push_back({0,0}); visited[0][0]=1;
        int begin=0;
        //当有新结点加入时循环（当开头指针不指向队列末尾时循环）
        while(begin!=res.size()){
            //设定本次遍历的末尾指针，遍历[begin, end)中的坐标点
            int end=res.size();
            for(int i=begin;i<end;i++){
                //对当前坐标点的四个方向进行判断
                for(int j=0;j<4;j++){
                    //计算该方向的坐标
                    int x_pos=res[i].first+x[j], y_pos=res[i].second+y[j];
                    //判断坐标是否越界
                    if(x_pos<0 || x_pos>=m || y_pos<0 || y_pos>=n) continue;
                    //当坐标没有访问过且可以进入时，加入队列并访问
                    if(visited[x_pos][y_pos]==0 && can_access(x_pos, y_pos, k)){
                        res.push_back({x_pos, y_pos});
                        visited[x_pos][y_pos]=1;
                    }
                }
            }
            //重置下一次的开头指针
            begin=end;
        }
        //bfs队列中的元素是所有可以访问的元素
        return res.size();
    }
public:
    int movingCount(int m, int n, int k) {
        return bfs(m, n, k);
    }
};
```