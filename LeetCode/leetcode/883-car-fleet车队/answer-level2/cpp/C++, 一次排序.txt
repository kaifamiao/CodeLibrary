创建一种类型Car，包括Position speed time三个成员
对Car按如下优先级进行排序，优先级依次递减：
1. position 位置值越小越靠前
2. speed 相同position值speed越小越靠前
排序后的数组，索引大的元素（车辆）会成为索引小的元素（车辆）的障碍，也即索引小的车辆不可能超越索引大的的车辆，至多和索引大的车辆合并为一个车队，
这样只需要计算无车队障碍时索引小的车辆到达目的地所用时间会不会小于等于索引大车辆所用时间，就可以得知两个车辆会不会合并为一个车队，
如果合并为一个车队，索引小的车辆到达目的地用时则与索引大的车辆用时相同。
代码如下：
```
class Solution {
public:
    struct Car{
        int position;
        int speed;
        float time;
    };
    static bool compare(const Car& a, const Car& b){
        if(a.position < b.position)
            return true;
        if(a.position > b.position)
            return false;
        return a.speed <= b.speed;
    }
    int carFleet(int target, vector<int>& position, vector<int>& speed) {
        if(position.size() == 0) return 0;
        vector<Car> q;
        int count = 0;
        
        for(int i = 0; i < position.size(); i++){
            Car car;
            car.position = position[i];
            car.speed   = speed[i];
            q.push_back(car);
        }
        sort(q.begin(), q.end(), compare);
        
        for(int i = q.size() - 1; i >= 0; i--){
            q[i].time = ((float)(target - q[i].position)) / ((float)q[i].speed);
            if(i < q.size() - 1 && q[i].time <= q[i + 1].time){
                q[i].time = q[i + 1].time;
            }else{
                count++;
            }
        }
        return count;
    }
};
```
