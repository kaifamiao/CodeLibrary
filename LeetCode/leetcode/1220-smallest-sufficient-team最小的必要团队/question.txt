smallest-sufficient-team
作为项目经理，你规划了一份需求的技能清单<code>req_skills</code>，并打算从备选人员名单<code>people</code>中选出些人组成一个「必要团队」（ 编号为<code>i</code>的备选人员<code>people[i]</code>含有一份该备选人员掌握的技能列表）。

所谓「必要团队」，就是在这个团队中，对于所需求的技能列表<code>req_skills</code> 中列出的每项技能，团队中至少有一名成员已经掌握。

我们可以用每个人的编号来表示团队中的成员：例如，团队<code>team = [0, 1, 3]</code>表示掌握技能分别为<code>people[0]</code>，<code>people[1]</code>，和<code>people[3]</code>的备选人员。

请你返回 <strong>任一</strong>规模最小的必要团队，团队成员用人员编号表示。你可以按任意顺序返回答案，本题保证答案存在。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>req_skills = [&quot;java&quot;,&quot;nodejs&quot;,&quot;reactjs&quot;], people = [[&quot;java&quot;],[&quot;nodejs&quot;],[&quot;nodejs&quot;,&quot;reactjs&quot;]]
<strong>输出：</strong>[0,2]
</pre>

<strong>示例2：</strong>

<pre><strong>输入：</strong>req_skills = [&quot;algorithms&quot;,&quot;math&quot;,&quot;java&quot;,&quot;reactjs&quot;,&quot;csharp&quot;,&quot;aws&quot;], people = [[&quot;algorithms&quot;,&quot;math&quot;,&quot;java&quot;],[&quot;algorithms&quot;,&quot;math&quot;,&quot;reactjs&quot;],[&quot;java&quot;,&quot;csharp&quot;,&quot;aws&quot;],[&quot;reactjs&quot;,&quot;csharp&quot;],[&quot;csharp&quot;,&quot;math&quot;],[&quot;aws&quot;,&quot;java&quot;]]
<strong>输出：</strong>[1,2]
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= req_skills.length &lt;= 16</code>
	<code>1 &lt;= people.length &lt;= 60</code>
	<code>1 &lt;= people[i].length, req_skills[i].length, people[i][j].length&lt;= 16</code>
	<code>req_skills</code>和<code>people[i]</code>中的元素分别各不相同
	<code>req_skills[i][j], people[i][j][k]</code>都由小写英文字母组成
	本题保证「必要团队」一定存在
</ul>

最小的必要团队
In a project, you have a list of required skills <code>req_skills</code>,and a list of <code>people</code>. The i-th person <code>people[i]</code>contains a list of skills that person has.

Consider a <em>sufficient team</em>: a set of people such that for every required skill in <code>req_skills</code>, there is at least one person in the team who has that skill. We can represent these teams by the index of each person: for example, <code>team = [0, 1, 3]</code> represents the people with skills <code>people[0]</code>, <code>people[1]</code>, and <code>people[3]</code>.

Return <strong>any</strong>sufficient team of the smallest possible size, represented by the index of each person.

You may return the answer in any order. It is guaranteed an answer exists.


<strong>Example 1:</strong>
<pre><strong>Input:</strong> req_skills = ["java","nodejs","reactjs"], people = [["java"],["nodejs"],["nodejs","reactjs"]]
<strong>Output:</strong> [0,2]
</pre><strong>Example 2:</strong>
<pre><strong>Input:</strong> req_skills = ["algorithms","math","java","reactjs","csharp","aws"], people = [["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]]
<strong>Output:</strong> [1,2]
</pre>

<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= req_skills.length &lt;= 16</code>
	<code>1 &lt;= people.length &lt;= 60</code>
	<code>1 &lt;= people[i].length, req_skills[i].length, people[i][j].length&lt;= 16</code>
	Elements of <code>req_skills</code> and <code>people[i]</code> are (respectively) distinct.
	<code>req_skills[i][j], people[i][j][k]</code> arelowercase English letters.
	Every skill in <code>people[i]</code>is a skill in <code>req_skills</code>.
	It is guaranteed a sufficient team exists.
</ul>
