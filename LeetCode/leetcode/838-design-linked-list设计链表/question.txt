design-linked-list
设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code>和<code>next</code>。<code>val</code>是当前节点的值，<code>next</code>是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性<code>prev</code>以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。

在链表类中实现这些功能：

<ul>
	get(index)：获取链表中第<code>index</code>个节点的值。如果索引无效，则返回<code>-1</code>。
	addAtHead(val)：在链表的第一个元素之前添加一个值为<code>val</code>的节点。插入后，新节点将成为链表的第一个节点。
	addAtTail(val)：将值为<code>val</code> 的节点追加到链表的最后一个元素。
	addAtIndex(index,val)：在链表中的第<code>index</code>个节点之前添加值为<code>val</code> 的节点。如果<code>index</code>等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果<code>index</code>小于0，则在头部插入节点。
	deleteAtIndex(index)：如果索引<code>index</code> 有效，则删除链表中的第<code>index</code> 个节点。
</ul>



<strong>示例：</strong>

<pre>MyLinkedList linkedList = new MyLinkedList();
linkedList.addAtHead(1);
linkedList.addAtTail(3);
linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3
linkedList.get(1);            //返回2
linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3
linkedList.get(1);            //返回3
</pre>



<strong>提示：</strong>

<ul>
	所有<code>val</code>值都在<code>[1, 1000]</code>之内。
	操作次数将在<code>[1, 1000]</code>之内。
	请不要使用内置的 LinkedList 库。
</ul>

设计链表
Design yourimplementation of the linked list. You can choose to use the singly linked list or the doubly linked list. A node in a singlylinked list should have two attributes: <code>val</code>and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code>isapointer/reference to the next node. If you want to use the doubly linked list,you will needone more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.

Implement these functions in your linked list class:

<ul>
	<code>get(index)</code> : Get the value ofthe <code>index</code>-thnode in the linked list. If the index is invalid, return <code>-1</code>.
	<code>addAtHead(val)</code> : Add a node of value <code>val</code>before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
	<code>addAtTail(val)</code> : Append a node of value <code>val</code>to the last element of the linked list.
	<code>addAtIndex(index, val)</code> : Add a node of value <code>val</code>before the <code>index</code>-thnode in the linked list.If <code>index</code>equalsto the length oflinked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
	<code>deleteAtIndex(index)</code> : Deletethe <code>index</code>-thnode in the linked list, if the index is valid.
</ul>



<strong>Example:</strong>

<pre>
<b>Input: </b>
[&quot;MyLinkedList&quot;,&quot;addAtHead&quot;,&quot;addAtTail&quot;,&quot;addAtIndex&quot;,&quot;get&quot;,&quot;deleteAtIndex&quot;,&quot;get&quot;]
[[],[1],[3],[1,2],[1],[1],[1]]
<b>Output: </b> 
[null,null,null,null,2,null,3]

<b>Explanation:</b>
MyLinkedList linkedList = new MyLinkedList(); // Initialize empty LinkedList
linkedList.addAtHead(1);
linkedList.addAtTail(3);
linkedList.addAtIndex(1, 2);  // linked list becomes 1-&gt;2-&gt;3
linkedList.get(1);            // returns 2
linkedList.deleteAtIndex(1);  // now the linked list is 1-&gt;3
linkedList.get(1);         // returns 3
</pre>


<strong>Constraints:</strong>

<ul>
	<code>0 &lt;= index,val &lt;= 1000</code>
	Please do not use the built-in LinkedList library.
	At most <code>2000</code>calls will be made to<code>get</code>,<code>addAtHead</code>,<code>addAtTail</code>, <code>addAtIndex</code> and<code>deleteAtIndex</code>.
</ul>
