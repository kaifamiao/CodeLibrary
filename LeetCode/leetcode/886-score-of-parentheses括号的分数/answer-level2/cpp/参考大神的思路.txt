### 解题思路
参考了大神“早上7点起”的思路，自己按照基本思路做了一遍，对这个题目有了更深的理解。

这道题目有三种情况要处理：
（） ：基本元，得1分；
AB  ：加法运算
（A）：乘法运算

由于里面所有的字符都是'('和')'，所以，直接对括号进行入栈出栈是不现实的。
所以，紧扣题意，进行分情况处理。
当为左括号的时候，另其分数为0，称为“未处理”状态；
当为右括号的时候，需要分情况处理：
1、当为加法运算的时候，需要满足栈顶是“未处理”状态，则这个时候，记为1，称为“基本元”状态

2、当为乘法运算的时候，这个时候，发现栈顶是有状态的。因此，需要找到”未处理“的左括号：
   - 当栈顶不为0时，说明有状态，则累加值，继续搜索
   - 当栈顶为0时，找到了最外围的括号，则是乘法运算，故对其内部的所有值乘以2.

3、当遍历完之后，发现只有加法运算了。将所有的值累加，即可得到最终的结果。
### 代码

```cpp
class Solution {
public:
    //对三种情况分别进行处理。用栈存储分数即可
    int scoreOfParentheses(string S) {
        stack<int> score;
        for(int i=0;i<S.size();i++)
        {
            if(S[i] == '(')
            {
                score.push(0);
            }
            else{
                //这个时候，判定了就是左括号的情况，将其出栈，得分为1
                if(!score.empty() && score.top() == 0)
                {
                    score.pop();
                    score.push(1);
                }
                //当栈顶不为左括号的时候，也就是说，有分数的时候，为第三种情况
                else{
                    int temp = 0;
                    //找到分数为0的左括号的所在
                    while(score.top() != 0)
                    {
                        temp = temp + score.top();
                        score.pop();
                    }
                    //执行第三步操作
                    score.pop();
                    score.push(temp * 2);
                }
            }
        }
        int res = 0;
        while(!score.empty())
        {
            res = res + score.top();
            score.pop();
        }
        return res;
    }
};
```