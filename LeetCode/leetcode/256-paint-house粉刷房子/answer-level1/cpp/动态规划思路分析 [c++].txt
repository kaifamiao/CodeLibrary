动态规划其实本身并不复杂，比较难的点在于，有时候有些思维习惯没养成。
所以，这里重点的分析在于如何快速培养这个思维习惯。
进阶版的动态分析看这个——[动态规划深入分析](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/solution/dong-tai-gui-hua-shen-ru-fen-xi-by-wang-yan-19/)

```
第一步，先提出自底部向上的方案———**无论题目怎么变换，动态规划都是要老老实实一步步遍历数据**
    这里最容易想到的思路就是
    cur[n] = min(cur[n - 1]) + cur_min_color
    然后，发现肯定不行。
```
```
第二步，优化当前方案——**存储的上1/N步的重要信息是否找对了**
    为什么上一种方案会错误。
    万一上个颜色的最小值相同的当前颜色的值，特别小。其他颜色的值特别大
    [[2,1,3][1,111111,2]] 这个反例肯定就跪了

    所以，我们存储的上1/N步的信息需要补充那些呢？（注意有些动态规划的题目，是需要存储不止前一步的信息的）
    把上一步的三种颜色的最小值都给存储就OK了。
```

这两步一套，基本上结果也就出来了。

代码如下，有时候如果只需要存储上一步的信息，就不需要一个数组来存储了，直接临时变量就OK
```
class Solution {
public:
    int minCost(vector<vector<int>>& costs) {
        if (costs.size() == 0) {
            return 0;
        }
        int pre_red_min = 0;
        int pre_blue_min = 0;
        int pre_green_min = 0;
        int min_result;
        for (int i = 0; i < costs.size(); ++i) {
            min_result = INT_MAX;
            int temp_red_min = min(pre_blue_min, pre_green_min) + costs[i][0];
            
            int temp_blue_min = min(pre_red_min, pre_green_min) + costs[i][1];
            
            int temp_green_min = min(pre_red_min, pre_blue_min) + costs[i][2];

            min_result = min(min(min(temp_green_min, temp_red_min), temp_blue_min), min_result);
            pre_red_min = temp_red_min;
            pre_blue_min = temp_blue_min;
            pre_green_min = temp_green_min;
        }
        return min_result;
    }
}
```
