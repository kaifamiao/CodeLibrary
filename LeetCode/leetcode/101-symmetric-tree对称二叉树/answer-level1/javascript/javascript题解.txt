[101.对称二叉树](https://leetcode-cn.com/problems/symmetric-tree/submissions/)

[力扣 JS 题解。](https://github.com/GuYueJiaJie/blog/blob/master/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/README.md)  


## 方法一 递归   

DFS。

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isSymmetric = function(root) {
    if (root === null) return true;
    return help(root.left, root.right);
};

function help(left, right) {
    if (left === null && right === null) {
        return true;
    }
    if (left === null || right === null) {
        return false;
    }
    
    return left.val === right.val && help(left.left, right.right) && help(left.right, right.left);
}
```

## 方法三 

BFS。

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isSymmetric = function(root) {
    let queue = [root, root];
    while (queue.length > 0) {
        let l = queue.shift();
        let r = queue.shift();
        if (l === null && r === null) continue;
        if (l === null || r === null) return false;
        if (l.val !== r.val) return false;
        queue.push(l.left);
        queue.push(r.right);
        queue.push(l.right);
        queue.push(r.left);
    }
    return true
};
```


## 方法三 迭代

层序遍历二叉树，判断每一层的二叉树节点的值是否对称。

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isSymmetric = function(root) {
    if (root === null) return true;
    let node = root;
    let queue = [node];
    while (queue.length > 0) {
        if (!help(queue)) {
            return false;
        }
        let len = queue.length;
        for (let i = 0; i < len; i++) {
            node = queue.shift();
            if (node !== null) {
                queue.push(node.left);
                queue.push(node.right);
            }
        }
    }
    return true
};

function help(arr) {
    let left = 0, right = arr.length-1;
    while (left < right) {
        if (arr[left] === null || arr[right] === null) {
            if (arr[left] !== arr[right]) {
                return false;
            }
        } else {
            if (arr[left].val !== arr[right].val) {
                return false;
            }
        }
        left++;
        right--;
    }
    return true;
}
```