```
class Solution {
public:
    int res = 0;
    void merge(vector<int> &nums, int left, int mid, int right) {
        vector<int> v(right-left+1, 0);
        int i=left, j = mid+1, k=0;
        while(i <= mid && j <= right) {
            if(nums[i] <= nums[j]) {
                v[k++] = nums[i++];
            } else {
                v[k++] = nums[j++];
                res += mid-i+1;
            }
        }
        while(i<=mid) v[k++] = nums[i++];
        while(j<=right) v[k++] = nums[j++];
        for(int i=0;i<k;i++){
        	nums[left+i] = v[i];
        }
    }

    void merge_sort(vector<int> &nums, int left, int right) {
        if(left < right) {
            int mid = (left+right) >> 1;
            merge_sort(nums, left, mid);
            merge_sort(nums, mid+1, right);
            merge(nums, left, mid , right);
        }
    }
    int reversePairs(vector<int>& nums) {
        if(nums.empty()) return 0;
        merge_sort(nums, 0, nums.size()-1);
        return res;
    }
};
```