### 解题思路
1.先给网格横向一次标上坐标 i :0,1...,m-1;纵向标上坐标 j :0,1...,n-1  ：便于和dp数组映射
2.构建二维列表dp，外层列表有m个元素，内层列表有n个元素
3.定义数组dp元素含义：dp[i][j]存储的值代表机器人从左上走到网格坐标（i,j）处总共有多少条不同路径
4.由于只能向下或向左走，对于网格坐标（i,j），最后一步只能从坐标(i-1,j)或者(i,j-1)走一步到达，所以
得出状态转义公式：dp[i][j]=dp[i-1][j]+dp[i][j-1]
5.i=0或者j=0时公式的索引出现负值，应该单独处理，i=0时finish在网格第一列只有一种向下走的方法，
j=0时finish点在第一行只有一种向右走的方法，所以网格第一行和第一列对应的dp元素都应该=1，这个在初始化dp时已经指定了，
直接用递推式计算就好了，最后注意返回的是dp[m-1][n-1]，它对应从右上角走到网格坐标（m-1,n-1）也就是m*n 网格的右下角的总共路径数

### 代码

```python3
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp=[[1]*n]*m
        for i in range(1,m):
            for j in range(1,n):
                dp[i][j]=dp[i-1][j]+dp[i][j-1]
        return dp[m-1][n-1]
```