其实看名字就能明白，所谓动规，就是用数组记录中间过程。
这个题我反正做的时候是用二维数组来理解的。我直接上图吧（一如既往的渣，但是我用心了啊）其中技巧点：
1. 当只有一排和一列的情况下，肯定答案是1.因为只有一种走法。
2. n = 2 ，m=3 和n = 3，m=2是一个性质，次数是相同的。所以其实这个二维数组还勉强可以用中间对称来看。
3. 咱们从左上角开始算，左边的块再走一步到右边这块，上面的块再走一步到下边这块。也就是当一个块不是挨着边的，那么不同路径数就是左边的路径数加上上边的路径数。

![图解](https://pic.leetcode-cn.com/4c0944da1aa719f91c53d5415e1a11471706eca8283357b165ac3bb981a27ad2-file_1580805024759)

（如图表示，我没画完，反正大概就是这个意思。）然后只要看懂这个图就能直接写出代码了，反正我是一个个填进来的。我直接贴代码：
```
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0)
                    dp[i][j] = 1;
                else {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        return dp[m - 1][n - 1]; 
    }
}
```