本题解采用自底而上的动态规划的方法（即从最后一个点(即终点)开始往起始点计算 dp 数组），代码如下：

```java
class Solution {
    // 动态规划
    public int uniquePaths(int m, int n) {
        // 1. 状态定义
        // dp[i][j]：表示从点 (i, j) 到达右下角不同路径数
        int[][] dp = new int[m][n];

        // 2. 状态初始化
        // 从最后一列的每个点到达右下角只有向下这一条路径
        for (int i = 0; i < m; i++) dp[i][n - 1] = 1;
        // 从最后一行的每一个点到达右下角只有向右这一条路径
        for (int i = 0; i < n; i++) dp[m - 1][i] = 1;

        // 3. 状态转移方程
        // dp[i][j] = dp[i][j + 1] + dp[i + 1][j]，表达含义是：
        // 从点 (i, j) 到达右下角不同路径数等于下面两个路径数之和：
        //  1. 从 (i, j) 向右移动一格，即点 (i, j + 1) 到达右下角的路径数
        //  2. 从 (i, j) 向下移动一格，即点 (i + 1, j) 到达右下角的路径数 
        // 从最后一个点(即终点)开始往起始点计算 dp 数组
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (i != m - 1 && j != n - 1) {
                    dp[i][j] = dp[i][j + 1] + dp[i + 1][j];
                }
            }
        }

        // 4. 返回结果
        // 返回从左上角 (0, 0) 到达右下角的不同路径数
        return dp[0][0];
    }
}
```