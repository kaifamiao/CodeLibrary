方法一：数学方法。
机器人一共总(m+n-2)步到达终点，其中向右走的步数为(m-1)步，向下走的步数为(n-1)步。
因此总共的路径数为C(m+n-2,m-1)步。由于我组合数的计算代码不会写，所以就没用这个方法做。
**--------------------------------------------------------------------------------------------**
方法二：动态规划。
如果用dp[i][j]表示走到坐标(i,j)的不同路径数，则转移方程为dp[i][j]=dp[i-1][j]+dp[i][j-1]，当然i>0&&j>0，对于i或j等于0的，很显然dp[i][j]=1。
但这样写用的空间太多了，我们观察到dp[i][j]的转移方程只用到了它左边的值和上面的值，所以下一行的值只和上一行的值有关，所以用两行的dp数组就可以完成动态规划：每行从左到右计算，计算完下一行后，将下一行的值赋给上一行，继续计算下一行。
还是觉得多，我们发现可以把dp[i][j]计算完后，dp[i-1][j]再也用不到了，所以我们可以直接用dp[i][j]代替dp[i-1][j]，这样后面dp[i][j+1]的就等于dp[i-1][j]+dp[i-1][j+1]，结果也代替掉dp[i-1][j+1]，这样就只要一维dp数组就可以完成了，状态转移方程为dp[j]=dp[j-1]+dp[j]，初始值都为1。
PS：好像上一段讲的不是很明白，凑合着看吧。

```C++ []
class Solution {
public:
	int uniquePaths(int m, int n) {
		vector<int> dp(m, 1);
		for (int i = 0; i < n-1; i++) {
			for (int j = 1; j < m; j++) {
				dp[j] += dp[j - 1];
			}
		}
		return dp[m - 1];
	}
};
```
