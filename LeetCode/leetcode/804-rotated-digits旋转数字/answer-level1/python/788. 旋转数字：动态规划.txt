![image.png](https://pic.leetcode-cn.com/e68d0189a6e6d43ad7900cf53317ca79e2481e91e12135dcdc78d8abee44fdd4-image.png)

动归数组d，d[i]表示数字i的状态。

d[i]对应有三个值，1是好数，0是普数，-1是坏数。

好数是旋转后不同的数比如(2,5,6,9)，普数是旋转以后相同的数如(0,1,8)，坏数是旋转后不能成立的数如(3,4,7)，这里前十个数的好坏情况通过切片给预处理了。

某数字i末位或末位以外的数字为坏数，数字i就肯定是坏数，例如(897,389,941)等等。

如果数字i不是坏数，那只要末位或末位以外的数字存在好数，那数字i就肯定是好数，如(120,886,509)等等就是好数，如(808,880)就是普数，程序这里计算用了按位或"|"。

如果数字i的结果d[i]是1是好数，那总答案就加1。

主要是末位以外的数字在计算该数字前肯定计算过了，所以可以动归。

```python []
class Solution:
    def rotatedDigits(self, N: int) -> int:
        ans, d = 0, [0] * (N + 1)
        d[: 10] = [0, 0, 1, -1, -1, 1, 1, -1, 0, 1]
        for i in range(N + 1):
            d[i] = -1 in (d[i // 10], d[i % 10]) and -1 or d[i // 10] | d[i % 10]
            ans += d[i] == 1
        return ans
```