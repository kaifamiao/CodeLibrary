### 解题思路
首先先看 `ret | (((n>>(31-i)) & 1) << i)` 中的 `((n>>(31-i)) & 1)` 这一部分做了什么操作。

其实这部分所做的操作就是取出 n 的从右往左数的第 x 位的数。

**PS：此处的 31 表示数值类型所占用的内存大小，即：sizeof(uint32_t) = 4 字节 = (4 * 8) 位 = 32 位，之所以为 31 是因为位移操作是从第一位开始的。**

例如：假设 n = 1101（此处使用 4 位二进制进行演示）
    当 i = 3 时，就有 `((n >> (3-3)) & 1)` -> `((n >> 0) & 1` -> `1101 & 0001 = 0001`
    当 i = 2 时，就有 `((n >> (3-2)) & 1)` -> `((n >> 1) & 1` -> `0110 & 0001 = 0000`
    当 i = 1 时，就有 `((n >> (3-1)) & 1)` -> `((n >> 2) & 1` -> `0011 & 0001 = 0001`
    当 i = 0 时，就有 `((n >> (3-0)) & 1)` -> `((n >> 3) & 1` -> `0001 & 0001 = 0001`

从上面的例子就可以很清晰的验证我们的想法（**其实这部分所做的操作就是取出 n 的从右往左数的第 x 位的数**）

接下来再看 `ret | (((n>>(31-i)) & 1) << i)` 中的 `<< i` 这一部分的操作，从上面的分析中我们已知 `((n>>(31-i)) & 1)` 就是取 n 的第 31 - i 位，即从右往左按顺序取出。

然后再执行 `<<i`，即表示：将取到的 n 的第 31 - i 位上的数向左位置 i 位，且 i 是从最高位往下最低位走的。

因此，`(((n>>(31-i)) & 1) << i)` 所做的操作就是 `((从最低位往最高位取出 n 对应位上的值) << 将取到的值从最高位往最低位偏移)`，其实就是**将 n 的第 31 -i 位颠倒**，还是用例子演示。

例如：假设 n = 1101（此处使用 4 位二进制进行演示）
    当 i = 3 时，就有 `((n >> (3-3)) & 1) = 0001`，然后再进行 `0001 << i` -> `0001 << 3 = 1000`
    当 i = 2 时，就有 `((n >> (3-2)) & 1) = 0000`，然后再进行 `0000 << i` -> `0000 << 2 = 0000`
    当 i = 1 时，就有 `((n >> (3-1)) & 1) = 0001`，然后再进行 `0001 << i` -> `0001 << 1 = 0010`
    当 i = 0 时，就有 `((n >> (3-0)) & 1) = 0001`，然后再进行 `0001 << i` -> `0001 << 0 = 0001`

最后就是 `ret | (((n>>(31-i)) & 1) << i)` 中的 `ret |` 这一部分做的操作，从上面的分析中可以知道 `(((n>>(31-i)) & 1) << i)` 的操作就是**将 n 的第 31 - i 位颠倒**，然后再 `ret |`，其实就是设置 ret 的第 n 位二进制数。

例如：假设 n = 1101（此处使用 4 位二进制进行演示）
    当 i = 3 时，就有 `((n >> (3-3)) & 1 << 3) = 1000`，然后再进行 `ret | 1000` -> `0000 | 1000 = 1000`
    当 i = 2 时，就有 `((n >> (3-2)) & 1 << 2) = 0000`，然后再进行 `ret | 0000` -> `1000 | 0000 = 1000`
    当 i = 1 时，就有 `((n >> (3-1)) & 1 << 1) = 0010`，然后再进行 `ret | 0010` -> `1000 | 0010 = 1010`
    当 i = 0 时，就有 `((n >> (3-0)) & 1 << 0) = 0001`，然后再进行 `ret | 0001` -> `1010 | 0001 = 1011`

最终 `n(1101) -> ret(1011)`。

关于位操作的更多原理和实践内容，可以参考一下我写的一篇文章：[位操作奇技淫巧之原理加实践](https://mp.weixin.qq.com/s/99HVijYmbk1BrGVi1BqrCg)

### 代码

```cpp
class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        uint32_t ret = 0;
        for(int i = 31; i >= 0; i--) {
            ret = ret | (((n>>(31-i)) & 1) << i);
        }

        return ret;
    }
};
```