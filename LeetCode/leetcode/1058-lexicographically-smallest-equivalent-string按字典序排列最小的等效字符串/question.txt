lexicographically-smallest-equivalent-string
给出长度相同的两个字符串：<code>A</code> 和<code>B</code>，其中 A[i] 和 B[i] 是一组等价字符。举个例子，如果<code>A = &quot;abc&quot;</code> 且<code>B = &quot;cde&quot;</code>，那么就有<code>&#39;a&#39; == &#39;c&#39;, &#39;b&#39; == &#39;d&#39;, &#39;c&#39; == &#39;e&#39;</code>。

等价字符遵循任何等价关系的一般规则：

<ul>
	自反性：&#39;a&#39; == &#39;a&#39;
	对称性：&#39;a&#39; == &#39;b&#39; 则必定有 &#39;b&#39; == &#39;a&#39;
	传递性：&#39;a&#39; == &#39;b&#39; 且 &#39;b&#39; == &#39;c&#39; 就表明 &#39;a&#39; == &#39;c&#39;
</ul>

例如，<code>A</code> 和<code>B</code>的等价信息和之前的例子一样，那么<code>S = &quot;eed&quot;</code>, <code>&quot;acd&quot;</code>或<code>&quot;aab&quot;</code>，这三个字符串都是等价的，而<code>&quot;aab&quot;</code>是 <code>S</code>的按字典序最小的等价字符串

利用<code>A</code> 和<code>B</code>的等价信息，找出并返回 <code>S</code>的按字典序排列最小的等价字符串。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>A = &quot;parker&quot;, B = &quot;morris&quot;, S = &quot;parser&quot;
<strong>输出：</strong>&quot;makkek&quot;
<strong>解释：</strong>根据 <code>A</code> 和 <code>B 中的等价信息，</code>我们可以将这些字符分为 <code>[m,p]</code>, <code>[a,o]</code>, <code>[k,r,s]</code>, <code>[e,i] 共 4 组</code>。每组中的字符都是等价的，并按字典序排列。所以答案是 <code>&quot;makkek&quot;</code>。
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>A = &quot;hello&quot;, B = &quot;world&quot;, S = &quot;hold&quot;
<strong>输出：</strong>&quot;hdld&quot;
<strong>解释：</strong>根据 <code>A</code> 和 <code>B 中的等价信息，</code>我们可以将这些字符分为 <code>[h,w]</code>, <code>[d,e,o]</code>, <code>[l,r] 共 3 组</code>。所以只有 S 中的第二个字符 <code>&#39;o&#39;</code> 变成 <code>&#39;d&#39;，最后答案为<span style=""> </span></code><code>&quot;hdld&quot;</code>。
</pre>

<strong>示例 3：</strong>

<pre><strong>输入：</strong>A = &quot;leetcode&quot;, B = &quot;programs&quot;, S = &quot;sourcecode&quot;
<strong>输出：</strong>&quot;aauaaaaada&quot;
<strong>解释：</strong>我们可以把 A 和 B 中的等价字符分为 <code>[a,o,e,r,s,c]</code>, <code>[l,p]</code>, <code>[g,t]</code> 和 <code>[d,m] 共 4 组</code>，因此 <code>S</code> 中除了 <code>&#39;u&#39;</code> 和 <code>&#39;d&#39;</code> 之外的所有字母都转化成了 <code>&#39;a&#39;</code>，最后答案为 <code>&quot;aauaaaaada&quot;</code>。
</pre>



<strong>提示：</strong>

<ol>
	字符串<code>A</code>，<code>B</code>和<code>S</code>仅有从<code>&#39;a&#39;</code> 到<code>&#39;z&#39;</code>的小写英文字母组成。
	字符串<code>A</code>，<code>B</code>和<code>S</code>的长度在<code>1</code> 到<code>1000</code>之间。
	字符串<code>A</code>和<code>B</code>长度相同。
</ol>

按字典序排列最小的等效字符串
Given strings <code>A</code> and <code>B</code> of the same length, we say A[i] and B[i] are equivalent characters. For example, if <code>A = &quot;abc&quot;</code> and <code>B = &quot;cde&quot;</code>, then we have <code>&#39;a&#39; == &#39;c&#39;, &#39;b&#39; == &#39;d&#39;, &#39;c&#39; == &#39;e&#39;</code>.

Equivalent characters follow the usual rules of any equivalence relation:

<ul>
	Reflexivity: &#39;a&#39; == &#39;a&#39;
	Symmetry: &#39;a&#39; == &#39;b&#39; implies &#39;b&#39; == &#39;a&#39;
	Transitivity: &#39;a&#39; == &#39;b&#39; and &#39;b&#39; == &#39;c&#39; implies &#39;a&#39; == &#39;c&#39;
</ul>

For example, given the equivalency information from <code>A</code> and <code>B</code> above, <code>S = &quot;eed&quot;</code>, <code>&quot;acd&quot;</code>, and <code>&quot;aab&quot;</code> are equivalent strings, and <code>&quot;aab&quot;</code> is the lexicographically smallest equivalent string of <code>S</code>.

Return the lexicographically smallest equivalent string of <code>S</code> by using the equivalency information from <code>A</code> and <code>B</code>.



<strong>Example 1:</strong>

<pre>
<strong>Input: </strong>A = <span id="example-input-1-1">&quot;parker&quot;</span>, B = <span id="example-input-1-2">&quot;morris&quot;</span>, S = <span id="example-input-1-3">&quot;parser&quot;</span>
<strong>Output: </strong><span id="example-output-1">&quot;makkek&quot;</span>
<strong>Explanation:</strong> Based on the equivalency information in <code>A</code> and <code>B</code>, we can group their characters as <code>[m,p]</code>, <code>[a,o]</code>, <code>[k,r,s]</code>, <code>[e,i]</code>. The characters in each group are equivalent and sorted in lexicographical order. So the answer is <code>&quot;makkek&quot;</code>.
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input: </strong>A = <span id="example-input-2-1">&quot;hello&quot;</span>, B = <span id="example-input-2-2">&quot;world&quot;</span>, S = <span id="example-input-2-3">&quot;hold&quot;</span>
<strong>Output: </strong><span id="example-output-2">&quot;hdld&quot;</span>
<strong>Explanation: </strong> Based on the equivalency information in <code>A</code> and <code>B</code>, we can group their characters as <code>[h,w]</code>, <code>[d,e,o]</code>, <code>[l,r]</code>. So only the second letter <code>&#39;o&#39;</code> in <code>S</code> is changed to <code>&#39;d&#39;</code>, the answer is <code>&quot;hdld&quot;</code>.
</pre>

<strong>Example 3:</strong>

<pre>
<strong>Input: </strong>A = <span id="example-input-3-1">&quot;leetcode&quot;</span>, B = <span id="example-input-3-2">&quot;programs&quot;</span>, S = <span id="example-input-3-3">&quot;sourcecode&quot;</span>
<strong>Output: </strong><span id="example-output-3">&quot;aauaaaaada&quot;</span>
<strong>Explanation: </strong> We group the equivalent characters in <code>A</code> and <code>B</code> as <code>[a,o,e,r,s,c]</code>, <code>[l,p]</code>, <code>[g,t]</code> and <code>[d,m]</code>, thus all letters in <code>S</code> except <code>&#39;u&#39;</code> and <code>&#39;d&#39;</code> are transformed to <code>&#39;a&#39;</code>, the answer is <code>&quot;aauaaaaada&quot;</code>.
</pre>



<strong>Note:</strong>

<ol>
	String <code>A</code>, <code>B</code> and <code>S</code> consist of only lowercase English letters from <code>&#39;a&#39;</code> - <code>&#39;z&#39;</code>.
	The lengths of string <code>A</code>, <code>B</code> and <code>S</code> are between <code>1</code> and <code>1000</code>.
	String <code>A</code> and <code>B</code> are of the same length.
</ol>