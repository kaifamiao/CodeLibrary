```
#define MAX_SOLUTION 36

int g_availableSolutions[MAX_SOLUTION] = {
    12, 23, 34, 45, 56, 67, 78, 89,
    123, 234, 345, 456, 567, 678, 789,
    1234, 2345, 3456, 4567, 5678, 6789,
    12345, 23456, 34567, 45678, 56789,
    123456, 234567, 345678, 456789,
    1234567, 2345678, 3456789,
    12345678, 23456789,
    123456789
};

int* sequentialDigits(int low, int high, int* returnSize){

    int* res = (int*)malloc(sizeof(int) * MAX_SOLUTION);
    int count = 0;

    for (int i = 0; i < MAX_SOLUTION; i++) {
        if ((g_availableSolutions[i] >= low) && (g_availableSolutions[i] <= high)) {
            res[count++] = g_availableSolutions[i];
        }
    }

    *returnSize = count;
    return res;
}
```
执行结果：
通过
显示详情
执行用时 :4 ms, 在所有 c 提交中击败了100.00% 的用户
内存消耗 :7 MB, 在所有 c 提交中击败了100.00%的用户
