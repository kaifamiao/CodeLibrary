### 解题思路
 遍历两个字符串，对于某一时刻索引i上的各自字符串上第一次出现的字母，用二维数组记录下这两个字母第一次出现的位置，如果是同构的，那么在后续遍历过程中，如果各自字符串又遇到同样的字母，那么记录在数组中的它们的首次出现的索引位置应该是相等的，否则就是非同构的字符串。

**这里考虑到ASCII字符中只有95个可打印字符，所以第一维的数组的的大小设为95**

### 代码

```c
bool isIsomorphic(char * s, char * t){
    int rec[2][95];
    int i, j, k;
    for(i = 0; i < 2; i++)
        for(j = 0; j < 95; j++)
            rec[i][j] = -1;
    for(i = 0; s[i] != '\0'; i++){
        j = s[i] - ' ';
        k = t[i] - ' ';
        if(rec[0][j] != rec[1][k])
            return 0;
        else if(rec[0][j] == -1){
            rec[0][j] = rec[1][k] = i;   
        }
    }
    return 1;
}
```