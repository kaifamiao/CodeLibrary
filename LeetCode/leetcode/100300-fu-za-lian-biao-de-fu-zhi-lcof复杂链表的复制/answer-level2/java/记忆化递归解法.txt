## 35.复杂链表的复制

### Information

* TIME: 2020/02/16
* LINK: [Click Here](https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/)
* TAG: `DFS` `LIST`

### Description

> 请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null

### Example

```text
输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]
```

### My Answer

> 记忆化递归
>
> 如果当前遍历节点已创建，直接返回引用
>
> 未创建，则创建节点并加入memory，继续复制`next`和`random`节点

```java
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
        HashMap<Node, Node> memory = new HashMap<>();
        memory.put(null, null);
        return copyRandomListHelper(memory, head);
    }
    private Node copyRandomListHelper(HashMap<Node, Node> memory, Node head){
        if(memory.containsKey(head)){
            return memory.get(head); 
        }else{
            Node copy = new Node(head.val);
            memory.put(head, copy);
            copy.next = copyRandomListHelper(memory, head.next);
            copy.random = copyRandomListHelper(memory, head.random);
            return copy;
        }
    }
}
```

### Extend & Reference

> 来源：力扣（LeetCode）
> 链接：https://leetcode-cn.com
> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### More

> **更多题解，请访问我的GitHub仓库：[LeetCode 刷题日记](https://github.com/ZhuoZhuoCrayon/my-Nodes/blob/master/Daily/README_2020.md)**
>
> ![alt](https://pic.leetcode-cn.com/dea57677f5e106165d62594367563d54f5ec5631b35083e06796bb9c959c2ccd-file_1581825710643)
>
> [**更多笔记**](https://github.com/ZhuoZhuoCrayon/my-Nodes)：**`Vue` `Java SSM 框架` `阿里云服务器` `JavaScript/HTML/CSS`   `数据库` ...**
>
> **我的GitHub主页 -> [ZhuoZhuoCrayon](https://github.com/ZhuoZhuoCrayon)**
>
> 共勉~

