maximum-xor-of-two-numbers-in-an-array
给定一个非空数组，数组中元素为 a<sub>0</sub>, a<sub>1</sub>, a<sub>2</sub>, &hellip; , a<sub>n-1</sub>，其中 0 &le; a<sub>i</sub> &lt; 2<sup>31</sup>。

找到 a<sub>i</sub> 和a<sub>j</sub>最大的异或 (XOR) 运算结果，其中0 &le; <em>i</em>,<em>j</em> &lt; <em>n</em>。

你能在O(<em>n</em>)的时间解决这个问题吗？

<strong>示例:</strong>

<pre>
<strong>输入:</strong> [3, 10, 5, 25, 2, 8]

<strong>输出:</strong> 28

<strong>解释:</strong> 最大的结果是 <strong>5</strong> ^ <strong>25</strong> = 28.
</pre>

数组中两个数的最大异或值
Given a <b>non-empty</b> array of numbers, a<sub>0</sub>, a<sub>1</sub>, a<sub>2</sub>, &hellip; , a<sub>n-1</sub>, where 0 &le; a<sub>i</sub> &lt; 2<sup>31</sup>.

Find the maximum result of a<sub>i</sub> XOR a<sub>j</sub>, where 0 &le; <i>i</i>, <i>j</i> &lt; <i>n</i>.

Could you do this in O(<i>n</i>) runtime?

<b>Example:</b>

<pre>
<b>Input:</b> [3, 10, 5, 25, 2, 8]

<b>Output:</b> 28

<b>Explanation:</b> The maximum result is <b>5</b> ^ <b>25</b> = 28.
</pre>


