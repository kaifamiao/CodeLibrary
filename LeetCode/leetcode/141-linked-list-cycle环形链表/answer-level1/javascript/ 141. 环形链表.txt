## 修改为双向链表

指对原有节点增加标记,无论是增加上一个节点,或已循环标记,均可
但污染原来的结构,是会被鄙视的

## 缓存 + 重复判断
不能修改节点,可进行节点缓存,以保护节点不受污染
重复判断的最佳数据结构 --> Set/Map
```javascript
var hasCycle = function(head) {
    let set = new Set();
    while(head){
        let l1 = set.size;
        set.add(head);
        let l2 = set.size;
        //判断是否重复
        if(l2>l1){
            head = head.next;
        }else{
            return true;
        }
    }
    return false;
};
```

## 双指针 【减少数据结构】
特指减少一个数据结构的优化,类似动态规划,只保留有意义的一项,而非所以的数据

慢指针: 一次一步
块指针: 一次多步【两步】

对于无环形,快指针最先到达,退出
对于有环,需要证明,快慢指针最终可以走在一起

此处做一个最简单的假设,假设有 

1 2 3 ... y

证明是否存在 
(2*x)%y === x%y 

即,假设两个指针都在1节点,其中快指针每次走2次,慢指针每次走1次
最终会出现一个x,使得两个指针走到的节点一样【取摸】

肉眼可见x == y 即可
此时也可证明不会存在快,慢指针多次转圈,才引起重合的情况【对于题解,需要加入常量,略】
可也可证明多步,为3,4,5 均可
```javascript
var hasCycle = function(head) {
    let slow;
    let fast;
    slow = fast = head;
    while(slow && fast && fast.next){
        slow = slow.next;
        fast = fast.next.next;
        //快慢指针重合
        if(slow == fast){
            return true;
        }
    }
    //快指针最先结束
    return false;
};
```