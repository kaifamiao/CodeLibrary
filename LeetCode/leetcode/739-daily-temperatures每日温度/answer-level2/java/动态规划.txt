### 解题思路
思路：  
1. 先定义dp数组，索引i代表第i天，dp[i] 代表第i天等待多久温度才会升高超过该日的天数
2. **从后往前**递推，先比较第i+1天的温度和第i天的温度  
2.1 如果第i+1天温度大于当天，则dp[i] = 1;  
2.2 如果第i+1天温度小于等于当天，则比较第一次超过第i+1天的那一天j的温度和当天的温度，此时j=i+1+dp[i+1];  
2.3 如果第j天温度大于当天也就是第i天，返回j和i的差，否则重复2.2，此时的j=2.2中的i+1;
2.4 当某一次重复2.2时，发现dp[j] ==0,则代表第j天已经是第i天后的温度最高的一天，如果该天仍然温度小于第i天，则dp[i]=0;  
3. 返回dp数组
### 代码

```java
class Solution {
    public int[] dailyTemperatures(int[] T) {
        // 状态：天 dp[i] 代表第i天等待多久温度才会升高超过该日的天数
        // 转移方程： dp[i] = 1+dp[j] 或者 0
        // 解释： 如果第i+1天温度大于当天，则dp[i] = 1;
        // 如果第i+1温度小于等于当天，则比较第一次超过i+1的那一天j的温度和当天的温度，
        // 如果小于等于，重复比较，直到某一次dp[j]=0，则dp[i]=0,否则在某一次比较中返回j与i的差

        int[] dp = new int[T.length];
        dp[T.length-1] = 0;
        for(int i=T.length-2;i>=0;i--){
            //距离第i天的天数
            int days = 1;
            int temp = T[days+i]; //第(days+i)天的温度
            //当某一天的温度大于第i天的温度 或者已经找到第i天后面温度最大的某一天（此时dp[i+days]==0）
            while(T[i]>=temp && dp[i+days]!=0){
                days += dp[i+days]; //找到第一次超过第days+i天的温度的一天
                temp = T[days+i]; 
            }
            //如果第(days+i)天的温度确实大于第i天温度，则days，否则为0，代表第i天为第i天后面的最大温度的一天
            dp[i] = temp>T[i]?days:0;
        }
        return dp;
    }
}
```