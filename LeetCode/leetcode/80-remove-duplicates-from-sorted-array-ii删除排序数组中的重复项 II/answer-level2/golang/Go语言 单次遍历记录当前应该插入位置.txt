## 思路来自插入排序
>  执行用时 :4 ms, 在所有 golang 提交中击败了90.61%的用户
>  内存消耗 :3 MB, 在所有 golang 提交中击败了100.00%的用户
#### 
#### 记录插入数据的位置
#### 记录这个位置的数字已经出现的次数
#### 初始化一个临时变量，用来对比将要插入的数数否存在
#### 如果当前要插入的数字跟当前将要插入的位置数据不一致，直接赋值，并记录当前使用的数字(temp)和它的个数(num)
#### 如果当前第i个位置的数字与临时变量相等且使用的次数小于2，则将第i个位置数字插入第j个位置。插入位置随后往前移动
```
func removeDuplicates(nums []int) int {
    n := len(nums)
	if n == 0 {
		return 0
	}
	var j int = 0 //记录插入数据的位置
	var num int = 0 //记录这个位置的数字已经出现的次数
	var tempV int = -1 //初始化一个临时变量，用来对比将要插入的数数否存在
	for i := 0; i < n; i++ {
		if tempV != nums[i] { //如果当前要插入的数字跟当前将要插入的位置数据不一致，直接赋值，并记录当前使用的数字(temp)和它的个数(num)
			nums[j] = nums[i]
			tempV = nums[j]
			num = 1
			j++

		} else if tempV == nums[i] && num < 2 { //如果当前第i个位置的数字与临时变量相等且使用的次数小于2，则将第i个位置数字插入第j个位置。插入位置随后往前移动
			nums[j] = nums[i]
			j++
			num++
		}
	}

	return j
}
```
