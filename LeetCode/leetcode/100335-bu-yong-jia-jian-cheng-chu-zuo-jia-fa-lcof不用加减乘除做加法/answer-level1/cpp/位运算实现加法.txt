(话说这题真的是简单题么，想起来不容易啊_(:зゝ∠)_
既然题目不允许我们使用四则运算，所以我们可以用位运算来自己造一个加法器。
下面的内容回顾了一些数字电路的知识，嫌啰嗦的话读者可以直接跳到最后的代码部分。
### 知识介绍
#### 1. **异或**运算的效果相当于**按位加法**
看下面的真值表，是不是发现0 + 0 = 1；0 + 1 = 1；1 + 1 = 10（我们舍去高位的1，得到0，而1 ^ 1 也等于0）
刚好加法的结果和异或加法的结果相同！


| A    | B    | A^B  |
| ---- | ---- | ---- |
| 0    | 0    | 0    |
| 0    | 1    | 1    |
| 1    | 0    | 1    |
| 1    | 1    | 0    |

不过你也可能要问了1 + 1 = 10(二进制位10，也就是十进制的2)，为什么可以舍去呢？因为按位加法我们强调的就是指改变这一位上的值，而不影响其他位。
而我们可以用C来表示是否进位。令```C = A & B```。当且仅当A = 1，B = 1，A+B才有进位，而C = 1。

#### 2. 实现加法器
假设我们要求A + B的结果，用$a_i$,$b_i$分别表示A，B第i位上的值，（最右边为第1位）。C表示当前位的进位。

当前位的值只需要$a_i$,$b_i$相加，再加上进位即可
$\Sigma$ = $a_i$ ^ $b_i$ ^ $C$;
而下一位的进位C，如果$a_i$,$b_i$, $C$中**至少有两个为1**，则下一位进位；否则下一位不进位。表达式如下：
$C_{new}$ = ($a_i$ & $b_i$) | ( ($a_i$ ^ $b_i$) & $C$ )

(ps: ($a_i$ & $b_i$)表示$a_i$$b_i$都为1的情况；($a_i$ ^ $b_i$)表示$a_i$ $b_i$只有其中一个为1的情况）
(pps:其实上面公式的推导是列真值表画卡诺图推导的，限于篇幅，就不再详细说明了)

### 代码部分
```cpp

class Solution {
public:
    int add(int a, int b) {
        int bit = 31;
        int sum = 0;
        int c = 0; // 进位
        int mask = 1; // mask是只有一位为1，其他位都为0的数，这样mask&A可以得到A第i位上的值
        while(bit){
            int a1 = a&mask, b1 = b&mask;
            sum |= a1 ^ b1 ^ c; //a1^b1^c的结果是当前位为1，其他位为0，所以和sum进行或操作只可以改变当前位
            c = a1 & b1 ^ (a1 ^ b1)&c;
            c <<= 1;
            mask <<= 1;
            bit--;
        }
        sum |= (a&mask) ^ (b&mask) ^ c; // 1<<32会溢出报错，所以我们在while循环内计算31次，最后再计算第32位的结果
        return sum;
    }
};
```

### 简洁的代码
上面的代码是一位一位进行加法的，代码不怎么好写。下面是其他的题解中大佬[@luo-jing-yu-yu](/u/luo-jing-yu-yu/)给出的很漂亮的简洁代码。
结合我上面的介绍应该很好看懂。

```cpp
int add(int a, int b) {
    // 异或操作进行按位加法。
    // 由于按位加法只改变当前位，我们用carry = a & b来记录哪些位有进位
    // 然后carry左移一位，再继续与上次按位加法的结果sum进行异或操作。
    // 一直如此循环，直到没有进位（carry == 0）
    int sum, carry;
    while (b != 0) {
        sum = a ^ b; 
        carry = ((unsigned int) (a & b) << 1); 

        // 循环，直到进位为0
        a = sum;
        b = carry;
    }

    return a;
}
```

感谢你的阅读^_^