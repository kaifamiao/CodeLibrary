# 1. 理解
对两个数的加法进行等效的位运算转化，可以模拟十进制运算的过程。
**如何模拟0+1=1，1+0=1？**
使用按位异或运算
**如何模拟0+0=0,1+1=10？**
结合使用按位与和左移运算，例如0000 0001 + 0000 0001 = (0000 0001&0000 0001)<<1 = 0000 0010
**对于负数的移位操作？**
C++不支持负值左移，必须要转换成无符号类型
# 2. 思路
1. 对于a、b两个数，先计算按位异或，得到不进位部分的和sum1=a^b
2. 再计算按位与和左移运算，得到进位部分的和sum2=(unsigned)(a&b)<<1
# 3. 代码
```c++ []
class Solution {
public:
    int add(int a, int b) {
        while(a){
            int sum = a ^ b;    //非进位部分的和
            a = (unsigned) (a & b) << 1;   //进位部分和
            b = sum;
        }
        return b;
    }
};
```
# 4. 总结
常用的位运算包括：
- 与(&)
- 或(|)
- 取反(~)
- 异或(^)
- 左移(<<)
- 右移(>>)