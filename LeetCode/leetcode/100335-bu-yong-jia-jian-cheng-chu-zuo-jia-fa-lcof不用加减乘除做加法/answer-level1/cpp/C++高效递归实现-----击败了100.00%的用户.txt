### 解题思路
1. 公式推理
- ^ 亦或 ----相当于 无进位的求和， 想象10进制下的模拟情况：（如:19+1=20；无进位求和就是10，而非20；因为它不管进位情况）

- & 与 ----相当于求每位的进位数， 先看定义：1&1=1；1&0=0；0&0=0；即都为1的时候才为1，正好可以模拟进位数的情况,还是想象10进制下模拟情况：（9+1=10，如果是用&的思路来处理，则9+1得到的进位数为1，而不是10，所以要用<<1向左再移动一位，这样就变为10了）；

- 公式就是：（a^b) ^ ((a&b)<<1) 即：每次无进位求 + 每次得到的进位数，我们需要不断重复这个过程，直到进位数为0为止；

*引自@端粒的评论*

2. 代码实现
- 注意负号，可以用`unsigned int`消去`(a&b)<<1`带来的符号位溢出，同时`a^b`可以保留最高位符号位
- 递归实现时，需要专门留一个进位数，实现递归出口判断

### 代码

```cpp
class Solution {
public:
    int add(int a, int b) {
        if(a==0) return b;
        return  add((unsigned int) (a&b)<<1, a^b);
    }
};
```

```
执行用时 :
0 ms, 在所有 C++ 提交中击败了100.00%的用户
内存消耗 :
8.3 MB, 在所有 C++ 提交中击败了100.00%的用户
```