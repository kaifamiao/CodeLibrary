首先，我们先明确一个概念，就是每个位置上的数字是可以在两种前结果之上进行选择的：
1. 如果你不删除当前位置的数字，那么你得到就是前一个数字的位置的最优结果。
2. 如果你觉得当前的位置数字i需要被删，那么你就会得到i - 2位置的那个最优结果加上当前位置的数字乘以个数。

以上两个结果，你每次取最大的，记录下来，然后答案就是最后那个数字了。

如果你看到现在有点迷糊，那么我们先把数字进行整理一下。

我们在原来的 nums 的基础上构造一个临时的数组 `all`，这个数组，以元素的值来做下标，下标对应的元素是原来的元素的个数。

举个例子：
>  nums = [2, 2, 3, 3, 3, 4]

构造后：
> all=[0, 0, 2, 3, 1];

就是代表着 $2$ 的个数有两个，$3$ 的个数有 $3$ 个，$4$ 的个数有 $1$ 个。

其实这样就可以变成打家劫舍的问题了呗。

我们来看看，打家劫舍的最优子结构的公式：
>  dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);

再来看看现在对这个问题的最优子结构公式：
> dp[i] = Math.max(dp[i - 1], dp[i - 2] + i * all[i]);

我们可以来看看代码了
```java [-Java]
class Solution {
    public int deleteAndEarn(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        } else if (nums.length == 1) {
            return nums[0];
        }
        int len = nums.length;
        int max = nums[0];
        for (int i = 0; i < len; ++i) {
           max = Math.max(max, nums[i]);
        }
//      构造一个新的数组all
        int[] all = new int[max + 1];
        for (int item : nums) {
            all[item] ++;
        }
        int[] dp = new int[max + 1];
        dp[1] = all[1] * 1;
        dp[2] = Math.max(dp[1], all[2] * 2);
//      动态规划求解
        for (int i = 2; i <= max; ++i) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + i * all[i]);
        }
        return dp[max];
    }
}
```
