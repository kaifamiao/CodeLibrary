rle-iterator
编写一个遍历游程编码序列的迭代器。

迭代器由 <code>RLEIterator(int[] A)</code> 初始化，其中<code>A</code>是某个序列的游程编码。更具体地，对于所有偶数 <code>i</code>，<code>A[i]</code> 告诉我们在序列中重复非负整数值 <code>A[i + 1]</code> 的次数。

迭代器支持一个函数：<code>next(int n)</code>，它耗尽接下来的 <code>n</code> 个元素（<code>n &gt;= 1</code>）并返回以这种方式耗去的最后一个元素。如果没有剩余的元素可供耗尽，则 <code>next</code>返回<code>-1</code> 。

例如，我们以<code>A = [3,8,0,9,2,5]</code>开始，这是序列<code>[8,8,8,5,5]</code>的游程编码。这是因为该序列可以读作 &ldquo;三个八，零个九，两个五&rdquo;。



<strong>示例：</strong>

<pre><strong>输入：</strong>[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]
<strong>输出：</strong>[null,8,8,5,-1]
<strong>解释：</strong>
RLEIterator 由 RLEIterator([3,8,0,9,2,5]) 初始化。
这映射到序列 [8,8,8,5,5]。
然后调用 RLEIterator.next 4次。

.next(2) 耗去序列的 2 个项，返回 8。现在剩下的序列是 [8, 5, 5]。

.next(1) 耗去序列的 1 个项，返回 8。现在剩下的序列是 [5, 5]。

.next(1) 耗去序列的 1 个项，返回 5。现在剩下的序列是 [5]。

.next(2) 耗去序列的 2 个项，返回 -1。 这是由于第一个被耗去的项是 5，
但第二个项并不存在。由于最后一个要耗去的项不存在，我们返回 -1。
</pre>



<strong>提示：</strong>

<ol>
	<code>0 &lt;= A.length &lt;= 1000</code>
	<code>A.length</code>是偶数。
	<code>0 &lt;= A[i] &lt;= 10^9</code>
	每个测试用例最多调用<code>1000</code>次<code>RLEIterator.next(int n)</code>。
	每次调用<code>RLEIterator.next(int n)</code>都有<code>1 &lt;= n &lt;= 10^9</code>。
</ol>

RLE 迭代器
Write an iterator that iterates through a run-length encoded sequence.

The iterator is initialized by <code>RLEIterator(int[] A)</code>, where <code>A</code> is a run-length encoding of somesequence. More specifically,for all even <code>i</code>,<code>A[i]</code> tells us the number of times that the non-negative integer value <code>A[i+1]</code> is repeated in the sequence.

The iterator supports one function:<code>next(int n)</code>, which exhausts the next <code>n</code> elements(<code>n &gt;= 1</code>) and returns the last element exhausted in this way. If there is no element left to exhaust, <code>next</code>returns <code>-1</code> instead.

For example, we start with <code>A = [3,8,0,9,2,5]</code>, which is a run-length encoding of the sequence <code>[8,8,8,5,5]</code>. This is because the sequence can be read as&quot;three eights, zero nines, two fives&quot;.



<strong>Example 1:</strong>

<pre>
<strong>Input: </strong><span id="example-input-1-1">[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;]</span>, <span id="example-input-1-2">[[[3,8,0,9,2,5]],[2],[1],[1],[2]]</span>
<strong>Output: </strong><span id="example-output-1">[null,8,8,5,-1]</span>
<strong>Explanation: </strong>
RLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).
This maps to the sequence [8,8,8,5,5].
RLEIterator.next is then called 4 times:

.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].

.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].

.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].

.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,
but the second term did not exist.  Since the last term exhausted does not exist, we return -1.

</pre>

<strong>Note:</strong>

<ol>
	<code>0 &lt;= A.length &lt;= 1000</code>
	<code>A.length</code>is an even integer.
	<code>0 &lt;= A[i] &lt;= 10^9</code>
	There are at most <code>1000</code> calls to <code>RLEIterator.next(int n)</code> per test case.
	Each call to<code>RLEIterator.next(int n)</code>will have <code>1 &lt;= n &lt;= 10^9</code>.
</ol>
