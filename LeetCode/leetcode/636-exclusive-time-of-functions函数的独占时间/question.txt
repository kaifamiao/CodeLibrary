exclusive-time-of-functions
给出一个非抢占单线程CPU的 <strong>n </strong>个函数运行日志，找到函数的独占时间。

每个函数都有一个唯一的 Id，从 <strong>0</strong> 到<strong> n-1</strong>，函数可能会递归调用或者被其他函数调用。

日志是具有以下格式的字符串：<code>function_id：start_or_end：timestamp</code>。例如：<code>&quot;0:start:0&quot;</code>表示函数 0 从 0 时刻开始运行。<code>&quot;0:end:0&quot;</code>表示函数 0 在 0 时刻结束。

函数的独占时间定义是在该方法中花费的时间，调用其他函数花费的时间不算该函数的独占时间。你需要根据函数的 Id 有序地返回每个函数的独占时间。

<strong>示例 1:</strong>

<pre><strong>输入:</strong>
n = 2
logs = 
[&quot;0:start:0&quot;,
 &quot;1:start:2&quot;,
 &quot;1:end:5&quot;,
 &quot;0:end:6&quot;]
<strong>输出:</strong>[3, 4]
<strong>说明：</strong>
函数 0 在时刻 0 开始，在执行了  2个时间单位结束于时刻 1。
现在函数 0 调用函数 1，函数 1 在时刻 2 开始，执行 4 个时间单位后结束于时刻 5。
函数 0 再次在时刻 6 开始执行，并在时刻 6 结束运行，从而执行了 1 个时间单位。
所以函数 0 总共的执行了 2 +1 =3 个时间单位，函数 1 总共执行了 4 个时间单位。
</pre>

<strong>说明：</strong>

<ol>
	输入的日志会根据时间戳排序，而不是根据日志Id排序。
	你的输出会根据函数Id排序，也就意味着你的输出数组中序号为 0 的元素相当于函数 0 的执行时间。
	两个函数不会在同时开始或结束。
	函数允许被递归调用，直到运行结束。
	1 &lt;= n &lt;= 100
</ol>

函数的独占时间
On a <strong>single threaded</strong> CPU, we execute some functions. Each function has a unique id between <code>0</code> and <code>N-1</code>.

We store logs in timestamp order that describe when a function is entered or exited.

Each log is a string with this format: <code>&quot;{function_id}:{&quot;start&quot; | &quot;end&quot;}:{timestamp}&quot;</code>. For example, <code>&quot;0:start:3&quot;</code>means the function with id <code>0</code> <strong>started at the beginning</strong> of timestamp <code>3</code>. <code>&quot;1:end:2&quot;</code> means the function with id <code>1</code> <strong>ended at the end</strong> of timestamp <code>2</code>.

A function&#39;s <em>exclusive time</em>is the number of units of time spent in this function. Note that this does <strong>not</strong> include any recursivecalls to child functions.

The CPU is <strong>single threaded</strong> which means that only one function is being executed at a given time unit.

Return the exclusive time of each function, sorted by their function id.



<b>Example 1:</b>

<b><img alt="" src="https://assets.leetcode.com/uploads/2019/04/05/diag1b.png" style="width: 500px; height: 218px;" /></b>

<pre>
<b>Input:</b>
n = 2
logs = [&quot;0:start:0&quot;,&quot;1:start:2&quot;,&quot;1:end:5&quot;,&quot;0:end:6&quot;]
<b>Output: </b>[3, 4]
<b>Explanation:</b>
Function 0 starts at the beginning of time 0, then it executes 2 units of time and reaches the end of time 1.
Now function 1 starts at the beginning of time 2, executes 4 units of time and ends at time 5.
Function 0 is running again at the beginning of time 6, and also ends at the end of time 6, thus executing for 1 unit of time. 
So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.
</pre>



<b>Note:</b>

<ol>
	<code>1 &lt;= n &lt;= 100</code>
	Two functions won&#39;t start or end at the same time.
	Functions will always log when they exit.
</ol>


