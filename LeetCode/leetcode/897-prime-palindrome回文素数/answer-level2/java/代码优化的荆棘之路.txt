&emsp;&emsp;其实，初看这个题目，大多数人可能都和我一样，觉得这个题非常简单，无非是暴力循环，在循环中判断是否为素数和回文数，代码如下所示：

```java
class Solution {
    public int primePalindrome(int N) {
        for(;;) {
            boolean isPrime = true, isPalindrome = true;
            // 判断是否为素数
            for(int i=2, len = (int) Math.sqrt(N); i <= len; ++i) {
                if(N % i == 0) {
                    isPrime = false;
                    break;
                }
            }
            // 判断是否为回文数
            String cs = String.valueOf(N);
            for(int j=0, len = cs.length() >> 1; j < len; ++j) {
                if(cs.charAt(j) != cs.charAt(cs.length() - j - 1)) {
                    isPalindrome = false;
                    break;
                }
            }
            // 是回文数和素数
            if(isPrime && isPalindrome) return N;
            N++;
        }
    }
}
```

&emsp;&emsp;但是，非常遗憾，这种暴力法很快在（N=9989900）的用例面前崩溃了。然后，自然是去尝试各种优化方法，我觉得有以下两种方案可以进行优化：
1. 采用更好的素数判别方法——6步进素数判别法；
2. 将判断素数和回文数的循环合二为一，这样可以同时进行两者的判断；

&emsp;&emsp;6步进素数判别法是基于一个简单的事实，即大于6的素数一定分布在6的倍数的左右，这是显而易见的，我们可以把大于等于6的自然数写成6x, 6x+1, 6x+2, 6x+3, 6x+4, 6x+5的形式，其中6x,6x+2,6x+3,6x+4肯定不是素数，所以素数要么表示成6x+1, 要么是6x+5, 所以是分布在6的倍数的左右的。不过，小于6的数字需要单独处理，所以需要增加一个映射表用于处理小于6的数。改进后的代码如下：

```java
class Solution {
    public int primePalindrome(int N) {
        int[] check = new int[]{2, 2, 2, 3, 5, 5, 7};
        if(N < check.length && check[N] > 0) return check[N];
        for(;;) {
            int mod = N % 6;
            // 只有模6余数为1或5的数才可能是素数
            if((mod == 1 || mod == 5)) {
                String cs = String.valueOf(N);
                boolean isPrime = true, isPalindrome = true;
                // 同时进行素数和回文数的判断
                for(int i=5, j = 0,
                    L1 = (int) Math.sqrt(N),
                    strLen = cs.length(),
                    L2 = strLen >> 1;
                    i <= L1 || j < L2;
                    i+=6, ++j) {
                    if(i <= L1 && (N % i == 0 || N % (i + 2) == 0)) {
                        isPrime = false;
                        break;
                    }
                    if (j < L2 && cs.charAt(j) != cs.charAt(strLen - j - 1)) {
                        isPalindrome = false;
                        break;
                    }
                }
                if(isPrime && isPalindrome) return N;
                N = mod == 1? N + 4: N + 2;
            } else {
                N = mod == 0? N + 1: N + (5 - mod);
            }
        }
    }
}
```

&emsp;&emsp;但是，仍然非常遗憾，这样是也是通过不了（N=9989900）,这个例子耗时均在2s以上，然后我统计了if里面执行的次数，大约为300多万次，也就是说if内部的判断平均仅消耗0.0007ms，已经非常快了，这说明瓶颈可能并不在判断回文数和素数上，瓶颈大概率在于太多次进入if进行判断了。当然，之后我还是参考了一些网上的解决办法，发现了核心问题所在，其实也十分简单，下面我就具体谈一下。

&emsp;&emsp;大家可以想象在10-100内的回文数，必定是11,22,33,44,55,66,77,88,99。发现了吗？除了11以外全不是素数。同理，1000-10000之间，回文数是1111,2112,...,2222,3333,3443,...,4444,5555,6666,7777,8888,9999。相信大家已经发现了，当数字大于11的数的数字个数为偶数时，其回文数都不是素数，我们可以直接跳过这些数字，因为11必定是其质因数。

```java
class Solution {
    public int primePalindrome(int N) {
        int[] check = new int[]{2, 2, 2, 3, 5, 5, 7, 7, 11, 11, 11, 11};
        if(N < check.length && check[N] > 0) return check[N];
        for(;;) {
            int mod = N % 6;
            String cs = String.valueOf(N);
            // 新增了一个判断，用于跳过数字长度为偶数的区间
            if ((cs.length() & 1) == 0) {
                N = (int) Math.pow(10, cs.length()) + 1;
                continue;
            }
            // 原代码
            if((mod == 1 || mod == 5)) {
                boolean isPrime = true, isPalindrome = true;
                for(int i=5, j = 0,
                    L1 = (int) Math.sqrt(N),
                    strLen = cs.length(),
                    L2 = strLen >> 1;
                    i <= L1 || j < L2;
                    i+=6, ++j) {
                    if(i <= L1 && (N % i == 0 || N % (i + 2) == 0)) {
                        isPrime = false;
                        break;
                    }
                    if (j < L2 && cs.charAt(j) != cs.charAt(strLen - j - 1)) {
                        isPalindrome = false;
                        break;
                    }
                }
                if(isPrime && isPalindrome) {
                    return N;
                }
                N = mod == 1? N + 4: N + 2;
            } else {
                N = mod == 0? N + 1: N + (5 - mod);
            }
        }
    }
}
```

&emsp;&emsp;经过测算，重新跑例子（N=9989900）时间下降到14ms，效果显著。