#### 解题思路：
这道题题意说的其实有点啰嗦的。首先你要知道有效括号的意思，一句话概括就是每个左括号都可以找到在它右边的与其对应的右括号。不知道有效括号的概念的，或者没有刷过判断有效括号题目的，建议可以移步这里： [有效的括号](https://leetcode-cn.com/problems/valid-parentheses/)。

题面最后 answer 的意思就是，为 0 的部分对应 seq 的括号是 A 字符串，为 1 的部分对应 seq 的括号是 B 字符串。

示例 1：
```
输入：seq = "(()())"
输出：[0,1,1,1,1,0]
```
answer 的意思是下面这个样子。红色部分是 A 串，蓝色部分是 B 串。
![image.png](https://pic.leetcode-cn.com/04d5010f0145eefdc6595b29e1088fc0f2c8efcbef9ced16227d668cf0fd6efc-image.png){:height="30%" width="30%"}


示例 2：
```
输入：seq = "()(())()"
输出：[0,0,0,1,1,0,1,1]
```
对应的 answer 的图示：
![image.png](https://pic.leetcode-cn.com/fd04742c31901af648fb9cac4771836a5d9567a7ef6ddafd8a519cc02e5ea361-image.png){:height="30%" width="30%"}

题面也说了 answer 的答案是不唯一的，下面这样也是可以的：
![image.png](https://pic.leetcode-cn.com/1675fd60b68a835009fbdc509d86ecb2045de7b48a4510a3864e93571547ec2e-image.png){:height="30%" width="30%"}



下面说做法：

我假设你已经做过上面的题目了，知道需要用栈辅助判断。题面中的 depth 其实就是栈的最大深度。“你需要从中选出任意一组有效括号字符串 A 和 B，使 max(depth(A), depth(B)) 的可能取值最小”。这句话其实相当于让 A 字符串和 B 字符串的 depth 尽可能的接近。为什么呢？因为 seq 对应的栈上，每个左括号都对应一个深度，而这个左括号，要么是 A 的，要么是 B 的。所以，栈上的左括号只要按奇偶分配给A和B就可以啦！时间复杂度很明显是 $O(n)$ 的，空间复杂度也是 $O(n)$（如果算返回的变量的话）。

```Java []
public class Solution {
    public int[] maxDepthAfterSplit(String seq) {
        int[] ans = new int [seq.length()];
        int idx = 0;
        for(char c: seq.toCharArray()) {
            ans[idx++] = c == '(' ? idx & 1 : ((idx + 1) & 1);
        }
        return ans;
    }
}
```

以上谢谢大家，**求赞求赞求赞！**
