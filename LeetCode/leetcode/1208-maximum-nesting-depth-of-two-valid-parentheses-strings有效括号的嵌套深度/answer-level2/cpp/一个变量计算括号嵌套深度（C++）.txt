> 做这道题目，最难的部分在于读懂题。—— 鲁迅

这不知道是力扣上第几个读题比做题难的题目了。题目里有几个地方比较容易迷惑：

+ 我们要找的 `A` 和 `B` 是**子序列**，也就是说可以不连续的，只要 `A` 和 `B` 穿插加起来等于原来的字符串就行。
+ 题目中 `answer` 数组的意思是，`answer` 中的每个数对应字符串中的每个字符，如果是 0，则对应字符属于 `A` 子序列，如果是 1，则对应字符属于 `B` 子序列。
+ 一个输入可能有多种合法的结果，返回任何一个都算对。**所以你们不要跑甜姨的题解底下说某某测试用例跑不对了。**

理解了题意之后，我们开始正文。

## 括号合法性判断

括号类题目的基础是**有效括号**的判断。在一个字符串中，可能有左括号 `(`  和右括号 `)`，怎么判断括号是合法的呢？答案是**计算括号嵌套深度**。

我们用一个变量记录括号的嵌套深度。遍历一遍字符串，遇到左括号 `(`  时，深度 +1，遇到右括号 `)` 时，深度 -1。

![depth](https://pic.leetcode-cn.com/38d7e2d5a99cdbc526be4e691f70f6fe94417c1e7146902ebd3c3f0363460dfe.jpg)

一个有效括号字符串需要满足以下两个标准：

+ （括号数量匹配）遍历完字符串之后，嵌套深度回到 0
+ （括号位置匹配）在遍历过程中，深度始终为非负

## 本题题解

这道题其实比较简单，输入的括号一定是有效的，所以我们只要专注有效括号的拆分即可。

拆分括号的方法还是利用括号嵌套深度。假设括号的最大嵌套深度是 $d$，那么我们想拆分出两个括号子序列，让两个子序列的嵌套深度尽量小，肯定是让两个子序列均匀分摊括号深度。所以，我们设 $m = d/2$，只需要把原字符串中，深度小于 $m$ 的部分放入 `A`，深度大于 $m$ 的部分放入`B` 即可。

我们首先遍历一遍字符串，计算括号的最大嵌套深度 $d$。然后在第二遍遍历的时候，把深度小于 $m=d/2$ 的标记为 `answer[i] = 0`，大于 $m$ 的标记为 `answer[i] = 1` 即可。

![solution](https://pic.leetcode-cn.com/93940f14280f480c4cd11c0536fe8aa7fb124d46e4f3c8200fce6d37ef434dc5.jpg)

以下是题解代码（C++）：

```C++ []
vector<int> maxDepthAfterSplit(string seq) {
    int m = maxDepth(seq) / 2; // 取最大嵌套深度的一半

    int N = seq.length();
    vector<int> res(N, 0); // 默认值为 0，默认将括号放入 A
    int depth = 0; // 跟踪当前深度
    for (int i = 0; i < N; i++) {
        // 深度大于一半，则放入 B
        if (depth > m || depth == m && seq[i] == '(') {
            res[i] = 1;
        }
        // 更新深度
        if (seq[i] == '(') {
            depth++;
        } else {
            depth--;
        }
    }
    return res;
}

// 计算括号的最大嵌套深度
int maxDepth(string& s) {
    int res = 0;
    int depth = 0;
    for (char c : s) {
        if (c == '(') {
            depth++;
            res = max(res, depth);
        } else {
            depth--;
        }
    }
    return res;
}
```

---

如果你觉得本文对你有帮助，欢迎关注我的公众号《面向大象编程》，其中的《LeetCode 例题精讲》系列文章正在写作，不仅有题解，更能让你学会解题的通用思路，举一反三！

![footer](https://pic.leetcode-cn.com/f60ecba78113907f5b44443bd83eab011cec4fcc4300759cf3ae5e2ffd33d6f.jpg)

---

本文作者 nettee。如果你觉得本文对你有帮助，欢迎在力扣[关注我](https://leetcode-cn.com/u/nettee/)，目前已经有题解20余篇~最近的“每日打卡”系列也会经常参加~（点进我的个人资料，可以看往期题解哦）