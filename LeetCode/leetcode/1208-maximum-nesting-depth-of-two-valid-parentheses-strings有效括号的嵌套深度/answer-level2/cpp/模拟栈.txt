```cpp
class Solution {
public:
    //题目要求  拆成2个数组 ，2个数组都是有效括号  使得每一组括号的嵌套层数  尽可能小
    //输入：seq = "(()())"  ->  (____) 和 ()()  都是1层
    //输出：[0,1,1,1,1,0]
    //输入：seq = "()(())()" ->()(__) 和 ()_()  都是1层
    //输出：[0,0,0,1,1,0,1,1]
    //所有连续的2个（（肯定不能分到一起  分到一起，嵌套层数就大了   所以我们按照奇偶性来分 错开2个连续的（（
    //根据题意，seq绝对是个有效括号 也就是有（   必定右边有 ）  所以2个连续的（）必定分到一组 凑成一个括号
    //模拟栈
    vector<int> maxDepthAfterSplit(string seq) {
        int size = (int)seq.size();
        vector<int>rs(size);
        int count = 0;
        for(int i = 0; i < size; i++) {
            if (seq[i] == '(') {
                //栈元素+1
                count++;
                rs[i] = count % 2;
            }else{
                //）和之前的（匹配
                //栈元素-1  为什么count--放在后面？？
                //因为）之前一定是（ ， 因为之前的）已经和其他的（匹配了，出栈了
                //且要和（分到一组，所以不能先-1
                rs[i] = count % 2;
                count--;
            }
        }
        return rs;
    }
};
```