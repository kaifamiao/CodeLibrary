maximum-nesting-depth-of-two-valid-parentheses-strings
<strong>有效括号字符串 </strong>定义：对于每个左括号，都能找到与之对应的右括号，反之亦然。详情参见题末「<strong>有效括号字符串</strong>」部分。

<strong>嵌套深度</strong> <code>depth</code> 定义：即有效括号字符串嵌套的层数，<code>depth(A)</code> 表示有效括号字符串 <code>A</code> 的嵌套深度。详情参见题末「<strong>嵌套深度</strong>」部分。

有效括号字符串类型与对应的嵌套深度计算方法如下图所示：

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/04/01/1111.png" style="height: 152px; width: 600px;">



给你一个「有效括号字符串」 <code>seq</code>，请你将其分成两个不相交的有效括号字符串，<code>A</code> 和<code>B</code>，并使这两个字符串的深度最小。

<ul>
	不相交：每个 <code>seq[i]</code> 只能分给 <code>A</code> 和 <code>B</code> 二者中的一个，不能既属于 <code>A</code> 也属于 <code>B</code> 。
	<code>A</code> 或 <code>B</code> 中的元素在原字符串中可以不连续。
	<code>A.length + B.length = seq.length</code>
	深度最小：<code>max(depth(A), depth(B))</code>的可能取值最小。
</ul>

划分方案用一个长度为 <code>seq.length</code> 的答案数组 <code>answer</code> 表示，编码规则如下：

<ul>
	<code>answer[i] = 0</code>，<code>seq[i]</code> 分给 <code>A</code> 。
	<code>answer[i] = 1</code>，<code>seq[i]</code> 分给 <code>B</code> 。
</ul>

如果存在多个满足要求的答案，只需返回其中任意 <strong>一个 </strong>即可。



<strong>示例 1：</strong>

<pre><strong>输入：</strong>seq = &quot;(()())&quot;
<strong>输出：</strong>[0,1,1,1,1,0]
</pre>

<strong>示例 2：</strong>

<pre><strong>输入：</strong>seq = &quot;()(())()&quot;
<strong>输出：</strong>[0,0,0,1,1,0,1,1]
<strong>解释：</strong>本示例答案不唯一。
按此输出 A = &quot;()()&quot;, B = &quot;()()&quot;, max(depth(A), depth(B)) = 1，它们的深度最小。
像 [1,1,1,0,0,1,1,1]，也是正确结果，其中 A = &quot;()()()&quot;, B = &quot;()&quot;, max(depth(A), depth(B)) = 1 。 
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;seq.size &lt;= 10000</code>
</ul>



<strong>有效括号字符串：</strong>

<pre>仅由<code>&quot;(&quot;</code> 和<code>&quot;)&quot;</code>构成的字符串，对于每个左括号，都能找到与之对应的右括号，反之亦然。
下述几种情况同样属于有效括号字符串：

  1. 空字符串
  2. 连接，可以记作<code>AB</code>（<code>A</code> 与 <code>B</code> 连接），其中<code>A</code>和<code>B</code>都是有效括号字符串
  3. 嵌套，可以记作<code>(A)</code>，其中<code>A</code>是有效括号字符串
</pre>

<strong>嵌套深度：</strong>

<pre>类似地，我们可以定义任意有效括号字符串 <code>s</code> 的 <strong>嵌套深度</strong><code>depth(S)</code>：

  1.<code> s</code> 为空时，<code>depth(&quot;&quot;) = 0</code>
<code>  2. s</code> 为 <code>A</code> 与 <code>B</code> 连接时，<code>depth(A + B) = max(depth(A), depth(B))</code>，其中<code>A</code> 和<code>B</code>都是有效括号字符串
<code>  3. s</code> 为嵌套情况，<code>depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A)</code>，其中 <code>A</code> 是有效括号字符串

例如：<code>&quot;&quot;</code>，<code>&quot;()()&quot;</code>，和<code>&quot;()(()())&quot;</code>都是有效括号字符串，嵌套深度分别为 0，1，2，而<code>&quot;)(&quot;</code> 和<code>&quot;(()&quot;</code>都不是有效括号字符串。
</pre>

有效括号的嵌套深度
A string is a <em>valid parentheses string</em>(denoted VPS) if and only if it consists of <code>&quot;(&quot;</code> and <code>&quot;)&quot;</code> characters only, and:

<ul>
	It is the empty string, or
	It can be written as<code>AB</code>(<code>A</code>concatenated with<code>B</code>), where<code>A</code>and<code>B</code>are VPS&#39;s, or
	It can be written as<code>(A)</code>, where<code>A</code>is a VPS.
</ul>

We cansimilarly define the <em>nesting depth</em> <code>depth(S)</code> of any VPS <code>S</code> as follows:

<ul>
	<code>depth(&quot;&quot;) = 0</code>
	<code>depth(A + B) = max(depth(A), depth(B))</code>, where <code>A</code> and <code>B</code> are VPS&#39;s
	<code>depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A)</code>, where <code>A</code> is a VPS.
</ul>

For example, <code>&quot;&quot;</code>,<code>&quot;()()&quot;</code>, and<code>&quot;()(()())&quot;</code>are VPS&#39;s (with nesting depths 0, 1, and 2), and <code>&quot;)(&quot;</code> and <code>&quot;(()&quot;</code> are not VPS&#39;s.



Given a VPS <font face="monospace">seq</font>, split it into two disjoint subsequences <code>A</code> and <code>B</code>, such that<code>A</code> and <code>B</code> are VPS&#39;s (and<code>A.length + B.length = seq.length</code>).

Now choose <strong>any</strong> such <code>A</code> and <code>B</code> such that<code>max(depth(A), depth(B))</code> is the minimum possible value.

Return an <code>answer</code> array (of length <code>seq.length</code>) that encodes such achoice of <code>A</code> and <code>B</code>: <code>answer[i] = 0</code> if <code>seq[i]</code> is part of <code>A</code>, else <code>answer[i] = 1</code>. Note that even though multiple answers may exist, you may return any of them.


<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> seq = &quot;(()())&quot;
<strong>Output:</strong> [0,1,1,1,1,0]
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> seq = &quot;()(())()&quot;
<strong>Output:</strong> [0,0,0,1,1,0,1,1]
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= seq.size &lt;= 10000</code>
</ul>
