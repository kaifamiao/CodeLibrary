### 解题思路
当服务器是单台时，无法通信，则可通信服务器是总的服务器减去单台服务器。可以使用不相交集来实现，每个点都将一行和一列关联起来，对于单台服务器所在的不相交集，只有横坐标和纵坐标，对于服务器集群，则有多于两个坐标存在，这样合并后可以判断哪些是单台服务器，哪些是集群。

### 代码

```java
class Solution {
    public int countServers(int[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        int m = grid.length;
        int n = grid[0].length;
        DisJoint disJoint = new DisJoint(m + n);
        // 记录总的服务器
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // 关联行列
                if (grid[i][j] == 1) {
                    disJoint.union(disJoint.find(i), disJoint.find(m + j));
                    count++;
                }
            }
        }
        // 可通信服务器为总数减去单台服务器的数量
        return count - disJoint.count(2);
    }
}

// 以下是不相交集的常规实现，新增本题所需的统计函数count
class DisJoint {
    int[] tree;

    DisJoint(int size) {
        this.tree = new int[size];
        Arrays.fill(tree, -1);
    }

    public void union(int root1, int root2) {
        if (tree[root1] >= 0 || tree[root2] >= 0) throw new IllegalArgumentException("not a root");
        if (root1 == root2) return;

        if (tree[root1] <= tree[root2]) {
            tree[root1] += tree[root2];
            tree[root2] = root1;
        } else {
            tree[root2] += tree[root1];
            tree[root1] = root2;
        }
    }

    public int find(int idx) {
        if (tree[idx] < 0) return idx;
        return tree[idx] = find(tree[idx]);
    }
    // 计算尺寸为size的集合个数
    public int count(int size) {
        int count = 0;
        for (int i = 0; i < tree.length; i++) {
            if (tree[i] == -size) count++;
        }
        return count;
    }
}
```
&emsp;时间复杂度为$O(MN)$，空间复杂度为$O(M + N)$。

执行用时：3ms，在所有java提交中击败了94.94%的用户。

内存消耗：46.7MB，在所有java提交中击败了100.00%的用户。