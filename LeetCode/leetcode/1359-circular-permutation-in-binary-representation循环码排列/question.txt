circular-permutation-in-binary-representation
给你两个整数<code>n</code> 和 <code>start</code>。你的任务是返回任意 <code>(0,1,2,,...,2^n-1)</code> 的排列 <code>p</code>，并且满足：

<ul>
	<code>p[0] = start</code>
	<code>p[i]</code> 和 <code>p[i+1]</code>的二进制表示形式只有一位不同
	<code>p[0]</code> 和 <code>p[2^n -1]</code>的二进制表示形式也只有一位不同
</ul>



<strong>示例 1：</strong>

<pre><strong>输入：</strong>n = 2, start = 3
<strong>输出：</strong>[3,2,0,1]
<strong>解释：</strong>这个排列的二进制表示是 (11,10,00,01)
     所有的相邻元素都有一位是不同的，另一个有效的排列是 [3,1,0,2]
</pre>

<strong>示例 2：</strong>

<pre><strong>输出：</strong>n = 3, start = 2
<strong>输出：</strong>[2,6,7,5,4,0,1,3]
<strong>解释：</strong>这个排列的二进制表示是 (010,110,111,101,100,000,001,011)
</pre>



<strong>提示：</strong>

<ul>
	<code>1 &lt;= n &lt;= 16</code>
	<code>0 &lt;= start&lt;2^n</code>
</ul>

循环码排列
Given 2 integers <code>n</code> and <code>start</code>. Your task is return <strong>any</strong> permutation <code>p</code>of <code>(0,1,2.....,2^n -1) </code>such that :

<ul>
	<code>p[0] = start</code>
	<code>p[i]</code> and <code>p[i+1]</code>differ by only one bit in their binary representation.
	<code>p[0]</code> and <code>p[2^n -1]</code>must also differ by only one bit in their binary representation.
</ul>


<strong>Example 1:</strong>

<pre>
<strong>Input:</strong> n = 2, start = 3
<strong>Output:</strong> [3,2,0,1]
<strong>Explanation:</strong> The binary representation of the permutation is (11,10,00,01). 
All the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]
</pre>

<strong>Example 2:</strong>

<pre>
<strong>Input:</strong> n = 3, start = 2
<strong>Output:</strong> [2,6,7,5,4,0,1,3]
<strong>Explanation:</strong> The binary representation of the permutation is (010,110,111,101,100,000,001,011).
</pre>


<strong>Constraints:</strong>

<ul>
	<code>1 &lt;= n &lt;= 16</code>
	<code>0 &lt;= start&lt;2 ^ n</code>
</ul>
