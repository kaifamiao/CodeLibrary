find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance
有 <code>n</code>个城市，按从 <code>0</code> 到 <code>n-1</code>编号。给你一个边数组<code>edges</code>，其中 <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]</code>代表<code>from<sub>i</sub></code>和<code>to<sub>i</sub></code><sub></sub>两个城市之间的双向加权边，距离阈值是一个整数<code>distanceThreshold</code>。

返回能通过某些路径到达其他城市数目最少、且路径距离 <strong>最大</strong> 为<code>distanceThreshold</code>的城市。如果有多个这样的城市，则返回编号最大的城市。

注意，连接城市 <em><strong>i</strong></em> 和 <em><strong>j</strong></em> 的路径的距离等于沿该路径的所有边的权重之和。



<strong>示例 1：</strong>

<img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/26/find_the_city_01.png" style="height: 225px; width: 300px;">

<pre><strong>输入：</strong>n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
<strong>输出：</strong>3
<strong>解释：</strong>城市分布图如上。
每个城市阈值距离 distanceThreshold = 4 内的邻居城市分别是：
城市 0 -&gt; [城市 1, 城市 2]
城市 1 -&gt; [城市 0, 城市 2, 城市 3]
城市 2 -&gt; [城市 0, 城市 1, 城市 3]
城市 3 -&gt; [城市 1, 城市 2]
城市 0 和 3 在阈值距离 4 以内都有 2 个邻居城市，但是我们必须返回城市 3，因为它的编号最大。
</pre>

<strong>示例 2：</strong>

<strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/26/find_the_city_02.png" style="height: 225px; width: 300px;"></strong>

<pre><strong>输入：</strong>n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
<strong>输出：</strong>0
<strong>解释：</strong>城市分布图如上。
每个城市阈值距离 distanceThreshold = 2 内的邻居城市分别是：
城市 0 -&gt; [城市 1]
城市 1 -&gt; [城市 0, 城市 4]
城市 2 -&gt; [城市 3, 城市 4]
城市 3 -&gt; [城市 2, 城市 4]
城市 4 -&gt; [城市 1, 城市 2, 城市 3]
城市 0 在阈值距离 4 以内只有 1 个邻居城市。
</pre>



<strong>提示：</strong>

<ul>
	<code>2 &lt;= n &lt;= 100</code>
	<code>1 &lt;= edges.length &lt;= n * (n - 1) / 2</code>
	<code>edges[i].length == 3</code>
	<code>0 &lt;= from<sub>i</sub> &lt; to<sub>i</sub> &lt; n</code>
	<code>1 &lt;= weight<sub>i</sub>,distanceThreshold &lt;= 10^4</code>
	所有 <code>(from<sub>i</sub>, to<sub>i</sub>)</code>都是不同的。
</ul>

阈值距离内邻居最少的城市
There are <code>n</code> cities numbered from <code>0</code> to <code>n-1</code>. Given the array <code>edges</code>where <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]</code> represents a bidirectional and weighted edge between cities <code>from<sub>i</sub></code>and <code>to<sub>i</sub></code>, and given the integer <code>distanceThreshold</code>.

Return the city with the smallest number<strong> </strong>ofcities that are reachable through some path and whose distance is <strong>at most</strong> <code>distanceThreshold</code>, If there are multiple such cities, return the city with the greatest number.

Notice that the distance of a path connecting cities <em><strong>i</strong></em> and <em><strong>j</strong></em> is equal to the sum of the edges&#39; weights along that path.


<strong>Example 1:</strong>

<img alt="" src="https://assets.leetcode.com/uploads/2020/01/16/find_the_city_01.png" style="width: 300px; height: 225px;" />

<pre>
<strong>Input:</strong> n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
<strong>Output:</strong> 3
<strong>Explanation: </strong>The figure above describes the graph.
The neighboring cities at a distanceThreshold = 4 for each city are:
City 0 -&gt; [City 1, City 2]
City 1 -&gt; [City 0, City 2, City 3]
City 2 -&gt; [City 0, City 1, City 3]
City 3 -&gt; [City 1, City 2]
Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.
</pre>

<strong>Example 2:</strong>

<strong><img alt="" src="https://assets.leetcode.com/uploads/2020/01/16/find_the_city_02.png" style="width: 300px; height: 225px;" /></strong>

<pre>
<strong>Input:</strong> n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
<strong>Output:</strong> 0
<strong>Explanation: </strong>The figure above describes the graph.
The neighboring cities at a distanceThreshold = 2 for each city are:
City 0 -&gt; [City 1]
City 1 -&gt; [City 0, City 4]
City 2 -&gt; [City 3, City 4]
City 3 -&gt; [City 2, City 4]
City 4 -&gt; [City 1, City 2, City 3]
The city 0 has 1 neighboring city at a distanceThreshold = 2.
</pre>


<strong>Constraints:</strong>

<ul>
	<code>2 &lt;= n &lt;= 100</code>
	<code>1 &lt;= edges.length &lt;= n * (n - 1) / 2</code>
	<code>edges[i].length == 3</code>
	<code>0 &lt;= from<sub>i</sub> &lt; to<sub>i</sub> &lt; n</code>
	<code>1 &lt;= weight<sub>i</sub>,distanceThreshold &lt;= 10^4</code>
	All pairs <code>(from<sub>i</sub>, to<sub>i</sub>)</code> are distinct.
</ul>