### 题目描述
题目给出两个字符串s1和s2，要求s2的子串中有无s1的排列。  
看起来很吓唬人，排列怎么办？  
其实仔细想一下，就是从s2的子串中找到一段和s1字符组成一样的子串而已。

举个例子：

    s1: "ab"   a:1 b:1
    s2: "aba"  a:2 b:1  子串"ab"和子串"ba"都是a:1,b:1 
    所以两者能够匹配

### 思考：如何找到字符组成一样的字符串呢？
字符组成一样的的字符串，要满足长度相同，字符种类相同，每一种字符数量相等三个条件。   
所以我们就从这三个方面入手。  

设s1的长度为m,s2的长度为n.  
s2中子串的开始下标为left，结束下标为right

#### 长度方面
s2子串的长度必须和s1相等,是m.  
就是说，子串从s2的下标left处开始，那么子串right最多到达下标left+m-1处(right<left+m)  
而且下标left最大为n-m(left<=n-m),如果大于这个数，就算把剩余的字符都加起来也没有m个

#### 字符种类方面
我们确定一个子串开始下标left后，要往后查询m个字符，假如遇到不属于s1中的字符怎么办？

    s1: "abc"  
    s2: "actb" 
    当我们从下标0开始往后查询，'a'和'c'都存在于s1中，但是't'不属于
    我们会发现,'t'前面的m-1个字符无论怎么样都不可能避过't'查询到后面的字符
    换句话说,从't'前面m-1个字符开始的子串都不可能与s1匹配
    所以我们可以直接从't'后面的第一个字符'b'开始查询

#### 字符数量方面
假设一段长为m的子串中所有的字符都属于s1，我们怎么确定每种字符的数量呢？  
每种字符的数量有三种: 小于，等于，大于   
我们是要比较三种情况吗？实际上只需要比较一种即可。  

例如，我们比较子串中每一种字符是否大于s1这种字符的数量：

    如果没有任何一种字符数量大于s1中字符的数量，而字符总的数量是一定的，那么不就可以知道也不存在小于s1字符数量的字符吗？
    即这两段字符串匹配。

    假如存在一种字符数量大于s1，下一步我们应该怎么做？
    我们是不是要把这个字符多出来的数量从子串中减去？
    如何操作呢？
    操作的方法就是 left++   
    向后移动字符串的开始字符，直到这种字符的数量恢复正常。(不明白为什么动left不动right的可以自己想一下)   

    例子：
    s1: "abc" a:1 b:1 c:1
    s2: "abbca" 
    当left=0时，right走到2，也就是第二个'b'时，'b'的数量会超过s1'b'的数量，我们可以通过把left不断后移到 2   
    来使'b'的数量恢复正常
    虽然这个时候'a'的数量是正确的，但是我们依然要后移left，因为只要有两个'b'我们永远找不到匹配的字符串  
    但是减去的'a'却可以在后面加回来


### 代码

```cpp
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        
        //把s1中的每一个字符放入map,即可记录数量，也方便查询字符在不在s1
        map<char,int> s1Map;
        int m=s1.length(),n=s2.length();
        for(int i=0;i<m;i++)
            s1Map[s1[i]]++;

        int left=0,right=0;
        vector<int> alpha(26,0);//记录子串中各字符的数量

        while(left<=n-m){//根据子串长度缩小left范围

            //在以left开头的子串中,每次right向后读取一个元素
            //status用来记录这个读取这个字符后的状态：
            //如果status等于0，代表这个字符不存在于s1中
            //如果status等于-1，代表这个字符是多余的，我们就用extraCd记录这个多余的字符，方便处理
            //如果status等于1，代表m个字符都是正常的，我们就返回true
            int status=1;
            char extraC;

            while(right<left+m){//根据子串长度缩小right范围

                //判断是否不存在于s1
                if(s1Map.find(s2[right])==s1Map.end()){
                    status=0;
                    break;
                }

                //判断字符是否多余
                alpha[s2[right]-'a']++;
                right++;
                if(alpha[s2[right]-'a']>s1Map[s2[right]]){
                    status=-1;
                    extraC=s2[right];//记录多余字符
                    break;
                }
            }

            //根据status处理对应的情况，返回true或者重新计算left的位置
            if(status==1){
                return true;
            }else if(status==0){
                left=right;
                for(int i=0;i<26;i++)
                    alpha[i]=0;
            }else{
                while(s2[left]!=extraC){
                    alpha[s2[left]-'a']--;
                    left++;
                }
                alpha[s2[left]-'a']--;
                left++;
            }
        }
        return false;
    }
};
```

### 总结
本题使用了双指针的方法，用left和right代表子串的开始和结束，从而寻找s2中符合条件的子串。   
双指针在大部分情况下只会往前走，不会向后退。  
让我们的打码之路像双指针一样————没有撤退可言！  

希望题解对大家有帮助，请给个赞哦，亲