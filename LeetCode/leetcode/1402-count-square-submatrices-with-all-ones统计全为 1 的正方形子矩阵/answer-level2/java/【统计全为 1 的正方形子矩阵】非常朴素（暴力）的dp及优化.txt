### 题目描述
给你一个 m * n 的矩阵，矩阵中的元素不是 0 就是 1，请你统计并返回其中完全由 1 组成的 正方形 子矩阵的个数。

**示例 1**：

**输入：**
```
matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
```
**输出：** `15`
>**解释：** 
边长为 `1` 的正方形有 `10` 个。
边长为 `2` 的正方形有 `4` 个。
边长为 `3` 的正方形有 `1` 个。
正方形的总数 = `10` + `4` + `1` = `15`.

**示例 2：**
**输入：**
```
matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
```
**输出：** `7`
>**解释：**
边长为 `1` 的正方形有 `6` 个。 
边长为 `2` 的正方形有 `1` 个。
正方形的总数 = `6` + `1` = `7`.

### 思路
首先，暴力解就是以矩阵每一个点为起点，依次判断边长为1，2，3，...，min(矩阵长, 矩阵宽)的区域是否是正方形，显然复杂度是过不了。

很容易知道，上述过程在判断较大区域是否为正方形的时候，并没有用到前面计算的结果，每一次判断都从头开始。这也是复杂度过高的原因。

那么怎么利用之前判断过的结果呢？举个例子，比如我要判断以`(2, 3)`为右下角边长为`3`的正方形区域（红色边框区域）是否是全为`1`：
- 先判断`(i, j)`位置是否为`1`，如果否，则显然不满足；如果是，进行下一步判断
- 判断分别以`(i - 1, j)`, `(i - 1, j - 1)`, `(i, j - 1)`为右下角的区域是否能构成边长为`2`的正方形，如果能，那就满足条件。
![image.png](https://pic.leetcode-cn.com/120f5fc93d20c5bc5bea301622512fd2c482ccb1228da4afb0dcad4538f21281-image.png)

基于上述，我们可以看出思路大致跟[最大正方形](https://leetcode-cn.com/problems/maximal-square/)那题差不多，设`dp[i][j][k]`表示以`(i, j)`为右下角，边长为`k`的正方形区域是否全为`1`，那么易得出如下状态转移方程：

```java
dp[i][j][k] = (matrix[i][j] == 1 && dp[i - 1][j][k - 1] && dp[i][j - 1][k - 1] && dp[i - 1][j - 1] [k - 1]);
```

### 代码
```java
class Solution {
    public int countSquares(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int len = Math.min(m, n);
        boolean[][][] dp = new boolean[m][n][len];
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j][0] = (matrix[i][j] == 1);
                count += dp[i][j][0] ? 1 : 0;
            }
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                for (int k = 1; k < len; k++) {
                    dp[i][j][k] = (matrix[i][j] == 1 && dp[i - 1][j][k - 1] && dp[i][j - 1][k - 1] && dp[i - 1][j - 1] [k - 1]);
                    if (dp[i][j][k]) {
                        count++;
                    }
                }
            }
        }
        return count;
    }

}
```

### 更新
经评论区[@da-fei-kai](/u/da-fei-kai/)提醒，上述代码可以做进一步优化。
> 首先，题目并不关心边长为`1,2,...,k`的各有多少个，并且我们知道，以`(i, j)`为右下角边长为`k`的正方形全为`1`的话，那么以`(i, j)`为右下角边长分别为`1,2,...,k - 1`的正方形区域一定是全为`1`，如下图：

![image.png](https://pic.leetcode-cn.com/e241c73d7452ccf9751cb3a8c970d42d9d7bd6cfcb580ea66095c00f5ba42c86-image.png)


>上图中，如果红色区域是边长为`3`的**全1正方形**区域，那么它一定包含了一个边长为`2`和边长为`1`的**全1正方形**区域。所以，我们只需记录以`(i, j)`为右下角的区域包含的最大**全1正方形**边长即可，这个最大边长也即以`(i , j)`为右下角的**全1正方形**的个数.
那么基于此，我们就可以将原始的`dp`降一维度，设`dp[i][j]`表示以`(i, j)`为右下角的**最大全1正方形**区域的边长，则有如下状态转移方程：
```java
dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;
```
这就和[最大正方形](https://leetcode-cn.com/problems/maximal-square/)那题的状态转移方程完全一样了。

### 代码
```java
class Solution {
    public int countSquares(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int ans = 0;
        // 预处理每一行和每一列
        for (int i = 0; i < m; i++) {
            ans += dp[i][0] = matrix[i][0];
        }
        for (int j = 0; j < n; j++) {
            ans += dp[0][j] = matrix[0][j];
        }
        // 上述过程(0, 0)判断了两次, 如果matrix[0][0] == 1，说明ans多算了一个
        if (matrix[0][0] == 1) {
            ans--;
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (matrix[i][j] == 1) {
                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;
                    ans += dp[i][j];
                }
            }
        }
        return ans;
    }
}
```


