设 $n$ 可以表示成位数为 $s+1$，进制为 $k$ 的数，即 $(n)_{10}=(11\ldots 11)_k$，其中 $(a)_b$ 表示 $b$ 进制的数 $a$。那么根据任意进制转换为十进制的方法，我们有：

$$
(11\ldots 11)_k = k^s + k^{s-1} + k^{s-2} + \cdots + k + 1 = n
$$

根据上面的等式，在 $s \geq 2$ 时，显然有 $n > k^s$，并且根据二项式定理：

$$
(k+1)^s = k^s + \binom{s}{1} k^{s-1} + \binom{s}{2} k^{s-2} + \cdots + \binom{s}{s-1} k + 1
$$

可以得到 $n < (k+1)^s$，因此我们得到了解决这题的关键不等式：

$$
\forall s \geq 2, \quad k^s < n < (k+1)^s
$$

将两边同时开 $s$ 次方，得到：

$$
k < n^{1/s} < k + 1
$$

这样当 $s \geq 2$ 时，$n^{1/s}$ 的整数部分 $\lfloor n^{1/s} \rfloor$ 即为 $k$ 的值。由于题目中给定的 $n \leq 10^{18}$，因此 $s$ 的值至多为 $59$，这是因为当 $s=59$ 时，取最小的进制 $k=2$ 都有：

$$
k^{59} + k^{58} + \cdots + k + 1 = 2^{60} - 1 \approx 1.15 * 10^{18}
$$

超过了 $n$。因此我们只需要在 $[2, 59]$ 的范围内枚举 $s$ 即可。此外还有一种特殊情况 $s = 1$，此时是很简单的一种情况，进制数 $k = n-1$，在 $k$ 进制下的表示为 $11$。

下面给出我的代码和一些注释：
 
```C++
#define LL long long

class Solution {
public:
    string smallestGoodBase(string N) {
        // (11...11)k = k^{s} + k^{s-1} + ... + k^1 + k^0 = n
        // k^s < n < (k+1)^s
        // k < n^{1/s} < k+1
        
        LL n = stol(N);
        LL ans = n - 1;   // 将答案置为 s=1 的情况
        for (int s = 59; s >= 2; --s) {
            int k = pow(n, 1.0 / s);   // k 为 n^{1/s} 的整数部分
            if (k > 1) {    // 判断 k 是否是一个合法的进制
                LL sum = 1, mul = 1;   // 计算 (11...11)k 对应的十进制值
                for (int i = 1; i <= s; ++i) {
                    mul *= k;
                    sum += mul;
                }
                if (sum == n) {
                    ans = k;
                    break;
                }
            }
        }
        return to_string(ans);
    }
};

```