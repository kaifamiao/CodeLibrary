{"remainingRequest":"/Users/linrui/Downloads/羊了个羊前端vue2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/linrui/Downloads/羊了个羊前端vue2/src/components/HelloWorld.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/linrui/Downloads/羊了个羊前端vue2/src/components/HelloWorld.vue","mtime":1664979429113},{"path":"/Users/linrui/Downloads/羊了个羊前端vue2/node_modules/cache-loader/dist/cjs.js","mtime":1664977071405},{"path":"/Users/linrui/Downloads/羊了个羊前端vue2/node_modules/babel-loader/lib/index.js","mtime":1664977071497},{"path":"/Users/linrui/Downloads/羊了个羊前端vue2/node_modules/cache-loader/dist/cjs.js","mtime":1664977071405},{"path":"/Users/linrui/Downloads/羊了个羊前端vue2/node_modules/vue-loader/lib/index.js","mtime":1664977071642}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      positionList: [],  //  定位数组\r\n      allCardList: [\r\n        /* {id: 1, picIndex: 1, icon: 'el-icon-platform-eleme', left: '0px', top: '0px'},\r\n        {id: 2, picIndex: 1, icon: 'el-icon-platform-eleme', left: '50px', top: '0px'}, */\r\n      ],  // 所有待选择的卡片list\r\n      selectedCardList: [],  // 已选择的卡片list\r\n      currentSelectedCard: {},  // 当前选中的卡片\r\n      selectHistory: [],  // 记录已选择的卡片list，方便撤回操作\r\n      iconList: [\r\n        {picIndex: 0, icon: 'el-icon-s-flag'},\r\n        {picIndex: 1, icon: 'el-icon-platform-eleme'},\r\n        {picIndex: 2, icon: 'el-icon-delete-solid'},\r\n        {picIndex: 3, icon: 'el-icon-s-tools'},\r\n        {picIndex: 4, icon: 'el-icon-user-solid'},\r\n        {picIndex: 5, icon: 'el-icon-warning'},\r\n        {picIndex: 6, icon: 'el-icon-picture'},\r\n        {picIndex: 7, icon: 'el-icon-upload'},\r\n        {picIndex: 8, icon: 'el-icon-message-solid'},\r\n        {picIndex: 9, icon: 'el-icon-video-camera-solid'},\r\n        {picIndex: 10, icon: 'el-icon-s-platform'}\r\n      ],  // 图标类型数组\r\n    }\r\n  },\r\n  created() {\r\n    this.initData()\r\n  },\r\n  methods: {\r\n    // 撤回\r\n    backCard() {\r\n      console.log(this.allCardList);\r\n      console.log(this.selectHistory);\r\n      if (this.selectHistory.length > 0) {\r\n        let backItem = this.selectHistory[this.selectHistory.length - 1]\r\n        this.allCardList.push(backItem)\r\n        this.allCardList.sort((a, b)=>{\r\n          return a.id - b.id\r\n        })\r\n        this.selectHistory = this.selectHistory.filter(item=>{\r\n          return item.id != backItem.id\r\n        })\r\n        this.selectedCardList = this.selectedCardList.filter(item=>{\r\n          return item.id != backItem.id\r\n        })\r\n      } else {\r\n        alert('没有可以撤回的卡片了！')\r\n      }\r\n      \r\n    },\r\n    // 选择卡片\r\n    selectedCard(item, index, event) {\r\n      console.log(item, index, event.srcElement);\r\n      let isHover = this.hasOverLayer(event.srcElement)\r\n      console.log(isHover);\r\n      if (!isHover) {\r\n        this.currentSelectedCard = item\r\n        this.allCardList.splice(index, 1)\r\n        this.selectedCardList.push(item)\r\n        this.selectHistory.push(item)\r\n        this.selectedCardList.sort((a, b)=>{\r\n          return a.picIndex - b.picIndex\r\n        })\r\n        setTimeout(()=>{\r\n          // 判断是否可以消除\r\n          this.checkRemove()\r\n          if (this.allCardList.length == 0) {\r\n            alert('你赢了！')\r\n          }\r\n          if (this.selectedCardList.length >= 7) {\r\n            alert('你输了！')\r\n            this.initData()\r\n          }\r\n        }, 200)\r\n      }\r\n      \r\n    },\r\n    // 判断是否可以消除\r\n    checkRemove() {\r\n      let num = 0\r\n      this.selectedCardList.forEach(item=>{\r\n        if (this.currentSelectedCard.icon == item.icon) {\r\n          num ++\r\n        }\r\n      })\r\n      if (num == 3) {\r\n        this.selectedCardList = this.selectedCardList.filter(item=>{\r\n          return item.icon != this.currentSelectedCard.icon\r\n        })\r\n        this.selectHistory = this.selectHistory.filter(item=>{\r\n          return item.icon != this.currentSelectedCard.icon\r\n        })\r\n      }\r\n    },\r\n    // 监测元素是否被覆盖\r\n    hasOverLayer(element) {\r\n      let document = element.ownerDocument,\r\n      rect = element.getBoundingClientRect(), // 获取目标的矩形信息\r\n      x = rect.x, \r\n      y = rect.y, \r\n      width = rect.width, \r\n      height = rect.height;\r\n      x |= 0;\r\n      y |= 0;\r\n      width |= 0;\r\n      height |= 0;\r\n      // 四顶点取样\r\n      let elements = [\r\n        document.elementFromPoint(x+1, y+1),\r\n        document.elementFromPoint(x + width-1, y+1),\r\n        document.elementFromPoint(x+1, y + height-1),\r\n        document.elementFromPoint(x + width-1, y + height-1)\r\n      ];\r\n      // 判断非本身及非子孙元素\r\n      return elements.filter((el)=> el !== null).some((el)=> el !== element && !element.contains(el));\r\n    },\r\n    // 初始化数据\r\n    initData() {\r\n      this.positionList = []\r\n      this.allCardList = []\r\n      this.selectedCardList = []\r\n      this.currentSelectedCard = {}\r\n      \r\n      let index = 0\r\n      \r\n      // 第一层\r\n      let left = 0\r\n      let top = 0\r\n      for (let i = 0; i < 7; i++) {\r\n        for (let j = 0; j < 7; j++) {\r\n          this.positionList.push({id: index++, picIndex: 1, icon: 'el-icon-platform-eleme', left: left+'px', top: top+'px'})\r\n          left += 50\r\n        }\r\n        left = 0\r\n        top += 50\r\n      }\r\n      \r\n      // 第二层\r\n      left = 25\r\n      top = 25\r\n      for (let i = 0; i < 6; i++) {\r\n        for (let j = 0; j < 6; j++) {\r\n          this.positionList.push({id: index++, picIndex: 1, icon: 'el-icon-platform-eleme', left: left+'px', top: top+'px'})\r\n          left += 50\r\n        }\r\n        left = 25\r\n        top += 50\r\n      }\r\n      \r\n      // 生成随机图标\r\n      this.createIcon()\r\n    },\r\n    // 生成随机图标\r\n    createIcon() {\r\n      let index = 0\r\n      this.allCardList = []\r\n      let random = 0\r\n      console.log(random);\r\n      for (let i = 0; i < 303; i++) {\r\n        if (i%3==0) {\r\n          random = Math.floor(Math.random()*11)\r\n        }\r\n        this.allCardList.push({\r\n          id: index++,\r\n          icon: this.iconList[random].icon,\r\n          picIndex: this.iconList[random].picIndex\r\n        })\r\n      }\r\n      this.allCardList.sort(()=>{\r\n        return Math.random() > 0.5 ? 1 : -1\r\n      })\r\n      this.allCardList.forEach((item, index)=>{\r\n        item.id = index\r\n      })\r\n      \r\n      \r\n      // 随机位置\r\n      /* let pos = 0\r\n      this.allCardList.forEach(item=>{\r\n        pos = Math.floor(Math.random()*85)\r\n        item['left'] = this.positionList[pos].left\r\n        item['top'] = this.positionList[pos].top\r\n      }) */\r\n      \r\n      // 循环堆叠\r\n      let pos = 0\r\n      this.allCardList.forEach(item=>{\r\n        item['left'] = this.positionList[pos].left\r\n        item['top'] = this.positionList[pos].top\r\n        pos++\r\n        if (pos > 84) {\r\n          pos = 0\r\n        }\r\n      })\r\n      \r\n      console.log(this.allCardList);\r\n      \r\n    }\r\n    \r\n  }\n}\n",{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<h1>喵了个喵</h1>\n  <div class=\"box\">\n\t  \t\r\n    <!-- 上 -->\r\n    <div class=\"top-box\">\r\n      <div class=\"card-box\">\r\n        <div class=\"card\" @click=\"selectedCard(item, index, $event)\" v-for=\"(item, index) in allCardList\" :key=\"index\" :style=\"{left: item.left, top: item.top}\">\r\n          <!-- {{item.id}} -->\r\n          <i :class=\"item.icon\"></i>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <hr>\r\n    <!-- 下 -->\r\n    <div class=\"selected-card-box\">\r\n      <div class=\"selected-card\" v-for=\"(item, index) in selectedCardList\" :key=\"index\">\r\n        <!-- {{item.id}} -->\r\n        <i :class=\"item.icon\"></i>\r\n      </div>\r\n    </div>\r\n    <div class=\"btn\">\r\n      <el-button @click=\"initData()\" type=\"primary\">重新开始</el-button>\r\n      <el-button @click=\"backCard()\" type=\"primary\">撤回</el-button>\r\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      positionList: [],  //  定位数组\r\n      allCardList: [\r\n        /* {id: 1, picIndex: 1, icon: 'el-icon-platform-eleme', left: '0px', top: '0px'},\r\n        {id: 2, picIndex: 1, icon: 'el-icon-platform-eleme', left: '50px', top: '0px'}, */\r\n      ],  // 所有待选择的卡片list\r\n      selectedCardList: [],  // 已选择的卡片list\r\n      currentSelectedCard: {},  // 当前选中的卡片\r\n      selectHistory: [],  // 记录已选择的卡片list，方便撤回操作\r\n      iconList: [\r\n        {picIndex: 0, icon: 'el-icon-s-flag'},\r\n        {picIndex: 1, icon: 'el-icon-platform-eleme'},\r\n        {picIndex: 2, icon: 'el-icon-delete-solid'},\r\n        {picIndex: 3, icon: 'el-icon-s-tools'},\r\n        {picIndex: 4, icon: 'el-icon-user-solid'},\r\n        {picIndex: 5, icon: 'el-icon-warning'},\r\n        {picIndex: 6, icon: 'el-icon-picture'},\r\n        {picIndex: 7, icon: 'el-icon-upload'},\r\n        {picIndex: 8, icon: 'el-icon-message-solid'},\r\n        {picIndex: 9, icon: 'el-icon-video-camera-solid'},\r\n        {picIndex: 10, icon: 'el-icon-s-platform'}\r\n      ],  // 图标类型数组\r\n    }\r\n  },\r\n  created() {\r\n    this.initData()\r\n  },\r\n  methods: {\r\n    // 撤回\r\n    backCard() {\r\n      console.log(this.allCardList);\r\n      console.log(this.selectHistory);\r\n      if (this.selectHistory.length > 0) {\r\n        let backItem = this.selectHistory[this.selectHistory.length - 1]\r\n        this.allCardList.push(backItem)\r\n        this.allCardList.sort((a, b)=>{\r\n          return a.id - b.id\r\n        })\r\n        this.selectHistory = this.selectHistory.filter(item=>{\r\n          return item.id != backItem.id\r\n        })\r\n        this.selectedCardList = this.selectedCardList.filter(item=>{\r\n          return item.id != backItem.id\r\n        })\r\n      } else {\r\n        alert('没有可以撤回的卡片了！')\r\n      }\r\n      \r\n    },\r\n    // 选择卡片\r\n    selectedCard(item, index, event) {\r\n      console.log(item, index, event.srcElement);\r\n      let isHover = this.hasOverLayer(event.srcElement)\r\n      console.log(isHover);\r\n      if (!isHover) {\r\n        this.currentSelectedCard = item\r\n        this.allCardList.splice(index, 1)\r\n        this.selectedCardList.push(item)\r\n        this.selectHistory.push(item)\r\n        this.selectedCardList.sort((a, b)=>{\r\n          return a.picIndex - b.picIndex\r\n        })\r\n        setTimeout(()=>{\r\n          // 判断是否可以消除\r\n          this.checkRemove()\r\n          if (this.allCardList.length == 0) {\r\n            alert('你赢了！')\r\n          }\r\n          if (this.selectedCardList.length >= 7) {\r\n            alert('你输了！')\r\n            this.initData()\r\n          }\r\n        }, 200)\r\n      }\r\n      \r\n    },\r\n    // 判断是否可以消除\r\n    checkRemove() {\r\n      let num = 0\r\n      this.selectedCardList.forEach(item=>{\r\n        if (this.currentSelectedCard.icon == item.icon) {\r\n          num ++\r\n        }\r\n      })\r\n      if (num == 3) {\r\n        this.selectedCardList = this.selectedCardList.filter(item=>{\r\n          return item.icon != this.currentSelectedCard.icon\r\n        })\r\n        this.selectHistory = this.selectHistory.filter(item=>{\r\n          return item.icon != this.currentSelectedCard.icon\r\n        })\r\n      }\r\n    },\r\n    // 监测元素是否被覆盖\r\n    hasOverLayer(element) {\r\n      let document = element.ownerDocument,\r\n      rect = element.getBoundingClientRect(), // 获取目标的矩形信息\r\n      x = rect.x, \r\n      y = rect.y, \r\n      width = rect.width, \r\n      height = rect.height;\r\n      x |= 0;\r\n      y |= 0;\r\n      width |= 0;\r\n      height |= 0;\r\n      // 四顶点取样\r\n      let elements = [\r\n        document.elementFromPoint(x+1, y+1),\r\n        document.elementFromPoint(x + width-1, y+1),\r\n        document.elementFromPoint(x+1, y + height-1),\r\n        document.elementFromPoint(x + width-1, y + height-1)\r\n      ];\r\n      // 判断非本身及非子孙元素\r\n      return elements.filter((el)=> el !== null).some((el)=> el !== element && !element.contains(el));\r\n    },\r\n    // 初始化数据\r\n    initData() {\r\n      this.positionList = []\r\n      this.allCardList = []\r\n      this.selectedCardList = []\r\n      this.currentSelectedCard = {}\r\n      \r\n      let index = 0\r\n      \r\n      // 第一层\r\n      let left = 0\r\n      let top = 0\r\n      for (let i = 0; i < 7; i++) {\r\n        for (let j = 0; j < 7; j++) {\r\n          this.positionList.push({id: index++, picIndex: 1, icon: 'el-icon-platform-eleme', left: left+'px', top: top+'px'})\r\n          left += 50\r\n        }\r\n        left = 0\r\n        top += 50\r\n      }\r\n      \r\n      // 第二层\r\n      left = 25\r\n      top = 25\r\n      for (let i = 0; i < 6; i++) {\r\n        for (let j = 0; j < 6; j++) {\r\n          this.positionList.push({id: index++, picIndex: 1, icon: 'el-icon-platform-eleme', left: left+'px', top: top+'px'})\r\n          left += 50\r\n        }\r\n        left = 25\r\n        top += 50\r\n      }\r\n      \r\n      // 生成随机图标\r\n      this.createIcon()\r\n    },\r\n    // 生成随机图标\r\n    createIcon() {\r\n      let index = 0\r\n      this.allCardList = []\r\n      let random = 0\r\n      console.log(random);\r\n      for (let i = 0; i < 303; i++) {\r\n        if (i%3==0) {\r\n          random = Math.floor(Math.random()*11)\r\n        }\r\n        this.allCardList.push({\r\n          id: index++,\r\n          icon: this.iconList[random].icon,\r\n          picIndex: this.iconList[random].picIndex\r\n        })\r\n      }\r\n      this.allCardList.sort(()=>{\r\n        return Math.random() > 0.5 ? 1 : -1\r\n      })\r\n      this.allCardList.forEach((item, index)=>{\r\n        item.id = index\r\n      })\r\n      \r\n      \r\n      // 随机位置\r\n      /* let pos = 0\r\n      this.allCardList.forEach(item=>{\r\n        pos = Math.floor(Math.random()*85)\r\n        item['left'] = this.positionList[pos].left\r\n        item['top'] = this.positionList[pos].top\r\n      }) */\r\n      \r\n      // 循环堆叠\r\n      let pos = 0\r\n      this.allCardList.forEach(item=>{\r\n        item['left'] = this.positionList[pos].left\r\n        item['top'] = this.positionList[pos].top\r\n        pos++\r\n        if (pos > 84) {\r\n          pos = 0\r\n        }\r\n      })\r\n      \r\n      console.log(this.allCardList);\r\n      \r\n    }\r\n    \r\n  }\n}\n</script>\n\n<style scoped>\r\n  .top-box {\r\n    width: 100%;\r\n    height: 500px;\r\n    background-color: antiquewhite;\r\n  }\r\n  .card-box {\r\n    width: 350px;\r\n    height: 100%;\r\n    background-color: #dddaaa;\r\n    margin: 0 auto;\r\n    position: relative;\r\n  }\r\n  .card {\r\n    width: 48px;\r\n    height: 48px;\r\n    line-height: 48px;\r\n    font-size: 36px;\r\n    border: 1px solid #666;\r\n    text-align: center;\r\n    position: absolute;\r\n    box-shadow: 0px 0px 6px 0px #545454;\r\n    background-color: #fff;\r\n  }\r\n  .selected-card-box {\r\n    width: 350px;\r\n    height: 50px;\r\n    background-color: antiquewhite;\r\n    margin: 0 auto;\r\n  }\r\n  .selected-card {\r\n    width: 48px;\r\n    height: 48px;\r\n    line-height: 48px;\r\n    font-size: 36px;\r\n    border: 1px solid #666;\r\n    text-align: center;\r\n    background-color: #fff;\r\n    display: inline-block;\r\n  }\r\n  .btn {\r\n    margin: 0 auto;\r\n    width: 350px;\r\n    text-align: center;\r\n    margin-top: 24px;\r\n  }\r\n  .el-icon-s-flag {\r\n    color: #aa0000;\r\n  }\r\n  .el-icon-platform-eleme {\r\n    color: #005500;\r\n  }\r\n  .el-icon-delete-solid {\r\n    color: #aa5500;\r\n  }\r\n  .el-icon-s-tools {\r\n    color: #aaaa00;\r\n  }\r\n  .el-icon-user-solid {\r\n    color: #000000;\r\n  }\r\n  .el-icon-warning {\r\n    color: #316394;\r\n  }\r\n  .el-icon-picture {\r\n    color: #00007f;\r\n  }\r\n  .el-icon-upload {\r\n    color: #760000;\r\n  }\r\n  .el-icon-message-solid {\r\n    color: #9a004d;\r\n  }\r\n  .el-icon-video-camera-solid {\r\n    color: #ffaa7f;\r\n  }\r\n  .el-icon-s-platform {\r\n    color: #848441;\r\n  }\r\n  \n</style>\n"]}]}